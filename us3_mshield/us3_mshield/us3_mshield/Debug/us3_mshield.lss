
us3_mshield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00010428  00002000  00002000  00002000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ramfunc      00000064  00012428  00012428  00012428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000310  20000000  0001248c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001fd0  20000310  0001279c  00020310  2**2
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020338  2**0
                  CONTENTS, READONLY
  6 .debug_info   001026cc  00000000  00000000  00020391  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0001357f  00000000  00000000  00122a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001c6a3  00000000  00000000  00135fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001b40  00000000  00000000  0015267f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002e18  00000000  00000000  001541bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002ff3f  00000000  00000000  00156fd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0002bb9f  00000000  00000000  00186f16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000a0a10  00000000  00000000  001b2ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000065bc  00000000  00000000  002534c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .stab         000000cc  00000000  00000000  00259a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .stabstr      000001b9  00000000  00000000  00259b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00002000 <exception_table>:
    2000:	00 80 00 20 79 27 00 00 5b 27 00 00 75 27 00 00     ... y'..['..u'..
	...
    202c:	5b 27 00 00 00 00 00 00 00 00 00 00 5b 27 00 00     ['..........['..
    203c:	cd 27 00 00 5b 27 00 00 5b 27 00 00 5b 27 00 00     .'..['..['..['..
    204c:	e9 40 00 00 5b 27 00 00 5b 27 00 00 61 27 00 00     .@..['..['..a'..
    205c:	5b 27 00 00 5b 27 00 00 5b 27 00 00 25 57 00 00     ['..['..['..%W..
    206c:	35 57 00 00 15 57 00 00 ed 56 00 00 5b 27 00 00     5W...W...V..['..
    207c:	5b 27 00 00 5b 27 00 00 5b 27 00 00 5b 27 00 00     ['..['..['..['..
    208c:	5b 27 00 00 5b 27 00 00 5b 27 00 00 5b 27 00 00     ['..['..['..['..
    209c:	5b 27 00 00 5b 27 00 00 5b 27 00 00 5b 27 00 00     ['..['..['..['..
    20ac:	5b 27 00 00 00 00 00 00                             ['......

000020b4 <__do_global_dtors_aux>:
    20b4:	b510      	push	{r4, lr}
    20b6:	4c06      	ldr	r4, [pc, #24]	; (20d0 <__do_global_dtors_aux+0x1c>)
    20b8:	7823      	ldrb	r3, [r4, #0]
    20ba:	2b00      	cmp	r3, #0
    20bc:	d107      	bne.n	20ce <__do_global_dtors_aux+0x1a>
    20be:	4b05      	ldr	r3, [pc, #20]	; (20d4 <__do_global_dtors_aux+0x20>)
    20c0:	2b00      	cmp	r3, #0
    20c2:	d002      	beq.n	20ca <__do_global_dtors_aux+0x16>
    20c4:	4804      	ldr	r0, [pc, #16]	; (20d8 <__do_global_dtors_aux+0x24>)
    20c6:	e000      	b.n	20ca <__do_global_dtors_aux+0x16>
    20c8:	bf00      	nop
    20ca:	2301      	movs	r3, #1
    20cc:	7023      	strb	r3, [r4, #0]
    20ce:	bd10      	pop	{r4, pc}
    20d0:	20000310 	.word	0x20000310
    20d4:	00000000 	.word	0x00000000
    20d8:	00012424 	.word	0x00012424

000020dc <frame_dummy>:
    20dc:	4b08      	ldr	r3, [pc, #32]	; (2100 <frame_dummy+0x24>)
    20de:	b510      	push	{r4, lr}
    20e0:	2b00      	cmp	r3, #0
    20e2:	d003      	beq.n	20ec <frame_dummy+0x10>
    20e4:	4907      	ldr	r1, [pc, #28]	; (2104 <frame_dummy+0x28>)
    20e6:	4808      	ldr	r0, [pc, #32]	; (2108 <frame_dummy+0x2c>)
    20e8:	e000      	b.n	20ec <frame_dummy+0x10>
    20ea:	bf00      	nop
    20ec:	4807      	ldr	r0, [pc, #28]	; (210c <frame_dummy+0x30>)
    20ee:	6803      	ldr	r3, [r0, #0]
    20f0:	2b00      	cmp	r3, #0
    20f2:	d100      	bne.n	20f6 <frame_dummy+0x1a>
    20f4:	bd10      	pop	{r4, pc}
    20f6:	4b06      	ldr	r3, [pc, #24]	; (2110 <frame_dummy+0x34>)
    20f8:	2b00      	cmp	r3, #0
    20fa:	d0fb      	beq.n	20f4 <frame_dummy+0x18>
    20fc:	4798      	blx	r3
    20fe:	e7f9      	b.n	20f4 <frame_dummy+0x18>
    2100:	00000000 	.word	0x00000000
    2104:	20000314 	.word	0x20000314
    2108:	00012424 	.word	0x00012424
    210c:	20000300 	.word	0x20000300
    2110:	00000000 	.word	0x00000000

00002114 <_GLOBAL__sub_I_sendInterval3>:
	
	echocount = 1;
	
	dlog(LOG_DEBUG, "Initialized Echo Sensor");
	return SAPI_ERR_OK;
    2114:	b510      	push	{r4, lr}
int sendInterval3 = ParamSendInterval();
    2116:	f002 fe97 	bl	4e48 <_Z17ParamSendIntervalv>
    211a:	4b03      	ldr	r3, [pc, #12]	; (2128 <_GLOBAL__sub_I_sendInterval3+0x14>)
    211c:	6018      	str	r0, [r3, #0]
int sampleRate3 =  ParamSampleRate();
    211e:	f002 fe9d 	bl	4e5c <_Z15ParamSampleRatev>
    2122:	4b02      	ldr	r3, [pc, #8]	; (212c <_GLOBAL__sub_I_sendInterval3+0x18>)
    2124:	6018      	str	r0, [r3, #0]
    2126:	bd10      	pop	{r4, pc}
    2128:	20000330 	.word	0x20000330
    212c:	2000032c 	.word	0x2000032c

00002130 <_Z12floatTriggerv>:


// ISR function executes when push button at pin D5 is pressed
void floatTrigger()
{
	alert = 1;                //Change Output value to LOW
    2130:	2201      	movs	r2, #1
{
    2132:	b510      	push	{r4, lr}
	alert = 1;                //Change Output value to LOW
    2134:	4b03      	ldr	r3, [pc, #12]	; (2144 <_Z12floatTriggerv+0x14>)
	dlog(LOG_DEBUG, "Interrupt Float");
    2136:	4904      	ldr	r1, [pc, #16]	; (2148 <_Z12floatTriggerv+0x18>)
    2138:	2007      	movs	r0, #7
	alert = 1;                //Change Output value to LOW
    213a:	701a      	strb	r2, [r3, #0]
	dlog(LOG_DEBUG, "Interrupt Float");
    213c:	f002 fcce 	bl	4adc <_Z4dlogiPKcz>
}
    2140:	bd10      	pop	{r4, pc}
    2142:	46c0      	nop			; (mov r8, r8)
    2144:	20000335 	.word	0x20000335
    2148:	000102c8 	.word	0x000102c8

0000214c <loop>:

//
// Arduino main loop function.
//
void loop()
{
    214c:	b570      	push	{r4, r5, r6, lr}
	int reading = digitalRead(D10);
    214e:	2006      	movs	r0, #6
    2150:	f002 f94e 	bl	43f0 <digitalRead>
	attachInterrupt(digitalPinToInterrupt(D10), floatTrigger, RISING);
    2154:	2204      	movs	r2, #4
    2156:	4913      	ldr	r1, [pc, #76]	; (21a4 <loop+0x58>)
	int reading = digitalRead(D10);
    2158:	0005      	movs	r5, r0
	attachInterrupt(digitalPinToInterrupt(D10), floatTrigger, RISING);
    215a:	2006      	movs	r0, #6
    215c:	f001 ff24 	bl	3fa8 <attachInterrupt>
	// Call SAPI run to do the heavy lifting
	sapi_run();
    2160:	f003 f99a 	bl	5498 <_Z8sapi_runv>
	
	if (reading != lastState){
    2164:	4b10      	ldr	r3, [pc, #64]	; (21a8 <loop+0x5c>)
    2166:	4c11      	ldr	r4, [pc, #68]	; (21ac <loop+0x60>)
    2168:	681b      	ldr	r3, [r3, #0]
    216a:	429d      	cmp	r5, r3
    216c:	d002      	beq.n	2174 <loop+0x28>
		lastDebounceTime = millis();
    216e:	f000 fb3b 	bl	27e8 <millis>
    2172:	6020      	str	r0, [r4, #0]
	}
	
	if ((millis() - lastDebounceTime) > debounceDelay) {
    2174:	f000 fb38 	bl	27e8 <millis>
    2178:	6823      	ldr	r3, [r4, #0]
    217a:	1ac0      	subs	r0, r0, r3
    217c:	4b0c      	ldr	r3, [pc, #48]	; (21b0 <loop+0x64>)
    217e:	681b      	ldr	r3, [r3, #0]
    2180:	4298      	cmp	r0, r3
    2182:	d90d      	bls.n	21a0 <loop+0x54>
		// whatever the reading is at, it's been there for longer than the debounce
		// delay, so take it as the actual current state:
		
		if (alert == 1)
    2184:	4c0b      	ldr	r4, [pc, #44]	; (21b4 <loop+0x68>)
    2186:	7823      	ldrb	r3, [r4, #0]
    2188:	2b01      	cmp	r3, #1
    218a:	d109      	bne.n	21a0 <loop+0x54>
		{
		dlog(LOG_DEBUG, "Push Notification");
    218c:	490a      	ldr	r1, [pc, #40]	; (21b8 <loop+0x6c>)
    218e:	2007      	movs	r0, #7
    2190:	f002 fca4 	bl	4adc <_Z4dlogiPKcz>
		sapi_push_notification(temp_sensor_id);
    2194:	4b09      	ldr	r3, [pc, #36]	; (21bc <loop+0x70>)
    2196:	7818      	ldrb	r0, [r3, #0]
    2198:	f002 feb8 	bl	4f0c <_Z22sapi_push_notificationh>
		alert = 0;
    219c:	2300      	movs	r3, #0
    219e:	7023      	strb	r3, [r4, #0]
		}
	}
}
    21a0:	bd70      	pop	{r4, r5, r6, pc}
    21a2:	46c0      	nop			; (mov r8, r8)
    21a4:	00002131 	.word	0x00002131
    21a8:	20000340 	.word	0x20000340
    21ac:	2000033c 	.word	0x2000033c
    21b0:	20000004 	.word	0x20000004
    21b4:	20000335 	.word	0x20000335
    21b8:	000102d8 	.word	0x000102d8
    21bc:	20000334 	.word	0x20000334

000021c0 <_GLOBAL__sub_I_epoch>:
    21c0:	b510      	push	{r4, lr}
time_t  epoch      = get_rtc_epoch();
    21c2:	f002 fbf3 	bl	49ac <_Z13get_rtc_epochv>
    21c6:	4b01      	ldr	r3, [pc, #4]	; (21cc <_GLOBAL__sub_I_epoch+0xc>)
    21c8:	6018      	str	r0, [r3, #0]
}
    21ca:	bd10      	pop	{r4, pc}
    21cc:	20000338 	.word	0x20000338

000021d0 <setup>:
{
    21d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	Serial.begin(115200);
    21d2:	21e1      	movs	r1, #225	; 0xe1
    21d4:	4821      	ldr	r0, [pc, #132]	; (225c <setup+0x8c>)
    21d6:	0249      	lsls	r1, r1, #9
    21d8:	f000 ff24 	bl	3024 <_ZN7Serial_5beginEm>
	Serial3.begin(19200);
    21dc:	2196      	movs	r1, #150	; 0x96
    21de:	4820      	ldr	r0, [pc, #128]	; (2260 <setup+0x90>)
    21e0:	01c9      	lsls	r1, r1, #7
    21e2:	f000 fcf1 	bl	2bc8 <_ZN4Uart5beginEm>
	sapi_initialize(NULL);
    21e6:	2000      	movs	r0, #0
    21e8:	f003 f888 	bl	52fc <_Z15sapi_initializePc>
	pinMode(D4, OUTPUT); //RE
    21ec:	2101      	movs	r1, #1
    21ee:	2014      	movs	r0, #20
    21f0:	f002 f8a6 	bl	4340 <pinMode>
	pinMode(D5, OUTPUT); //DE
    21f4:	2101      	movs	r1, #1
    21f6:	2013      	movs	r0, #19
    21f8:	f002 f8a2 	bl	4340 <pinMode>
	pinMode(D6, OUTPUT); //Relay
    21fc:	2101      	movs	r1, #1
    21fe:	2010      	movs	r0, #16
    2200:	f002 f89e 	bl	4340 <pinMode>
	pinMode(D7, OUTPUT); //Relay
    2204:	2101      	movs	r1, #1
    2206:	2011      	movs	r0, #17
    2208:	f002 f89a 	bl	4340 <pinMode>
	digitalWrite(D4, LOW);
    220c:	2100      	movs	r1, #0
    220e:	2014      	movs	r0, #20
    2210:	f002 f89a 	bl	4348 <digitalWrite>
	digitalWrite(D5, LOW);
    2214:	2100      	movs	r1, #0
    2216:	2013      	movs	r0, #19
    2218:	f002 f896 	bl	4348 <digitalWrite>
	pinMode(D10,INPUT_PULLUP);
    221c:	2102      	movs	r1, #2
    221e:	2006      	movs	r0, #6
    2220:	f002 f88e 	bl	4340 <pinMode>
	sampleRate1 = ParamSampleRate();
    2224:	f002 fe1a 	bl	4e5c <_Z15ParamSampleRatev>
    2228:	4c0e      	ldr	r4, [pc, #56]	; (2264 <setup+0x94>)
    222a:	6020      	str	r0, [r4, #0]
	sendInterval1 = ParamSendInterval();
    222c:	f002 fe0c 	bl	4e48 <_Z17ParamSendIntervalv>
    2230:	4b0d      	ldr	r3, [pc, #52]	; (2268 <setup+0x98>)
	temp_sensor_id = sapi_register_sensor(TEMP_SENSOR_TYPE, temp_init_sensor, temp_read_sensor, temp_read_cfg, temp_write_cfg, 1, sampleRate1);
    2232:	4a0e      	ldr	r2, [pc, #56]	; (226c <setup+0x9c>)
	sendInterval1 = ParamSendInterval();
    2234:	6018      	str	r0, [r3, #0]
	temp_sensor_id = sapi_register_sensor(TEMP_SENSOR_TYPE, temp_init_sensor, temp_read_sensor, temp_read_cfg, temp_write_cfg, 1, sampleRate1);
    2236:	6823      	ldr	r3, [r4, #0]
    2238:	490d      	ldr	r1, [pc, #52]	; (2270 <setup+0xa0>)
    223a:	9302      	str	r3, [sp, #8]
    223c:	2301      	movs	r3, #1
    223e:	9301      	str	r3, [sp, #4]
    2240:	4b0c      	ldr	r3, [pc, #48]	; (2274 <setup+0xa4>)
    2242:	480d      	ldr	r0, [pc, #52]	; (2278 <setup+0xa8>)
    2244:	9300      	str	r3, [sp, #0]
    2246:	4b0d      	ldr	r3, [pc, #52]	; (227c <setup+0xac>)
    2248:	f002 fe0e 	bl	4e68 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm>
    224c:	4b0c      	ldr	r3, [pc, #48]	; (2280 <setup+0xb0>)
    224e:	7018      	strb	r0, [r3, #0]
	rcode = sapi_init_sensor(temp_sensor_id);
    2250:	f002 fe52 	bl	4ef8 <_Z16sapi_init_sensorh>
	alert = 0;
    2254:	2200      	movs	r2, #0
    2256:	4b0b      	ldr	r3, [pc, #44]	; (2284 <setup+0xb4>)
    2258:	701a      	strb	r2, [r3, #0]
}
    225a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    225c:	2000055c 	.word	0x2000055c
    2260:	200014f4 	.word	0x200014f4
    2264:	20000344 	.word	0x20000344
    2268:	20000348 	.word	0x20000348
    226c:	00002709 	.word	0x00002709
    2270:	00002359 	.word	0x00002359
    2274:	00002291 	.word	0x00002291
    2278:	000102ea 	.word	0x000102ea
    227c:	00002741 	.word	0x00002741
    2280:	20000334 	.word	0x20000334
    2284:	20000335 	.word	0x20000335

00002288 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    2288:	2000      	movs	r0, #0
    228a:	4770      	bx	lr

0000228c <_ZN11DHT_UnifiedD1Ev>:
#include <Adafruit_Sensor.h>
#include <DHT.h>

#define DHT_SENSOR_VERSION 1

class DHT_Unified {
    228c:	4770      	bx	lr
	...

00002290 <_Z14temp_write_cfgPcPh>:
// Write sensor configuration. Processes payload sent from client. Callback called on
//  CoAP Put configuration value
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t temp_write_cfg(char *payload, uint8_t *len)
{
    2290:	b510      	push	{r4, lr}
	if (!strcmp(payload, "cfg=C"))
    2292:	490b      	ldr	r1, [pc, #44]	; (22c0 <_Z14temp_write_cfgPcPh+0x30>)
{
    2294:	0004      	movs	r4, r0
	if (!strcmp(payload, "cfg=C"))
    2296:	f00b f882 	bl	d39e <strcmp>
    229a:	2800      	cmp	r0, #0
    229c:	d103      	bne.n	22a6 <_Z14temp_write_cfgPcPh+0x16>
	{
		context.scalecfg = CELSIUS_SCALE;
    229e:	2243      	movs	r2, #67	; 0x43
    22a0:	4b08      	ldr	r3, [pc, #32]	; (22c4 <_Z14temp_write_cfgPcPh+0x34>)
    22a2:	701a      	strb	r2, [r3, #0]
	{
		return SAPI_ERR_NOT_IMPLEMENTED;
	}

	return SAPI_ERR_OK;
}
    22a4:	bd10      	pop	{r4, pc}
	else if (!strcmp(payload, "cfg=F"))
    22a6:	4908      	ldr	r1, [pc, #32]	; (22c8 <_Z14temp_write_cfgPcPh+0x38>)
    22a8:	0020      	movs	r0, r4
    22aa:	f00b f878 	bl	d39e <strcmp>
    22ae:	0003      	movs	r3, r0
		return SAPI_ERR_NOT_IMPLEMENTED;
    22b0:	2001      	movs	r0, #1
	else if (!strcmp(payload, "cfg=F"))
    22b2:	2b00      	cmp	r3, #0
    22b4:	d1f6      	bne.n	22a4 <_Z14temp_write_cfgPcPh+0x14>
		context.scalecfg = FAHRENHEIT_SCALE;
    22b6:	2146      	movs	r1, #70	; 0x46
    22b8:	4a02      	ldr	r2, [pc, #8]	; (22c4 <_Z14temp_write_cfgPcPh+0x34>)
	return SAPI_ERR_OK;
    22ba:	0018      	movs	r0, r3
		context.scalecfg = FAHRENHEIT_SCALE;
    22bc:	7011      	strb	r1, [r2, #0]
    22be:	e7f1      	b.n	22a4 <_Z14temp_write_cfgPcPh+0x14>
    22c0:	0001036f 	.word	0x0001036f
    22c4:	2000034c 	.word	0x2000034c
    22c8:	00010375 	.word	0x00010375

000022cc <_Z10read_dht11Pf>:
//
// Read the temp value from the DHT11 sensor.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t read_dht11(float *reading)
{
    22cc:	b530      	push	{r4, r5, lr}
    float    min_value;                       /**< minimum value of this sensor's value in SI units */
    float    resolution;                      /**< smallest difference between two values reported by this sensor */
    int32_t  min_delay;                       /**< min delay in microseconds between events. zero = not a constant rate */
} sensor_t;

class Adafruit_Sensor {
    22ce:	4b17      	ldr	r3, [pc, #92]	; (232c <_Z10read_dht11Pf+0x60>)
    22d0:	b08f      	sub	sp, #60	; 0x3c
    22d2:	7f1a      	ldrb	r2, [r3, #28]
    22d4:	0005      	movs	r5, r0
    22d6:	a801      	add	r0, sp, #4
    22d8:	7102      	strb	r2, [r0, #4]
public:
  DHT_Unified(uint8_t pin, uint8_t type, uint8_t count=6, int32_t tempSensorId=-1, int32_t humiditySensorId=-1);
  void begin();

  class Temperature : public Adafruit_Sensor {
    22da:	4a15      	ldr	r2, [pc, #84]	; (2330 <_Z10read_dht11Pf+0x64>)
	sapi_error_t rc = SAPI_ERR_OK;
	float re = INVALID_TEMP;

	// Get temperature event
	sensors_event_t event;
	dht.temperature().getEvent(&event);
    22dc:	a905      	add	r1, sp, #20
    22de:	9201      	str	r2, [sp, #4]
    22e0:	6a1a      	ldr	r2, [r3, #32]
    22e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    22e4:	6082      	str	r2, [r0, #8]
    22e6:	60c3      	str	r3, [r0, #12]
    22e8:	f002 f9ad 	bl	4646 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>

	// Check for NaN
	if (isnan(event.temperature))
    22ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
    22ee:	1c21      	adds	r1, r4, #0
    22f0:	1c20      	adds	r0, r4, #0
    22f2:	f007 fe4d 	bl	9f90 <__aeabi_fcmpun>
    22f6:	2800      	cmp	r0, #0
    22f8:	d000      	beq.n	22fc <_Z10read_dht11Pf+0x30>
	{
		re = NO_SENSOR_TEMP;
    22fa:	4c0e      	ldr	r4, [pc, #56]	; (2334 <_Z10read_dht11Pf+0x68>)
		re = event.temperature;
		rc = SAPI_ERR_OK;
	}

	// Reading is in C. Convert to F if needed.
	if (context.scalecfg == FAHRENHEIT_SCALE)
    22fc:	4b0e      	ldr	r3, [pc, #56]	; (2338 <_Z10read_dht11Pf+0x6c>)
    22fe:	781b      	ldrb	r3, [r3, #0]
    2300:	b25b      	sxtb	r3, r3
    2302:	2b46      	cmp	r3, #70	; 0x46
    2304:	d10d      	bne.n	2322 <_Z10read_dht11Pf+0x56>
	{
		// Convert from Celsius to Fahrenheit
		re *= 1.8;
    2306:	1c20      	adds	r0, r4, #0
    2308:	f009 fcb8 	bl	bc7c <__aeabi_f2d>
    230c:	4a0b      	ldr	r2, [pc, #44]	; (233c <_Z10read_dht11Pf+0x70>)
    230e:	4b0c      	ldr	r3, [pc, #48]	; (2340 <_Z10read_dht11Pf+0x74>)
    2310:	f008 fe50 	bl	afb4 <__aeabi_dmul>
    2314:	f009 fd04 	bl	bd20 <__aeabi_d2f>
		re += 32;
    2318:	2184      	movs	r1, #132	; 0x84
    231a:	05c9      	lsls	r1, r1, #23
    231c:	f007 fade 	bl	98dc <__aeabi_fadd>
    2320:	1c04      	adds	r4, r0, #0
	}

	// Assign output
	*reading = re;
	return rc;
}
    2322:	2000      	movs	r0, #0
	*reading = re;
    2324:	602c      	str	r4, [r5, #0]
}
    2326:	b00f      	add	sp, #60	; 0x3c
    2328:	bd30      	pop	{r4, r5, pc}
    232a:	46c0      	nop			; (mov r8, r8)
    232c:	20000358 	.word	0x20000358
    2330:	00010538 	.word	0x00010538
    2334:	42c80000 	.word	0x42c80000
    2338:	2000034c 	.word	0x2000034c
    233c:	cccccccd 	.word	0xcccccccd
    2340:	3ffccccc 	.word	0x3ffccccc

00002344 <_Z18temp_sensor_enablev>:
//
//////////////////////////////////////////////////////////////////////////

sapi_error_t temp_sensor_enable(void)
{
	context.enable = 1;
    2344:	2201      	movs	r2, #1
    2346:	4b03      	ldr	r3, [pc, #12]	; (2354 <_Z18temp_sensor_enablev+0x10>)
	context.alertstate = tsat_cleared;
	return SAPI_ERR_OK;
}
    2348:	2000      	movs	r0, #0
	context.enable = 1;
    234a:	711a      	strb	r2, [r3, #4]
	context.alertstate = tsat_cleared;
    234c:	1892      	adds	r2, r2, r2
    234e:	705a      	strb	r2, [r3, #1]
}
    2350:	4770      	bx	lr
    2352:	46c0      	nop			; (mov r8, r8)
    2354:	2000034c 	.word	0x2000034c

00002358 <_Z16temp_init_sensorv>:
{
    2358:	b5f0      	push	{r4, r5, r6, r7, lr}
	context.scalecfg = FAHRENHEIT_SCALE;
    235a:	2246      	movs	r2, #70	; 0x46
	context.alertstate = tsat_disabled;
    235c:	2600      	movs	r6, #0
	context.scalecfg = FAHRENHEIT_SCALE;
    235e:	4b33      	ldr	r3, [pc, #204]	; (242c <_Z16temp_init_sensorv+0xd4>)
{
    2360:	b091      	sub	sp, #68	; 0x44
	context.scalecfg = FAHRENHEIT_SCALE;
    2362:	701a      	strb	r2, [r3, #0]
	context.alertstate = tsat_disabled;
    2364:	705e      	strb	r6, [r3, #1]
	temp_sensor_enable();
    2366:	f7ff ffed 	bl	2344 <_Z18temp_sensor_enablev>
	dht.begin();
    236a:	4c31      	ldr	r4, [pc, #196]	; (2430 <_Z16temp_init_sensorv+0xd8>)
    236c:	0020      	movs	r0, r4
    236e:	f002 f9bf 	bl	46f0 <_ZN11DHT_Unified5beginEv>
	println("DHT11 Sensor Initialized!");
    2372:	4830      	ldr	r0, [pc, #192]	; (2434 <_Z16temp_init_sensorv+0xdc>)
    2374:	f002 fc70 	bl	4c58 <_Z7printlnPKc>
    2378:	7f23      	ldrb	r3, [r4, #28]
    237a:	aa02      	add	r2, sp, #8
    237c:	7113      	strb	r3, [r2, #4]
    237e:	4b2e      	ldr	r3, [pc, #184]	; (2438 <_Z16temp_init_sensorv+0xe0>)
	dht.temperature().getSensor(&sensor);
    2380:	0010      	movs	r0, r2
    2382:	9302      	str	r3, [sp, #8]
    2384:	6a23      	ldr	r3, [r4, #32]
    2386:	a906      	add	r1, sp, #24
    2388:	9304      	str	r3, [sp, #16]
    238a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    238c:	9301      	str	r3, [sp, #4]
    238e:	9305      	str	r3, [sp, #20]
    2390:	f002 f9e2 	bl	4758 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>
	println("");
    2394:	4c29      	ldr	r4, [pc, #164]	; (243c <_Z16temp_init_sensorv+0xe4>)
    2396:	0020      	movs	r0, r4
    2398:	f002 fc5e 	bl	4c58 <_Z7printlnPKc>
	println("------------------------------------");
    239c:	4f28      	ldr	r7, [pc, #160]	; (2440 <_Z16temp_init_sensorv+0xe8>)
    239e:	0038      	movs	r0, r7
    23a0:	f002 fc5a 	bl	4c58 <_Z7printlnPKc>
	print  ("Sensor:       "); println(sensor.name);
    23a4:	4827      	ldr	r0, [pc, #156]	; (2444 <_Z16temp_init_sensorv+0xec>)
    23a6:	f002 fc41 	bl	4c2c <_Z5printPKc>
    23aa:	a806      	add	r0, sp, #24
    23ac:	f002 fc54 	bl	4c58 <_Z7printlnPKc>
	print  ("Driver Ver:   "); printnum(sensor.version);    println("");
    23b0:	4825      	ldr	r0, [pc, #148]	; (2448 <_Z16temp_init_sensorv+0xf0>)
    23b2:	f002 fc3b 	bl	4c2c <_Z5printPKc>
    23b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    23b8:	f002 fc64 	bl	4c84 <_Z8printnumi>
    23bc:	0020      	movs	r0, r4
    23be:	f002 fc4b 	bl	4c58 <_Z7printlnPKc>
	print  ("Unique ID:    "); printnum(sensor.sensor_id);  println("");
    23c2:	4822      	ldr	r0, [pc, #136]	; (244c <_Z16temp_init_sensorv+0xf4>)
    23c4:	f002 fc32 	bl	4c2c <_Z5printPKc>
    23c8:	980a      	ldr	r0, [sp, #40]	; 0x28
    23ca:	f002 fc5b 	bl	4c84 <_Z8printnumi>
    23ce:	0020      	movs	r0, r4
    23d0:	f002 fc42 	bl	4c58 <_Z7printlnPKc>
	print  ("Max Value:    "); printnum(sensor.max_value);  println(" C");
    23d4:	481e      	ldr	r0, [pc, #120]	; (2450 <_Z16temp_init_sensorv+0xf8>)
    23d6:	f002 fc29 	bl	4c2c <_Z5printPKc>
    23da:	980c      	ldr	r0, [sp, #48]	; 0x30
    23dc:	f007 fdf0 	bl	9fc0 <__aeabi_f2iz>
    23e0:	f002 fc50 	bl	4c84 <_Z8printnumi>
    23e4:	4d1b      	ldr	r5, [pc, #108]	; (2454 <_Z16temp_init_sensorv+0xfc>)
    23e6:	0028      	movs	r0, r5
    23e8:	f002 fc36 	bl	4c58 <_Z7printlnPKc>
	print  ("Min Value:    "); printnum(sensor.min_value);  println(" C");
    23ec:	481a      	ldr	r0, [pc, #104]	; (2458 <_Z16temp_init_sensorv+0x100>)
    23ee:	f002 fc1d 	bl	4c2c <_Z5printPKc>
    23f2:	980d      	ldr	r0, [sp, #52]	; 0x34
    23f4:	f007 fde4 	bl	9fc0 <__aeabi_f2iz>
    23f8:	f002 fc44 	bl	4c84 <_Z8printnumi>
    23fc:	0028      	movs	r0, r5
    23fe:	f002 fc2b 	bl	4c58 <_Z7printlnPKc>
	print  ("Resolution:   "); printnum(sensor.resolution); println(" C");
    2402:	4816      	ldr	r0, [pc, #88]	; (245c <_Z16temp_init_sensorv+0x104>)
    2404:	f002 fc12 	bl	4c2c <_Z5printPKc>
    2408:	980e      	ldr	r0, [sp, #56]	; 0x38
    240a:	f007 fdd9 	bl	9fc0 <__aeabi_f2iz>
    240e:	f002 fc39 	bl	4c84 <_Z8printnumi>
    2412:	0028      	movs	r0, r5
    2414:	f002 fc20 	bl	4c58 <_Z7printlnPKc>
	println("------------------------------------");        println("");
    2418:	0038      	movs	r0, r7
    241a:	f002 fc1d 	bl	4c58 <_Z7printlnPKc>
    241e:	0020      	movs	r0, r4
    2420:	f002 fc1a 	bl	4c58 <_Z7printlnPKc>
}
    2424:	0030      	movs	r0, r6
    2426:	b011      	add	sp, #68	; 0x44
    2428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    242a:	46c0      	nop			; (mov r8, r8)
    242c:	2000034c 	.word	0x2000034c
    2430:	20000358 	.word	0x20000358
    2434:	0001037b 	.word	0x0001037b
    2438:	00010538 	.word	0x00010538
    243c:	00010477 	.word	0x00010477
    2440:	00010395 	.word	0x00010395
    2444:	000103ba 	.word	0x000103ba
    2448:	000103c9 	.word	0x000103c9
    244c:	000103d8 	.word	0x000103d8
    2450:	000103e7 	.word	0x000103e7
    2454:	000103f6 	.word	0x000103f6
    2458:	000103f9 	.word	0x000103f9
    245c:	00010408 	.word	0x00010408

00002460 <_GLOBAL__sub_I_dht>:
DHT_Unified dht(A1, DHT_TYPE);
    2460:	2301      	movs	r3, #1
sapi_error_t temp_sensor_disable(void)
{
	context.enable = 0;
	context.alertstate = tsat_disabled;
	return SAPI_ERR_OK;
}
    2462:	b513      	push	{r0, r1, r4, lr}
DHT_Unified dht(A1, DHT_TYPE);
    2464:	4c07      	ldr	r4, [pc, #28]	; (2484 <_GLOBAL__sub_I_dht+0x24>)
    2466:	425b      	negs	r3, r3
    2468:	9301      	str	r3, [sp, #4]
    246a:	9300      	str	r3, [sp, #0]
    246c:	220b      	movs	r2, #11
    246e:	3307      	adds	r3, #7
    2470:	2100      	movs	r1, #0
    2472:	0020      	movs	r0, r4
    2474:	f002 f924 	bl	46c0 <_ZN11DHT_UnifiedC1Ehhhll>
    2478:	4a03      	ldr	r2, [pc, #12]	; (2488 <_GLOBAL__sub_I_dht+0x28>)
    247a:	4904      	ldr	r1, [pc, #16]	; (248c <_GLOBAL__sub_I_dht+0x2c>)
    247c:	0020      	movs	r0, r4
    247e:	f007 f82d 	bl	94dc <__aeabi_atexit>
}
    2482:	bd13      	pop	{r0, r1, r4, pc}
    2484:	20000358 	.word	0x20000358
    2488:	20000000 	.word	0x20000000
    248c:	0000228d 	.word	0x0000228d

00002490 <_Z11sendCommandPh>:
void sendCommand(byte *cmd) {
    2490:	b570      	push	{r4, r5, r6, lr}
    2492:	0004      	movs	r4, r0
 	digitalWrite(D4, HIGH);
    2494:	2101      	movs	r1, #1
    2496:	2014      	movs	r0, #20
    2498:	f001 ff56 	bl	4348 <digitalWrite>
 	digitalWrite(D5, HIGH); 
    249c:	2101      	movs	r1, #1
    249e:	2013      	movs	r0, #19
    24a0:	f001 ff52 	bl	4348 <digitalWrite>
    24a4:	0026      	movs	r6, r4
	delay(100);
    24a6:	2064      	movs	r0, #100	; 0x64
    24a8:	f000 f9d4 	bl	2854 <delay>
    24ac:	3608      	adds	r6, #8
		Serial3.write(cmd[i]); 
    24ae:	4d0b      	ldr	r5, [pc, #44]	; (24dc <_Z11sendCommandPh+0x4c>)
    24b0:	7821      	ldrb	r1, [r4, #0]
    24b2:	0028      	movs	r0, r5
    24b4:	3401      	adds	r4, #1
    24b6:	f000 fc45 	bl	2d44 <_ZN4Uart5writeEh>
	for(int i=0; i < 8; i++){
    24ba:	42b4      	cmp	r4, r6
    24bc:	d1f7      	bne.n	24ae <_Z11sendCommandPh+0x1e>
	Serial3.flush(); // Make sure message is fully transferred
    24be:	0028      	movs	r0, r5
    24c0:	f000 fb9d 	bl	2bfe <_ZN4Uart5flushEv>
	digitalWrite(D4, LOW);
    24c4:	2100      	movs	r1, #0
    24c6:	2014      	movs	r0, #20
    24c8:	f001 ff3e 	bl	4348 <digitalWrite>
	digitalWrite(D5, LOW);
    24cc:	2100      	movs	r1, #0
    24ce:	2013      	movs	r0, #19
    24d0:	f001 ff3a 	bl	4348 <digitalWrite>
	delay(50);
    24d4:	2032      	movs	r0, #50	; 0x32
    24d6:	f000 f9bd 	bl	2854 <delay>
}
    24da:	bd70      	pop	{r4, r5, r6, pc}
    24dc:	200014f4 	.word	0x200014f4

000024e0 <_Z4SendPhS_>:
char* Send(byte * cmd, byte* ret) {
    24e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    24e2:	0005      	movs	r5, r0
    24e4:	000c      	movs	r4, r1
	digitalWrite(D6, HIGH);
    24e6:	2010      	movs	r0, #16
    24e8:	2101      	movs	r1, #1
    24ea:	f001 ff2d 	bl	4348 <digitalWrite>
	digitalWrite(D7, LOW);
    24ee:	2100      	movs	r1, #0
    24f0:	2011      	movs	r0, #17
    24f2:	f001 ff29 	bl	4348 <digitalWrite>
	delay(5000);
    24f6:	4837      	ldr	r0, [pc, #220]	; (25d4 <_Z4SendPhS_+0xf4>)
    24f8:	f000 f9ac 	bl	2854 <delay>
	sendCommand(cmd);
    24fc:	0028      	movs	r0, r5
    24fe:	f7ff ffc7 	bl	2490 <_Z11sendCommandPh>
	if (Serial3.available()){  //Read return data package (NOTE: Demo is just for your reference, the data package haven't be calibrated yet)
    2502:	4f35      	ldr	r7, [pc, #212]	; (25d8 <_Z4SendPhS_+0xf8>)
    2504:	0038      	movs	r0, r7
    2506:	f000 fb75 	bl	2bf4 <_ZN4Uart9availableEv>
    250a:	2800      	cmp	r0, #0
    250c:	d05e      	beq.n	25cc <_Z4SendPhS_+0xec>
    250e:	4d33      	ldr	r5, [pc, #204]	; (25dc <_Z4SendPhS_+0xfc>)
	while(Serial3.read() != 0x0A && h < 1000){
    2510:	0038      	movs	r0, r7
    2512:	f000 fb85 	bl	2c20 <_ZN4Uart4readEv>
    2516:	280a      	cmp	r0, #10
    2518:	d002      	beq.n	2520 <_Z4SendPhS_+0x40>
    251a:	3d01      	subs	r5, #1
    251c:	2d00      	cmp	r5, #0
    251e:	d1f7      	bne.n	2510 <_Z4SendPhS_+0x30>
	ret[0] = 0x0A;
    2520:	230a      	movs	r3, #10
    2522:	0026      	movs	r6, r4
    2524:	7023      	strb	r3, [r4, #0]
    2526:	1ca5      	adds	r5, r4, #2
    2528:	362e      	adds	r6, #46	; 0x2e
		ret[j++]=(Serial3.read());
    252a:	0038      	movs	r0, r7
    252c:	f000 fb78 	bl	2c20 <_ZN4Uart4readEv>
    2530:	7028      	strb	r0, [r5, #0]
    2532:	3502      	adds	r5, #2
	for(int j=2; j < 46; j++){
    2534:	42b5      	cmp	r5, r6
    2536:	d1f8      	bne.n	252a <_Z4SendPhS_+0x4a>
    Serial.println("Data Begin");
    2538:	4d29      	ldr	r5, [pc, #164]	; (25e0 <_Z4SendPhS_+0x100>)
    253a:	492a      	ldr	r1, [pc, #168]	; (25e4 <_Z4SendPhS_+0x104>)
    253c:	0028      	movs	r0, r5
    253e:	f000 fa39 	bl	29b4 <_ZN5Print7printlnEPKc>
	strcpy(temp_result, "");
    2542:	4929      	ldr	r1, [pc, #164]	; (25e8 <_Z4SendPhS_+0x108>)
    2544:	4829      	ldr	r0, [pc, #164]	; (25ec <_Z4SendPhS_+0x10c>)
    2546:	f00a ff34 	bl	d3b2 <strcpy>
    254a:	0023      	movs	r3, r4
    254c:	332c      	adds	r3, #44	; 0x2c
    254e:	9301      	str	r3, [sp, #4]
		sprintf(motorola_payload, "%X,", ret[y]);
    2550:	4e27      	ldr	r6, [pc, #156]	; (25f0 <_Z4SendPhS_+0x110>)
    2552:	7822      	ldrb	r2, [r4, #0]
    2554:	4927      	ldr	r1, [pc, #156]	; (25f4 <_Z4SendPhS_+0x114>)
    2556:	0030      	movs	r0, r6
    2558:	f00a fef2 	bl	d340 <siprintf>
		strcat(temp_result,motorola_payload);
    255c:	0031      	movs	r1, r6
    255e:	4823      	ldr	r0, [pc, #140]	; (25ec <_Z4SendPhS_+0x10c>)
    2560:	f00a ff10 	bl	d384 <strcat>
	for (int y = 0; y < 44; y = y + 2){
    2564:	9b01      	ldr	r3, [sp, #4]
    2566:	3402      	adds	r4, #2
    2568:	42a3      	cmp	r3, r4
    256a:	d1f1      	bne.n	2550 <_Z4SendPhS_+0x70>
	sprintf(motorola_payload, "%X;", ret[44]);
    256c:	4c22      	ldr	r4, [pc, #136]	; (25f8 <_Z4SendPhS_+0x118>)
    256e:	781a      	ldrb	r2, [r3, #0]
    2570:	0021      	movs	r1, r4
    2572:	0030      	movs	r0, r6
    2574:	f00a fee4 	bl	d340 <siprintf>
	strcat(temp_result,motorola_payload);
    2578:	0031      	movs	r1, r6
    257a:	481c      	ldr	r0, [pc, #112]	; (25ec <_Z4SendPhS_+0x10c>)
    257c:	f00a ff02 	bl	d384 <strcat>
	Serial.println(temp_result);
    2580:	491a      	ldr	r1, [pc, #104]	; (25ec <_Z4SendPhS_+0x10c>)
    2582:	0028      	movs	r0, r5
    2584:	f000 fa16 	bl	29b4 <_ZN5Print7printlnEPKc>
	sprintf(motorola_payload, "%X;", ret[44]);
    2588:	9b01      	ldr	r3, [sp, #4]
    258a:	0021      	movs	r1, r4
    258c:	781a      	ldrb	r2, [r3, #0]
    258e:	0030      	movs	r0, r6
    2590:	f00a fed6 	bl	d340 <siprintf>
	Serial.println();
    2594:	0028      	movs	r0, r5
    2596:	f000 f9f1 	bl	297c <_ZN5Print7printlnEv>
    Serial.println("Data End");
    259a:	4918      	ldr	r1, [pc, #96]	; (25fc <_Z4SendPhS_+0x11c>)
    259c:	0028      	movs	r0, r5
    259e:	f000 fa09 	bl	29b4 <_ZN5Print7printlnEPKc>
    Serial3.flush();
    25a2:	0038      	movs	r0, r7
    25a4:	f000 fb2b 	bl	2bfe <_ZN4Uart5flushEv>
    Serial.println("Received data Done");
    25a8:	0028      	movs	r0, r5
    25aa:	4915      	ldr	r1, [pc, #84]	; (2600 <_Z4SendPhS_+0x120>)
    Serial.println("Error reading RS485");
    25ac:	f000 fa02 	bl	29b4 <_ZN5Print7printlnEPKc>
    delay(1000);
    25b0:	20fa      	movs	r0, #250	; 0xfa
    25b2:	0080      	lsls	r0, r0, #2
    25b4:	f000 f94e 	bl	2854 <delay>
	digitalWrite(D6, LOW);
    25b8:	2100      	movs	r1, #0
    25ba:	2010      	movs	r0, #16
    25bc:	f001 fec4 	bl	4348 <digitalWrite>
	digitalWrite(D7, HIGH);
    25c0:	2101      	movs	r1, #1
    25c2:	2011      	movs	r0, #17
    25c4:	f001 fec0 	bl	4348 <digitalWrite>
}
    25c8:	4808      	ldr	r0, [pc, #32]	; (25ec <_Z4SendPhS_+0x10c>)
    25ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    Serial.println("Error reading RS485");
    25cc:	490d      	ldr	r1, [pc, #52]	; (2604 <_Z4SendPhS_+0x124>)
    25ce:	4804      	ldr	r0, [pc, #16]	; (25e0 <_Z4SendPhS_+0x100>)
    25d0:	e7ec      	b.n	25ac <_Z4SendPhS_+0xcc>
    25d2:	46c0      	nop			; (mov r8, r8)
    25d4:	00001388 	.word	0x00001388
    25d8:	200014f4 	.word	0x200014f4
    25dc:	000003e9 	.word	0x000003e9
    25e0:	2000055c 	.word	0x2000055c
    25e4:	00010432 	.word	0x00010432
    25e8:	00010477 	.word	0x00010477
    25ec:	200004d0 	.word	0x200004d0
    25f0:	20000390 	.word	0x20000390
    25f4:	0001043d 	.word	0x0001043d
    25f8:	00010441 	.word	0x00010441
    25fc:	00010445 	.word	0x00010445
    2600:	0001044e 	.word	0x0001044e
    2604:	00010461 	.word	0x00010461

00002608 <_Z18temp_build_payloadPcPf>:
{
    2608:	b5f0      	push	{r4, r5, r6, r7, lr}
    260a:	b0e9      	sub	sp, #420	; 0x1a4
    260c:	9001      	str	r0, [sp, #4]
	int sendInterval2 = ParamSendInterval();
    260e:	f002 fc1b 	bl	4e48 <_Z17ParamSendIntervalv>
    2612:	0004      	movs	r4, r0
	int sampleRate2 =  ParamSampleRate();
    2614:	f002 fc22 	bl	4e5c <_Z15ParamSampleRatev>
	char    rmotorola1[128] = "12.00,";
    2618:	2207      	movs	r2, #7
	int sampleRate2 =  ParamSampleRate();
    261a:	9000      	str	r0, [sp, #0]
	char    rmotorola1[128] = "12.00,";
    261c:	4930      	ldr	r1, [pc, #192]	; (26e0 <_Z18temp_build_payloadPcPf+0xd8>)
    261e:	a848      	add	r0, sp, #288	; 0x120
    2620:	f009 fd9d 	bl	c15e <memcpy>
    2624:	2020      	movs	r0, #32
    2626:	ab02      	add	r3, sp, #8
    2628:	30ff      	adds	r0, #255	; 0xff
    262a:	18c0      	adds	r0, r0, r3
    262c:	2279      	movs	r2, #121	; 0x79
    262e:	2100      	movs	r1, #0
    2630:	f009 fdb0 	bl	c194 <memset>
	strcpy(temp_payload, "");
    2634:	4f2b      	ldr	r7, [pc, #172]	; (26e4 <_Z18temp_build_payloadPcPf+0xdc>)
    2636:	a828      	add	r0, sp, #160	; 0xa0
    2638:	0039      	movs	r1, r7
    263a:	f00a feba 	bl	d3b2 <strcpy>
	strcpy(payload, "");
    263e:	0039      	movs	r1, r7
    2640:	a808      	add	r0, sp, #32
    2642:	f00a feb6 	bl	d3b2 <strcpy>
	Serial3.flush();
    2646:	4828      	ldr	r0, [pc, #160]	; (26e8 <_Z18temp_build_payloadPcPf+0xe0>)
    2648:	f000 fad9 	bl	2bfe <_ZN4Uart5flushEv>
	sprintf(rmotorola1, "%s", Send(sendRequest10Data, temp_data)); //RT
    264c:	4927      	ldr	r1, [pc, #156]	; (26ec <_Z18temp_build_payloadPcPf+0xe4>)
    264e:	4828      	ldr	r0, [pc, #160]	; (26f0 <_Z18temp_build_payloadPcPf+0xe8>)
    2650:	f7ff ff46 	bl	24e0 <_Z4SendPhS_>
    2654:	0001      	movs	r1, r0
    2656:	a848      	add	r0, sp, #288	; 0x120
    2658:	f00a feab 	bl	d3b2 <strcpy>
	epoch = get_rtc_epoch();
    265c:	f002 f9a6 	bl	49ac <_Z13get_rtc_epochv>
    2660:	0006      	movs	r6, r0
	sprintf(temp_epoch, "%d,", epoch);
    2662:	4d24      	ldr	r5, [pc, #144]	; (26f4 <_Z18temp_build_payloadPcPf+0xec>)
    2664:	0002      	movs	r2, r0
    2666:	0029      	movs	r1, r5
    2668:	a803      	add	r0, sp, #12
    266a:	f00a fe69 	bl	d340 <siprintf>
	sprintf(temp_payload, "%d,", epoch);
    266e:	0032      	movs	r2, r6
    2670:	0029      	movs	r1, r5
    2672:	a828      	add	r0, sp, #160	; 0xa0
    2674:	f00a fe64 	bl	d340 <siprintf>
	strcat(temp_payload, rmotorola1);
    2678:	a948      	add	r1, sp, #288	; 0x120
    267a:	a828      	add	r0, sp, #160	; 0xa0
    267c:	f00a fe82 	bl	d384 <strcat>
	strcpy(payload, temp_payload);
    2680:	a928      	add	r1, sp, #160	; 0xa0
    2682:	a808      	add	r0, sp, #32
    2684:	f00a fe95 	bl	d3b2 <strcpy>
	if ((counter1 >= (sendInterval2 / sampleRate2 - 1)) || (temp_float == 1) ){
    2688:	0020      	movs	r0, r4
    268a:	9900      	ldr	r1, [sp, #0]
    268c:	f006 ffc2 	bl	9614 <__divsi3>
    2690:	4e19      	ldr	r6, [pc, #100]	; (26f8 <_Z18temp_build_payloadPcPf+0xf0>)
    2692:	3801      	subs	r0, #1
    2694:	6835      	ldr	r5, [r6, #0]
    2696:	4c19      	ldr	r4, [pc, #100]	; (26fc <_Z18temp_build_payloadPcPf+0xf4>)
    2698:	42a8      	cmp	r0, r5
    269a:	dd03      	ble.n	26a4 <_Z18temp_build_payloadPcPf+0x9c>
    269c:	4b18      	ldr	r3, [pc, #96]	; (2700 <_Z18temp_build_payloadPcPf+0xf8>)
    269e:	681b      	ldr	r3, [r3, #0]
    26a0:	2b01      	cmp	r3, #1
    26a2:	d115      	bne.n	26d0 <_Z18temp_build_payloadPcPf+0xc8>
		strcat(payloadFinal, payload);
    26a4:	a908      	add	r1, sp, #32
    26a6:	0020      	movs	r0, r4
    26a8:	f00a fe6c 	bl	d384 <strcat>
		strcpy(buf, payloadFinal); //copy to final buf and ready to be sent
    26ac:	0021      	movs	r1, r4
    26ae:	9801      	ldr	r0, [sp, #4]
    26b0:	f00a fe7f 	bl	d3b2 <strcpy>
		counter1= 0;
    26b4:	2300      	movs	r3, #0
		dlog(LOG_DEBUG, "Temp Payload Final: %s", payloadFinal);
    26b6:	4913      	ldr	r1, [pc, #76]	; (2704 <_Z18temp_build_payloadPcPf+0xfc>)
    26b8:	2007      	movs	r0, #7
    26ba:	0022      	movs	r2, r4
		counter1= 0;
    26bc:	6033      	str	r3, [r6, #0]
		dlog(LOG_DEBUG, "Temp Payload Final: %s", payloadFinal);
    26be:	f002 fa0d 	bl	4adc <_Z4dlogiPKcz>
		strcpy(payloadFinal, "");
    26c2:	0039      	movs	r1, r7
    26c4:	0020      	movs	r0, r4
    26c6:	f00a fe74 	bl	d3b2 <strcpy>
}
    26ca:	2000      	movs	r0, #0
    26cc:	b069      	add	sp, #420	; 0x1a4
    26ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		counter1 = counter1 + 1; //+1 counter
    26d0:	3501      	adds	r5, #1
		strcat(payloadFinal, payload);
    26d2:	a908      	add	r1, sp, #32
    26d4:	0020      	movs	r0, r4
		counter1 = counter1 + 1; //+1 counter
    26d6:	6035      	str	r5, [r6, #0]
		strcat(payloadFinal, payload);
    26d8:	f00a fe54 	bl	d384 <strcat>
		return SAPI_ERR_OK;
    26dc:	e7f5      	b.n	26ca <_Z18temp_build_payloadPcPf+0xc2>
    26de:	46c0      	nop			; (mov r8, r8)
    26e0:	000102ef 	.word	0x000102ef
    26e4:	00010477 	.word	0x00010477
    26e8:	200014f4 	.word	0x200014f4
    26ec:	20000490 	.word	0x20000490
    26f0:	20000008 	.word	0x20000008
    26f4:	00010417 	.word	0x00010417
    26f8:	20000354 	.word	0x20000354
    26fc:	20000410 	.word	0x20000410
    2700:	200004cc 	.word	0x200004cc
    2704:	0001041b 	.word	0x0001041b

00002708 <_Z16temp_read_sensorPcPh>:
	float reading = 0.0;
    2708:	2300      	movs	r3, #0
{
    270a:	b570      	push	{r4, r5, r6, lr}
    270c:	b0a2      	sub	sp, #136	; 0x88
    270e:	0006      	movs	r6, r0
	rc = read_dht11(&reading);
    2710:	a801      	add	r0, sp, #4
{
    2712:	000d      	movs	r5, r1
	float reading = 0.0;
    2714:	9301      	str	r3, [sp, #4]
	rc = read_dht11(&reading);
    2716:	f7ff fdd9 	bl	22cc <_Z10read_dht11Pf>
    271a:	1e04      	subs	r4, r0, #0
	if (rc != SAPI_ERR_OK)
    271c:	d10d      	bne.n	273a <_Z16temp_read_sensorPcPh+0x32>
	rc = temp_build_payload(buffer, &reading);
    271e:	a901      	add	r1, sp, #4
    2720:	a802      	add	r0, sp, #8
    2722:	f7ff ff71 	bl	2608 <_Z18temp_build_payloadPcPf>
    2726:	1e04      	subs	r4, r0, #0
	if (rc != SAPI_ERR_OK)
    2728:	d107      	bne.n	273a <_Z16temp_read_sensorPcPh+0x32>
	strcpy(payload, buffer);
    272a:	a902      	add	r1, sp, #8
    272c:	0030      	movs	r0, r6
    272e:	f00a fe40 	bl	d3b2 <strcpy>
	*len = strlen(buffer);
    2732:	a802      	add	r0, sp, #8
    2734:	f00a fe45 	bl	d3c2 <strlen>
    2738:	7028      	strb	r0, [r5, #0]
}
    273a:	0020      	movs	r0, r4
    273c:	b022      	add	sp, #136	; 0x88
    273e:	bd70      	pop	{r4, r5, r6, pc}

00002740 <_Z13temp_read_cfgPcPh>:
{
    2740:	b570      	push	{r4, r5, r6, lr}
    2742:	000e      	movs	r6, r1
	sapi_error_t rc = temp_build_payload(payload, NULL);
    2744:	2100      	movs	r1, #0
{
    2746:	0004      	movs	r4, r0
	sapi_error_t rc = temp_build_payload(payload, NULL);
    2748:	f7ff ff5e 	bl	2608 <_Z18temp_build_payloadPcPf>
    274c:	0005      	movs	r5, r0
	*len = strlen(payload);
    274e:	0020      	movs	r0, r4
    2750:	f00a fe37 	bl	d3c2 <strlen>
    2754:	7030      	strb	r0, [r6, #0]
}
    2756:	0028      	movs	r0, r5
    2758:	bd70      	pop	{r4, r5, r6, pc}

0000275a <Dummy_Handler>:

/* Default empty handler */
void Dummy_Handler(void)
{
#if defined DEBUG
  __BKPT(3);
    275a:	be03      	bkpt	0x0003
    275c:	e7fe      	b.n	275c <Dummy_Handler+0x2>
	...

00002760 <USB_Handler>:
#else
static void (*usb_isr)(void) = NULL;

void USB_Handler(void)
{
  if (usb_isr)
    2760:	4b03      	ldr	r3, [pc, #12]	; (2770 <USB_Handler+0x10>)
{
    2762:	b510      	push	{r4, lr}
  if (usb_isr)
    2764:	681b      	ldr	r3, [r3, #0]
    2766:	2b00      	cmp	r3, #0
    2768:	d000      	beq.n	276c <USB_Handler+0xc>
    usb_isr();
    276a:	4798      	blx	r3
}
    276c:	bd10      	pop	{r4, pc}
    276e:	46c0      	nop			; (mov r8, r8)
    2770:	20000550 	.word	0x20000550

00002774 <HardFault_Handler>:
#endif
#endif

void HardFault_Handler(void)
{
  __BKPT(13);
    2774:	be0d      	bkpt	0x000d
    2776:	e7fe      	b.n	2776 <HardFault_Handler+0x2>

00002778 <Reset_Handler>:
{
    2778:	b570      	push	{r4, r5, r6, lr}
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    277a:	490f      	ldr	r1, [pc, #60]	; (27b8 <Reset_Handler+0x40>)
    277c:	4c0f      	ldr	r4, [pc, #60]	; (27bc <Reset_Handler+0x44>)
    277e:	42a1      	cmp	r1, r4
    2780:	d104      	bne.n	278c <Reset_Handler+0x14>
  SystemInit();
    2782:	f000 f9ab 	bl	2adc <SystemInit>
  main();
    2786:	f000 f8a3 	bl	28d0 <main>
    278a:	e7fe      	b.n	278a <Reset_Handler+0x12>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    278c:	4d0c      	ldr	r5, [pc, #48]	; (27c0 <Reset_Handler+0x48>)
    278e:	2300      	movs	r3, #0
    2790:	428d      	cmp	r5, r1
    2792:	d0f6      	beq.n	2782 <Reset_Handler+0xa>
    2794:	18ca      	adds	r2, r1, r3
    2796:	18e8      	adds	r0, r5, r3
    for (; pDest < &__data_end__; pDest++, pSrc++)
    2798:	42a2      	cmp	r2, r4
    279a:	d305      	bcc.n	27a8 <Reset_Handler+0x30>
  if ((&__data_start__ != &__data_end__) && (pSrc != pDest)) {
    279c:	4290      	cmp	r0, r2
    279e:	d0f0      	beq.n	2782 <Reset_Handler+0xa>
    27a0:	4b08      	ldr	r3, [pc, #32]	; (27c4 <Reset_Handler+0x4c>)
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    27a2:	4909      	ldr	r1, [pc, #36]	; (27c8 <Reset_Handler+0x50>)
      *pDest = 0;
    27a4:	2200      	movs	r2, #0
    27a6:	e004      	b.n	27b2 <Reset_Handler+0x3a>
      *pDest = *pSrc;
    27a8:	6800      	ldr	r0, [r0, #0]
    27aa:	3304      	adds	r3, #4
    27ac:	6010      	str	r0, [r2, #0]
    27ae:	e7f1      	b.n	2794 <Reset_Handler+0x1c>
      *pDest = 0;
    27b0:	c304      	stmia	r3!, {r2}
    for (pDest = &__bss_start__; pDest < &__bss_end__; pDest++)
    27b2:	428b      	cmp	r3, r1
    27b4:	d3fc      	bcc.n	27b0 <Reset_Handler+0x38>
    27b6:	e7e4      	b.n	2782 <Reset_Handler+0xa>
    27b8:	20000000 	.word	0x20000000
    27bc:	20000310 	.word	0x20000310
    27c0:	0001248c 	.word	0x0001248c
    27c4:	20000310 	.word	0x20000310
    27c8:	200022e0 	.word	0x200022e0

000027cc <SysTick_Handler>:
{
    27cc:	b510      	push	{r4, lr}
  if (sysTickHook())
    27ce:	f000 f87c 	bl	28ca <sysTickHook>
    27d2:	2800      	cmp	r0, #0
    27d4:	d101      	bne.n	27da <SysTick_Handler+0xe>
  SysTick_DefaultHandler();
    27d6:	f000 f863 	bl	28a0 <SysTick_DefaultHandler>
}
    27da:	bd10      	pop	{r4, pc}

000027dc <USB_SetHandler>:
  usb_isr = new_usb_isr;
    27dc:	4b01      	ldr	r3, [pc, #4]	; (27e4 <USB_SetHandler+0x8>)
    27de:	6018      	str	r0, [r3, #0]
}
    27e0:	4770      	bx	lr
    27e2:	46c0      	nop			; (mov r8, r8)
    27e4:	20000550 	.word	0x20000550

000027e8 <millis>:
#endif

unsigned long millis( void )
{
// todo: ensure no interrupts
  return _ulTickCount ;
    27e8:	4b01      	ldr	r3, [pc, #4]	; (27f0 <millis+0x8>)
    27ea:	6818      	ldr	r0, [r3, #0]
}
    27ec:	4770      	bx	lr
    27ee:	46c0      	nop			; (mov r8, r8)
    27f0:	20000554 	.word	0x20000554

000027f4 <micros>:
// Interrupt-compatible version of micros
// Theory: repeatedly take readings of SysTick counter, millis counter and SysTick interrupt pending flag.
// When it appears that millis counter and pending is stable and SysTick hasn't rolled over, use these
// values to calculate micros. If there is a pending SysTick, add one to the millis counter in the calculation.
unsigned long micros( void )
{
    27f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t pend, pend2;
  uint32_t count, count2;

  ticks2  = SysTick->VAL;
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
  count2  = _ulTickCount ;
    27f6:	4813      	ldr	r0, [pc, #76]	; (2844 <micros+0x50>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    27f8:	2201      	movs	r2, #1
  count2  = _ulTickCount ;
    27fa:	4684      	mov	ip, r0
  ticks2  = SysTick->VAL;
    27fc:	4912      	ldr	r1, [pc, #72]	; (2848 <micros+0x54>)
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    27fe:	4c13      	ldr	r4, [pc, #76]	; (284c <micros+0x58>)
  ticks2  = SysTick->VAL;
    2800:	688e      	ldr	r6, [r1, #8]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2802:	6863      	ldr	r3, [r4, #4]
  count2  = _ulTickCount ;
    2804:	6805      	ldr	r5, [r0, #0]
  pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    2806:	0e9b      	lsrs	r3, r3, #26
    2808:	4013      	ands	r3, r2
  {
    ticks=ticks2;
    pend=pend2;
    count=count2;
    ticks2  = SysTick->VAL;
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    280a:	9201      	str	r2, [sp, #4]
    ticks2  = SysTick->VAL;
    280c:	6888      	ldr	r0, [r1, #8]
    pend2   = !!(SCB->ICSR & SCB_ICSR_PENDSTSET_Msk)  ;
    280e:	6862      	ldr	r2, [r4, #4]
    2810:	9f01      	ldr	r7, [sp, #4]
    2812:	0e92      	lsrs	r2, r2, #26
    2814:	403a      	ands	r2, r7
    count2  = _ulTickCount ;
    2816:	4667      	mov	r7, ip
    2818:	683f      	ldr	r7, [r7, #0]
  } while ((pend != pend2) || (count != count2) || (ticks < ticks2));
    281a:	4293      	cmp	r3, r2
    281c:	d10e      	bne.n	283c <micros+0x48>
    281e:	42bd      	cmp	r5, r7
    2820:	d10c      	bne.n	283c <micros+0x48>
    2822:	4286      	cmp	r6, r0
    2824:	d30a      	bcc.n	283c <micros+0x48>

  return ((count+pend) * 1000) + (((SysTick->LOAD  - ticks)*(1048576/(VARIANT_MCK/1000000)))>>20) ;
    2826:	195b      	adds	r3, r3, r5
    2828:	25fa      	movs	r5, #250	; 0xfa
    282a:	6848      	ldr	r0, [r1, #4]
    282c:	00ad      	lsls	r5, r5, #2
    282e:	1b86      	subs	r6, r0, r6
    2830:	4807      	ldr	r0, [pc, #28]	; (2850 <micros+0x5c>)
    2832:	436b      	muls	r3, r5
    2834:	4370      	muls	r0, r6
    2836:	0d00      	lsrs	r0, r0, #20
    2838:	18c0      	adds	r0, r0, r3
  // this is an optimization to turn a runtime division into two compile-time divisions and
  // a runtime multiplication and shift, saving a few cycles
}
    283a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
    283c:	003d      	movs	r5, r7
    283e:	0013      	movs	r3, r2
    2840:	0006      	movs	r6, r0
    2842:	e7e3      	b.n	280c <micros+0x18>
    2844:	20000554 	.word	0x20000554
    2848:	e000e010 	.word	0xe000e010
    284c:	e000ed00 	.word	0xe000ed00
    2850:	00005555 	.word	0x00005555

00002854 <delay>:

void delay( unsigned long ms )
{
    2854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2856:	1e04      	subs	r4, r0, #0
  if (ms)
    2858:	d01c      	beq.n	2894 <delay+0x40>
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    285a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    285e:	b672      	cpsid	i
#if !defined(NO_DELAY_HIGH_WORD)
    uint8_t enableInterrupts = ((__get_PRIMASK() & 0x1) == 0);
    __disable_irq();
#endif

    uint32_t start = _ulTickCount ;
    2860:	4e0d      	ldr	r6, [pc, #52]	; (2898 <delay+0x44>)
#if !defined(NO_DELAY_HIGH_WORD)
    uint32_t targetTickCountHighWord = _ulTickCountHighWord;
    2862:	4f0e      	ldr	r7, [pc, #56]	; (289c <delay+0x48>)
    uint32_t start = _ulTickCount ;
    2864:	6835      	ldr	r5, [r6, #0]
    uint32_t targetTickCountHighWord = _ulTickCountHighWord;
    2866:	683a      	ldr	r2, [r7, #0]
    2868:	9201      	str	r2, [sp, #4]

    if (enableInterrupts) {
    286a:	07db      	lsls	r3, r3, #31
    286c:	d400      	bmi.n	2870 <delay+0x1c>
  __ASM volatile ("cpsie i" : : : "memory");
    286e:	b662      	cpsie	i
      __enable_irq();
    }

    // Check for _ulTickCount overflow
    uint32_t remaining = (0xFFFFFFFF - start);
    2870:	43eb      	mvns	r3, r5
    if (ms > remaining) {
    2872:	429c      	cmp	r4, r3
    2874:	d904      	bls.n	2880 <delay+0x2c>
      ms -= (remaining + 1);
    2876:	1964      	adds	r4, r4, r5
      start = 0;
    2878:	2500      	movs	r5, #0
      targetTickCountHighWord++;
    287a:	9b01      	ldr	r3, [sp, #4]
    287c:	3301      	adds	r3, #1
    287e:	9301      	str	r3, [sp, #4]
    }
#endif

    do
    {
      yield() ;
    2880:	f000 f822 	bl	28c8 <yield>
#if !defined(NO_DELAY_HIGH_WORD)
    } while (_ulTickCountHighWord < targetTickCountHighWord || (_ulTickCount - start) < ms ) ;
    2884:	683b      	ldr	r3, [r7, #0]
    2886:	9a01      	ldr	r2, [sp, #4]
    2888:	4293      	cmp	r3, r2
    288a:	d3f9      	bcc.n	2880 <delay+0x2c>
    288c:	6833      	ldr	r3, [r6, #0]
    288e:	1b5b      	subs	r3, r3, r5
    2890:	429c      	cmp	r4, r3
    2892:	d8f5      	bhi.n	2880 <delay+0x2c>
#else
    } while (_ulTickCount - start < ms ) ;
#endif
  }
}
    2894:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    2896:	46c0      	nop			; (mov r8, r8)
    2898:	20000554 	.word	0x20000554
    289c:	20000558 	.word	0x20000558

000028a0 <SysTick_DefaultHandler>:
#include "Reset.h" // for tickReset()

void SysTick_DefaultHandler(void)
{
  // Increment tick count each ms
  _ulTickCount++;
    28a0:	4b07      	ldr	r3, [pc, #28]	; (28c0 <SysTick_DefaultHandler+0x20>)
{
    28a2:	b510      	push	{r4, lr}
  _ulTickCount++;
    28a4:	681a      	ldr	r2, [r3, #0]
    28a6:	3201      	adds	r2, #1
    28a8:	601a      	str	r2, [r3, #0]

#if !defined(NO_DELAY_HIGH_WORD)
  if ( _ulTickCount == 0 )
    28aa:	681b      	ldr	r3, [r3, #0]
    28ac:	2b00      	cmp	r3, #0
    28ae:	d103      	bne.n	28b8 <SysTick_DefaultHandler+0x18>
  {
    _ulTickCountHighWord++;
    28b0:	4a04      	ldr	r2, [pc, #16]	; (28c4 <SysTick_DefaultHandler+0x24>)
    28b2:	6813      	ldr	r3, [r2, #0]
    28b4:	3301      	adds	r3, #1
    28b6:	6013      	str	r3, [r2, #0]
  }
#endif
#if defined(CDC_ONLY) || defined(CDC_HID) || defined(WITH_CDC)
  tickReset();
    28b8:	f000 f8ee 	bl	2a98 <tickReset>
#endif
}
    28bc:	bd10      	pop	{r4, pc}
    28be:	46c0      	nop			; (mov r8, r8)
    28c0:	20000554 	.word	0x20000554
    28c4:	20000558 	.word	0x20000558

000028c8 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
    28c8:	4770      	bx	lr

000028ca <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
    28ca:	2000      	movs	r0, #0
    28cc:	4770      	bx	lr

000028ce <_Z11initVariantv>:
#include "sam.h"

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    28ce:	4770      	bx	lr

000028d0 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
    28d0:	b510      	push	{r4, lr}
  init();
    28d2:	f001 fc27 	bl	4124 <init>

  __libc_init_array();
    28d6:	f009 fbd7 	bl	c088 <__libc_init_array>

  initVariant();
    28da:	f7ff fff8 	bl	28ce <_Z11initVariantv>

  delay(1);
    28de:	2001      	movs	r0, #1
    28e0:	f7ff ffb8 	bl	2854 <delay>
#if defined(USBCON) && !defined(USB_DISABLED)
  USBDevice.init();
    28e4:	4c08      	ldr	r4, [pc, #32]	; (2908 <main+0x38>)
    28e6:	0020      	movs	r0, r4
    28e8:	f000 fe06 	bl	34f8 <_ZN14USBDeviceClass4initEv>
  USBDevice.attach();
    28ec:	0020      	movs	r0, r4
    28ee:	f000 fe63 	bl	35b8 <_ZN14USBDeviceClass6attachEv>
#endif

  setup();
    28f2:	f7ff fc6d 	bl	21d0 <setup>

  for (;;)
  {
    loop();
    28f6:	f7ff fc29 	bl	214c <loop>
    if (serialEventRun) serialEventRun();
    28fa:	4b04      	ldr	r3, [pc, #16]	; (290c <main+0x3c>)
    28fc:	2b00      	cmp	r3, #0
    28fe:	d0fa      	beq.n	28f6 <main+0x26>
    2900:	e000      	b.n	2904 <main+0x34>
    2902:	bf00      	nop
    2904:	e7f7      	b.n	28f6 <main+0x26>
    2906:	46c0      	nop			; (mov r8, r8)
    2908:	20000578 	.word	0x20000578
    290c:	00000000 	.word	0x00000000

00002910 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    2910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2912:	0006      	movs	r6, r0
    2914:	000d      	movs	r5, r1
    2916:	000c      	movs	r4, r1
    2918:	188b      	adds	r3, r1, r2
    291a:	9301      	str	r3, [sp, #4]
  size_t n = 0;
  while (size--) {
    291c:	9b01      	ldr	r3, [sp, #4]
    291e:	1b67      	subs	r7, r4, r5
    2920:	429c      	cmp	r4, r3
    2922:	d007      	beq.n	2934 <_ZN5Print5writeEPKhj+0x24>
    if (write(*buffer++)) n++;
    2924:	6833      	ldr	r3, [r6, #0]
    2926:	7821      	ldrb	r1, [r4, #0]
    2928:	681b      	ldr	r3, [r3, #0]
    292a:	0030      	movs	r0, r6
    292c:	4798      	blx	r3
    292e:	3401      	adds	r4, #1
    2930:	2800      	cmp	r0, #0
    2932:	d1f3      	bne.n	291c <_ZN5Print5writeEPKhj+0xc>
    else break;
  }
  return n;
}
    2934:	0038      	movs	r0, r7
    2936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00002938 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
    2938:	b570      	push	{r4, r5, r6, lr}
    293a:	0005      	movs	r5, r0
    293c:	000c      	movs	r4, r1
      if (str == NULL) return 0;
    293e:	1e08      	subs	r0, r1, #0
    2940:	d007      	beq.n	2952 <_ZN5Print5writeEPKc+0x1a>
      return write((const uint8_t *)str, strlen(str));
    2942:	f00a fd3e 	bl	d3c2 <strlen>
    2946:	682b      	ldr	r3, [r5, #0]
    2948:	0002      	movs	r2, r0
    294a:	685b      	ldr	r3, [r3, #4]
    294c:	0021      	movs	r1, r4
    294e:	0028      	movs	r0, r5
    2950:	4798      	blx	r3
    }
    2952:	bd70      	pop	{r4, r5, r6, pc}

00002954 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    2954:	b510      	push	{r4, lr}
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    2956:	f7ff ffef 	bl	2938 <_ZN5Print5writeEPKc>
}
    295a:	bd10      	pop	{r4, pc}

0000295c <_ZN5Print5printERK6String>:
{
    295c:	b510      	push	{r4, lr}
    virtual size_t write(const uint8_t *buffer, size_t size);
    size_t write(const char *buffer, size_t size) {
      return write((const uint8_t *)buffer, size);
    295e:	6803      	ldr	r3, [r0, #0]
    2960:	688a      	ldr	r2, [r1, #8]
    2962:	685b      	ldr	r3, [r3, #4]
    2964:	6809      	ldr	r1, [r1, #0]
    2966:	4798      	blx	r3
}
    2968:	bd10      	pop	{r4, pc}

0000296a <_ZN5Print5printEPKc>:
{
    296a:	b510      	push	{r4, lr}
  return write(str);
    296c:	f7ff ffe4 	bl	2938 <_ZN5Print5writeEPKc>
}
    2970:	bd10      	pop	{r4, pc}

00002972 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
    2972:	b510      	push	{r4, lr}
  return write(c);
    2974:	6803      	ldr	r3, [r0, #0]
    2976:	681b      	ldr	r3, [r3, #0]
    2978:	4798      	blx	r3
}
    297a:	bd10      	pop	{r4, pc}

0000297c <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
    297c:	b510      	push	{r4, lr}
  return write("\r\n");
    297e:	4902      	ldr	r1, [pc, #8]	; (2988 <_ZN5Print7printlnEv+0xc>)
    2980:	f7ff ffda 	bl	2938 <_ZN5Print5writeEPKc>
}
    2984:	bd10      	pop	{r4, pc}
    2986:	46c0      	nop			; (mov r8, r8)
    2988:	00010475 	.word	0x00010475

0000298c <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
    298c:	b570      	push	{r4, r5, r6, lr}
    298e:	0004      	movs	r4, r0
  return write(str);
    2990:	f7ff ffd2 	bl	2938 <_ZN5Print5writeEPKc>
    2994:	0005      	movs	r5, r0
  n += println();
    2996:	0020      	movs	r0, r4
    2998:	f7ff fff0 	bl	297c <_ZN5Print7printlnEv>
    299c:	1940      	adds	r0, r0, r5
}
    299e:	bd70      	pop	{r4, r5, r6, pc}

000029a0 <_ZN5Print7printlnERK6String>:

size_t Print::println(const String &s)
{
    29a0:	b570      	push	{r4, r5, r6, lr}
    29a2:	0005      	movs	r5, r0
  size_t n = print(s);
    29a4:	f7ff ffda 	bl	295c <_ZN5Print5printERK6String>
    29a8:	0004      	movs	r4, r0
  n += println();
    29aa:	0028      	movs	r0, r5
    29ac:	f7ff ffe6 	bl	297c <_ZN5Print7printlnEv>
    29b0:	1820      	adds	r0, r4, r0
  return n;
}
    29b2:	bd70      	pop	{r4, r5, r6, pc}

000029b4 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    29b4:	b570      	push	{r4, r5, r6, lr}
    29b6:	0004      	movs	r4, r0
  return write(str);
    29b8:	f7ff ffbe 	bl	2938 <_ZN5Print5writeEPKc>
    29bc:	0005      	movs	r5, r0
  size_t n = print(c);
  n += println();
    29be:	0020      	movs	r0, r4
    29c0:	f7ff ffdc 	bl	297c <_ZN5Print7printlnEv>
    29c4:	1940      	adds	r0, r0, r5
  return n;
}
    29c6:	bd70      	pop	{r4, r5, r6, pc}

000029c8 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    29c8:	b570      	push	{r4, r5, r6, lr}
    29ca:	0005      	movs	r5, r0
  size_t n = print(c);
    29cc:	f7ff ffd1 	bl	2972 <_ZN5Print5printEc>
    29d0:	0004      	movs	r4, r0
  n += println();
    29d2:	0028      	movs	r0, r5
    29d4:	f7ff ffd2 	bl	297c <_ZN5Print7printlnEv>
    29d8:	1820      	adds	r0, r4, r0
  return n;
}
    29da:	bd70      	pop	{r4, r5, r6, pc}

000029dc <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
    29dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    29de:	0016      	movs	r6, r2
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    29e0:	2200      	movs	r2, #0
{
    29e2:	b08d      	sub	sp, #52	; 0x34
  *str = '\0';
    29e4:	ab02      	add	r3, sp, #8
    29e6:	3305      	adds	r3, #5
{
    29e8:	9001      	str	r0, [sp, #4]
    29ea:	000d      	movs	r5, r1
  *str = '\0';
    29ec:	77da      	strb	r2, [r3, #31]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    29ee:	2e01      	cmp	r6, #1
    29f0:	dc00      	bgt.n	29f4 <_ZN5Print11printNumberEmh+0x18>
    29f2:	260a      	movs	r6, #10
    29f4:	ac0b      	add	r4, sp, #44	; 0x2c

  do {
    char c = n % base;
    29f6:	0028      	movs	r0, r5
    29f8:	0031      	movs	r1, r6
    29fa:	f006 fe07 	bl	960c <__aeabi_uidivmod>
    29fe:	000f      	movs	r7, r1
    2a00:	b2cb      	uxtb	r3, r1
    n /= base;
    2a02:	0028      	movs	r0, r5
    2a04:	0031      	movs	r1, r6
    char c = n % base;
    2a06:	9300      	str	r3, [sp, #0]
    n /= base;
    2a08:	f006 fd7a 	bl	9500 <__udivsi3>

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2a0c:	b2fb      	uxtb	r3, r7
    2a0e:	3337      	adds	r3, #55	; 0x37
    n /= base;
    2a10:	0005      	movs	r5, r0
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    2a12:	3c01      	subs	r4, #1
    2a14:	b2db      	uxtb	r3, r3
    2a16:	2f09      	cmp	r7, #9
    2a18:	d802      	bhi.n	2a20 <_ZN5Print11printNumberEmh+0x44>
    2a1a:	9b00      	ldr	r3, [sp, #0]
    2a1c:	3330      	adds	r3, #48	; 0x30
    2a1e:	b2db      	uxtb	r3, r3
    2a20:	7023      	strb	r3, [r4, #0]
  } while(n);
    2a22:	2d00      	cmp	r5, #0
    2a24:	d1e7      	bne.n	29f6 <_ZN5Print11printNumberEmh+0x1a>

  return write(str);
    2a26:	0021      	movs	r1, r4
    2a28:	9801      	ldr	r0, [sp, #4]
    2a2a:	f7ff ff85 	bl	2938 <_ZN5Print5writeEPKc>
}
    2a2e:	b00d      	add	sp, #52	; 0x34
    2a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002a32 <_ZN5Print5printEli>:
{
    2a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a34:	0006      	movs	r6, r0
    2a36:	000c      	movs	r4, r1
    2a38:	1e15      	subs	r5, r2, #0
  if (base == 0) {
    2a3a:	d104      	bne.n	2a46 <_ZN5Print5printEli+0x14>
    return write(n);
    2a3c:	6803      	ldr	r3, [r0, #0]
    2a3e:	b2c9      	uxtb	r1, r1
    2a40:	681b      	ldr	r3, [r3, #0]
    2a42:	4798      	blx	r3
}
    2a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return printNumber((unsigned long)n, base);
    2a46:	b2d2      	uxtb	r2, r2
  } else if (base == 10) {
    2a48:	2d0a      	cmp	r5, #10
    2a4a:	d10d      	bne.n	2a68 <_ZN5Print5printEli+0x36>
    return printNumber((unsigned long)n, 10);
    2a4c:	002a      	movs	r2, r5
    if (n < 0) {
    2a4e:	2900      	cmp	r1, #0
    2a50:	da0a      	bge.n	2a68 <_ZN5Print5printEli+0x36>
      int t = print('-');
    2a52:	212d      	movs	r1, #45	; 0x2d
    2a54:	f7ff ff8d 	bl	2972 <_ZN5Print5printEc>
      n = -n;
    2a58:	4261      	negs	r1, r4
      int t = print('-');
    2a5a:	0007      	movs	r7, r0
      return printNumber((unsigned long)n, 10) + t;
    2a5c:	002a      	movs	r2, r5
    2a5e:	0030      	movs	r0, r6
    2a60:	f7ff ffbc 	bl	29dc <_ZN5Print11printNumberEmh>
    2a64:	1838      	adds	r0, r7, r0
    2a66:	e7ed      	b.n	2a44 <_ZN5Print5printEli+0x12>
    return printNumber((unsigned long)n, base);
    2a68:	0021      	movs	r1, r4
    2a6a:	0030      	movs	r0, r6
    2a6c:	f7ff ffb6 	bl	29dc <_ZN5Print11printNumberEmh>
    2a70:	e7e8      	b.n	2a44 <_ZN5Print5printEli+0x12>

00002a72 <_ZN5Print5printEii>:
{
    2a72:	b510      	push	{r4, lr}
  return print((long) n, base);
    2a74:	f7ff ffdd 	bl	2a32 <_ZN5Print5printEli>
}
    2a78:	bd10      	pop	{r4, pc}
	...

00002a7c <initiateReset>:
}

static int ticks = -1;

void initiateReset(int _ticks) {
	ticks = _ticks;
    2a7c:	4b01      	ldr	r3, [pc, #4]	; (2a84 <initiateReset+0x8>)
    2a7e:	6018      	str	r0, [r3, #0]
}
    2a80:	4770      	bx	lr
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	20000010 	.word	0x20000010

00002a88 <cancelReset>:

void cancelReset() {
	ticks = -1;
    2a88:	2201      	movs	r2, #1
    2a8a:	4b02      	ldr	r3, [pc, #8]	; (2a94 <cancelReset+0xc>)
    2a8c:	4252      	negs	r2, r2
    2a8e:	601a      	str	r2, [r3, #0]
}
    2a90:	4770      	bx	lr
    2a92:	46c0      	nop			; (mov r8, r8)
    2a94:	20000010 	.word	0x20000010

00002a98 <tickReset>:

void tickReset() {
	if (ticks == -1)
    2a98:	4a05      	ldr	r2, [pc, #20]	; (2ab0 <tickReset+0x18>)
void tickReset() {
    2a9a:	b510      	push	{r4, lr}
	if (ticks == -1)
    2a9c:	6813      	ldr	r3, [r2, #0]
    2a9e:	1c59      	adds	r1, r3, #1
    2aa0:	d005      	beq.n	2aae <tickReset+0x16>
		return;
	ticks--;
    2aa2:	3b01      	subs	r3, #1
    2aa4:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d101      	bne.n	2aae <tickReset+0x16>
		banzai();
    2aaa:	4b02      	ldr	r3, [pc, #8]	; (2ab4 <tickReset+0x1c>)
    2aac:	4798      	blx	r3
}
    2aae:	bd10      	pop	{r4, pc}
    2ab0:	20000010 	.word	0x20000010
    2ab4:	00012429 	.word	0x00012429

00002ab8 <waitForSync>:
void waitForSync( void )
{
#if (SAMD21 || SAMD11)
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
#elif (SAML21 || SAMC21 || SAMD51)
  while ( GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK );
    2ab8:	4902      	ldr	r1, [pc, #8]	; (2ac4 <waitForSync+0xc>)
    2aba:	4b03      	ldr	r3, [pc, #12]	; (2ac8 <waitForSync+0x10>)
    2abc:	684a      	ldr	r2, [r1, #4]
    2abe:	421a      	tst	r2, r3
    2ac0:	d1fc      	bne.n	2abc <waitForSync+0x4>
#endif
}
    2ac2:	4770      	bx	lr
    2ac4:	40001800 	.word	0x40001800
    2ac8:	000007fd 	.word	0x000007fd

00002acc <waitForPLL>:
{
#if (SAMD51)
  while ( OSCCTRL->Dpll[0].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
  while ( OSCCTRL->Dpll[1].DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
#else
  while ( OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_MASK );
    2acc:	230e      	movs	r3, #14
    2ace:	4902      	ldr	r1, [pc, #8]	; (2ad8 <waitForPLL+0xc>)
    2ad0:	780a      	ldrb	r2, [r1, #0]
    2ad2:	421a      	tst	r2, r3
    2ad4:	d1fc      	bne.n	2ad0 <waitForPLL+0x4>
#endif
}
    2ad6:	4770      	bx	lr
    2ad8:	40000c38 	.word	0x40000c38

00002adc <SystemInit>:
   * Disable automatic NVM write operations (errata reference 13134, applies to D21/D11/L21, but not C21 or D51)
   */
#if (SAMD21 || SAMD11)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_HALF | NVMCTRL_CTRLB_MANW) ; // one wait state
#elif (SAML21 || SAMC21)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    2adc:	2284      	movs	r2, #132	; 0x84
{
    2ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    2ae0:	4b29      	ldr	r3, [pc, #164]	; (2b88 <SystemInit+0xac>)
  /* Turn on the digital interface clock */
#if !defined(TRUST_RESET_DEFAULTS)
#if (SAMD21 || SAMD11)
  PM->APBAMASK.reg |= PM_APBAMASK_GCLK ;
#elif (SAML21 || SAMC21 || SAMD51)
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    2ae2:	4d2a      	ldr	r5, [pc, #168]	; (2b8c <SystemInit+0xb0>)
  NVMCTRL->CTRLB.reg = (NVMCTRL_CTRLB_RWS_DUAL | NVMCTRL_CTRLB_MANW) ; // two wait states
    2ae4:	605a      	str	r2, [r3, #4]
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    2ae6:	2340      	movs	r3, #64	; 0x40
    2ae8:	696a      	ldr	r2, [r5, #20]
#endif
#endif

#if (SAML21)
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
  PM->PLCFG.reg |= PM_PLCFG_PLSEL_PL2 ;	// must set to highest performance level
    2aea:	2102      	movs	r1, #2
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_GCLK ;
    2aec:	4313      	orrs	r3, r2
    2aee:	616b      	str	r3, [r5, #20]
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
    2af0:	2380      	movs	r3, #128	; 0x80
    2af2:	2201      	movs	r2, #1
    2af4:	05db      	lsls	r3, r3, #23
    2af6:	719a      	strb	r2, [r3, #6]
  PM->PLCFG.reg |= PM_PLCFG_PLSEL_PL2 ;	// must set to highest performance level
    2af8:	7898      	ldrb	r0, [r3, #2]
    2afa:	4301      	orrs	r1, r0
    2afc:	7099      	strb	r1, [r3, #2]
  while ( (PM->INTFLAG.reg & PM_INTFLAG_PLRDY) != PM_INTFLAG_PLRDY );
    2afe:	7999      	ldrb	r1, [r3, #6]
    2b00:	4211      	tst	r1, r2
    2b02:	d0fc      	beq.n	2afe <SystemInit+0x22>

  while ( (GCLK->CTRL.reg & GCLK_CTRL_SWRST) && (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) );	/* Wait for reset to complete */
#elif (SAML21 || SAMC21 || SAMD51)
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;

  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    2b04:	2101      	movs	r1, #1
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;
    2b06:	4c22      	ldr	r4, [pc, #136]	; (2b90 <SystemInit+0xb4>)
  PM->INTFLAG.reg = PM_INTFLAG_PLRDY; //clear flag
    2b08:	719a      	strb	r2, [r3, #6]
  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    2b0a:	4b22      	ldr	r3, [pc, #136]	; (2b94 <SystemInit+0xb8>)
  GCLK->CTRLA.reg = GCLK_CTRLA_SWRST ;
    2b0c:	7022      	strb	r2, [r4, #0]
  while ( (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) && (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK) );	/* Wait for reset to complete */
    2b0e:	7822      	ldrb	r2, [r4, #0]
    2b10:	420a      	tst	r2, r1
    2b12:	d002      	beq.n	2b1a <SystemInit+0x3e>
    2b14:	6862      	ldr	r2, [r4, #4]
    2b16:	421a      	tst	r2, r3
    2b18:	d1f9      	bne.n	2b0e <SystemInit+0x32>
  SYSCTRL->DPLLCTRLA.reg = SYSCTRL_DPLLCTRLA_ENABLE;

  while ( (SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_CLKRDY) != SYSCTRL_DPLLSTATUS_CLKRDY );

#elif (SAML21 || SAMC21)
  OSC32KCTRL->XOSC32K.reg = (OSC32KCTRL_XOSC32K_STARTUP( 0x4u ) | OSC32KCTRL_XOSC32K_XTALEN | OSC32KCTRL_XOSC32K_EN32K | OSC32KCTRL_XOSC32K_EN1K);
    2b1a:	4b1f      	ldr	r3, [pc, #124]	; (2b98 <SystemInit+0xbc>)
    2b1c:	4a1f      	ldr	r2, [pc, #124]	; (2b9c <SystemInit+0xc0>)
    2b1e:	615a      	str	r2, [r3, #20]
  OSC32KCTRL->XOSC32K.bit.ENABLE = 1;
    2b20:	2202      	movs	r2, #2
    2b22:	6959      	ldr	r1, [r3, #20]
    2b24:	430a      	orrs	r2, r1
    2b26:	615a      	str	r2, [r3, #20]

  while ( (OSC32KCTRL->STATUS.reg & OSC32KCTRL_STATUS_XOSC32KRDY) == 0 );       /* Wait for oscillator stabilization */
    2b28:	2201      	movs	r2, #1
    2b2a:	68d9      	ldr	r1, [r3, #12]
    2b2c:	4211      	tst	r1, r2
    2b2e:	d0fc      	beq.n	2b2a <SystemInit+0x4e>

  OSCCTRL->DPLLRATIO.reg = ( OSCCTRL_DPLLRATIO_LDR(DPLLRATIO_LDR) | OSCCTRL_DPLLRATIO_LDRFRAC(DPLLRATIO_LDRFRAC) );  /* set PLL multiplier */
    2b30:	4b1b      	ldr	r3, [pc, #108]	; (2ba0 <SystemInit+0xc4>)
    2b32:	4e1c      	ldr	r6, [pc, #112]	; (2ba4 <SystemInit+0xc8>)
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */

  OSCCTRL->DPLLPRESC.reg = 0;
  waitForPLL();

  OSCCTRL->DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    2b34:	2702      	movs	r7, #2
  OSCCTRL->DPLLRATIO.reg = ( OSCCTRL_DPLLRATIO_LDR(DPLLRATIO_LDR) | OSCCTRL_DPLLRATIO_LDRFRAC(DPLLRATIO_LDRFRAC) );  /* set PLL multiplier */
    2b36:	62f3      	str	r3, [r6, #44]	; 0x2c
  waitForPLL();
    2b38:	f7ff ffc8 	bl	2acc <waitForPLL>
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */
    2b3c:	2300      	movs	r3, #0
  OSCCTRL->DPLLPRESC.reg = 0;
    2b3e:	4a1a      	ldr	r2, [pc, #104]	; (2ba8 <SystemInit+0xcc>)
  OSCCTRL->DPLLCTRLB.reg = OSCCTRL_DPLLCTRLB_REFCLK(0);  /* select 32KHz crystal input */
    2b40:	6333      	str	r3, [r6, #48]	; 0x30
  OSCCTRL->DPLLPRESC.reg = 0;
    2b42:	7013      	strb	r3, [r2, #0]
  waitForPLL();
    2b44:	f7ff ffc2 	bl	2acc <waitForPLL>
  OSCCTRL->DPLLCTRLA.reg = OSCCTRL_DPLLCTRLA_ENABLE;
    2b48:	4b18      	ldr	r3, [pc, #96]	; (2bac <SystemInit+0xd0>)
    2b4a:	701f      	strb	r7, [r3, #0]
  waitForPLL();
    2b4c:	f7ff ffbe 	bl	2acc <waitForPLL>

  while ( (OSCCTRL->DPLLSTATUS.reg & OSCCTRL_DPLLSTATUS_CLKRDY) != OSCCTRL_DPLLSTATUS_CLKRDY );
    2b50:	4a17      	ldr	r2, [pc, #92]	; (2bb0 <SystemInit+0xd4>)
    2b52:	7813      	ldrb	r3, [r2, #0]
    2b54:	423b      	tst	r3, r7
    2b56:	d0fc      	beq.n	2b52 <SystemInit+0x76>
  PM->CPUSEL.reg  = PM_CPUSEL_CPUDIV_DIV1 ;
  PM->APBASEL.reg = PM_APBASEL_APBADIV_DIV1_Val ;
  PM->APBBSEL.reg = PM_APBBSEL_APBBDIV_DIV1_Val ;
  PM->APBCSEL.reg = PM_APBCSEL_APBCDIV_DIV1_Val ;
#elif (SAML21 || SAMC21)
  MCLK->CPUDIV.reg  = MCLK_CPUDIV_CPUDIV_DIV1 ;
    2b58:	2301      	movs	r3, #1
    2b5a:	712b      	strb	r3, [r5, #4]

#elif (SAML21 || SAMC21)
  /* Setup GCLK0 (GENERIC_CLOCK_GENERATOR_MAIN) which is used for the CPU. */
  #if (defined(CLOCKCONFIG_32768HZ_CRYSTAL) || defined(CLOCKCONFIG_HS_CRYSTAL))
    /* Switch Generic Clock Generator 0 to 96MHz PLL output. The output is divided by two to obtain a 48MHz CPU clock. */
    GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_MAIN].reg = ( GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_SRC_DPLL96M | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN );
    2b5c:	4d15      	ldr	r5, [pc, #84]	; (2bb4 <SystemInit+0xd8>)
    2b5e:	6225      	str	r5, [r4, #32]
    waitForSync();
    2b60:	f7ff ffaa 	bl	2ab8 <waitForSync>
  #endif

#elif (SAML21 || SAMC21)
  #if (defined(CLOCKCONFIG_32768HZ_CRYSTAL) || defined(CLOCKCONFIG_HS_CRYSTAL))
    /* Switch GENERIC_CLOCK_GENERATOR_48MHz to 96MHz PLL output. The output is divided by two to obtain 48MHz. */
    GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_48MHz].reg = ( GCLK_GENCTRL_DIV(2) | GCLK_GENCTRL_SRC_DPLL96M | GCLK_GENCTRL_IDC | GCLK_GENCTRL_GENEN );
    2b64:	6325      	str	r5, [r4, #48]	; 0x30
    waitForSync();
    2b66:	f7ff ffa7 	bl	2ab8 <waitForSync>
  waitForSync();

#elif (SAML21)
  /* Note that after reset, the L21 starts with the OSC16M set to 4MHz, NOT the DFLL@48MHz as stated in some documentation. */
  /* Modify FSEL value of OSC16M to have 8MHz */
  OSCCTRL->OSC16MCTRL.bit.FSEL = OSCCTRL_OSC16MCTRL_FSEL_8_Val;
    2b6a:	220c      	movs	r2, #12
    2b6c:	7d33      	ldrb	r3, [r6, #20]
    2b6e:	4393      	bics	r3, r2
    2b70:	001a      	movs	r2, r3
    2b72:	2304      	movs	r3, #4
    2b74:	4313      	orrs	r3, r2
    2b76:	7533      	strb	r3, [r6, #20]

  /* Put OSC16M as source for Generic Clock Generator 3 */
  GCLK->GENCTRL[GENERIC_CLOCK_GENERATOR_OSC_HS].reg = ( GCLK_GENCTRL_DIV(1) | GCLK_GENCTRL_SRC_OSC16M | GCLK_GENCTRL_GENEN );
    2b78:	4b0f      	ldr	r3, [pc, #60]	; (2bb8 <SystemInit+0xdc>)
    2b7a:	62e3      	str	r3, [r4, #44]	; 0x2c
  waitForSync();
    2b7c:	f7ff ff9c 	bl	2ab8 <waitForSync>
#endif
#endif

  SystemCoreClock=VARIANT_MCK;
    2b80:	4a0e      	ldr	r2, [pc, #56]	; (2bbc <SystemInit+0xe0>)
    2b82:	4b0f      	ldr	r3, [pc, #60]	; (2bc0 <SystemInit+0xe4>)
    2b84:	601a      	str	r2, [r3, #0]
}
    2b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2b88:	41004000 	.word	0x41004000
    2b8c:	40000400 	.word	0x40000400
    2b90:	40001800 	.word	0x40001800
    2b94:	000007fd 	.word	0x000007fd
    2b98:	40001000 	.word	0x40001000
    2b9c:	0000041c 	.word	0x0000041c
    2ba0:	00000b71 	.word	0x00000b71
    2ba4:	40000c00 	.word	0x40000c00
    2ba8:	40000c34 	.word	0x40000c34
    2bac:	40000c28 	.word	0x40000c28
    2bb0:	40000c3c 	.word	0x40000c3c
    2bb4:	00020308 	.word	0x00020308
    2bb8:	00010106 	.word	0x00010106
    2bbc:	02dc6c00 	.word	0x02dc6c00
    2bc0:	20000088 	.word	0x20000088

00002bc4 <_ZN4UartcvbEv>:
    void errorHandler();
#else
    void IrqHandler();
#endif

    operator bool() { return true; }
    2bc4:	2001      	movs	r0, #1
    2bc6:	4770      	bx	lr

00002bc8 <_ZN4Uart5beginEm>:
  uc_pinRTS = _pinRTS;
  uc_pinCTS = _pinCTS;
}

void Uart::begin(unsigned long baudrate)
{
    2bc8:	b510      	push	{r4, lr}
  begin(baudrate, SERIAL_8N1);
    2bca:	6803      	ldr	r3, [r0, #0]
    2bcc:	4a01      	ldr	r2, [pc, #4]	; (2bd4 <_ZN4Uart5beginEm+0xc>)
    2bce:	6a1b      	ldr	r3, [r3, #32]
    2bd0:	4798      	blx	r3
}
    2bd2:	bd10      	pop	{r4, pc}
    2bd4:	00000413 	.word	0x00000413

00002bd8 <_ZN4Uart3endEv>:

  sercom->enableUART();
}

void Uart::end()
{
    2bd8:	b510      	push	{r4, lr}
    2bda:	0004      	movs	r4, r0
  sercom->resetUART();
    2bdc:	6900      	ldr	r0, [r0, #16]
    2bde:	f002 fe8e 	bl	58fe <_ZN6SERCOM9resetUARTEv>
  rxBuffer.clear();
    2be2:	0020      	movs	r0, r4
    2be4:	3014      	adds	r0, #20
    2be6:	f002 fe1f 	bl	5828 <_ZN10RingBuffer5clearEv>
  txBuffer.clear();
    2bea:	0020      	movs	r0, r4
    2bec:	305c      	adds	r0, #92	; 0x5c
    2bee:	f002 fe1b 	bl	5828 <_ZN10RingBuffer5clearEv>
}
    2bf2:	bd10      	pop	{r4, pc}

00002bf4 <_ZN4Uart9availableEv>:
  }
}
#endif

int Uart::available()
{
    2bf4:	b510      	push	{r4, lr}
  return rxBuffer.available();
    2bf6:	3014      	adds	r0, #20
    2bf8:	f002 fe2a 	bl	5850 <_ZN10RingBuffer9availableEv>
}
    2bfc:	bd10      	pop	{r4, pc}

00002bfe <_ZN4Uart5flushEv>:
{
    2bfe:	b510      	push	{r4, lr}
    2c00:	0004      	movs	r4, r0
  while(txBuffer.available()); // wait until TX buffer is empty
    2c02:	0020      	movs	r0, r4
    2c04:	305c      	adds	r0, #92	; 0x5c
    2c06:	f002 fe23 	bl	5850 <_ZN10RingBuffer9availableEv>
    2c0a:	2800      	cmp	r0, #0
    2c0c:	d1f9      	bne.n	2c02 <_ZN4Uart5flushEv+0x4>
  sercom->flushUART();
    2c0e:	6920      	ldr	r0, [r4, #16]
    2c10:	f002 fe8a 	bl	5928 <_ZN6SERCOM9flushUARTEv>
}
    2c14:	bd10      	pop	{r4, pc}

00002c16 <_ZN4Uart17availableForWriteEv>:

int Uart::availableForWrite()
{
    2c16:	b510      	push	{r4, lr}
  return txBuffer.availableForStore();
    2c18:	305c      	adds	r0, #92	; 0x5c
    2c1a:	f002 fe1f 	bl	585c <_ZN10RingBuffer17availableForStoreEv>
}
    2c1e:	bd10      	pop	{r4, pc}

00002c20 <_ZN4Uart4readEv>:
{
  return rxBuffer.peek();
}

int Uart::read()
{
    2c20:	b570      	push	{r4, r5, r6, lr}
  int c = rxBuffer.read_char();
    2c22:	0005      	movs	r5, r0
{
    2c24:	0004      	movs	r4, r0
  int c = rxBuffer.read_char();
    2c26:	3514      	adds	r5, #20
    2c28:	0028      	movs	r0, r5
    2c2a:	f002 fe01 	bl	5830 <_ZN10RingBuffer9read_charEv>

  if (uc_pinRTS != NO_RTS_PIN) {
    2c2e:	0023      	movs	r3, r4
    2c30:	33a8      	adds	r3, #168	; 0xa8
    2c32:	781b      	ldrb	r3, [r3, #0]
  int c = rxBuffer.read_char();
    2c34:	0006      	movs	r6, r0
  if (uc_pinRTS != NO_RTS_PIN) {
    2c36:	2bff      	cmp	r3, #255	; 0xff
    2c38:	d00a      	beq.n	2c50 <_ZN4Uart4readEv+0x30>
    // if there is enough space in the RX buffer, assert RTS
    if (rxBuffer.availableForStore() > RTS_RX_THRESHOLD) {
    2c3a:	0028      	movs	r0, r5
    2c3c:	f002 fe0e 	bl	585c <_ZN10RingBuffer17availableForStoreEv>
    2c40:	280a      	cmp	r0, #10
    2c42:	dd05      	ble.n	2c50 <_ZN4Uart4readEv+0x30>
      *pul_outclrRTS = ul_pinMaskRTS;
    2c44:	0023      	movs	r3, r4
    2c46:	34b4      	adds	r4, #180	; 0xb4
    2c48:	33b0      	adds	r3, #176	; 0xb0
    2c4a:	681b      	ldr	r3, [r3, #0]
    2c4c:	6822      	ldr	r2, [r4, #0]
    2c4e:	601a      	str	r2, [r3, #0]
    }
  }

  return c;
}
    2c50:	0030      	movs	r0, r6
    2c52:	bd70      	pop	{r4, r5, r6, pc}

00002c54 <_ZN4Uart4peekEv>:
{
    2c54:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    2c56:	3014      	adds	r0, #20
    2c58:	f002 fe0e 	bl	5878 <_ZN10RingBuffer4peekEv>
}
    2c5c:	bd10      	pop	{r4, pc}
	...

00002c60 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>:
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    2c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2c62:	001d      	movs	r5, r3
    2c64:	ab08      	add	r3, sp, #32
    2c66:	781b      	ldrb	r3, [r3, #0]
    2c68:	0004      	movs	r4, r0
    2c6a:	9300      	str	r3, [sp, #0]
    2c6c:	ab09      	add	r3, sp, #36	; 0x24
    2c6e:	781b      	ldrb	r3, [r3, #0]
    2c70:	0016      	movs	r6, r2
    2c72:	9301      	str	r3, [sp, #4]
    Print() : write_error(0) {}
    2c74:	2300      	movs	r3, #0
    2c76:	6043      	str	r3, [r0, #4]
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2c78:	23fa      	movs	r3, #250	; 0xfa
    2c7a:	009b      	lsls	r3, r3, #2
    2c7c:	6083      	str	r3, [r0, #8]
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    2c7e:	4b0e      	ldr	r3, [pc, #56]	; (2cb8 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad+0x58>)
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX) :
    2c80:	000f      	movs	r7, r1
Uart::Uart(SERCOM *_s, uint8_t _pinRX, uint8_t _pinTX, SercomRXPad _padRX, SercomUartTXPad _padTX, uint8_t _pinRTS, uint8_t _pinCTS)
    2c82:	3308      	adds	r3, #8
    2c84:	6003      	str	r3, [r0, #0]
    2c86:	3014      	adds	r0, #20
    2c88:	f002 fdb8 	bl	57fc <_ZN10RingBufferC1Ev>
    2c8c:	0020      	movs	r0, r4
    2c8e:	305c      	adds	r0, #92	; 0x5c
    2c90:	f002 fdb4 	bl	57fc <_ZN10RingBufferC1Ev>
  uc_padRX = _padRX ;
    2c94:	466a      	mov	r2, sp
  uc_pinRX = _pinRX;
    2c96:	0023      	movs	r3, r4
  uc_padRX = _padRX ;
    2c98:	7812      	ldrb	r2, [r2, #0]
  uc_pinRX = _pinRX;
    2c9a:	33a4      	adds	r3, #164	; 0xa4
  sercom = _s;
    2c9c:	6127      	str	r7, [r4, #16]
  uc_padRX = _padRX ;
    2c9e:	709a      	strb	r2, [r3, #2]
  uc_padTX = _padTX;
    2ca0:	466a      	mov	r2, sp
    2ca2:	7912      	ldrb	r2, [r2, #4]
  uc_pinRX = _pinRX;
    2ca4:	701e      	strb	r6, [r3, #0]
  uc_padTX = _padTX;
    2ca6:	70da      	strb	r2, [r3, #3]
  uc_pinRTS = _pinRTS;
    2ca8:	0022      	movs	r2, r4
  uc_pinTX = _pinTX;
    2caa:	705d      	strb	r5, [r3, #1]
  uc_pinRTS = _pinRTS;
    2cac:	23ff      	movs	r3, #255	; 0xff
    2cae:	32a8      	adds	r2, #168	; 0xa8
}
    2cb0:	0020      	movs	r0, r4
  uc_pinRTS = _pinRTS;
    2cb2:	7013      	strb	r3, [r2, #0]
  uc_pinCTS = _pinCTS;
    2cb4:	7413      	strb	r3, [r2, #16]
}
    2cb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    2cb8:	00010478 	.word	0x00010478

00002cbc <_ZN4Uart10IrqHandlerEv>:
{
    2cbc:	b570      	push	{r4, r5, r6, lr}
    2cbe:	0004      	movs	r4, r0
  if (sercom->availableDataUART()) {
    2cc0:	6900      	ldr	r0, [r0, #16]
    2cc2:	f002 fe3d 	bl	5940 <_ZN6SERCOM17availableDataUARTEv>
    2cc6:	2800      	cmp	r0, #0
    2cc8:	d019      	beq.n	2cfe <_ZN4Uart10IrqHandlerEv+0x42>
    rxBuffer.store_char(sercom->readDataUART());
    2cca:	0025      	movs	r5, r4
    2ccc:	6920      	ldr	r0, [r4, #16]
    2cce:	f002 fe4c 	bl	596a <_ZN6SERCOM12readDataUARTEv>
    2cd2:	3514      	adds	r5, #20
    2cd4:	0001      	movs	r1, r0
    2cd6:	0028      	movs	r0, r5
    2cd8:	f002 fd9b 	bl	5812 <_ZN10RingBuffer10store_charEh>
    if (uc_pinRTS != NO_RTS_PIN) {
    2cdc:	0023      	movs	r3, r4
    2cde:	33a8      	adds	r3, #168	; 0xa8
    2ce0:	781b      	ldrb	r3, [r3, #0]
    2ce2:	2bff      	cmp	r3, #255	; 0xff
    2ce4:	d00b      	beq.n	2cfe <_ZN4Uart10IrqHandlerEv+0x42>
      if (rxBuffer.availableForStore() < RTS_RX_THRESHOLD) {
    2ce6:	0028      	movs	r0, r5
    2ce8:	f002 fdb8 	bl	585c <_ZN10RingBuffer17availableForStoreEv>
    2cec:	2809      	cmp	r0, #9
    2cee:	dc06      	bgt.n	2cfe <_ZN4Uart10IrqHandlerEv+0x42>
        *pul_outsetRTS = ul_pinMaskRTS;
    2cf0:	0023      	movs	r3, r4
    2cf2:	0022      	movs	r2, r4
    2cf4:	33ac      	adds	r3, #172	; 0xac
    2cf6:	32b4      	adds	r2, #180	; 0xb4
    2cf8:	681b      	ldr	r3, [r3, #0]
    2cfa:	6812      	ldr	r2, [r2, #0]
    2cfc:	601a      	str	r2, [r3, #0]
  if (sercom->isDataRegisterEmptyUART()) {
    2cfe:	6920      	ldr	r0, [r4, #16]
    2d00:	f002 fe2e 	bl	5960 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2d04:	2800      	cmp	r0, #0
    2d06:	d00d      	beq.n	2d24 <_ZN4Uart10IrqHandlerEv+0x68>
    if (txBuffer.available()) {
    2d08:	0025      	movs	r5, r4
    2d0a:	355c      	adds	r5, #92	; 0x5c
    2d0c:	0028      	movs	r0, r5
    2d0e:	f002 fd9f 	bl	5850 <_ZN10RingBuffer9availableEv>
    2d12:	2800      	cmp	r0, #0
    2d14:	d012      	beq.n	2d3c <_ZN4Uart10IrqHandlerEv+0x80>
      uint8_t data = txBuffer.read_char();
    2d16:	0028      	movs	r0, r5
    2d18:	f002 fd8a 	bl	5830 <_ZN10RingBuffer9read_charEv>
      sercom->writeDataUART(data);
    2d1c:	b2c1      	uxtb	r1, r0
    2d1e:	6920      	ldr	r0, [r4, #16]
    2d20:	f002 fe27 	bl	5972 <_ZN6SERCOM13writeDataUARTEh>
  if (sercom->isUARTError()) {
    2d24:	6920      	ldr	r0, [r4, #16]
    2d26:	f002 fe10 	bl	594a <_ZN6SERCOM11isUARTErrorEv>
    2d2a:	2800      	cmp	r0, #0
    2d2c:	d005      	beq.n	2d3a <_ZN4Uart10IrqHandlerEv+0x7e>
    sercom->acknowledgeUARTError();
    2d2e:	6920      	ldr	r0, [r4, #16]
    2d30:	f002 fe0f 	bl	5952 <_ZN6SERCOM20acknowledgeUARTErrorEv>
    sercom->clearStatusUART();
    2d34:	6920      	ldr	r0, [r4, #16]
    2d36:	f002 fdff 	bl	5938 <_ZN6SERCOM15clearStatusUARTEv>
}
    2d3a:	bd70      	pop	{r4, r5, r6, pc}
      sercom->disableDataRegisterEmptyInterruptUART();
    2d3c:	6920      	ldr	r0, [r4, #16]
    2d3e:	f002 fe24 	bl	598a <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>
    2d42:	e7ef      	b.n	2d24 <_ZN4Uart10IrqHandlerEv+0x68>

00002d44 <_ZN4Uart5writeEh>:

size_t Uart::write(const uint8_t data)
{
    2d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d46:	0004      	movs	r4, r0
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2d48:	6900      	ldr	r0, [r0, #16]
{
    2d4a:	000e      	movs	r6, r1
    2d4c:	0025      	movs	r5, r4
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2d4e:	f002 fe07 	bl	5960 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2d52:	355c      	adds	r5, #92	; 0x5c
    2d54:	2800      	cmp	r0, #0
    2d56:	d120      	bne.n	2d9a <_ZN4Uart5writeEh+0x56>
    while(txBuffer.isFull()) {
      uint8_t interruptsEnabled = ((__get_PRIMASK() & 0x1) == 0);

      if (interruptsEnabled) {
        //uint32_t exceptionNumber = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk);
        uint32_t exceptionNumber =  (__get_IPSR() & EXCEPTION_NUMBER_MASK);
    2d58:	273f      	movs	r7, #63	; 0x3f
    while(txBuffer.isFull()) {
    2d5a:	0028      	movs	r0, r5
    2d5c:	f002 fd96 	bl	588c <_ZN10RingBuffer6isFullEv>
    2d60:	2800      	cmp	r0, #0
    2d62:	d02d      	beq.n	2dc0 <_ZN4Uart5writeEh+0x7c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d64:	f3ef 8310 	mrs	r3, PRIMASK
      if (interruptsEnabled) {
    2d68:	2201      	movs	r2, #1
    2d6a:	4213      	tst	r3, r2
    2d6c:	d10c      	bne.n	2d88 <_ZN4Uart5writeEh+0x44>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2d6e:	f3ef 8305 	mrs	r3, IPSR
        uint32_t exceptionNumber =  (__get_IPSR() & EXCEPTION_NUMBER_MASK);
    2d72:	403b      	ands	r3, r7

        if (exceptionNumber == 0 ||
    2d74:	d0f1      	beq.n	2d5a <_ZN4Uart5writeEh+0x16>
              NVIC_GetPriority((IRQn_Type)(exceptionNumber - 16)) > SERCOM_NVIC_PRIORITY) {
    2d76:	3b10      	subs	r3, #16
    2d78:	b25b      	sxtb	r3, r3
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{

  if ((int32_t)(IRQn) >= 0)
    2d7a:	2b00      	cmp	r3, #0
    2d7c:	db17      	blt.n	2dae <_ZN4Uart5writeEh+0x6a>
  {
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    2d7e:	089b      	lsrs	r3, r3, #2
    2d80:	33c0      	adds	r3, #192	; 0xc0
    2d82:	4a14      	ldr	r2, [pc, #80]	; (2dd4 <_ZN4Uart5writeEh+0x90>)
    2d84:	009b      	lsls	r3, r3, #2
    2d86:	589b      	ldr	r3, [r3, r2]
        }
      }

      // interrupts are disabled or called from ISR with higher or equal priority than the SERCOM IRQ
      // manually call the UART IRQ handler when the data register is empty
      if (sercom->isDataRegisterEmptyUART()) {
    2d88:	6920      	ldr	r0, [r4, #16]
    2d8a:	f002 fde9 	bl	5960 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>
    2d8e:	2800      	cmp	r0, #0
    2d90:	d0e3      	beq.n	2d5a <_ZN4Uart5writeEh+0x16>
#if (SAMD51)
        dataRegisterEmptyHandler();
#else
        IrqHandler();
    2d92:	0020      	movs	r0, r4
    2d94:	f7ff ff92 	bl	2cbc <_ZN4Uart10IrqHandlerEv>
    2d98:	e7df      	b.n	2d5a <_ZN4Uart5writeEh+0x16>
  if (sercom->isDataRegisterEmptyUART() && txBuffer.available() == 0) {
    2d9a:	0028      	movs	r0, r5
    2d9c:	f002 fd58 	bl	5850 <_ZN10RingBuffer9availableEv>
    2da0:	2800      	cmp	r0, #0
    2da2:	d1d9      	bne.n	2d58 <_ZN4Uart5writeEh+0x14>
    sercom->writeDataUART(data);
    2da4:	0031      	movs	r1, r6
    2da6:	6920      	ldr	r0, [r4, #16]
    2da8:	f002 fde3 	bl	5972 <_ZN6SERCOM13writeDataUARTEh>
    txBuffer.store_char(data);

    sercom->enableDataRegisterEmptyInterruptUART();
  }

  return 1;
    2dac:	e00f      	b.n	2dce <_ZN4Uart5writeEh+0x8a>
  }
  else
  {
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
    2dae:	220f      	movs	r2, #15
    2db0:	4013      	ands	r3, r2
    2db2:	3b08      	subs	r3, #8
    2db4:	089b      	lsrs	r3, r3, #2
    2db6:	4a08      	ldr	r2, [pc, #32]	; (2dd8 <_ZN4Uart5writeEh+0x94>)
    2db8:	009b      	lsls	r3, r3, #2
    2dba:	189b      	adds	r3, r3, r2
    2dbc:	681b      	ldr	r3, [r3, #0]
    2dbe:	e7e3      	b.n	2d88 <_ZN4Uart5writeEh+0x44>
    txBuffer.store_char(data);
    2dc0:	0028      	movs	r0, r5
    2dc2:	0031      	movs	r1, r6
    2dc4:	f002 fd25 	bl	5812 <_ZN10RingBuffer10store_charEh>
    sercom->enableDataRegisterEmptyInterruptUART();
    2dc8:	6920      	ldr	r0, [r4, #16]
    2dca:	f002 fdda 	bl	5982 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>
}
    2dce:	2001      	movs	r0, #1
    2dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dd2:	46c0      	nop			; (mov r8, r8)
    2dd4:	e000e100 	.word	0xe000e100
    2dd8:	e000ed1c 	.word	0xe000ed1c

00002ddc <_ZN4Uart16extractNbStopBitEt>:

SercomNumberStopBit Uart::extractNbStopBit(uint16_t config)
{
  switch(config & HARDSER_STOP_BIT_MASK)
    2ddc:	20f0      	movs	r0, #240	; 0xf0
    2dde:	4001      	ands	r1, r0
  {
    case HARDSER_STOP_BIT_1:
    default:
      return SERCOM_STOP_BIT_1;
    2de0:	3930      	subs	r1, #48	; 0x30
    2de2:	4248      	negs	r0, r1
    2de4:	4148      	adcs	r0, r1

    case HARDSER_STOP_BIT_2:
      return SERCOM_STOP_BITS_2;
  }
}
    2de6:	4770      	bx	lr

00002de8 <_ZN4Uart15extractCharSizeEt>:

SercomUartCharSize Uart::extractCharSize(uint16_t config)
{
  switch(config & HARDSER_DATA_MASK)
    2de8:	23f0      	movs	r3, #240	; 0xf0
    2dea:	011b      	lsls	r3, r3, #4
    2dec:	4019      	ands	r1, r3
    2dee:	2380      	movs	r3, #128	; 0x80
  {
    case HARDSER_DATA_5:
      return UART_CHAR_SIZE_5_BITS;

    case HARDSER_DATA_6:
      return UART_CHAR_SIZE_6_BITS;
    2df0:	2006      	movs	r0, #6
  switch(config & HARDSER_DATA_MASK)
    2df2:	009b      	lsls	r3, r3, #2
    2df4:	4299      	cmp	r1, r3
    2df6:	d00a      	beq.n	2e0e <_ZN4Uart15extractCharSizeEt+0x26>
    2df8:	3301      	adds	r3, #1
    2dfa:	33ff      	adds	r3, #255	; 0xff

    case HARDSER_DATA_7:
      return UART_CHAR_SIZE_7_BITS;
    2dfc:	3001      	adds	r0, #1
  switch(config & HARDSER_DATA_MASK)
    2dfe:	4299      	cmp	r1, r3
    2e00:	d005      	beq.n	2e0e <_ZN4Uart15extractCharSizeEt+0x26>
    2e02:	2380      	movs	r3, #128	; 0x80
      return UART_CHAR_SIZE_5_BITS;
    2e04:	3802      	subs	r0, #2
  switch(config & HARDSER_DATA_MASK)
    2e06:	005b      	lsls	r3, r3, #1
    2e08:	4299      	cmp	r1, r3
    2e0a:	d000      	beq.n	2e0e <_ZN4Uart15extractCharSizeEt+0x26>

    case HARDSER_DATA_8:
    default:
      return UART_CHAR_SIZE_8_BITS;
    2e0c:	2000      	movs	r0, #0

  }
}
    2e0e:	4770      	bx	lr

00002e10 <_ZN4Uart13extractParityEt>:

SercomParityMode Uart::extractParity(uint16_t config)
{
  switch(config & HARDSER_PARITY_MASK)
    2e10:	200f      	movs	r0, #15
    2e12:	4001      	ands	r1, r0
    case HARDSER_PARITY_NONE:
    default:
      return SERCOM_NO_PARITY;

    case HARDSER_PARITY_EVEN:
      return SERCOM_EVEN_PARITY;
    2e14:	2000      	movs	r0, #0
  switch(config & HARDSER_PARITY_MASK)
    2e16:	2901      	cmp	r1, #1
    2e18:	d003      	beq.n	2e22 <_ZN4Uart13extractParityEt+0x12>
      return SERCOM_NO_PARITY;
    2e1a:	3902      	subs	r1, #2
    2e1c:	1e48      	subs	r0, r1, #1
    2e1e:	4181      	sbcs	r1, r0
    2e20:	1c48      	adds	r0, r1, #1

    case HARDSER_PARITY_ODD:
      return SERCOM_ODD_PARITY;
  }
}
    2e22:	4770      	bx	lr

00002e24 <_ZN4Uart5beginEmt>:
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    2e24:	0003      	movs	r3, r0
{
    2e26:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e28:	0004      	movs	r4, r0
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    2e2a:	33a4      	adds	r3, #164	; 0xa4
{
    2e2c:	b085      	sub	sp, #20
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    2e2e:	7818      	ldrb	r0, [r3, #0]
{
    2e30:	000f      	movs	r7, r1
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    2e32:	210e      	movs	r1, #14
{
    2e34:	0015      	movs	r5, r2
  pinPeripheral(uc_pinRX, PIO_SERCOM);
    2e36:	f001 faf1 	bl	441c <pinPeripheral>
  pinPeripheral(uc_pinTX, PIO_SERCOM);
    2e3a:	0023      	movs	r3, r4
    2e3c:	33a5      	adds	r3, #165	; 0xa5
    2e3e:	7818      	ldrb	r0, [r3, #0]
    2e40:	210e      	movs	r1, #14
    2e42:	f001 faeb 	bl	441c <pinPeripheral>
  if (uc_padTX == UART_TX_RTS_CTS_PAD_0_2_3) { 
    2e46:	0023      	movs	r3, r4
    2e48:	33a7      	adds	r3, #167	; 0xa7
    2e4a:	9303      	str	r3, [sp, #12]
    2e4c:	781b      	ldrb	r3, [r3, #0]
    2e4e:	2b02      	cmp	r3, #2
    2e50:	d107      	bne.n	2e62 <_ZN4Uart5beginEmt+0x3e>
    if (uc_pinCTS != NO_CTS_PIN) {
    2e52:	0023      	movs	r3, r4
    2e54:	33b8      	adds	r3, #184	; 0xb8
    2e56:	7818      	ldrb	r0, [r3, #0]
    2e58:	28ff      	cmp	r0, #255	; 0xff
    2e5a:	d002      	beq.n	2e62 <_ZN4Uart5beginEmt+0x3e>
      pinPeripheral(uc_pinCTS, PIO_SERCOM);
    2e5c:	210e      	movs	r1, #14
    2e5e:	f001 fadd 	bl	441c <pinPeripheral>
  if (uc_pinRTS != NO_RTS_PIN) {
    2e62:	0026      	movs	r6, r4
    2e64:	36a8      	adds	r6, #168	; 0xa8
    2e66:	7830      	ldrb	r0, [r6, #0]
    2e68:	28ff      	cmp	r0, #255	; 0xff
    2e6a:	d01a      	beq.n	2ea2 <_ZN4Uart5beginEmt+0x7e>
    pinMode(uc_pinRTS, OUTPUT);
    2e6c:	2101      	movs	r1, #1
    2e6e:	f001 fa67 	bl	4340 <pinMode>
    uint8_t rtsPort = GetPort(uc_pinRTS);
    2e72:	210c      	movs	r1, #12
    2e74:	7833      	ldrb	r3, [r6, #0]
    2e76:	4a1f      	ldr	r2, [pc, #124]	; (2ef4 <_ZN4Uart5beginEmt+0xd0>)
    2e78:	4359      	muls	r1, r3
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2e7a:	0020      	movs	r0, r4
    2e7c:	5c8b      	ldrb	r3, [r1, r2]
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    2e7e:	1852      	adds	r2, r2, r1
    2e80:	7851      	ldrb	r1, [r2, #1]
    2e82:	2201      	movs	r2, #1
    pul_outsetRTS = &PORT->Group[rtsPort].OUTSET.reg;
    2e84:	4e1c      	ldr	r6, [pc, #112]	; (2ef8 <_ZN4Uart5beginEmt+0xd4>)
    2e86:	01db      	lsls	r3, r3, #7
    2e88:	30ac      	adds	r0, #172	; 0xac
    2e8a:	199e      	adds	r6, r3, r6
    2e8c:	6006      	str	r6, [r0, #0]
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    2e8e:	481b      	ldr	r0, [pc, #108]	; (2efc <_ZN4Uart5beginEmt+0xd8>)
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    2e90:	408a      	lsls	r2, r1
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    2e92:	181b      	adds	r3, r3, r0
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    2e94:	0021      	movs	r1, r4
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    2e96:	0020      	movs	r0, r4
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    2e98:	31b4      	adds	r1, #180	; 0xb4
    pul_outclrRTS = &PORT->Group[rtsPort].OUTCLR.reg;
    2e9a:	30b0      	adds	r0, #176	; 0xb0
    2e9c:	6003      	str	r3, [r0, #0]
    ul_pinMaskRTS = (1ul << GetPin(uc_pinRTS));
    2e9e:	600a      	str	r2, [r1, #0]
    *pul_outclrRTS = ul_pinMaskRTS;
    2ea0:	601a      	str	r2, [r3, #0]
  sercom->initUART(UART_INT_CLOCK, SAMPLE_RATE_x16, baudrate);
    2ea2:	2201      	movs	r2, #1
    2ea4:	003b      	movs	r3, r7
    2ea6:	0011      	movs	r1, r2
    2ea8:	6920      	ldr	r0, [r4, #16]
    2eaa:	f002 fe7d 	bl	5ba8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>
  sercom->initFrame(extractCharSize(config), LSB_FIRST, extractParity(config), extractNbStopBit(config));
    2eae:	0029      	movs	r1, r5
    2eb0:	0020      	movs	r0, r4
    2eb2:	f7ff ff99 	bl	2de8 <_ZN4Uart15extractCharSizeEt>
    2eb6:	0029      	movs	r1, r5
    2eb8:	0006      	movs	r6, r0
    2eba:	0020      	movs	r0, r4
    2ebc:	f7ff ffa8 	bl	2e10 <_ZN4Uart13extractParityEt>
    2ec0:	0029      	movs	r1, r5
    2ec2:	0007      	movs	r7, r0
    2ec4:	0020      	movs	r0, r4
    2ec6:	f7ff ff89 	bl	2ddc <_ZN4Uart16extractNbStopBitEt>
    2eca:	003b      	movs	r3, r7
    2ecc:	9000      	str	r0, [sp, #0]
    2ece:	0031      	movs	r1, r6
    2ed0:	6920      	ldr	r0, [r4, #16]
    2ed2:	2201      	movs	r2, #1
    2ed4:	f002 fce7 	bl	58a6 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>
  sercom->initPads(uc_padTX, uc_padRX);
    2ed8:	0023      	movs	r3, r4
    2eda:	33a6      	adds	r3, #166	; 0xa6
    2edc:	781a      	ldrb	r2, [r3, #0]
    2ede:	9b03      	ldr	r3, [sp, #12]
    2ee0:	6920      	ldr	r0, [r4, #16]
    2ee2:	7819      	ldrb	r1, [r3, #0]
    2ee4:	f002 fcf9 	bl	58da <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>
  sercom->enableUART();
    2ee8:	6920      	ldr	r0, [r4, #16]
    2eea:	f002 fd14 	bl	5916 <_ZN6SERCOM10enableUARTEv>
}
    2eee:	b005      	add	sp, #20
    2ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2ef2:	46c0      	nop			; (mov r8, r8)
    2ef4:	000107a0 	.word	0x000107a0
    2ef8:	40002818 	.word	0x40002818
    2efc:	40002814 	.word	0x40002814

00002f00 <_ZN7Serial_17availableForWriteEv>:
int Serial_::availableForWrite(void)
{
	// return the number of bytes left in the current bank,
	// always EP size - 1, because bank is flushed on every write
	return (EPX_SIZE - 1);
}
    2f00:	203f      	movs	r0, #63	; 0x3f
    2f02:	4770      	bx	lr

00002f04 <_ZN7Serial_5writeEh>:
		setWriteError();
		return 0;
	}
}

size_t Serial_::write(uint8_t c) {
    2f04:	b513      	push	{r0, r1, r4, lr}
    2f06:	466b      	mov	r3, sp
	return write(&c, 1);
    2f08:	6802      	ldr	r2, [r0, #0]
size_t Serial_::write(uint8_t c) {
    2f0a:	71d9      	strb	r1, [r3, #7]
    2f0c:	3307      	adds	r3, #7
	return write(&c, 1);
    2f0e:	6854      	ldr	r4, [r2, #4]
    2f10:	0019      	movs	r1, r3
    2f12:	2201      	movs	r2, #1
    2f14:	47a0      	blx	r4
}
    2f16:	bd16      	pop	{r1, r2, r4, pc}

00002f18 <_ZN7Serial_9availableEv>:
{
    2f18:	b510      	push	{r4, lr}
	return usb.available(CDC_ENDPOINT_OUT);
    2f1a:	2102      	movs	r1, #2
    2f1c:	6900      	ldr	r0, [r0, #16]
    2f1e:	f000 fc31 	bl	3784 <_ZN14USBDeviceClass9availableEm>
}
    2f22:	bd10      	pop	{r4, pc}

00002f24 <_ZN7Serial_5flushEv>:
{
    2f24:	b510      	push	{r4, lr}
	usb.flush(CDC_ENDPOINT_IN);
    2f26:	2103      	movs	r1, #3
    2f28:	6900      	ldr	r0, [r0, #16]
    2f2a:	f000 fc41 	bl	37b0 <_ZN14USBDeviceClass5flushEm>
}
    2f2e:	bd10      	pop	{r4, pc}

00002f30 <_ZN7Serial_5writeEPKhj>:
{
    2f30:	b510      	push	{r4, lr}
    2f32:	0013      	movs	r3, r2
    2f34:	0004      	movs	r4, r0
	uint32_t r = usb.send(CDC_ENDPOINT_IN, buffer, size);
    2f36:	000a      	movs	r2, r1
    2f38:	6900      	ldr	r0, [r0, #16]
    2f3a:	2103      	movs	r1, #3
    2f3c:	f000 fd32 	bl	39a4 <_ZN14USBDeviceClass4sendEmPKvm>
	if (r > 0) {
    2f40:	2800      	cmp	r0, #0
    2f42:	d101      	bne.n	2f48 <_ZN7Serial_5writeEPKhj+0x18>
    void setWriteError(int err = 1) { write_error = err; }
    2f44:	2301      	movs	r3, #1
    2f46:	6063      	str	r3, [r4, #4]
}
    2f48:	bd10      	pop	{r4, pc}
	...

00002f4c <_ZN7Serial_4peekEv>:
{
    2f4c:	b510      	push	{r4, lr}
	if (_serialPeek != -1)
    2f4e:	4c05      	ldr	r4, [pc, #20]	; (2f64 <_ZN7Serial_4peekEv+0x18>)
    2f50:	6823      	ldr	r3, [r4, #0]
    2f52:	1c5a      	adds	r2, r3, #1
    2f54:	d104      	bne.n	2f60 <_ZN7Serial_4peekEv+0x14>
	_serialPeek = read();
    2f56:	6803      	ldr	r3, [r0, #0]
    2f58:	695b      	ldr	r3, [r3, #20]
    2f5a:	4798      	blx	r3
    2f5c:	0003      	movs	r3, r0
    2f5e:	6020      	str	r0, [r4, #0]
}
    2f60:	0018      	movs	r0, r3
    2f62:	bd10      	pop	{r4, pc}
    2f64:	2000005c 	.word	0x2000005c

00002f68 <_ZN7Serial_4readEv>:
	if (_serialPeek != -1) {
    2f68:	4b07      	ldr	r3, [pc, #28]	; (2f88 <_ZN7Serial_4readEv+0x20>)
{
    2f6a:	0002      	movs	r2, r0
	if (_serialPeek != -1) {
    2f6c:	6818      	ldr	r0, [r3, #0]
{
    2f6e:	b510      	push	{r4, lr}
	if (_serialPeek != -1) {
    2f70:	1c41      	adds	r1, r0, #1
    2f72:	d003      	beq.n	2f7c <_ZN7Serial_4readEv+0x14>
		_serialPeek = -1;
    2f74:	2201      	movs	r2, #1
    2f76:	4252      	negs	r2, r2
    2f78:	601a      	str	r2, [r3, #0]
}
    2f7a:	bd10      	pop	{r4, pc}
	return usb.recv(CDC_ENDPOINT_OUT);
    2f7c:	2102      	movs	r1, #2
    2f7e:	6910      	ldr	r0, [r2, #16]
    2f80:	f000 fd02 	bl	3988 <_ZN14USBDeviceClass4recvEm>
    2f84:	e7f9      	b.n	2f7a <_ZN7Serial_4readEv+0x12>
    2f86:	46c0      	nop			; (mov r8, r8)
    2f88:	2000005c 	.word	0x2000005c

00002f8c <_Z16CDC_GetInterfacePh>:
{
    2f8c:	b510      	push	{r4, lr}
	interfaceNum[0] += 2;	// uses 2
    2f8e:	7803      	ldrb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    2f90:	223a      	movs	r2, #58	; 0x3a
	interfaceNum[0] += 2;	// uses 2
    2f92:	3302      	adds	r3, #2
    2f94:	7003      	strb	r3, [r0, #0]
	return USBDevice.sendControl(&_cdcInterface,sizeof(_cdcInterface));
    2f96:	4902      	ldr	r1, [pc, #8]	; (2fa0 <_Z16CDC_GetInterfacePh+0x14>)
    2f98:	4802      	ldr	r0, [pc, #8]	; (2fa4 <_Z16CDC_GetInterfacePh+0x18>)
    2f9a:	f000 fdaf 	bl	3afc <_ZN14USBDeviceClass11sendControlEPKvm>
}
    2f9e:	bd10      	pop	{r4, pc}
    2fa0:	20000020 	.word	0x20000020
    2fa4:	20000578 	.word	0x20000578

00002fa8 <_Z9CDC_SetupR8USBSetup>:
{
    2fa8:	b510      	push	{r4, lr}
	uint8_t requestType = setup.bmRequestType;
    2faa:	7801      	ldrb	r1, [r0, #0]
{
    2fac:	0003      	movs	r3, r0
	uint8_t r = setup.bRequest;
    2fae:	7842      	ldrb	r2, [r0, #1]
	return false;
    2fb0:	2000      	movs	r0, #0
	if (requestType == REQUEST_DEVICETOHOST_CLASS_INTERFACE)
    2fb2:	29a1      	cmp	r1, #161	; 0xa1
    2fb4:	d108      	bne.n	2fc8 <_Z9CDC_SetupR8USBSetup+0x20>
		if (r == CDC_GET_LINE_CODING)
    2fb6:	2a21      	cmp	r2, #33	; 0x21
    2fb8:	d105      	bne.n	2fc6 <_Z9CDC_SetupR8USBSetup+0x1e>
			USBDevice.sendControl((void*)&_usbLineInfo, 7);
    2fba:	3a1a      	subs	r2, #26
    2fbc:	4916      	ldr	r1, [pc, #88]	; (3018 <_Z9CDC_SetupR8USBSetup+0x70>)
    2fbe:	4817      	ldr	r0, [pc, #92]	; (301c <_Z9CDC_SetupR8USBSetup+0x74>)
    2fc0:	f000 fd9c 	bl	3afc <_ZN14USBDeviceClass11sendControlEPKvm>
			return true;
    2fc4:	2001      	movs	r0, #1
}
    2fc6:	bd10      	pop	{r4, pc}
	if (requestType == REQUEST_HOSTTODEVICE_CLASS_INTERFACE)
    2fc8:	2921      	cmp	r1, #33	; 0x21
    2fca:	d1fc      	bne.n	2fc6 <_Z9CDC_SetupR8USBSetup+0x1e>
		if (r == CDC_SET_LINE_CODING)
    2fcc:	2a20      	cmp	r2, #32
    2fce:	d111      	bne.n	2ff4 <_Z9CDC_SetupR8USBSetup+0x4c>
			USBDevice.recvControl((void*)&_usbLineInfo, 7);
    2fd0:	3a19      	subs	r2, #25
    2fd2:	4911      	ldr	r1, [pc, #68]	; (3018 <_Z9CDC_SetupR8USBSetup+0x70>)
    2fd4:	4811      	ldr	r0, [pc, #68]	; (301c <_Z9CDC_SetupR8USBSetup+0x74>)
    2fd6:	f000 fc2f 	bl	3838 <_ZN14USBDeviceClass11recvControlEPvm>
			if (_usbLineInfo.dwDTERate == 1200 && (_usbLineInfo.lineState & 0x01) == 0)
    2fda:	2296      	movs	r2, #150	; 0x96
    2fdc:	4b0e      	ldr	r3, [pc, #56]	; (3018 <_Z9CDC_SetupR8USBSetup+0x70>)
    2fde:	00d2      	lsls	r2, r2, #3
    2fe0:	6819      	ldr	r1, [r3, #0]
    2fe2:	4291      	cmp	r1, r2
    2fe4:	d103      	bne.n	2fee <_Z9CDC_SetupR8USBSetup+0x46>
    2fe6:	2401      	movs	r4, #1
    2fe8:	79d8      	ldrb	r0, [r3, #7]
    2fea:	4004      	ands	r4, r0
    2fec:	d00e      	beq.n	300c <_Z9CDC_SetupR8USBSetup+0x64>
				cancelReset();
    2fee:	f7ff fd4b 	bl	2a88 <cancelReset>
    2ff2:	e00e      	b.n	3012 <_Z9CDC_SetupR8USBSetup+0x6a>
		if (r == CDC_SET_CONTROL_LINE_STATE)
    2ff4:	2a22      	cmp	r2, #34	; 0x22
    2ff6:	d103      	bne.n	3000 <_Z9CDC_SetupR8USBSetup+0x58>
			_usbLineInfo.lineState = setup.wValueL;
    2ff8:	789a      	ldrb	r2, [r3, #2]
    2ffa:	4b07      	ldr	r3, [pc, #28]	; (3018 <_Z9CDC_SetupR8USBSetup+0x70>)
    2ffc:	71da      	strb	r2, [r3, #7]
    2ffe:	e7ec      	b.n	2fda <_Z9CDC_SetupR8USBSetup+0x32>
		if (CDC_SEND_BREAK == r)
    3000:	2a23      	cmp	r2, #35	; 0x23
    3002:	d1e0      	bne.n	2fc6 <_Z9CDC_SetupR8USBSetup+0x1e>
			breakValue = ((uint16_t)setup.wValueH << 8) | setup.wValueL;
    3004:	885a      	ldrh	r2, [r3, #2]
    3006:	4b06      	ldr	r3, [pc, #24]	; (3020 <_Z9CDC_SetupR8USBSetup+0x78>)
    3008:	601a      	str	r2, [r3, #0]
			return false;
    300a:	e7dc      	b.n	2fc6 <_Z9CDC_SetupR8USBSetup+0x1e>
				initiateReset(250);
    300c:	20fa      	movs	r0, #250	; 0xfa
    300e:	f7ff fd35 	bl	2a7c <initiateReset>
			return false;
    3012:	2000      	movs	r0, #0
    3014:	e7d7      	b.n	2fc6 <_Z9CDC_SetupR8USBSetup+0x1e>
    3016:	46c0      	nop			; (mov r8, r8)
    3018:	20000018 	.word	0x20000018
    301c:	20000578 	.word	0x20000578
    3020:	20000014 	.word	0x20000014

00003024 <_ZN7Serial_5beginEm>:
}
    3024:	4770      	bx	lr
	...

00003028 <_ZN7Serial_cvbEv>:
// setup() before printing to ensure that an application on the host is
// actually ready to receive and display the data.
// We add a short delay before returning to fix a bug observed by Federico
// where the port is configured (lineState != 0) but not quite opened.
Serial_::operator bool()
{
    3028:	b510      	push	{r4, lr}
	// this is here to avoid spurious opening after upload
	if (millis() < 500)
    302a:	f7ff fbdd 	bl	27e8 <millis>
    302e:	23f4      	movs	r3, #244	; 0xf4
    3030:	33ff      	adds	r3, #255	; 0xff
		return false;
    3032:	2400      	movs	r4, #0
	if (millis() < 500)
    3034:	4298      	cmp	r0, r3
    3036:	d907      	bls.n	3048 <_ZN7Serial_cvbEv+0x20>

	bool result = false;

	if (_usbLineInfo.lineState > 0)
    3038:	4b04      	ldr	r3, [pc, #16]	; (304c <_ZN7Serial_cvbEv+0x24>)
	{
		result = true;
	}

	delay(10);
    303a:	200a      	movs	r0, #10
	if (_usbLineInfo.lineState > 0)
    303c:	79dc      	ldrb	r4, [r3, #7]
    303e:	1e63      	subs	r3, r4, #1
    3040:	419c      	sbcs	r4, r3
    3042:	b2e4      	uxtb	r4, r4
	delay(10);
    3044:	f7ff fc06 	bl	2854 <delay>
	return result;
}
    3048:	0020      	movs	r0, r4
    304a:	bd10      	pop	{r4, pc}
    304c:	20000018 	.word	0x20000018

00003050 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev>:
    3050:	22fa      	movs	r2, #250	; 0xfa
    Print() : write_error(0) {}
    3052:	2100      	movs	r1, #0
    3054:	4b05      	ldr	r3, [pc, #20]	; (306c <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x1c>)
    3056:	0092      	lsls	r2, r2, #2
    3058:	609a      	str	r2, [r3, #8]
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
public:
	Serial_(USBDeviceClass &_usb) : usb(_usb), stalled(false) { }
    305a:	4a05      	ldr	r2, [pc, #20]	; (3070 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x20>)
    305c:	6059      	str	r1, [r3, #4]
    305e:	3208      	adds	r2, #8
    3060:	601a      	str	r2, [r3, #0]
    3062:	4a04      	ldr	r2, [pc, #16]	; (3074 <_GLOBAL__sub_I__Z17_CDC_GetInterfacev+0x24>)
    3064:	7619      	strb	r1, [r3, #24]
    3066:	611a      	str	r2, [r3, #16]

bool Serial_::rts() {
	return _usbLineInfo.lineState & 0x2;
}

Serial_ SerialUSB(USBDevice);
    3068:	4770      	bx	lr
    306a:	46c0      	nop			; (mov r8, r8)
    306c:	2000055c 	.word	0x2000055c
    3070:	000104ac 	.word	0x000104ac
    3074:	20000578 	.word	0x20000578

00003078 <_ZL5utox8mPc>:
	packMessages(false);

	return true;
}

static void utox8(uint32_t val, char* s) {
    3078:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < 8; i++) {
		int d = val & 0XF;
    307a:	250f      	movs	r5, #15
    307c:	1dcb      	adds	r3, r1, #7
    307e:	3901      	subs	r1, #1
    3080:	0002      	movs	r2, r0
    3082:	402a      	ands	r2, r5
		val = (val >> 4);

		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3084:	0014      	movs	r4, r2
		val = (val >> 4);
    3086:	0900      	lsrs	r0, r0, #4
		s[7 - i] = d > 9 ? 'A' + d - 10 : '0' + d;
    3088:	3430      	adds	r4, #48	; 0x30
    308a:	2a09      	cmp	r2, #9
    308c:	dd01      	ble.n	3092 <_ZL5utox8mPc+0x1a>
    308e:	3237      	adds	r2, #55	; 0x37
    3090:	0014      	movs	r4, r2
    3092:	701c      	strb	r4, [r3, #0]
    3094:	3b01      	subs	r3, #1
	for (int i = 0; i < 8; i++) {
    3096:	428b      	cmp	r3, r1
    3098:	d1f2      	bne.n	3080 <_ZL5utox8mPc+0x8>
	}
}
    309a:	bd30      	pop	{r4, r5, pc}

0000309c <_ZN14USBDeviceClass6initEPEmm.part.5>:
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
		initEP(i, EndPoints[i]);
	}
}

void USBDeviceClass::initEP(uint32_t ep, uint32_t config)
    309c:	b570      	push	{r4, r5, r6, lr}
	{
		if (epHandlers[ep] == NULL) {
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
		}
	}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_IN(0)))
    309e:	2982      	cmp	r1, #130	; 0x82
    30a0:	d11f      	bne.n	30e2 <_ZN14USBDeviceClass6initEPEmm.part.5+0x46>
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }

	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    30a2:	b2c3      	uxtb	r3, r0
    30a4:	4d2c      	ldr	r5, [pc, #176]	; (3158 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    30a6:	015a      	lsls	r2, r3, #5
    30a8:	18aa      	adds	r2, r5, r2
    30aa:	6991      	ldr	r1, [r2, #24]
    30ac:	4c2b      	ldr	r4, [pc, #172]	; (315c <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
	{
		usbd.epBank1SetSize(ep, 64);
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    30ae:	0180      	lsls	r0, r0, #6
    30b0:	400c      	ands	r4, r1
    30b2:	21c0      	movs	r1, #192	; 0xc0
    30b4:	0589      	lsls	r1, r1, #22
    30b6:	4321      	orrs	r1, r4
    30b8:	6191      	str	r1, [r2, #24]
    30ba:	4929      	ldr	r1, [pc, #164]	; (3160 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    30bc:	3308      	adds	r3, #8
    30be:	1808      	adds	r0, r1, r0
    30c0:	2180      	movs	r1, #128	; 0x80
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    30c2:	6150      	str	r0, [r2, #20]
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    30c4:	682a      	ldr	r2, [r5, #0]
    30c6:	015b      	lsls	r3, r3, #5
    30c8:	18d0      	adds	r0, r2, r3
    30ca:	7904      	ldrb	r4, [r0, #4]
    30cc:	4249      	negs	r1, r1
    30ce:	4321      	orrs	r1, r4
    30d0:	7101      	strb	r1, [r0, #4]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    30d2:	2070      	movs	r0, #112	; 0x70
    30d4:	5c99      	ldrb	r1, [r3, r2]
    30d6:	4381      	bics	r1, r0
    30d8:	0008      	movs	r0, r1
    30da:	2130      	movs	r1, #48	; 0x30
    30dc:	4301      	orrs	r1, r0
    30de:	5499      	strb	r1, [r3, r2]
		usbd.epBank0SetByteCount(ep, 0);

		// NAK on endpoint OUT, the bank is full.
		usbd.epBank0SetReady(ep);
	}
}
    30e0:	bd70      	pop	{r4, r5, r6, pc}
	else if (config == USB_ENDPOINT_TYPE_CONTROL)
    30e2:	2900      	cmp	r1, #0
    30e4:	d1fc      	bne.n	30e0 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    30e6:	24c0      	movs	r4, #192	; 0xc0
    30e8:	b2c1      	uxtb	r1, r0
    30ea:	4e1b      	ldr	r6, [pc, #108]	; (3158 <_ZN14USBDeviceClass6initEPEmm.part.5+0xbc>)
    30ec:	014b      	lsls	r3, r1, #5
    30ee:	18f3      	adds	r3, r6, r3
    30f0:	689a      	ldr	r2, [r3, #8]
    30f2:	4d1a      	ldr	r5, [pc, #104]	; (315c <_ZN14USBDeviceClass6initEPEmm.part.5+0xc0>)
    30f4:	05a4      	lsls	r4, r4, #22
    30f6:	402a      	ands	r2, r5
    30f8:	4322      	orrs	r2, r4
    30fa:	609a      	str	r2, [r3, #8]
		usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    30fc:	4a19      	ldr	r2, [pc, #100]	; (3164 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc8>)
    30fe:	0180      	lsls	r0, r0, #6
    3100:	1810      	adds	r0, r2, r0
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    3102:	000a      	movs	r2, r1
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    3104:	6058      	str	r0, [r3, #4]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    3106:	6830      	ldr	r0, [r6, #0]
    3108:	2607      	movs	r6, #7
    310a:	3208      	adds	r2, #8
    310c:	0152      	lsls	r2, r2, #5
    310e:	5c11      	ldrb	r1, [r2, r0]
    3110:	43b1      	bics	r1, r6
    3112:	000e      	movs	r6, r1
    3114:	2101      	movs	r1, #1
    3116:	4331      	orrs	r1, r6
    3118:	5411      	strb	r1, [r2, r0]
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    311a:	6999      	ldr	r1, [r3, #24]
    311c:	400d      	ands	r5, r1
    311e:	432c      	orrs	r4, r5
    3120:	619c      	str	r4, [r3, #24]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    3122:	2470      	movs	r4, #112	; 0x70
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3124:	490e      	ldr	r1, [pc, #56]	; (3160 <_ZN14USBDeviceClass6initEPEmm.part.5+0xc4>)
    3126:	6159      	str	r1, [r3, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    3128:	5c11      	ldrb	r1, [r2, r0]
    312a:	43a1      	bics	r1, r4
    312c:	000c      	movs	r4, r1
    312e:	2110      	movs	r1, #16
    3130:	4321      	orrs	r1, r4
    3132:	5411      	strb	r1, [r2, r0]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3134:	6899      	ldr	r1, [r3, #8]
    3136:	4c0c      	ldr	r4, [pc, #48]	; (3168 <_ZN14USBDeviceClass6initEPEmm.part.5+0xcc>)
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    3138:	1882      	adds	r2, r0, r2
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    313a:	400c      	ands	r4, r1
    313c:	2180      	movs	r1, #128	; 0x80
    313e:	0349      	lsls	r1, r1, #13
    3140:	4321      	orrs	r1, r4
    3142:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    3144:	6899      	ldr	r1, [r3, #8]
    3146:	0b89      	lsrs	r1, r1, #14
    3148:	0389      	lsls	r1, r1, #14
    314a:	6099      	str	r1, [r3, #8]
	inline void epBank0SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK0RDY = 1; }
    314c:	2340      	movs	r3, #64	; 0x40
    314e:	7951      	ldrb	r1, [r2, #5]
    3150:	430b      	orrs	r3, r1
    3152:	7153      	strb	r3, [r2, #5]
    3154:	e7c4      	b.n	30e0 <_ZN14USBDeviceClass6initEPEmm.part.5+0x44>
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	20000a30 	.word	0x20000a30
    315c:	8fffffff 	.word	0x8fffffff
    3160:	200005a4 	.word	0x200005a4
    3164:	20000764 	.word	0x20000764
    3168:	f0003fff 	.word	0xf0003fff

0000316c <_ZN20USBDevice_SAMD21G18x5resetEv>:

	// Endpoints descriptors table
	__attribute__((__aligned__(4)))	UsbDeviceDescriptor EP[USB_EPT_NUM];
};

void USBDevice_SAMD21G18x::reset() {
    316c:	b570      	push	{r4, r5, r6, lr}
	usb.CTRLA.bit.SWRST = 1;
    316e:	0004      	movs	r4, r0
    3170:	2301      	movs	r3, #1
    3172:	cc20      	ldmia	r4!, {r5}
	memset(EP, 0, sizeof(EP));
    3174:	2100      	movs	r1, #0
	usb.CTRLA.bit.SWRST = 1;
    3176:	782a      	ldrb	r2, [r5, #0]
	memset(EP, 0, sizeof(EP));
    3178:	0020      	movs	r0, r4
	usb.CTRLA.bit.SWRST = 1;
    317a:	4313      	orrs	r3, r2
	memset(EP, 0, sizeof(EP));
    317c:	2280      	movs	r2, #128	; 0x80
	usb.CTRLA.bit.SWRST = 1;
    317e:	702b      	strb	r3, [r5, #0]
	memset(EP, 0, sizeof(EP));
    3180:	0052      	lsls	r2, r2, #1
    3182:	f009 f807 	bl	c194 <memset>
	while (usb.SYNCBUSY.bit.SWRST) {}
    3186:	78ab      	ldrb	r3, [r5, #2]
    3188:	07db      	lsls	r3, r3, #31
    318a:	d4fc      	bmi.n	3186 <_ZN20USBDevice_SAMD21G18x5resetEv+0x1a>
	usb.DESCADD.reg = (uint32_t)(&EP);
    318c:	626c      	str	r4, [r5, #36]	; 0x24
}
    318e:	bd70      	pop	{r4, r5, r6, pc}

00003190 <_ZN20USBDevice_SAMD21G18x9calibrateEv>:
	// Load Pad Calibration data from non-volatile memory
	uint32_t *pad_transn_p = (uint32_t *) USB_FUSES_TRANSN_ADDR;
	uint32_t *pad_transp_p = (uint32_t *) USB_FUSES_TRANSP_ADDR;
	uint32_t *pad_trim_p   = (uint32_t *) USB_FUSES_TRIM_ADDR;

	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    3190:	221f      	movs	r2, #31
    3192:	4b14      	ldr	r3, [pc, #80]	; (31e4 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x54>)
void USBDevice_SAMD21G18x::calibrate() {
    3194:	b570      	push	{r4, r5, r6, lr}
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    3196:	681b      	ldr	r3, [r3, #0]
    3198:	0b59      	lsrs	r1, r3, #13
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    319a:	0c9c      	lsrs	r4, r3, #18
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    319c:	019b      	lsls	r3, r3, #6
	uint32_t pad_transn = (*pad_transn_p & USB_FUSES_TRANSN_Msk) >> USB_FUSES_TRANSN_Pos;
    319e:	4011      	ands	r1, r2
	uint32_t pad_trim   = (*pad_trim_p   & USB_FUSES_TRIM_Msk  ) >> USB_FUSES_TRIM_Pos;
    31a0:	0f5b      	lsrs	r3, r3, #29
	uint32_t pad_transp = (*pad_transp_p & USB_FUSES_TRANSP_Msk) >> USB_FUSES_TRANSP_Pos;
    31a2:	4022      	ands	r2, r4

	if (pad_transn == 0x1F)  // maximum value (31)
    31a4:	291f      	cmp	r1, #31
    31a6:	d100      	bne.n	31aa <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x1a>
		pad_transn = 5;
    31a8:	391a      	subs	r1, #26
	if (pad_transp == 0x1F)  // maximum value (31)
    31aa:	2a1f      	cmp	r2, #31
    31ac:	d100      	bne.n	31b0 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x20>
		pad_transp = 29;
    31ae:	3a02      	subs	r2, #2
	if (pad_trim == 0x7)     // maximum value (7)
    31b0:	2b07      	cmp	r3, #7
    31b2:	d100      	bne.n	31b6 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x26>
		pad_trim = 3;
    31b4:	3b04      	subs	r3, #4

	usb.PADCAL.bit.TRANSN = pad_transn;
    31b6:	251f      	movs	r5, #31
    31b8:	6800      	ldr	r0, [r0, #0]
    31ba:	018e      	lsls	r6, r1, #6
    31bc:	8d04      	ldrh	r4, [r0, #40]	; 0x28
    31be:	490a      	ldr	r1, [pc, #40]	; (31e8 <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x58>)
	usb.PADCAL.bit.TRANSP = pad_transp;
    31c0:	402a      	ands	r2, r5
	usb.PADCAL.bit.TRANSN = pad_transn;
    31c2:	4021      	ands	r1, r4
    31c4:	4331      	orrs	r1, r6
    31c6:	8501      	strh	r1, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRANSP = pad_transp;
    31c8:	8d01      	ldrh	r1, [r0, #40]	; 0x28
    31ca:	0014      	movs	r4, r2
    31cc:	000a      	movs	r2, r1
    31ce:	43aa      	bics	r2, r5
    31d0:	4322      	orrs	r2, r4
    31d2:	8502      	strh	r2, [r0, #40]	; 0x28
	usb.PADCAL.bit.TRIM   = pad_trim;
    31d4:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    31d6:	0319      	lsls	r1, r3, #12
    31d8:	4b04      	ldr	r3, [pc, #16]	; (31ec <_ZN20USBDevice_SAMD21G18x9calibrateEv+0x5c>)
    31da:	4013      	ands	r3, r2
    31dc:	430b      	orrs	r3, r1
    31de:	8503      	strh	r3, [r0, #40]	; 0x28
}
    31e0:	bd70      	pop	{r4, r5, r6, pc}
    31e2:	46c0      	nop			; (mov r8, r8)
    31e4:	00806020 	.word	0x00806020
    31e8:	fffff83f 	.word	0xfffff83f
    31ec:	ffff8fff 	.word	0xffff8fff

000031f0 <_ZN7__GuardC1Ev>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    31f0:	f3ef 8310 	mrs	r3, PRIMASK
 * TODO: Move into a separate header file and make an API out of it
 */

class __Guard {
public:
	__Guard() : primask(__get_PRIMASK()), loops(1) {
    31f4:	6003      	str	r3, [r0, #0]
    31f6:	2301      	movs	r3, #1
    31f8:	6043      	str	r3, [r0, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    31fa:	b672      	cpsid	i
		__disable_irq();
	}
    31fc:	4770      	bx	lr

000031fe <_ZN7__GuardD1Ev>:
	~__Guard() {
		if (primask == 0) {
    31fe:	6803      	ldr	r3, [r0, #0]
    3200:	2b00      	cmp	r3, #0
    3202:	d102      	bne.n	320a <_ZN7__GuardD1Ev+0xc>
  __ASM volatile ("cpsie i" : : : "memory");
    3204:	b662      	cpsie	i
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__attribute__((always_inline)) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
    3206:	f3bf 8f6f 	isb	sy
			__enable_irq();
			// http://infocenter.arm.com/help/topic/com.arm.doc.dai0321a/BIHBFEIB.html
			__ISB();
		}
	}
    320a:	4770      	bx	lr

0000320c <_ZNK26DoubleBufferedEPOutHandler9availableEv>:
			release();
		}
	}

	// Returns how many bytes are stored in the buffers
	virtual uint32_t available() const {
    320c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		if (current == 0) {
    320e:	6905      	ldr	r5, [r0, #16]
	virtual uint32_t available() const {
    3210:	0004      	movs	r4, r0
			bool ready = false;
			synchronized {
    3212:	4668      	mov	r0, sp
		if (current == 0) {
    3214:	2d00      	cmp	r5, #0
    3216:	d114      	bne.n	3242 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x36>
			synchronized {
    3218:	f7ff ffea 	bl	31f0 <_ZN7__GuardC1Ev>
    321c:	9b01      	ldr	r3, [sp, #4]
				ready = ready0;
    321e:	1d62      	adds	r2, r4, #5
			synchronized {
    3220:	3b01      	subs	r3, #1
    3222:	d302      	bcc.n	322a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x1e>
				ready = ready0;
    3224:	7fd5      	ldrb	r5, [r2, #31]
    3226:	b2ed      	uxtb	r5, r5
    3228:	e7fa      	b.n	3220 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x14>
			synchronized {
    322a:	4668      	mov	r0, sp
    322c:	9301      	str	r3, [sp, #4]
    322e:	f7ff ffe6 	bl	31fe <_ZN7__GuardD1Ev>
			}
			return ready ? (last0 - first0) : 0;
    3232:	2d00      	cmp	r5, #0
    3234:	d101      	bne.n	323a <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2e>
    3236:	2000      	movs	r0, #0
			synchronized {
				ready = ready1;
			}
			return ready ? (last1 - first1) : 0;
		}
	}
    3238:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
			return ready ? (last0 - first0) : 0;
    323a:	6a20      	ldr	r0, [r4, #32]
    323c:	69e3      	ldr	r3, [r4, #28]
			return ready ? (last1 - first1) : 0;
    323e:	1ac0      	subs	r0, r0, r3
    3240:	e7fa      	b.n	3238 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2c>
			synchronized {
    3242:	f7ff ffd5 	bl	31f0 <_ZN7__GuardC1Ev>
				ready = ready1;
    3246:	0022      	movs	r2, r4
			bool ready = false;
    3248:	2500      	movs	r5, #0
    324a:	9b01      	ldr	r3, [sp, #4]
				ready = ready1;
    324c:	3234      	adds	r2, #52	; 0x34
			synchronized {
    324e:	3b01      	subs	r3, #1
    3250:	d302      	bcc.n	3258 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x4c>
				ready = ready1;
    3252:	7815      	ldrb	r5, [r2, #0]
    3254:	b2ed      	uxtb	r5, r5
			synchronized {
    3256:	e7fa      	b.n	324e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x42>
    3258:	4668      	mov	r0, sp
    325a:	9301      	str	r3, [sp, #4]
    325c:	f7ff ffcf 	bl	31fe <_ZN7__GuardD1Ev>
			return ready ? (last1 - first1) : 0;
    3260:	2d00      	cmp	r5, #0
    3262:	d0e8      	beq.n	3236 <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x2a>
    3264:	6b20      	ldr	r0, [r4, #48]	; 0x30
    3266:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3268:	e7e9      	b.n	323e <_ZNK26DoubleBufferedEPOutHandler9availableEv+0x32>
	...

0000326c <_ZN26DoubleBufferedEPOutHandler7releaseEv>:

	void release() {
    326c:	b5f0      	push	{r4, r5, r6, r7, lr}
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    326e:	2501      	movs	r5, #1
		// Release OUT EP
		usbd.epBank0EnableTransferComplete(ep);
    3270:	6846      	ldr	r6, [r0, #4]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3272:	7a03      	ldrb	r3, [r0, #8]
    3274:	6831      	ldr	r1, [r6, #0]
    3276:	015a      	lsls	r2, r3, #5
    3278:	188c      	adds	r4, r1, r2
    327a:	34ff      	adds	r4, #255	; 0xff
    327c:	7aa7      	ldrb	r7, [r4, #10]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    327e:	18b2      	adds	r2, r6, r2
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3280:	433d      	orrs	r5, r7
    3282:	72a5      	strb	r5, [r4, #10]
		usbd.epBank0SetMultiPacketSize(ep, size);
    3284:	68c4      	ldr	r4, [r0, #12]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3286:	4d09      	ldr	r5, [pc, #36]	; (32ac <_ZN26DoubleBufferedEPOutHandler7releaseEv+0x40>)
    3288:	6890      	ldr	r0, [r2, #8]
    328a:	04a4      	lsls	r4, r4, #18
    328c:	4028      	ands	r0, r5
    328e:	0924      	lsrs	r4, r4, #4
    3290:	4320      	orrs	r0, r4
    3292:	6090      	str	r0, [r2, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    3294:	6890      	ldr	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3296:	3308      	adds	r3, #8
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    3298:	0b80      	lsrs	r0, r0, #14
    329a:	0380      	lsls	r0, r0, #14
    329c:	6090      	str	r0, [r2, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    329e:	2240      	movs	r2, #64	; 0x40
    32a0:	015b      	lsls	r3, r3, #5
    32a2:	18cb      	adds	r3, r1, r3
    32a4:	7919      	ldrb	r1, [r3, #4]
    32a6:	430a      	orrs	r2, r1
    32a8:	711a      	strb	r2, [r3, #4]
		usbd.epBank0SetByteCount(ep, 0);
		usbd.epBank0ResetReady(ep);
	}
    32aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    32ac:	f0003fff 	.word	0xf0003fff

000032b0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm>:
	virtual uint32_t recv(void *_data, uint32_t len)
    32b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		if (current == 0) {
    32b2:	6903      	ldr	r3, [r0, #16]
	virtual uint32_t recv(void *_data, uint32_t len)
    32b4:	0004      	movs	r4, r0
    32b6:	000e      	movs	r6, r1
    32b8:	0017      	movs	r7, r2
			synchronized {
    32ba:	4668      	mov	r0, sp
		if (current == 0) {
    32bc:	2b00      	cmp	r3, #0
    32be:	d13d      	bne.n	333c <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x8c>
			synchronized {
    32c0:	f7ff ff96 	bl	31f0 <_ZN7__GuardC1Ev>
    32c4:	9b01      	ldr	r3, [sp, #4]
				if (!ready0) {
    32c6:	1d61      	adds	r1, r4, #5
    32c8:	3b01      	subs	r3, #1
			synchronized {
    32ca:	1c5a      	adds	r2, r3, #1
    32cc:	d00c      	beq.n	32e8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x38>
				if (!ready0) {
    32ce:	7fcd      	ldrb	r5, [r1, #31]
    32d0:	1e5a      	subs	r2, r3, #1
    32d2:	b2ed      	uxtb	r5, r5
    32d4:	2d00      	cmp	r5, #0
    32d6:	d105      	bne.n	32e4 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x34>
				synchronized {
    32d8:	4668      	mov	r0, sp
    32da:	9301      	str	r3, [sp, #4]
    32dc:	f7ff ff8f 	bl	31fe <_ZN7__GuardD1Ev>
	}
    32e0:	0028      	movs	r0, r5
    32e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    32e4:	0013      	movs	r3, r2
    32e6:	e7f0      	b.n	32ca <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x1a>
			synchronized {
    32e8:	4668      	mov	r0, sp
    32ea:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first0 < last0; i++) {
    32ec:	2500      	movs	r5, #0
			synchronized {
    32ee:	f7ff ff86 	bl	31fe <_ZN7__GuardD1Ev>
    32f2:	69e3      	ldr	r3, [r4, #28]
			for (i=0; i<len && first0 < last0; i++) {
    32f4:	42af      	cmp	r7, r5
    32f6:	d002      	beq.n	32fe <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x4e>
    32f8:	6a22      	ldr	r2, [r4, #32]
    32fa:	4293      	cmp	r3, r2
    32fc:	d357      	bcc.n	33ae <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfe>
			if (first0 == last0) {
    32fe:	6a22      	ldr	r2, [r4, #32]
    3300:	4293      	cmp	r3, r2
    3302:	d1ed      	bne.n	32e0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first0 = 0;
    3304:	2300      	movs	r3, #0
    3306:	61e3      	str	r3, [r4, #28]
				current = 1;
    3308:	3301      	adds	r3, #1
    330a:	6123      	str	r3, [r4, #16]
				synchronized {
    330c:	4668      	mov	r0, sp
    330e:	f7ff ff6f 	bl	31f0 <_ZN7__GuardC1Ev>
					if (notify) {
    3312:	0022      	movs	r2, r4
					ready0 = false;
    3314:	2100      	movs	r1, #0
    3316:	9b01      	ldr	r3, [sp, #4]
    3318:	1d67      	adds	r7, r4, #5
    331a:	3b01      	subs	r3, #1
					if (notify) {
    331c:	3235      	adds	r2, #53	; 0x35
				synchronized {
    331e:	1c58      	adds	r0, r3, #1
    3320:	d0da      	beq.n	32d8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready0 = false;
    3322:	77f9      	strb	r1, [r7, #31]
					if (notify) {
    3324:	7810      	ldrb	r0, [r2, #0]
    3326:	1e5e      	subs	r6, r3, #1
    3328:	2800      	cmp	r0, #0
    332a:	d005      	beq.n	3338 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x88>
						notify = false;
    332c:	7011      	strb	r1, [r2, #0]
						release();
    332e:	0020      	movs	r0, r4
    3330:	9301      	str	r3, [sp, #4]
    3332:	f7ff ff9b 	bl	326c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    3336:	e7ec      	b.n	3312 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x62>
					if (notify) {
    3338:	0033      	movs	r3, r6
    333a:	e7f0      	b.n	331e <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x6e>
			synchronized {
    333c:	f7ff ff58 	bl	31f0 <_ZN7__GuardC1Ev>
				if (!ready1) {
    3340:	0021      	movs	r1, r4
    3342:	9b01      	ldr	r3, [sp, #4]
    3344:	3134      	adds	r1, #52	; 0x34
    3346:	3b01      	subs	r3, #1
			synchronized {
    3348:	1c5a      	adds	r2, r3, #1
    334a:	d006      	beq.n	335a <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xaa>
				if (!ready1) {
    334c:	780d      	ldrb	r5, [r1, #0]
    334e:	1e5a      	subs	r2, r3, #1
    3350:	b2ed      	uxtb	r5, r5
    3352:	2d00      	cmp	r5, #0
    3354:	d0c0      	beq.n	32d8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
    3356:	0013      	movs	r3, r2
    3358:	e7f6      	b.n	3348 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x98>
			synchronized {
    335a:	4668      	mov	r0, sp
    335c:	9301      	str	r3, [sp, #4]
			for (i=0; i<len && first1 < last1; i++) {
    335e:	2500      	movs	r5, #0
			synchronized {
    3360:	f7ff ff4d 	bl	31fe <_ZN7__GuardD1Ev>
    3364:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			for (i=0; i<len && first1 < last1; i++) {
    3366:	42bd      	cmp	r5, r7
    3368:	d002      	beq.n	3370 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xc0>
    336a:	6b22      	ldr	r2, [r4, #48]	; 0x30
    336c:	4293      	cmp	r3, r2
    336e:	d326      	bcc.n	33be <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x10e>
			if (first1 == last1) {
    3370:	6b22      	ldr	r2, [r4, #48]	; 0x30
    3372:	4293      	cmp	r3, r2
    3374:	d1b4      	bne.n	32e0 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x30>
				first1 = 0;
    3376:	2300      	movs	r3, #0
				synchronized {
    3378:	4668      	mov	r0, sp
				first1 = 0;
    337a:	62e3      	str	r3, [r4, #44]	; 0x2c
				current = 0;
    337c:	6123      	str	r3, [r4, #16]
				synchronized {
    337e:	f7ff ff37 	bl	31f0 <_ZN7__GuardC1Ev>
					ready1 = false;
    3382:	0027      	movs	r7, r4
					if (notify) {
    3384:	0022      	movs	r2, r4
					ready1 = false;
    3386:	2100      	movs	r1, #0
    3388:	9b01      	ldr	r3, [sp, #4]
    338a:	3734      	adds	r7, #52	; 0x34
    338c:	3b01      	subs	r3, #1
					if (notify) {
    338e:	3235      	adds	r2, #53	; 0x35
				synchronized {
    3390:	1c58      	adds	r0, r3, #1
    3392:	d0a1      	beq.n	32d8 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x28>
					ready1 = false;
    3394:	7039      	strb	r1, [r7, #0]
					if (notify) {
    3396:	7810      	ldrb	r0, [r2, #0]
    3398:	1e5e      	subs	r6, r3, #1
    339a:	2800      	cmp	r0, #0
    339c:	d005      	beq.n	33aa <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xfa>
						notify = false;
    339e:	7011      	strb	r1, [r2, #0]
						release();
    33a0:	0020      	movs	r0, r4
    33a2:	9301      	str	r3, [sp, #4]
    33a4:	f7ff ff62 	bl	326c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    33a8:	e7eb      	b.n	3382 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xd2>
    33aa:	0033      	movs	r3, r6
    33ac:	e7f0      	b.n	3390 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xe0>
				data[i] = data0[first0++];
    33ae:	1c5a      	adds	r2, r3, #1
    33b0:	61e2      	str	r2, [r4, #28]
    33b2:	69a2      	ldr	r2, [r4, #24]
    33b4:	18d3      	adds	r3, r2, r3
    33b6:	781b      	ldrb	r3, [r3, #0]
    33b8:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first0 < last0; i++) {
    33ba:	3501      	adds	r5, #1
    33bc:	e799      	b.n	32f2 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0x42>
				data[i] = data1[first1++];
    33be:	1c5a      	adds	r2, r3, #1
    33c0:	62e2      	str	r2, [r4, #44]	; 0x2c
    33c2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    33c4:	18d3      	adds	r3, r2, r3
    33c6:	781b      	ldrb	r3, [r3, #0]
    33c8:	5573      	strb	r3, [r6, r5]
			for (i=0; i<len && first1 < last1; i++) {
    33ca:	3501      	adds	r5, #1
    33cc:	e7ca      	b.n	3364 <_ZN26DoubleBufferedEPOutHandler4recvEPvm+0xb4>

000033ce <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv>:
	virtual void handleEndpoint()
    33ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    33d0:	7a02      	ldrb	r2, [r0, #8]
		if (usbd.epBank0IsTransferComplete(ep))
    33d2:	6843      	ldr	r3, [r0, #4]
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    33d4:	0011      	movs	r1, r2
	virtual void handleEndpoint()
    33d6:	0004      	movs	r4, r0
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    33d8:	3108      	adds	r1, #8
    33da:	6818      	ldr	r0, [r3, #0]
    33dc:	0149      	lsls	r1, r1, #5
    33de:	1841      	adds	r1, r0, r1
    33e0:	79c8      	ldrb	r0, [r1, #7]
		if (usbd.epBank0IsTransferComplete(ep))
    33e2:	07c0      	lsls	r0, r0, #31
    33e4:	d527      	bpl.n	3436 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    33e6:	2501      	movs	r5, #1
    33e8:	0152      	lsls	r2, r2, #5
    33ea:	71cd      	strb	r5, [r1, #7]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    33ec:	189b      	adds	r3, r3, r2
    33ee:	689a      	ldr	r2, [r3, #8]
			if (incoming == 0) {
    33f0:	6961      	ldr	r1, [r4, #20]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    33f2:	0492      	lsls	r2, r2, #18
    33f4:	0c92      	lsrs	r2, r2, #18
			if (incoming == 0) {
    33f6:	2900      	cmp	r1, #0
    33f8:	d121      	bne.n	343e <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x70>
				last0 = usbd.epBank0ByteCount(ep);
    33fa:	6222      	str	r2, [r4, #32]
				if (last0 != 0) {
    33fc:	6a22      	ldr	r2, [r4, #32]
    33fe:	2a00      	cmp	r2, #0
    3400:	d03e      	beq.n	3480 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    3402:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					incoming = 1;
    3404:	6165      	str	r5, [r4, #20]
					synchronized {
    3406:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    3408:	605a      	str	r2, [r3, #4]
					synchronized {
    340a:	f7ff fef1 	bl	31f0 <_ZN7__GuardC1Ev>
						if (ready1) {
    340e:	0027      	movs	r7, r4
    3410:	0021      	movs	r1, r4
    3412:	9b01      	ldr	r3, [sp, #4]
						ready0 = true;
    3414:	1d66      	adds	r6, r4, #5
    3416:	3b01      	subs	r3, #1
						if (ready1) {
    3418:	3734      	adds	r7, #52	; 0x34
    341a:	3135      	adds	r1, #53	; 0x35
					synchronized {
    341c:	1c5a      	adds	r2, r3, #1
    341e:	d02b      	beq.n	3478 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready0 = true;
    3420:	77f5      	strb	r5, [r6, #31]
						if (ready1) {
    3422:	783a      	ldrb	r2, [r7, #0]
    3424:	1e58      	subs	r0, r3, #1
    3426:	b2d2      	uxtb	r2, r2
    3428:	2a00      	cmp	r2, #0
    342a:	d005      	beq.n	3438 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x6a>
    342c:	9301      	str	r3, [sp, #4]
							return;
    342e:	4668      	mov	r0, sp
							notify = true;
    3430:	700d      	strb	r5, [r1, #0]
							return;
    3432:	f7ff fee4 	bl	31fe <_ZN7__GuardD1Ev>
	}
    3436:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
						notify = false;
    3438:	700a      	strb	r2, [r1, #0]
					synchronized {
    343a:	0003      	movs	r3, r0
    343c:	e7ee      	b.n	341c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x4e>
				last1 = usbd.epBank0ByteCount(ep);
    343e:	6322      	str	r2, [r4, #48]	; 0x30
				if (last1 != 0) {
    3440:	6b22      	ldr	r2, [r4, #48]	; 0x30
    3442:	2a00      	cmp	r2, #0
    3444:	d01c      	beq.n	3480 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xb2>
					incoming = 0;
    3446:	2200      	movs	r2, #0
    3448:	6162      	str	r2, [r4, #20]
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    344a:	69a2      	ldr	r2, [r4, #24]
					synchronized {
    344c:	4668      	mov	r0, sp
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    344e:	605a      	str	r2, [r3, #4]
					synchronized {
    3450:	f7ff fece 	bl	31f0 <_ZN7__GuardC1Ev>
						ready1 = true;
    3454:	0026      	movs	r6, r4
    3456:	0021      	movs	r1, r4
    3458:	9b01      	ldr	r3, [sp, #4]
    345a:	3634      	adds	r6, #52	; 0x34
    345c:	3b01      	subs	r3, #1
						if (ready0) {
    345e:	1d67      	adds	r7, r4, #5
    3460:	3135      	adds	r1, #53	; 0x35
					synchronized {
    3462:	1c5a      	adds	r2, r3, #1
    3464:	d008      	beq.n	3478 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0xaa>
						ready1 = true;
    3466:	7035      	strb	r5, [r6, #0]
						if (ready0) {
    3468:	7ffa      	ldrb	r2, [r7, #31]
    346a:	1e58      	subs	r0, r3, #1
    346c:	b2d2      	uxtb	r2, r2
    346e:	2a00      	cmp	r2, #0
    3470:	d1dc      	bne.n	342c <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x5e>
						notify = false;
    3472:	700a      	strb	r2, [r1, #0]
					synchronized {
    3474:	0003      	movs	r3, r0
    3476:	e7f4      	b.n	3462 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x94>
    3478:	4668      	mov	r0, sp
    347a:	9301      	str	r3, [sp, #4]
    347c:	f7ff febf 	bl	31fe <_ZN7__GuardD1Ev>
			release();
    3480:	0020      	movs	r0, r4
    3482:	f7ff fef3 	bl	326c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    3486:	e7d6      	b.n	3436 <_ZN26DoubleBufferedEPOutHandler14handleEndpointEv+0x68>

00003488 <_ZN14USBDeviceClass14SendInterfacesEPm>:
{
    3488:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t interfaces = 0;
    348a:	466b      	mov	r3, sp
    348c:	1ddc      	adds	r4, r3, #7
    348e:	2300      	movs	r3, #0
{
    3490:	000d      	movs	r5, r1
	total[0] += CDC_GetInterface(&interfaces);
    3492:	0020      	movs	r0, r4
	uint8_t interfaces = 0;
    3494:	7023      	strb	r3, [r4, #0]
	total[0] += CDC_GetInterface(&interfaces);
    3496:	f7ff fd79 	bl	2f8c <_Z16CDC_GetInterfacePh>
    349a:	682b      	ldr	r3, [r5, #0]
    349c:	1818      	adds	r0, r3, r0
    349e:	6028      	str	r0, [r5, #0]
	total[0] += PluggableUSB().getInterface(&interfaces);
    34a0:	f002 fc24 	bl	5cec <_Z12PluggableUSBv>
    34a4:	0021      	movs	r1, r4
    34a6:	f002 fbdd 	bl	5c64 <_ZN13PluggableUSB_12getInterfaceEPh>
    34aa:	682b      	ldr	r3, [r5, #0]
    34ac:	1818      	adds	r0, r3, r0
    34ae:	6028      	str	r0, [r5, #0]
	return interfaces;
    34b0:	7820      	ldrb	r0, [r4, #0]
}
    34b2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

000034b4 <_ZN14USBDeviceClass14handleEndpointEh>:
	if (ep == CDC_ENDPOINT_IN)
    34b4:	2903      	cmp	r1, #3
    34b6:	d10e      	bne.n	34d6 <_ZN14USBDeviceClass14handleEndpointEh+0x22>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    34b8:	2280      	movs	r2, #128	; 0x80
    34ba:	4b0e      	ldr	r3, [pc, #56]	; (34f4 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    34bc:	3162      	adds	r1, #98	; 0x62
    34be:	681b      	ldr	r3, [r3, #0]
    34c0:	31ff      	adds	r1, #255	; 0xff
    34c2:	5c58      	ldrb	r0, [r3, r1]
    34c4:	4252      	negs	r2, r2
    34c6:	4302      	orrs	r2, r0
    34c8:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    34ca:	2268      	movs	r2, #104	; 0x68
    34cc:	3963      	subs	r1, #99	; 0x63
    34ce:	39ff      	subs	r1, #255	; 0xff
    34d0:	32ff      	adds	r2, #255	; 0xff
    34d2:	5499      	strb	r1, [r3, r2]
}
    34d4:	4770      	bx	lr
	if (ep == CDC_ENDPOINT_ACM)
    34d6:	2901      	cmp	r1, #1
    34d8:	d1fc      	bne.n	34d4 <_ZN14USBDeviceClass14handleEndpointEh+0x20>
	inline void epBank1ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK1RDY = 1; }
    34da:	2280      	movs	r2, #128	; 0x80
    34dc:	4b05      	ldr	r3, [pc, #20]	; (34f4 <_ZN14USBDeviceClass14handleEndpointEh+0x40>)
    34de:	3124      	adds	r1, #36	; 0x24
    34e0:	681b      	ldr	r3, [r3, #0]
    34e2:	31ff      	adds	r1, #255	; 0xff
    34e4:	5c58      	ldrb	r0, [r3, r1]
    34e6:	4252      	negs	r2, r2
    34e8:	4302      	orrs	r2, r0
    34ea:	545a      	strb	r2, [r3, r1]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    34ec:	3923      	subs	r1, #35	; 0x23
    34ee:	39ff      	subs	r1, #255	; 0xff
    34f0:	2228      	movs	r2, #40	; 0x28
    34f2:	e7ed      	b.n	34d0 <_ZN14USBDeviceClass14handleEndpointEh+0x1c>
    34f4:	20000a30 	.word	0x20000a30

000034f8 <_ZN14USBDeviceClass4initEv>:
{
    34f8:	b570      	push	{r4, r5, r6, lr}
	txLEDPulse = 0;
    34fa:	2400      	movs	r4, #0
    34fc:	4b26      	ldr	r3, [pc, #152]	; (3598 <_ZN14USBDeviceClass4initEv+0xa0>)
	pinMode(PIN_LED_TXL, OUTPUT);
    34fe:	2101      	movs	r1, #1
{
    3500:	0005      	movs	r5, r0
	pinMode(PIN_LED_TXL, OUTPUT);
    3502:	2015      	movs	r0, #21
	txLEDPulse = 0;
    3504:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_TXL, OUTPUT);
    3506:	f000 ff1b 	bl	4340 <pinMode>
	digitalWrite(PIN_LED_TXL, HIGH);
    350a:	2101      	movs	r1, #1
    350c:	2015      	movs	r0, #21
    350e:	f000 ff1b 	bl	4348 <digitalWrite>
	rxLEDPulse = 0;
    3512:	4b22      	ldr	r3, [pc, #136]	; (359c <_ZN14USBDeviceClass4initEv+0xa4>)
	pinMode(PIN_LED_RXL, OUTPUT);
    3514:	2101      	movs	r1, #1
    3516:	2014      	movs	r0, #20
	rxLEDPulse = 0;
    3518:	701c      	strb	r4, [r3, #0]
	pinMode(PIN_LED_RXL, OUTPUT);
    351a:	f000 ff11 	bl	4340 <pinMode>
	digitalWrite(PIN_LED_RXL, HIGH);
    351e:	2101      	movs	r1, #1
    3520:	2014      	movs	r0, #20
    3522:	f000 ff11 	bl	4348 <digitalWrite>
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    3526:	2301      	movs	r3, #1
    3528:	4a1d      	ldr	r2, [pc, #116]	; (35a0 <_ZN14USBDeviceClass4initEv+0xa8>)
        pinPeripheral( PIN_USB_DM, PIO_COM );
    352a:	2018      	movs	r0, #24
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    352c:	6991      	ldr	r1, [r2, #24]
        GCLK->PCHCTRL[GCM_USB].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    352e:	3440      	adds	r4, #64	; 0x40
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_USB;
    3530:	430b      	orrs	r3, r1
    3532:	6193      	str	r3, [r2, #24]
        pinPeripheral( PIN_USB_DM, PIO_COM );
    3534:	210f      	movs	r1, #15
    3536:	f000 ff71 	bl	441c <pinPeripheral>
        pinPeripheral( PIN_USB_DP, PIO_COM );
    353a:	210f      	movs	r1, #15
    353c:	2019      	movs	r0, #25
    353e:	f000 ff6d 	bl	441c <pinPeripheral>
        GCLK->PCHCTRL[GCM_USB].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    3542:	4b18      	ldr	r3, [pc, #96]	; (35a4 <_ZN14USBDeviceClass4initEv+0xac>)
    3544:	601c      	str	r4, [r3, #0]
        while ( (GCLK->PCHCTRL[GCM_USB].reg & GCLK_PCHCTRL_CHEN) == 0 );        // wait for sync
    3546:	681a      	ldr	r2, [r3, #0]
    3548:	4222      	tst	r2, r4
    354a:	d0fc      	beq.n	3546 <_ZN14USBDeviceClass4initEv+0x4e>
        USB_SetHandler(&UDD_Handler);
    354c:	4816      	ldr	r0, [pc, #88]	; (35a8 <_ZN14USBDeviceClass4initEv+0xb0>)
    354e:	f7ff f945 	bl	27dc <USB_SetHandler>
	usbd.reset();
    3552:	4e16      	ldr	r6, [pc, #88]	; (35ac <_ZN14USBDeviceClass4initEv+0xb4>)
    3554:	0030      	movs	r0, r6
    3556:	f7ff fe09 	bl	316c <_ZN20USBDevice_SAMD21G18x5resetEv>
	usbd.calibrate();
    355a:	0030      	movs	r0, r6
    355c:	f7ff fe18 	bl	3190 <_ZN20USBDevice_SAMD21G18x9calibrateEv>
	inline void setUSBDeviceMode() { usb.CTRLA.bit.MODE = USB_CTRLA_MODE_DEVICE_Val; }
    3560:	217f      	movs	r1, #127	; 0x7f
    3562:	6833      	ldr	r3, [r6, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    3564:	20c1      	movs	r0, #193	; 0xc1
    3566:	781a      	ldrb	r2, [r3, #0]
    3568:	0080      	lsls	r0, r0, #2
    356a:	400a      	ands	r2, r1
    356c:	701a      	strb	r2, [r3, #0]
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    356e:	2204      	movs	r2, #4
    3570:	7819      	ldrb	r1, [r3, #0]
    3572:	4e0f      	ldr	r6, [pc, #60]	; (35b0 <_ZN14USBDeviceClass4initEv+0xb8>)
    3574:	430a      	orrs	r2, r1
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    3576:	210c      	movs	r1, #12
	inline void runInStandby()   { usb.CTRLA.bit.RUNSTDBY = 1; }
    3578:	701a      	strb	r2, [r3, #0]
	inline void setFullSpeed()       { usb.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;   }
    357a:	891a      	ldrh	r2, [r3, #8]
    357c:	438a      	bics	r2, r1
    357e:	811a      	strh	r2, [r3, #8]
    3580:	4a0c      	ldr	r2, [pc, #48]	; (35b4 <_ZN14USBDeviceClass4initEv+0xbc>)
    3582:	5811      	ldr	r1, [r2, r0]
    3584:	4031      	ands	r1, r6
    3586:	5011      	str	r1, [r2, r0]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3588:	6014      	str	r4, [r2, #0]
	inline void enable()  { usb.CTRLA.bit.ENABLE = 1; }
    358a:	2202      	movs	r2, #2
    358c:	7819      	ldrb	r1, [r3, #0]
    358e:	430a      	orrs	r2, r1
    3590:	701a      	strb	r2, [r3, #0]
	initialized = true;
    3592:	2301      	movs	r3, #1
    3594:	702b      	strb	r3, [r5, #0]
}
    3596:	bd70      	pop	{r4, r5, r6, pc}
    3598:	20000599 	.word	0x20000599
    359c:	20000598 	.word	0x20000598
    35a0:	40000400 	.word	0x40000400
    35a4:	40001890 	.word	0x40001890
    35a8:	00003f89 	.word	0x00003f89
    35ac:	20000a30 	.word	0x20000a30
    35b0:	ff00ffff 	.word	0xff00ffff
    35b4:	e000e100 	.word	0xe000e100

000035b8 <_ZN14USBDeviceClass6attachEv>:
	if (!initialized)
    35b8:	7800      	ldrb	r0, [r0, #0]
    35ba:	2800      	cmp	r0, #0
    35bc:	d010      	beq.n	35e0 <_ZN14USBDeviceClass6attachEv+0x28>
	inline void attach() { usb.CTRLB.bit.DETACH = 0; }
    35be:	2101      	movs	r1, #1
    35c0:	4b08      	ldr	r3, [pc, #32]	; (35e4 <_ZN14USBDeviceClass6attachEv+0x2c>)
    35c2:	681b      	ldr	r3, [r3, #0]
    35c4:	891a      	ldrh	r2, [r3, #8]
    35c6:	438a      	bics	r2, r1
    35c8:	811a      	strh	r2, [r3, #8]
	inline void enableEndOfResetInterrupt()    { usb.INTENSET.bit.EORST = 1; }
    35ca:	2208      	movs	r2, #8
    35cc:	8b19      	ldrh	r1, [r3, #24]
    35ce:	430a      	orrs	r2, r1
    35d0:	831a      	strh	r2, [r3, #24]
	inline void enableStartOfFrameInterrupt()  { usb.INTENSET.bit.SOF = 1; }
    35d2:	2204      	movs	r2, #4
    35d4:	8b19      	ldrh	r1, [r3, #24]
    35d6:	430a      	orrs	r2, r1
    35d8:	831a      	strh	r2, [r3, #24]
	_usbConfiguration = 0;
    35da:	2200      	movs	r2, #0
    35dc:	4b02      	ldr	r3, [pc, #8]	; (35e8 <_ZN14USBDeviceClass6attachEv+0x30>)
    35de:	601a      	str	r2, [r3, #0]
}
    35e0:	4770      	bx	lr
    35e2:	46c0      	nop			; (mov r8, r8)
    35e4:	20000a30 	.word	0x20000a30
    35e8:	20000a28 	.word	0x20000a28

000035ec <_ZN14USBDeviceClass10setAddressEm>:
{
    35ec:	b510      	push	{r4, lr}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    35ee:	4a10      	ldr	r2, [pc, #64]	; (3630 <_ZN14USBDeviceClass10setAddressEm+0x44>)
    35f0:	6993      	ldr	r3, [r2, #24]
    35f2:	0b9b      	lsrs	r3, r3, #14
    35f4:	039b      	lsls	r3, r3, #14
    35f6:	6193      	str	r3, [r2, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    35f8:	6813      	ldr	r3, [r2, #0]
    35fa:	2202      	movs	r2, #2
    35fc:	33ff      	adds	r3, #255	; 0xff
    35fe:	721a      	strb	r2, [r3, #8]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3600:	7998      	ldrb	r0, [r3, #6]
    3602:	3a82      	subs	r2, #130	; 0x82
    3604:	4302      	orrs	r2, r0
    3606:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    3608:	7a1a      	ldrb	r2, [r3, #8]
	while (!usbd.epBank1IsTransferComplete(0)) {}
    360a:	0792      	lsls	r2, r2, #30
    360c:	d5fc      	bpl.n	3608 <_ZN14USBDeviceClass10setAddressEm+0x1c>
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    360e:	2282      	movs	r2, #130	; 0x82
    3610:	247f      	movs	r4, #127	; 0x7f
    3612:	05d2      	lsls	r2, r2, #23
    3614:	7a93      	ldrb	r3, [r2, #10]
    3616:	4021      	ands	r1, r4
    3618:	43a3      	bics	r3, r4
    361a:	0008      	movs	r0, r1
    361c:	0019      	movs	r1, r3
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    361e:	2380      	movs	r3, #128	; 0x80
	USB->DEVICE.DADD.bit.DADD = addr; // Address
    3620:	4301      	orrs	r1, r0
    3622:	7291      	strb	r1, [r2, #10]
	USB->DEVICE.DADD.bit.ADDEN = 1; // Enable
    3624:	7a91      	ldrb	r1, [r2, #10]
    3626:	425b      	negs	r3, r3
    3628:	430b      	orrs	r3, r1
    362a:	7293      	strb	r3, [r2, #10]
}
    362c:	bd10      	pop	{r4, pc}
    362e:	46c0      	nop			; (mov r8, r8)
    3630:	20000a30 	.word	0x20000a30

00003634 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>:
{
    3634:	b510      	push	{r4, lr}
	if (CDC_ACM_INTERFACE == i)
    3636:	790b      	ldrb	r3, [r1, #4]
{
    3638:	000c      	movs	r4, r1
	if (CDC_ACM_INTERFACE == i)
    363a:	2b00      	cmp	r3, #0
    363c:	d10c      	bne.n	3658 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x24>
		if (CDC_Setup(setup) == false) {
    363e:	0008      	movs	r0, r1
    3640:	f7ff fcb2 	bl	2fa8 <_Z9CDC_SetupR8USBSetup>
    3644:	2800      	cmp	r0, #0
    3646:	d001      	beq.n	364c <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x18>
		return true;
    3648:	2001      	movs	r0, #1
}
    364a:	bd10      	pop	{r4, pc}
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    364c:	4a09      	ldr	r2, [pc, #36]	; (3674 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    364e:	6993      	ldr	r3, [r2, #24]
    3650:	0b9b      	lsrs	r3, r3, #14
    3652:	039b      	lsls	r3, r3, #14
    3654:	6193      	str	r3, [r2, #24]
    3656:	e7f7      	b.n	3648 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
	bool ret = PluggableUSB().setup(setup);
    3658:	f002 fb48 	bl	5cec <_Z12PluggableUSBv>
    365c:	0021      	movs	r1, r4
    365e:	f002 fb34 	bl	5cca <_ZN13PluggableUSB_5setupER8USBSetup>
	if ( ret == false) {
    3662:	2800      	cmp	r0, #0
    3664:	d1f0      	bne.n	3648 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x14>
    3666:	4a03      	ldr	r2, [pc, #12]	; (3674 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x40>)
    3668:	6993      	ldr	r3, [r2, #24]
    366a:	0b9b      	lsrs	r3, r3, #14
    366c:	039b      	lsls	r3, r3, #14
    366e:	6193      	str	r3, [r2, #24]
    3670:	e7eb      	b.n	364a <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup+0x16>
    3672:	46c0      	nop			; (mov r8, r8)
    3674:	20000a30 	.word	0x20000a30

00003678 <_ZN14USBDeviceClass6initEPEmm>:
{
    3678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    367a:	000d      	movs	r5, r1
	if (config == (USB_ENDPOINT_TYPE_INTERRUPT | USB_ENDPOINT_IN(0)))
    367c:	2a83      	cmp	r2, #131	; 0x83
    367e:	d119      	bne.n	36b4 <_ZN14USBDeviceClass6initEPEmm+0x3c>
	inline void epBank1SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    3680:	b2cb      	uxtb	r3, r1
    3682:	4c32      	ldr	r4, [pc, #200]	; (374c <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    3684:	015a      	lsls	r2, r3, #5
    3686:	18a2      	adds	r2, r4, r2
    3688:	6991      	ldr	r1, [r2, #24]
    368a:	4831      	ldr	r0, [pc, #196]	; (3750 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
		usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
    368c:	01ad      	lsls	r5, r5, #6
    368e:	4008      	ands	r0, r1
    3690:	21c0      	movs	r1, #192	; 0xc0
    3692:	0589      	lsls	r1, r1, #22
    3694:	4301      	orrs	r1, r0
    3696:	6191      	str	r1, [r2, #24]
    3698:	492e      	ldr	r1, [pc, #184]	; (3754 <_ZN14USBDeviceClass6initEPEmm+0xdc>)
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    369a:	6820      	ldr	r0, [r4, #0]
    369c:	194d      	adds	r5, r1, r5
    369e:	2170      	movs	r1, #112	; 0x70
    36a0:	3308      	adds	r3, #8
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    36a2:	6155      	str	r5, [r2, #20]
	inline void epBank1SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE1 = type; }
    36a4:	015b      	lsls	r3, r3, #5
    36a6:	5c1a      	ldrb	r2, [r3, r0]
    36a8:	438a      	bics	r2, r1
    36aa:	0011      	movs	r1, r2
    36ac:	2240      	movs	r2, #64	; 0x40
    36ae:	430a      	orrs	r2, r1
    36b0:	541a      	strb	r2, [r3, r0]
}
    36b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	else if (config == (USB_ENDPOINT_TYPE_BULK | USB_ENDPOINT_OUT(0)))
    36b4:	2a02      	cmp	r2, #2
    36b6:	d144      	bne.n	3742 <_ZN14USBDeviceClass6initEPEmm+0xca>
		if (epHandlers[ep] == NULL) {
    36b8:	008b      	lsls	r3, r1, #2
    36ba:	9301      	str	r3, [sp, #4]
    36bc:	4b26      	ldr	r3, [pc, #152]	; (3758 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    36be:	008a      	lsls	r2, r1, #2
    36c0:	58d6      	ldr	r6, [r2, r3]
    36c2:	2e00      	cmp	r6, #0
    36c4:	d1f5      	bne.n	36b2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
			epHandlers[ep] = new DoubleBufferedEPOutHandler(usbd, ep, 256);
    36c6:	2038      	movs	r0, #56	; 0x38
    36c8:	f002 f890 	bl	57ec <_Znwj>
		notify(false)
    36cc:	4b23      	ldr	r3, [pc, #140]	; (375c <_ZN14USBDeviceClass6initEPEmm+0xe4>)
    36ce:	4f1f      	ldr	r7, [pc, #124]	; (374c <_ZN14USBDeviceClass6initEPEmm+0xd4>)
    36d0:	6003      	str	r3, [r0, #0]
    36d2:	2380      	movs	r3, #128	; 0x80
    36d4:	005b      	lsls	r3, r3, #1
    36d6:	60c3      	str	r3, [r0, #12]
    36d8:	1d43      	adds	r3, r0, #5
    36da:	6206      	str	r6, [r0, #32]
    36dc:	6085      	str	r5, [r0, #8]
    36de:	6106      	str	r6, [r0, #16]
    36e0:	6146      	str	r6, [r0, #20]
    36e2:	61c6      	str	r6, [r0, #28]
    36e4:	0004      	movs	r4, r0
    36e6:	6047      	str	r7, [r0, #4]
    36e8:	77de      	strb	r6, [r3, #31]
    36ea:	62c6      	str	r6, [r0, #44]	; 0x2c
    36ec:	6306      	str	r6, [r0, #48]	; 0x30
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    36ee:	2080      	movs	r0, #128	; 0x80
		notify(false)
    36f0:	332f      	adds	r3, #47	; 0x2f
    36f2:	701e      	strb	r6, [r3, #0]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    36f4:	0040      	lsls	r0, r0, #1
		notify(false)
    36f6:	705e      	strb	r6, [r3, #1]
		data0 = reinterpret_cast<uint8_t *>(malloc(size));
    36f8:	f008 fcfc 	bl	c0f4 <malloc>
    36fc:	0006      	movs	r6, r0
    36fe:	61a0      	str	r0, [r4, #24]
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    3700:	2080      	movs	r0, #128	; 0x80
    3702:	0040      	lsls	r0, r0, #1
    3704:	f008 fcf6 	bl	c0f4 <malloc>
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    3708:	b2ed      	uxtb	r5, r5
    370a:	016b      	lsls	r3, r5, #5
		data1 = reinterpret_cast<uint8_t *>(malloc(size));
    370c:	62a0      	str	r0, [r4, #40]	; 0x28
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    370e:	18fb      	adds	r3, r7, r3
    3710:	689a      	ldr	r2, [r3, #8]
    3712:	490f      	ldr	r1, [pc, #60]	; (3750 <_ZN14USBDeviceClass6initEPEmm+0xd8>)
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    3714:	2007      	movs	r0, #7
	inline void epBank0SetSize(ep_t ep, uint16_t size) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.SIZE = EP_PCKSIZE_SIZE(size); }
    3716:	4011      	ands	r1, r2
    3718:	22c0      	movs	r2, #192	; 0xc0
    371a:	0592      	lsls	r2, r2, #22
    371c:	430a      	orrs	r2, r1
    371e:	609a      	str	r2, [r3, #8]
	inline void epBank0SetType(ep_t ep, uint8_t type) { usb.DeviceEndpoint[ep].EPCFG.bit.EPTYPE0 = type; }
    3720:	683a      	ldr	r2, [r7, #0]
    3722:	3508      	adds	r5, #8
    3724:	016d      	lsls	r5, r5, #5
    3726:	5ca9      	ldrb	r1, [r5, r2]
    3728:	4381      	bics	r1, r0
    372a:	0008      	movs	r0, r1
    372c:	2103      	movs	r1, #3
    372e:	4301      	orrs	r1, r0
    3730:	54a9      	strb	r1, [r5, r2]
		release();
    3732:	0020      	movs	r0, r4
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    3734:	605e      	str	r6, [r3, #4]
		release();
    3736:	f7ff fd99 	bl	326c <_ZN26DoubleBufferedEPOutHandler7releaseEv>
    373a:	4b07      	ldr	r3, [pc, #28]	; (3758 <_ZN14USBDeviceClass6initEPEmm+0xe0>)
    373c:	9a01      	ldr	r2, [sp, #4]
    373e:	50d4      	str	r4, [r2, r3]
    3740:	e7b7      	b.n	36b2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    3742:	0011      	movs	r1, r2
    3744:	0028      	movs	r0, r5
    3746:	f7ff fca9 	bl	309c <_ZN14USBDeviceClass6initEPEmm.part.5>
}
    374a:	e7b2      	b.n	36b2 <_ZN14USBDeviceClass6initEPEmm+0x3a>
    374c:	20000a30 	.word	0x20000a30
    3750:	8fffffff 	.word	0x8fffffff
    3754:	200005a4 	.word	0x200005a4
    3758:	2000057c 	.word	0x2000057c
    375c:	000104d8 	.word	0x000104d8

00003760 <_ZN14USBDeviceClass13initEndpointsEv>:
void USBDeviceClass::initEndpoints() {
    3760:	b570      	push	{r4, r5, r6, lr}
    3762:	0005      	movs	r5, r0
    3764:	2401      	movs	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    3766:	4b06      	ldr	r3, [pc, #24]	; (3780 <_ZN14USBDeviceClass13initEndpointsEv+0x20>)
    3768:	00a2      	lsls	r2, r4, #2
    376a:	58d2      	ldr	r2, [r2, r3]
    376c:	2a00      	cmp	r2, #0
    376e:	d005      	beq.n	377c <_ZN14USBDeviceClass13initEndpointsEv+0x1c>
		initEP(i, EndPoints[i]);
    3770:	0021      	movs	r1, r4
    3772:	0028      	movs	r0, r5
    3774:	f7ff ff80 	bl	3678 <_ZN14USBDeviceClass6initEPEmm>
    3778:	3401      	adds	r4, #1
	for (uint8_t i = 1; i < sizeof(EndPoints) && EndPoints[i] != 0; i++) {
    377a:	e7f4      	b.n	3766 <_ZN14USBDeviceClass13initEndpointsEv+0x6>
}
    377c:	bd70      	pop	{r4, r5, r6, pc}
    377e:	46c0      	nop			; (mov r8, r8)
    3780:	20000060 	.word	0x20000060

00003784 <_ZN14USBDeviceClass9availableEm>:
}

// Number of bytes, assumes a rx endpoint
uint32_t USBDeviceClass::available(uint32_t ep)
{
	if (epHandlers[ep]) {
    3784:	4b08      	ldr	r3, [pc, #32]	; (37a8 <_ZN14USBDeviceClass9availableEm+0x24>)
    3786:	008a      	lsls	r2, r1, #2
    3788:	58d0      	ldr	r0, [r2, r3]
{
    378a:	b510      	push	{r4, lr}
	if (epHandlers[ep]) {
    378c:	2800      	cmp	r0, #0
    378e:	d003      	beq.n	3798 <_ZN14USBDeviceClass9availableEm+0x14>
		return epHandlers[ep]->available();
    3790:	6803      	ldr	r3, [r0, #0]
    3792:	689b      	ldr	r3, [r3, #8]
    3794:	4798      	blx	r3
	} else {
		return usbd.epBank0ByteCount(ep);
	}
}
    3796:	bd10      	pop	{r4, pc}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3798:	b2c9      	uxtb	r1, r1
    379a:	4b04      	ldr	r3, [pc, #16]	; (37ac <_ZN14USBDeviceClass9availableEm+0x28>)
    379c:	0149      	lsls	r1, r1, #5
    379e:	1859      	adds	r1, r3, r1
    37a0:	6888      	ldr	r0, [r1, #8]
    37a2:	0480      	lsls	r0, r0, #18
    37a4:	0c80      	lsrs	r0, r0, #18
		return usbd.epBank0ByteCount(ep);
    37a6:	e7f6      	b.n	3796 <_ZN14USBDeviceClass9availableEm+0x12>
    37a8:	2000057c 	.word	0x2000057c
    37ac:	20000a30 	.word	0x20000a30

000037b0 <_ZN14USBDeviceClass5flushEm>:
{
    37b0:	b510      	push	{r4, lr}
    37b2:	000c      	movs	r4, r1
	if (available(ep)) {
    37b4:	f7ff ffe6 	bl	3784 <_ZN14USBDeviceClass9availableEm>
    37b8:	2800      	cmp	r0, #0
    37ba:	d00c      	beq.n	37d6 <_ZN14USBDeviceClass5flushEm+0x26>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    37bc:	4b06      	ldr	r3, [pc, #24]	; (37d8 <_ZN14USBDeviceClass5flushEm+0x28>)
    37be:	b2e4      	uxtb	r4, r4
    37c0:	681b      	ldr	r3, [r3, #0]
    37c2:	3408      	adds	r4, #8
    37c4:	0164      	lsls	r4, r4, #5
    37c6:	191c      	adds	r4, r3, r4
    37c8:	2380      	movs	r3, #128	; 0x80
    37ca:	7962      	ldrb	r2, [r4, #5]
    37cc:	425b      	negs	r3, r3
    37ce:	4313      	orrs	r3, r2
    37d0:	7163      	strb	r3, [r4, #5]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    37d2:	2302      	movs	r3, #2
    37d4:	71e3      	strb	r3, [r4, #7]
}
    37d6:	bd10      	pop	{r4, pc}
    37d8:	20000a30 	.word	0x20000a30

000037dc <_ZN14USBDeviceClass14armRecvCtrlOUTEm>:
		return c;
	}
}

uint8_t USBDeviceClass::armRecvCtrlOUT(uint32_t ep)
{
    37dc:	b570      	push	{r4, r5, r6, lr}
	// Get endpoint configuration from setting register
	usbd.epBank0SetAddress(ep, &udd_ep_out_cache_buffer[ep]);
    37de:	4b13      	ldr	r3, [pc, #76]	; (382c <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x50>)
	inline void epBank0SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[0].ADDR.reg = (uint32_t)addr; }
    37e0:	b2cc      	uxtb	r4, r1
    37e2:	4a13      	ldr	r2, [pc, #76]	; (3830 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x54>)
    37e4:	0160      	lsls	r0, r4, #5
    37e6:	0189      	lsls	r1, r1, #6
    37e8:	1859      	adds	r1, r3, r1
    37ea:	1813      	adds	r3, r2, r0
    37ec:	6059      	str	r1, [r3, #4]
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    37ee:	6899      	ldr	r1, [r3, #8]
    37f0:	4d10      	ldr	r5, [pc, #64]	; (3834 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x58>)
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    37f2:	3408      	adds	r4, #8
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    37f4:	400d      	ands	r5, r1
    37f6:	2180      	movs	r1, #128	; 0x80
    37f8:	0289      	lsls	r1, r1, #10
    37fa:	4329      	orrs	r1, r5
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    37fc:	2540      	movs	r5, #64	; 0x40
	inline void epBank0SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    37fe:	6099      	str	r1, [r3, #8]
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    3800:	6899      	ldr	r1, [r3, #8]
    3802:	0b89      	lsrs	r1, r1, #14
    3804:	0389      	lsls	r1, r1, #14
    3806:	6099      	str	r1, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3808:	6811      	ldr	r1, [r2, #0]
    380a:	0163      	lsls	r3, r4, #5
    380c:	18cb      	adds	r3, r1, r3
    380e:	791e      	ldrb	r6, [r3, #4]
    3810:	4335      	orrs	r5, r6
    3812:	711d      	strb	r5, [r3, #4]
	inline bool epBank0IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK0RDY; }
    3814:	799d      	ldrb	r5, [r3, #6]
	usbd.epBank0SetByteCount(ep, 0);

	usbd.epBank0ResetReady(ep);

	// Wait OUT
	while (!usbd.epBank0IsReady(ep)) {}
    3816:	066d      	lsls	r5, r5, #25
    3818:	d5fc      	bpl.n	3814 <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x38>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    381a:	0164      	lsls	r4, r4, #5
    381c:	1909      	adds	r1, r1, r4
    381e:	79cb      	ldrb	r3, [r1, #7]
	while (!usbd.epBank0IsTransferComplete(ep)) {}
    3820:	07db      	lsls	r3, r3, #31
    3822:	d5fc      	bpl.n	381e <_ZN14USBDeviceClass14armRecvCtrlOUTEm+0x42>
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3824:	1812      	adds	r2, r2, r0
    3826:	6890      	ldr	r0, [r2, #8]
	return usbd.epBank0ByteCount(ep);
    3828:	b2c0      	uxtb	r0, r0
}
    382a:	bd70      	pop	{r4, r5, r6, pc}
    382c:	20000764 	.word	0x20000764
    3830:	20000a30 	.word	0x20000a30
    3834:	f0003fff 	.word	0xf0003fff

00003838 <_ZN14USBDeviceClass11recvControlEPvm>:
{
    3838:	b570      	push	{r4, r5, r6, lr}
    383a:	0014      	movs	r4, r2
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    383c:	2240      	movs	r2, #64	; 0x40
    383e:	4b0b      	ldr	r3, [pc, #44]	; (386c <_ZN14USBDeviceClass11recvControlEPvm+0x34>)
    3840:	000d      	movs	r5, r1
    3842:	681b      	ldr	r3, [r3, #0]
    3844:	33ff      	adds	r3, #255	; 0xff
    3846:	7959      	ldrb	r1, [r3, #5]
    3848:	430a      	orrs	r2, r1
    384a:	715a      	strb	r2, [r3, #5]
	uint32_t read = armRecvCtrlOUT(0);
    384c:	2100      	movs	r1, #0
    384e:	f7ff ffc5 	bl	37dc <_ZN14USBDeviceClass14armRecvCtrlOUTEm>
    3852:	42a0      	cmp	r0, r4
    3854:	d900      	bls.n	3858 <_ZN14USBDeviceClass11recvControlEPvm+0x20>
    3856:	0020      	movs	r0, r4
	for (uint32_t i=0; i<len; i++) {
    3858:	2300      	movs	r3, #0
		data[i] = buffer[i];
    385a:	4905      	ldr	r1, [pc, #20]	; (3870 <_ZN14USBDeviceClass11recvControlEPvm+0x38>)
	for (uint32_t i=0; i<len; i++) {
    385c:	42a3      	cmp	r3, r4
    385e:	d003      	beq.n	3868 <_ZN14USBDeviceClass11recvControlEPvm+0x30>
		data[i] = buffer[i];
    3860:	5c5a      	ldrb	r2, [r3, r1]
    3862:	54ea      	strb	r2, [r5, r3]
	for (uint32_t i=0; i<len; i++) {
    3864:	3301      	adds	r3, #1
    3866:	e7f9      	b.n	385c <_ZN14USBDeviceClass11recvControlEPvm+0x24>
}
    3868:	bd70      	pop	{r4, r5, r6, pc}
    386a:	46c0      	nop			; (mov r8, r8)
    386c:	20000a30 	.word	0x20000a30
    3870:	20000764 	.word	0x20000764

00003874 <_ZN14USBDeviceClass7armRecvEm>:

uint8_t USBDeviceClass::armRecv(uint32_t ep)
{
    3874:	b510      	push	{r4, lr}
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3876:	b2c9      	uxtb	r1, r1
    3878:	480b      	ldr	r0, [pc, #44]	; (38a8 <_ZN14USBDeviceClass7armRecvEm+0x34>)
    387a:	0149      	lsls	r1, r1, #5
    387c:	1842      	adds	r2, r0, r1
    387e:	6893      	ldr	r3, [r2, #8]
    3880:	049b      	lsls	r3, r3, #18
    3882:	0c9b      	lsrs	r3, r3, #18
	uint16_t count = usbd.epBank0ByteCount(ep);
	if (count >= 64) {
    3884:	2b3f      	cmp	r3, #63	; 0x3f
    3886:	dd0b      	ble.n	38a0 <_ZN14USBDeviceClass7armRecvEm+0x2c>
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    3888:	6894      	ldr	r4, [r2, #8]
		usbd.epBank0SetByteCount(ep, count - 64);
    388a:	3b40      	subs	r3, #64	; 0x40
    388c:	049b      	lsls	r3, r3, #18
    388e:	0ba4      	lsrs	r4, r4, #14
    3890:	0c9b      	lsrs	r3, r3, #18
    3892:	03a4      	lsls	r4, r4, #14
    3894:	4323      	orrs	r3, r4
    3896:	6093      	str	r3, [r2, #8]
	inline uint16_t epBank0ByteCount(ep_t ep) { return EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT; }
    3898:	1841      	adds	r1, r0, r1
    389a:	6888      	ldr	r0, [r1, #8]
	} else {
		usbd.epBank0SetByteCount(ep, 0);
	}
	return usbd.epBank0ByteCount(ep);
    389c:	b2c0      	uxtb	r0, r0
}
    389e:	bd10      	pop	{r4, pc}
	inline void epBank0SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = bc; }
    38a0:	6893      	ldr	r3, [r2, #8]
    38a2:	0b9b      	lsrs	r3, r3, #14
    38a4:	039b      	lsls	r3, r3, #14
    38a6:	e7f6      	b.n	3896 <_ZN14USBDeviceClass7armRecvEm+0x22>
    38a8:	20000a30 	.word	0x20000a30

000038ac <_ZN14USBDeviceClass4recvEmPvm>:
{
    38ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    38ae:	001c      	movs	r4, r3
	if (!_usbConfiguration)
    38b0:	4b30      	ldr	r3, [pc, #192]	; (3974 <_ZN14USBDeviceClass4recvEmPvm+0xc8>)
{
    38b2:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    38b4:	681b      	ldr	r3, [r3, #0]
{
    38b6:	0006      	movs	r6, r0
    38b8:	000d      	movs	r5, r1
    38ba:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    38bc:	2b00      	cmp	r3, #0
    38be:	d055      	beq.n	396c <_ZN14USBDeviceClass4recvEmPvm+0xc0>
	if (rxLEDPulse == 0)
    38c0:	4f2d      	ldr	r7, [pc, #180]	; (3978 <_ZN14USBDeviceClass4recvEmPvm+0xcc>)
    38c2:	7839      	ldrb	r1, [r7, #0]
    38c4:	b2c9      	uxtb	r1, r1
    38c6:	2900      	cmp	r1, #0
    38c8:	d102      	bne.n	38d0 <_ZN14USBDeviceClass4recvEmPvm+0x24>
		digitalWrite(PIN_LED_RXL, LOW);
    38ca:	2014      	movs	r0, #20
    38cc:	f000 fd3c 	bl	4348 <digitalWrite>
	rxLEDPulse = TX_RX_LED_PULSE_MS;
    38d0:	2364      	movs	r3, #100	; 0x64
    38d2:	703b      	strb	r3, [r7, #0]
	if (epHandlers[ep]) {
    38d4:	4b29      	ldr	r3, [pc, #164]	; (397c <_ZN14USBDeviceClass4recvEmPvm+0xd0>)
    38d6:	00aa      	lsls	r2, r5, #2
    38d8:	58d0      	ldr	r0, [r2, r3]
    38da:	2800      	cmp	r0, #0
    38dc:	d008      	beq.n	38f0 <_ZN14USBDeviceClass4recvEmPvm+0x44>
		return epHandlers[ep]->recv(_data, len);
    38de:	6803      	ldr	r3, [r0, #0]
    38e0:	0022      	movs	r2, r4
    38e2:	685b      	ldr	r3, [r3, #4]
    38e4:	9901      	ldr	r1, [sp, #4]
    38e6:	4798      	blx	r3
    38e8:	0004      	movs	r4, r0
}
    38ea:	0020      	movs	r0, r4
    38ec:	b005      	add	sp, #20
    38ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (available(ep) < len)
    38f0:	0029      	movs	r1, r5
    38f2:	0030      	movs	r0, r6
    38f4:	f7ff ff46 	bl	3784 <_ZN14USBDeviceClass9availableEm>
    38f8:	4284      	cmp	r4, r0
    38fa:	d904      	bls.n	3906 <_ZN14USBDeviceClass4recvEmPvm+0x5a>
		len = available(ep);
    38fc:	0029      	movs	r1, r5
    38fe:	0030      	movs	r0, r6
    3900:	f7ff ff40 	bl	3784 <_ZN14USBDeviceClass9availableEm>
    3904:	0004      	movs	r4, r0
	armRecv(ep);
    3906:	0029      	movs	r1, r5
    3908:	0030      	movs	r0, r6
    390a:	f7ff ffb3 	bl	3874 <_ZN14USBDeviceClass7armRecvEm>
	inline void epBank0DisableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENCLR.bit.TRCPT0 = 1; }
    390e:	2101      	movs	r1, #1
    3910:	b2eb      	uxtb	r3, r5
    3912:	4f1b      	ldr	r7, [pc, #108]	; (3980 <_ZN14USBDeviceClass4recvEmPvm+0xd4>)
    3914:	9303      	str	r3, [sp, #12]
    3916:	015b      	lsls	r3, r3, #5
    3918:	9302      	str	r3, [sp, #8]
    391a:	9a02      	ldr	r2, [sp, #8]
    391c:	683b      	ldr	r3, [r7, #0]
	memcpy(_data, udd_ep_out_cache_buffer[ep], len);
    391e:	9801      	ldr	r0, [sp, #4]
    3920:	189b      	adds	r3, r3, r2
    3922:	33ff      	adds	r3, #255	; 0xff
    3924:	7a5a      	ldrb	r2, [r3, #9]
    3926:	430a      	orrs	r2, r1
    3928:	4916      	ldr	r1, [pc, #88]	; (3984 <_ZN14USBDeviceClass4recvEmPvm+0xd8>)
    392a:	725a      	strb	r2, [r3, #9]
    392c:	01ab      	lsls	r3, r5, #6
    392e:	18c9      	adds	r1, r1, r3
    3930:	0022      	movs	r2, r4
    3932:	f008 fc14 	bl	c15e <memcpy>
	if (len && !available(ep)) {
    3936:	2c00      	cmp	r4, #0
    3938:	d0d7      	beq.n	38ea <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    393a:	0029      	movs	r1, r5
    393c:	0030      	movs	r0, r6
    393e:	f7ff ff21 	bl	3784 <_ZN14USBDeviceClass9availableEm>
    3942:	2800      	cmp	r0, #0
    3944:	d1d1      	bne.n	38ea <_ZN14USBDeviceClass4recvEmPvm+0x3e>
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3946:	2140      	movs	r1, #64	; 0x40
    3948:	9b03      	ldr	r3, [sp, #12]
    394a:	683a      	ldr	r2, [r7, #0]
    394c:	3308      	adds	r3, #8
    394e:	015b      	lsls	r3, r3, #5
    3950:	18d3      	adds	r3, r2, r3
    3952:	7918      	ldrb	r0, [r3, #4]
    3954:	4301      	orrs	r1, r0
    3956:	7119      	strb	r1, [r3, #4]
	inline void epBank0AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(1); }
    3958:	2101      	movs	r1, #1
    395a:	71d9      	strb	r1, [r3, #7]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    395c:	2101      	movs	r1, #1
    395e:	9b02      	ldr	r3, [sp, #8]
    3960:	18d3      	adds	r3, r2, r3
    3962:	33ff      	adds	r3, #255	; 0xff
    3964:	7a9a      	ldrb	r2, [r3, #10]
    3966:	430a      	orrs	r2, r1
    3968:	729a      	strb	r2, [r3, #10]
    396a:	e7be      	b.n	38ea <_ZN14USBDeviceClass4recvEmPvm+0x3e>
		return -1;
    396c:	2401      	movs	r4, #1
    396e:	4264      	negs	r4, r4
    3970:	e7bb      	b.n	38ea <_ZN14USBDeviceClass4recvEmPvm+0x3e>
    3972:	46c0      	nop			; (mov r8, r8)
    3974:	20000a28 	.word	0x20000a28
    3978:	20000598 	.word	0x20000598
    397c:	2000057c 	.word	0x2000057c
    3980:	20000a30 	.word	0x20000a30
    3984:	20000764 	.word	0x20000764

00003988 <_ZN14USBDeviceClass4recvEm>:
{
    3988:	b513      	push	{r0, r1, r4, lr}
	if (recv(ep, &c, 1) != 1) {
    398a:	466b      	mov	r3, sp
    398c:	1ddc      	adds	r4, r3, #7
    398e:	0022      	movs	r2, r4
    3990:	2301      	movs	r3, #1
    3992:	f7ff ff8b 	bl	38ac <_ZN14USBDeviceClass4recvEmPvm>
    3996:	2801      	cmp	r0, #1
    3998:	d101      	bne.n	399e <_ZN14USBDeviceClass4recvEm+0x16>
		return c;
    399a:	7820      	ldrb	r0, [r4, #0]
}
    399c:	bd16      	pop	{r1, r2, r4, pc}
		return -1;
    399e:	2001      	movs	r0, #1
    39a0:	4240      	negs	r0, r0
    39a2:	e7fb      	b.n	399c <_ZN14USBDeviceClass4recvEm+0x14>

000039a4 <_ZN14USBDeviceClass4sendEmPKvm>:
	0
};

// Blocking Send of data to an endpoint
uint32_t USBDeviceClass::send(uint32_t ep, const void *data, uint32_t len)
{
    39a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    39a6:	001e      	movs	r6, r3
	uint32_t written = 0;
	uint32_t length = 0;

	if (!_usbConfiguration)
    39a8:	4b3a      	ldr	r3, [pc, #232]	; (3a94 <_ZN14USBDeviceClass4sendEmPKvm+0xf0>)
{
    39aa:	b085      	sub	sp, #20
	if (!_usbConfiguration)
    39ac:	681b      	ldr	r3, [r3, #0]
{
    39ae:	000f      	movs	r7, r1
    39b0:	9201      	str	r2, [sp, #4]
	if (!_usbConfiguration)
    39b2:	2b00      	cmp	r3, #0
    39b4:	d03f      	beq.n	3a36 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;
	if (len > 16384)
    39b6:	2380      	movs	r3, #128	; 0x80
    39b8:	01db      	lsls	r3, r3, #7
    39ba:	429e      	cmp	r6, r3
    39bc:	d83b      	bhi.n	3a36 <_ZN14USBDeviceClass4sendEmPKvm+0x92>
		return -1;

#ifdef PIN_LED_TXL
	if (txLEDPulse == 0)
    39be:	4c36      	ldr	r4, [pc, #216]	; (3a98 <_ZN14USBDeviceClass4sendEmPKvm+0xf4>)
    39c0:	7821      	ldrb	r1, [r4, #0]
    39c2:	b2c9      	uxtb	r1, r1
    39c4:	2900      	cmp	r1, #0
    39c6:	d102      	bne.n	39ce <_ZN14USBDeviceClass4sendEmPKvm+0x2a>
		digitalWrite(PIN_LED_TXL, LOW);
    39c8:	2015      	movs	r0, #21
    39ca:	f000 fcbd 	bl	4348 <digitalWrite>

	txLEDPulse = TX_RX_LED_PULSE_MS;
    39ce:	2364      	movs	r3, #100	; 0x64
	uint32_t written = 0;
    39d0:	2500      	movs	r5, #0
		} else {
			length = len;
		}

		/* memcopy could be safer in multi threaded environment */
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    39d2:	4a32      	ldr	r2, [pc, #200]	; (3a9c <_ZN14USBDeviceClass4sendEmPKvm+0xf8>)
	txLEDPulse = TX_RX_LED_PULSE_MS;
    39d4:	7023      	strb	r3, [r4, #0]
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    39d6:	01bb      	lsls	r3, r7, #6
    39d8:	18d3      	adds	r3, r2, r3
    39da:	9302      	str	r3, [sp, #8]
	while (len != 0)
    39dc:	2e00      	cmp	r6, #0
    39de:	d02c      	beq.n	3a3a <_ZN14USBDeviceClass4sendEmPKvm+0x96>
	inline bool epBank1IsReady(ep_t ep)    { return usb.DeviceEndpoint[ep].EPSTATUS.bit.BK1RDY; }
    39e0:	4b2f      	ldr	r3, [pc, #188]	; (3aa0 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    39e2:	681b      	ldr	r3, [r3, #0]
    39e4:	9303      	str	r3, [sp, #12]
    39e6:	23ff      	movs	r3, #255	; 0xff
    39e8:	403b      	ands	r3, r7
    39ea:	001c      	movs	r4, r3
    39ec:	9300      	str	r3, [sp, #0]
    39ee:	3408      	adds	r4, #8
    39f0:	9b03      	ldr	r3, [sp, #12]
    39f2:	0164      	lsls	r4, r4, #5
    39f4:	191c      	adds	r4, r3, r4
    39f6:	79a3      	ldrb	r3, [r4, #6]
    39f8:	09db      	lsrs	r3, r3, #7
		if (usbd.epBank1IsReady(ep)) {
    39fa:	d021      	beq.n	3a40 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
			uint32_t timeout = microsecondsToClockCycles(TX_TIMEOUT_MS * 1000) / 23;
    39fc:	4b29      	ldr	r3, [pc, #164]	; (3aa4 <_ZN14USBDeviceClass4sendEmPKvm+0x100>)
    39fe:	492a      	ldr	r1, [pc, #168]	; (3aa8 <_ZN14USBDeviceClass4sendEmPKvm+0x104>)
    3a00:	6818      	ldr	r0, [r3, #0]
    3a02:	f005 fd7d 	bl	9500 <__udivsi3>
    3a06:	4b29      	ldr	r3, [pc, #164]	; (3aac <_ZN14USBDeviceClass4sendEmPKvm+0x108>)
    3a08:	2117      	movs	r1, #23
    3a0a:	4358      	muls	r0, r3
    3a0c:	f005 fd78 	bl	9500 <__udivsi3>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    3a10:	4b27      	ldr	r3, [pc, #156]	; (3ab0 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    3a12:	79e2      	ldrb	r2, [r4, #7]
			while (!usbd.epBank1IsTransferComplete(ep)) {
    3a14:	0792      	lsls	r2, r2, #30
    3a16:	d413      	bmi.n	3a40 <_ZN14USBDeviceClass4sendEmPKvm+0x9c>
				if (LastTransmitTimedOut[ep] || timeout-- == 0) {
    3a18:	5dda      	ldrb	r2, [r3, r7]
    3a1a:	2a00      	cmp	r2, #0
    3a1c:	d101      	bne.n	3a22 <_ZN14USBDeviceClass4sendEmPKvm+0x7e>
    3a1e:	3801      	subs	r0, #1
    3a20:	d2f7      	bcs.n	3a12 <_ZN14USBDeviceClass4sendEmPKvm+0x6e>
					LastTransmitTimedOut[ep] = 1;
    3a22:	2201      	movs	r2, #1
    3a24:	55da      	strb	r2, [r3, r7]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3a26:	9b00      	ldr	r3, [sp, #0]
    3a28:	015a      	lsls	r2, r3, #5
    3a2a:	4b1d      	ldr	r3, [pc, #116]	; (3aa0 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
    3a2c:	189b      	adds	r3, r3, r2
    3a2e:	699a      	ldr	r2, [r3, #24]
    3a30:	0b92      	lsrs	r2, r2, #14
    3a32:	0392      	lsls	r2, r2, #14
    3a34:	619a      	str	r2, [r3, #24]
					return -1;
    3a36:	2501      	movs	r5, #1
    3a38:	426d      	negs	r5, r5
		written += length;
		len -= length;
		data = (char *)data + length;
	}
	return written;
}
    3a3a:	0028      	movs	r0, r5
    3a3c:	b005      	add	sp, #20
    3a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LastTransmitTimedOut[ep] = 0;
    3a40:	2200      	movs	r2, #0
    3a42:	4b1b      	ldr	r3, [pc, #108]	; (3ab0 <_ZN14USBDeviceClass4sendEmPKvm+0x10c>)
    3a44:	0034      	movs	r4, r6
    3a46:	55da      	strb	r2, [r3, r7]
    3a48:	2e3f      	cmp	r6, #63	; 0x3f
    3a4a:	d900      	bls.n	3a4e <_ZN14USBDeviceClass4sendEmPKvm+0xaa>
    3a4c:	243f      	movs	r4, #63	; 0x3f
		memcpy(&udd_ep_in_cache_buffer[ep], data, length);
    3a4e:	0022      	movs	r2, r4
    3a50:	9901      	ldr	r1, [sp, #4]
    3a52:	9802      	ldr	r0, [sp, #8]
    3a54:	f008 fb83 	bl	c15e <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3a58:	9b00      	ldr	r3, [sp, #0]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3a5a:	04a1      	lsls	r1, r4, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3a5c:	015a      	lsls	r2, r3, #5
    3a5e:	4b10      	ldr	r3, [pc, #64]	; (3aa0 <_ZN14USBDeviceClass4sendEmPKvm+0xfc>)
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3a60:	0c89      	lsrs	r1, r1, #18
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3a62:	189b      	adds	r3, r3, r2
    3a64:	9a02      	ldr	r2, [sp, #8]
		written += length;
    3a66:	192d      	adds	r5, r5, r4
    3a68:	615a      	str	r2, [r3, #20]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3a6a:	699a      	ldr	r2, [r3, #24]
		len -= length;
    3a6c:	1b36      	subs	r6, r6, r4
    3a6e:	0b92      	lsrs	r2, r2, #14
    3a70:	0392      	lsls	r2, r2, #14
    3a72:	430a      	orrs	r2, r1
    3a74:	619a      	str	r2, [r3, #24]
	inline void epBank1AckTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT(2); }
    3a76:	9b00      	ldr	r3, [sp, #0]
    3a78:	9a03      	ldr	r2, [sp, #12]
    3a7a:	3308      	adds	r3, #8
    3a7c:	015b      	lsls	r3, r3, #5
    3a7e:	18d3      	adds	r3, r2, r3
    3a80:	2202      	movs	r2, #2
    3a82:	71da      	strb	r2, [r3, #7]
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3a84:	7959      	ldrb	r1, [r3, #5]
    3a86:	3a82      	subs	r2, #130	; 0x82
    3a88:	430a      	orrs	r2, r1
    3a8a:	715a      	strb	r2, [r3, #5]
		data = (char *)data + length;
    3a8c:	9b01      	ldr	r3, [sp, #4]
    3a8e:	191b      	adds	r3, r3, r4
    3a90:	9301      	str	r3, [sp, #4]
	while (len != 0)
    3a92:	e7a3      	b.n	39dc <_ZN14USBDeviceClass4sendEmPKvm+0x38>
    3a94:	20000a28 	.word	0x20000a28
    3a98:	20000599 	.word	0x20000599
    3a9c:	200005a4 	.word	0x200005a4
    3aa0:	20000a30 	.word	0x20000a30
    3aa4:	20000088 	.word	0x20000088
    3aa8:	000f4240 	.word	0x000f4240
    3aac:	00011170 	.word	0x00011170
    3ab0:	2000059b 	.word	0x2000059b

00003ab4 <_ZN14USBDeviceClass7armSendEmPKvm>:

uint32_t USBDeviceClass::armSend(uint32_t ep, const void* data, uint32_t len)
{
    3ab4:	b570      	push	{r4, r5, r6, lr}
    3ab6:	000d      	movs	r5, r1
    3ab8:	001c      	movs	r4, r3
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    3aba:	4e0d      	ldr	r6, [pc, #52]	; (3af0 <_ZN14USBDeviceClass7armSendEmPKvm+0x3c>)
    3abc:	01ab      	lsls	r3, r5, #6
    3abe:	18f6      	adds	r6, r6, r3
{
    3ac0:	0011      	movs	r1, r2
	memcpy(&udd_ep_in_cache_buffer[ep], data, len);
    3ac2:	0030      	movs	r0, r6
    3ac4:	0022      	movs	r2, r4
    3ac6:	f008 fb4a 	bl	c15e <memcpy>
	inline void epBank1SetAddress(ep_t ep, void *addr) { EP[ep].DeviceDescBank[1].ADDR.reg = (uint32_t)addr; }
    3aca:	b2ed      	uxtb	r5, r5
    3acc:	4909      	ldr	r1, [pc, #36]	; (3af4 <_ZN14USBDeviceClass7armSendEmPKvm+0x40>)
    3ace:	016d      	lsls	r5, r5, #5
    3ad0:	194d      	adds	r5, r1, r5
    3ad2:	616e      	str	r6, [r5, #20]
	inline void epBank1SetMultiPacketSize(ep_t ep, uint16_t s) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = s; }
    3ad4:	69ab      	ldr	r3, [r5, #24]
    3ad6:	4a08      	ldr	r2, [pc, #32]	; (3af8 <_ZN14USBDeviceClass7armSendEmPKvm+0x44>)
	usbd.epBank1SetAddress(ep, &udd_ep_in_cache_buffer[ep]);
	usbd.epBank1SetMultiPacketSize(ep, 0);
	usbd.epBank1SetByteCount(ep, len);

	return len;
}
    3ad8:	0020      	movs	r0, r4
    3ada:	4013      	ands	r3, r2
    3adc:	61ab      	str	r3, [r5, #24]
	inline void epBank1SetByteCount(ep_t ep, uint16_t bc) { EP[ep].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = bc; }
    3ade:	69ab      	ldr	r3, [r5, #24]
    3ae0:	04a2      	lsls	r2, r4, #18
    3ae2:	0b9b      	lsrs	r3, r3, #14
    3ae4:	0c92      	lsrs	r2, r2, #18
    3ae6:	039b      	lsls	r3, r3, #14
    3ae8:	4313      	orrs	r3, r2
    3aea:	61ab      	str	r3, [r5, #24]
    3aec:	bd70      	pop	{r4, r5, r6, pc}
    3aee:	46c0      	nop			; (mov r8, r8)
    3af0:	200005a4 	.word	0x200005a4
    3af4:	20000a30 	.word	0x20000a30
    3af8:	f0003fff 	.word	0xf0003fff

00003afc <_ZN14USBDeviceClass11sendControlEPKvm>:

uint32_t USBDeviceClass::sendControl(const void* _data, uint32_t len)
{
    3afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const uint8_t *data = reinterpret_cast<const uint8_t *>(_data);
	uint32_t length = len;
	uint32_t sent = 0;
	uint32_t pos = 0;

	if (_dry_run == true)
    3afe:	4b10      	ldr	r3, [pc, #64]	; (3b40 <_ZN14USBDeviceClass11sendControlEPKvm+0x44>)
{
    3b00:	9001      	str	r0, [sp, #4]
	if (_dry_run == true)
    3b02:	781b      	ldrb	r3, [r3, #0]
{
    3b04:	000f      	movs	r7, r1
    3b06:	0015      	movs	r5, r2
	if (_dry_run == true)
    3b08:	2b00      	cmp	r3, #0
    3b0a:	d10c      	bne.n	3b26 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		return length;

	if (_pack_message == true) {
    3b0c:	4b0d      	ldr	r3, [pc, #52]	; (3b44 <_ZN14USBDeviceClass11sendControlEPKvm+0x48>)
    3b0e:	0016      	movs	r6, r2
    3b10:	781c      	ldrb	r4, [r3, #0]
    3b12:	2c00      	cmp	r4, #0
    3b14:	d009      	beq.n	3b2a <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
		memcpy(&_pack_buffer[_pack_size], data, len);
    3b16:	4e0c      	ldr	r6, [pc, #48]	; (3b48 <_ZN14USBDeviceClass11sendControlEPKvm+0x4c>)
    3b18:	480c      	ldr	r0, [pc, #48]	; (3b4c <_ZN14USBDeviceClass11sendControlEPKvm+0x50>)
    3b1a:	8834      	ldrh	r4, [r6, #0]
    3b1c:	1900      	adds	r0, r0, r4
		_pack_size += len;
    3b1e:	1964      	adds	r4, r4, r5
		memcpy(&_pack_buffer[_pack_size], data, len);
    3b20:	f008 fb1d 	bl	c15e <memcpy>
		_pack_size += len;
    3b24:	8034      	strh	r4, [r6, #0]
		pos += sent;
		len -= sent;
 	}

	return length;
}
    3b26:	0028      	movs	r0, r5
    3b28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 	while (len > 0)
    3b2a:	2e00      	cmp	r6, #0
    3b2c:	d0fb      	beq.n	3b26 <_ZN14USBDeviceClass11sendControlEPKvm+0x2a>
		sent = armSend(EP0, data + pos, len);
    3b2e:	193a      	adds	r2, r7, r4
    3b30:	0033      	movs	r3, r6
    3b32:	2100      	movs	r1, #0
    3b34:	9801      	ldr	r0, [sp, #4]
    3b36:	f7ff ffbd 	bl	3ab4 <_ZN14USBDeviceClass7armSendEmPKvm>
		pos += sent;
    3b3a:	1824      	adds	r4, r4, r0
		len -= sent;
    3b3c:	1a36      	subs	r6, r6, r0
 	while (len > 0)
    3b3e:	e7f4      	b.n	3b2a <_ZN14USBDeviceClass11sendControlEPKvm+0x2e>
    3b40:	20000924 	.word	0x20000924
    3b44:	20000a25 	.word	0x20000a25
    3b48:	20000a26 	.word	0x20000a26
    3b4c:	20000925 	.word	0x20000925

00003b50 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>:
{
    3b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return false;
    3b52:	2000      	movs	r0, #0
{
    3b54:	af00      	add	r7, sp, #0
    3b56:	000e      	movs	r6, r1
    3b58:	0015      	movs	r5, r2
	if (maxlen < 2)
    3b5a:	2a01      	cmp	r2, #1
    3b5c:	dd26      	ble.n	3bac <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x5c>
	uint8_t buffer[maxlen];
    3b5e:	1dd3      	adds	r3, r2, #7
    3b60:	466a      	mov	r2, sp
    3b62:	08db      	lsrs	r3, r3, #3
    3b64:	00db      	lsls	r3, r3, #3
    3b66:	1ad3      	subs	r3, r2, r3
    3b68:	469d      	mov	sp, r3
	buffer[0] = strlen((const char*)string) * 2 + 2;
    3b6a:	0008      	movs	r0, r1
    3b6c:	f009 fc29 	bl	d3c2 <strlen>
	uint8_t buffer[maxlen];
    3b70:	466c      	mov	r4, sp
	buffer[1] = 0x03;
    3b72:	2303      	movs	r3, #3
		buffer[i] = 0;
    3b74:	2100      	movs	r1, #0
	buffer[0] = strlen((const char*)string) * 2 + 2;
    3b76:	3001      	adds	r0, #1
    3b78:	0040      	lsls	r0, r0, #1
    3b7a:	7020      	strb	r0, [r4, #0]
	buffer[1] = 0x03;
    3b7c:	7063      	strb	r3, [r4, #1]
    3b7e:	1e5a      	subs	r2, r3, #1
    3b80:	b2d2      	uxtb	r2, r2
	for (i = 2; i < maxlen && *string; i++) {
    3b82:	4295      	cmp	r5, r2
    3b84:	dd0b      	ble.n	3b9e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
    3b86:	7830      	ldrb	r0, [r6, #0]
    3b88:	2800      	cmp	r0, #0
    3b8a:	d008      	beq.n	3b9e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4e>
		buffer[i++] = *string++;
    3b8c:	3601      	adds	r6, #1
    3b8e:	54a0      	strb	r0, [r4, r2]
		if (i == maxlen) break;
    3b90:	429d      	cmp	r5, r3
    3b92:	d003      	beq.n	3b9c <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x4c>
		buffer[i] = 0;
    3b94:	54e1      	strb	r1, [r4, r3]
    3b96:	3302      	adds	r3, #2
    3b98:	b2db      	uxtb	r3, r3
	for (i = 2; i < maxlen && *string; i++) {
    3b9a:	e7f0      	b.n	3b7e <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x2e>
    3b9c:	002a      	movs	r2, r5
	return USBDevice.sendControl(buffer, i);
    3b9e:	0021      	movs	r1, r4
    3ba0:	4803      	ldr	r0, [pc, #12]	; (3bb0 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh+0x60>)
    3ba2:	f7ff ffab 	bl	3afc <_ZN14USBDeviceClass11sendControlEPKvm>
    3ba6:	1e43      	subs	r3, r0, #1
    3ba8:	4198      	sbcs	r0, r3
    3baa:	b2c0      	uxtb	r0, r0
}
    3bac:	46bd      	mov	sp, r7
    3bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3bb0:	20000578 	.word	0x20000578

00003bb4 <_ZN14USBDeviceClass17sendConfigurationEm>:
{
    3bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t total = 0;
    3bb6:	2700      	movs	r7, #0
	_dry_run = true;
    3bb8:	2601      	movs	r6, #1
{
    3bba:	b087      	sub	sp, #28
	_dry_run = true;
    3bbc:	4b1e      	ldr	r3, [pc, #120]	; (3c38 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
{
    3bbe:	9100      	str	r1, [sp, #0]
	uint8_t interfaces = SendInterfaces(&total);
    3bc0:	a902      	add	r1, sp, #8
	_dry_run = true;
    3bc2:	701e      	strb	r6, [r3, #0]
{
    3bc4:	0005      	movs	r5, r0
	uint32_t total = 0;
    3bc6:	9702      	str	r7, [sp, #8]
	uint8_t interfaces = SendInterfaces(&total);
    3bc8:	f7ff fc5e 	bl	3488 <_ZN14USBDeviceClass14SendInterfacesEPm>
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    3bcc:	ac03      	add	r4, sp, #12
	uint8_t interfaces = SendInterfaces(&total);
    3bce:	9001      	str	r0, [sp, #4]
	ConfigDescriptor config = D_CONFIG((uint16_t)(total + sizeof(ConfigDescriptor)), interfaces);
    3bd0:	2209      	movs	r2, #9
    3bd2:	0039      	movs	r1, r7
    3bd4:	0020      	movs	r0, r4
    3bd6:	f008 fadd 	bl	c194 <memset>
    3bda:	2309      	movs	r3, #9
    3bdc:	7023      	strb	r3, [r4, #0]
    3bde:	2302      	movs	r3, #2
    3be0:	7063      	strb	r3, [r4, #1]
    3be2:	339e      	adds	r3, #158	; 0x9e
    3be4:	71e3      	strb	r3, [r4, #7]
    3be6:	335a      	adds	r3, #90	; 0x5a
    3be8:	7223      	strb	r3, [r4, #8]
    3bea:	9b02      	ldr	r3, [sp, #8]
    3bec:	7166      	strb	r6, [r4, #5]
    3bee:	3309      	adds	r3, #9
    3bf0:	8063      	strh	r3, [r4, #2]
    3bf2:	466b      	mov	r3, sp
    3bf4:	791b      	ldrb	r3, [r3, #4]
    3bf6:	7123      	strb	r3, [r4, #4]
	_dry_run = false;
    3bf8:	4b0f      	ldr	r3, [pc, #60]	; (3c38 <_ZN14USBDeviceClass17sendConfigurationEm+0x84>)
    3bfa:	701f      	strb	r7, [r3, #0]
	if (maxlen == sizeof(ConfigDescriptor)) {
    3bfc:	9b00      	ldr	r3, [sp, #0]
    3bfe:	2b09      	cmp	r3, #9
    3c00:	d107      	bne.n	3c12 <_ZN14USBDeviceClass17sendConfigurationEm+0x5e>
		sendControl(&config, sizeof(ConfigDescriptor));
    3c02:	001a      	movs	r2, r3
    3c04:	0021      	movs	r1, r4
		sendControl(_pack_buffer, _pack_size);
    3c06:	0028      	movs	r0, r5
    3c08:	f7ff ff78 	bl	3afc <_ZN14USBDeviceClass11sendControlEPKvm>
}
    3c0c:	2001      	movs	r0, #1
    3c0e:	b007      	add	sp, #28
    3c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_pack_message = true;
    3c12:	4b0a      	ldr	r3, [pc, #40]	; (3c3c <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
	sendControl(&config, sizeof(ConfigDescriptor));
    3c14:	2209      	movs	r2, #9
		_pack_message = true;
    3c16:	701e      	strb	r6, [r3, #0]
		_pack_size = 0;
    3c18:	4e09      	ldr	r6, [pc, #36]	; (3c40 <_ZN14USBDeviceClass17sendConfigurationEm+0x8c>)
	sendControl(&config, sizeof(ConfigDescriptor));
    3c1a:	0021      	movs	r1, r4
    3c1c:	0028      	movs	r0, r5
	total = 0;
    3c1e:	9702      	str	r7, [sp, #8]
		_pack_size = 0;
    3c20:	8037      	strh	r7, [r6, #0]
	sendControl(&config, sizeof(ConfigDescriptor));
    3c22:	f7ff ff6b 	bl	3afc <_ZN14USBDeviceClass11sendControlEPKvm>
	SendInterfaces(&total);
    3c26:	a902      	add	r1, sp, #8
    3c28:	0028      	movs	r0, r5
    3c2a:	f7ff fc2d 	bl	3488 <_ZN14USBDeviceClass14SendInterfacesEPm>
		_pack_message = false;
    3c2e:	4b03      	ldr	r3, [pc, #12]	; (3c3c <_ZN14USBDeviceClass17sendConfigurationEm+0x88>)
		sendControl(_pack_buffer, _pack_size);
    3c30:	8832      	ldrh	r2, [r6, #0]
		_pack_message = false;
    3c32:	701f      	strb	r7, [r3, #0]
		sendControl(_pack_buffer, _pack_size);
    3c34:	4903      	ldr	r1, [pc, #12]	; (3c44 <_ZN14USBDeviceClass17sendConfigurationEm+0x90>)
    3c36:	e7e6      	b.n	3c06 <_ZN14USBDeviceClass17sendConfigurationEm+0x52>
    3c38:	20000924 	.word	0x20000924
    3c3c:	20000a25 	.word	0x20000a25
    3c40:	20000a26 	.word	0x20000a26
    3c44:	20000925 	.word	0x20000925

00003c48 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>:
{
    3c48:	b570      	push	{r4, r5, r6, lr}
	uint8_t t = setup.wValueH;
    3c4a:	78ce      	ldrb	r6, [r1, #3]
{
    3c4c:	b092      	sub	sp, #72	; 0x48
    3c4e:	0005      	movs	r5, r0
    3c50:	000c      	movs	r4, r1
	if (t == USB_CONFIGURATION_DESCRIPTOR_TYPE)
    3c52:	2e02      	cmp	r6, #2
    3c54:	d108      	bne.n	3c68 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x20>
		return USBDevice.sendConfiguration(setup.wLength);
    3c56:	88c9      	ldrh	r1, [r1, #6]
    3c58:	482b      	ldr	r0, [pc, #172]	; (3d08 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc0>)
    3c5a:	f7ff ffab 	bl	3bb4 <_ZN14USBDeviceClass17sendConfigurationEm>
    3c5e:	1e43      	subs	r3, r0, #1
    3c60:	4198      	sbcs	r0, r3
    3c62:	b2c0      	uxtb	r0, r0
}
    3c64:	b012      	add	sp, #72	; 0x48
    3c66:	bd70      	pop	{r4, r5, r6, pc}
	ret = PluggableUSB().getDescriptor(setup);
    3c68:	f002 f840 	bl	5cec <_Z12PluggableUSBv>
    3c6c:	0021      	movs	r1, r4
    3c6e:	f002 f80d 	bl	5c8c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
	if (ret != 0) {
    3c72:	2800      	cmp	r0, #0
    3c74:	d003      	beq.n	3c7e <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x36>
		return (ret > 0 ? true : false);
    3c76:	17c3      	asrs	r3, r0, #31
    3c78:	1a18      	subs	r0, r3, r0
    3c7a:	0fc0      	lsrs	r0, r0, #31
    3c7c:	e7f2      	b.n	3c64 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	if (t == USB_DEVICE_DESCRIPTOR_TYPE)
    3c7e:	2e01      	cmp	r6, #1
    3c80:	d10b      	bne.n	3c9a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x52>
		if (*desc_addr > setup.wLength) {
    3c82:	88e2      	ldrh	r2, [r4, #6]
    3c84:	4921      	ldr	r1, [pc, #132]	; (3d0c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc4>)
    3c86:	2a11      	cmp	r2, #17
    3c88:	dc10      	bgt.n	3cac <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
			desc_length = setup.wLength;
    3c8a:	b2d2      	uxtb	r2, r2
	if (desc_length == 0) {
    3c8c:	2a00      	cmp	r2, #0
    3c8e:	d00d      	beq.n	3cac <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x64>
	sendControl(desc_addr, desc_length);
    3c90:	0028      	movs	r0, r5
    3c92:	f7ff ff33 	bl	3afc <_ZN14USBDeviceClass11sendControlEPKvm>
	return true;
    3c96:	2001      	movs	r0, #1
    3c98:	e7e4      	b.n	3c64 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
    3c9a:	2e03      	cmp	r6, #3
    3c9c:	d1e2      	bne.n	3c64 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		if (setup.wValueL == 0) {
    3c9e:	78a3      	ldrb	r3, [r4, #2]
    3ca0:	2b00      	cmp	r3, #0
    3ca2:	d105      	bne.n	3cb0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x68>
		if (*desc_addr > setup.wLength) {
    3ca4:	88e2      	ldrh	r2, [r4, #6]
    3ca6:	491a      	ldr	r1, [pc, #104]	; (3d10 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xc8>)
    3ca8:	2a03      	cmp	r2, #3
    3caa:	ddee      	ble.n	3c8a <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x42>
		desc_length = *desc_addr;
    3cac:	780a      	ldrb	r2, [r1, #0]
    3cae:	e7ef      	b.n	3c90 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x48>
		else if (setup.wValueL == IPRODUCT) {
    3cb0:	2b02      	cmp	r3, #2
    3cb2:	d105      	bne.n	3cc0 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x78>
			return sendStringDescriptor(STRING_PRODUCT, setup.wLength);
    3cb4:	79a2      	ldrb	r2, [r4, #6]
    3cb6:	4917      	ldr	r1, [pc, #92]	; (3d14 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xcc>)
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    3cb8:	0028      	movs	r0, r5
    3cba:	f7ff ff49 	bl	3b50 <_ZN14USBDeviceClass20sendStringDescriptorEPKhh>
    3cbe:	e7d1      	b.n	3c64 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
		else if (setup.wValueL == IMANUFACTURER) {
    3cc0:	2b01      	cmp	r3, #1
    3cc2:	d102      	bne.n	3cca <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x82>
			return sendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
    3cc4:	79a2      	ldrb	r2, [r4, #6]
    3cc6:	4914      	ldr	r1, [pc, #80]	; (3d18 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd0>)
    3cc8:	e7f6      	b.n	3cb8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
		else if (setup.wValueL == ISERIAL) {
    3cca:	2b03      	cmp	r3, #3
    3ccc:	d1ca      	bne.n	3c64 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x1c>
			utox8(SERIAL_NUMBER_WORD_0, &name[0]);
    3cce:	4b13      	ldr	r3, [pc, #76]	; (3d1c <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd4>)
    3cd0:	a901      	add	r1, sp, #4
    3cd2:	6818      	ldr	r0, [r3, #0]
    3cd4:	f7ff f9d0 	bl	3078 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_1, &name[8]);
    3cd8:	4b11      	ldr	r3, [pc, #68]	; (3d20 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xd8>)
    3cda:	a903      	add	r1, sp, #12
    3cdc:	6818      	ldr	r0, [r3, #0]
    3cde:	f7ff f9cb 	bl	3078 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_2, &name[16]);
    3ce2:	4b10      	ldr	r3, [pc, #64]	; (3d24 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xdc>)
    3ce4:	a905      	add	r1, sp, #20
    3ce6:	6818      	ldr	r0, [r3, #0]
    3ce8:	f7ff f9c6 	bl	3078 <_ZL5utox8mPc>
			utox8(SERIAL_NUMBER_WORD_3, &name[24]);
    3cec:	4b0e      	ldr	r3, [pc, #56]	; (3d28 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0xe0>)
    3cee:	a907      	add	r1, sp, #28
    3cf0:	6818      	ldr	r0, [r3, #0]
    3cf2:	f7ff f9c1 	bl	3078 <_ZL5utox8mPc>
			PluggableUSB().getShortName(&name[32]);
    3cf6:	f001 fff9 	bl	5cec <_Z12PluggableUSBv>
    3cfa:	a909      	add	r1, sp, #36	; 0x24
    3cfc:	f001 ffd6 	bl	5cac <_ZN13PluggableUSB_12getShortNameEPc>
			return sendStringDescriptor((uint8_t*)name, setup.wLength);
    3d00:	79a2      	ldrb	r2, [r4, #6]
    3d02:	a901      	add	r1, sp, #4
    3d04:	e7d8      	b.n	3cb8 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup+0x70>
    3d06:	46c0      	nop			; (mov r8, r8)
    3d08:	20000578 	.word	0x20000578
    3d0c:	00010506 	.word	0x00010506
    3d10:	000104f2 	.word	0x000104f2
    3d14:	000104e4 	.word	0x000104e4
    3d18:	000104f6 	.word	0x000104f6
    3d1c:	0080a00c 	.word	0x0080a00c
    3d20:	0080a040 	.word	0x0080a040
    3d24:	0080a044 	.word	0x0080a044
    3d28:	0080a048 	.word	0x0080a048

00003d2c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>:
	// Set the byte count as zero
	usbd.epBank1SetByteCount(ep, 0);
}

bool USBDeviceClass::handleStandardSetup(USBSetup &setup)
{
    3d2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3d2e:	0006      	movs	r6, r0
	switch (setup.bRequest) {
    3d30:	7848      	ldrb	r0, [r1, #1]
{
    3d32:	000d      	movs	r5, r1
	switch (setup.bRequest) {
    3d34:	280b      	cmp	r0, #11
    3d36:	d811      	bhi.n	3d5c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
    3d38:	f005 fbd8 	bl	94ec <__gnu_thumb1_case_uqi>
    3d3c:	2e101d06 	.word	0x2e101d06
    3d40:	70484310 	.word	0x70484310
    3d44:	6c694f4c 	.word	0x6c694f4c
	case GET_STATUS:
		if (setup.bmRequestType == 0)  // device
    3d48:	7809      	ldrb	r1, [r1, #0]
    3d4a:	aa01      	add	r2, sp, #4
    3d4c:	2900      	cmp	r1, #0
    3d4e:	d107      	bne.n	3d60 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x34>
		{
			// Send the device status
			// TODO: Check current configuration for power mode (if device is configured)
			// TODO: Check if remote wake-up is enabled
			uint8_t buff[] = { 0, 0 };
			armSend(0, buff, 2);
    3d50:	2302      	movs	r3, #2
			uint8_t buff[] = { 0, 0 };
    3d52:	7011      	strb	r1, [r2, #0]
    3d54:	7051      	strb	r1, [r2, #1]
			armSend(0, buff, 2);
    3d56:	0030      	movs	r0, r6
    3d58:	f7ff feac 	bl	3ab4 <_ZN14USBDeviceClass7armSendEmPKvm>
			return true;
    3d5c:	2001      	movs	r0, #1
		return true;

	default:
		return true;
	}
}
    3d5e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
			uint8_t buff[] = { 0, 0 };
    3d60:	2300      	movs	r3, #0
    3d62:	7013      	strb	r3, [r2, #0]
    3d64:	7053      	strb	r3, [r2, #1]
			if (isEndpointHalt == 1)
    3d66:	4b2e      	ldr	r3, [pc, #184]	; (3e20 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
			if (isRemoteWakeUpEnabled == 1)
    3d68:	781b      	ldrb	r3, [r3, #0]
    3d6a:	2b01      	cmp	r3, #1
    3d6c:	d100      	bne.n	3d70 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x44>
				buff[0] = 1;
    3d6e:	7013      	strb	r3, [r2, #0]
			armSend(0, buff, 2);
    3d70:	2302      	movs	r3, #2
		armSend(0, (void*)&_usbSetInterface, 1);
    3d72:	2100      	movs	r1, #0
    3d74:	e7ef      	b.n	3d56 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    3d76:	788a      	ldrb	r2, [r1, #2]
    3d78:	2300      	movs	r3, #0
    3d7a:	2a01      	cmp	r2, #1
    3d7c:	d104      	bne.n	3d88 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x5c>
			uint8_t buff[] = { 0, 0 };
    3d7e:	aa01      	add	r2, sp, #4
    3d80:	7013      	strb	r3, [r2, #0]
    3d82:	7053      	strb	r3, [r2, #1]
			if (isRemoteWakeUpEnabled == 1)
    3d84:	4b27      	ldr	r3, [pc, #156]	; (3e24 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
    3d86:	e7ef      	b.n	3d68 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x3c>
			isEndpointHalt = 0;
    3d88:	4a25      	ldr	r2, [pc, #148]	; (3e20 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    3d8a:	7013      	strb	r3, [r2, #0]
    3d8c:	4a26      	ldr	r2, [pc, #152]	; (3e28 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    3d8e:	6993      	ldr	r3, [r2, #24]
    3d90:	0b9b      	lsrs	r3, r3, #14
    3d92:	039b      	lsls	r3, r3, #14
    3d94:	6193      	str	r3, [r2, #24]
    3d96:	e7e1      	b.n	3d5c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		if (setup.wValueL == 1) // DEVICEREMOTEWAKEUP
    3d98:	788c      	ldrb	r4, [r1, #2]
    3d9a:	2c01      	cmp	r4, #1
    3d9c:	d106      	bne.n	3dac <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x80>
			uint8_t buff[] = { 0 };
    3d9e:	2100      	movs	r1, #0
			isRemoteWakeUpEnabled = 1;
    3da0:	4b20      	ldr	r3, [pc, #128]	; (3e24 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf8>)
			uint8_t buff[] = { 0 };
    3da2:	aa01      	add	r2, sp, #4
			isRemoteWakeUpEnabled = 1;
    3da4:	701c      	strb	r4, [r3, #0]
			uint8_t buff[] = { 0 };
    3da6:	7011      	strb	r1, [r2, #0]
			armSend(0, buff, 1);
    3da8:	0023      	movs	r3, r4
    3daa:	e7d4      	b.n	3d56 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x2a>
		if (setup.wValueL == 0) // ENDPOINTHALT
    3dac:	2c00      	cmp	r4, #0
    3dae:	d108      	bne.n	3dc2 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x96>
			isEndpointHalt = 1;
    3db0:	2001      	movs	r0, #1
    3db2:	4b1b      	ldr	r3, [pc, #108]	; (3e20 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xf4>)
    3db4:	4a1c      	ldr	r2, [pc, #112]	; (3e28 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    3db6:	7018      	strb	r0, [r3, #0]
    3db8:	6993      	ldr	r3, [r2, #24]
    3dba:	0b9b      	lsrs	r3, r3, #14
    3dbc:	039b      	lsls	r3, r3, #14
    3dbe:	6193      	str	r3, [r2, #24]
			return true;
    3dc0:	e7cd      	b.n	3d5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		setAddress(setup.wValueL);
    3dc2:	78a9      	ldrb	r1, [r5, #2]
    3dc4:	0030      	movs	r0, r6
    3dc6:	f7ff fc11 	bl	35ec <_ZN14USBDeviceClass10setAddressEm>
    3dca:	e7c7      	b.n	3d5c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x30>
		return sendDescriptor(setup);
    3dcc:	0030      	movs	r0, r6
    3dce:	f7ff ff3b 	bl	3c48 <_ZN14USBDeviceClass14sendDescriptorER8USBSetup>
    3dd2:	e7c4      	b.n	3d5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
		armSend(0, (void*)&_usbConfiguration, 1);
    3dd4:	2301      	movs	r3, #1
    3dd6:	4a15      	ldr	r2, [pc, #84]	; (3e2c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    3dd8:	e7cb      	b.n	3d72 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    3dda:	780b      	ldrb	r3, [r1, #0]
			return false;
    3ddc:	2000      	movs	r0, #0
		if (REQUEST_DEVICE == (setup.bmRequestType & REQUEST_RECIPIENT)) {
    3dde:	06db      	lsls	r3, r3, #27
    3de0:	d1bd      	bne.n	3d5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
			initEndpoints();
    3de2:	0030      	movs	r0, r6
    3de4:	f7ff fcbc 	bl	3760 <_ZN14USBDeviceClass13initEndpointsEv>
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    3de8:	202a      	movs	r0, #42	; 0x2a
    3dea:	2102      	movs	r1, #2
			_usbConfiguration = setup.wValueL;
    3dec:	78aa      	ldrb	r2, [r5, #2]
    3dee:	4b0f      	ldr	r3, [pc, #60]	; (3e2c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x100>)
    3df0:	30ff      	adds	r0, #255	; 0xff
    3df2:	601a      	str	r2, [r3, #0]
    3df4:	4a0c      	ldr	r2, [pc, #48]	; (3e28 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0xfc>)
    3df6:	6813      	ldr	r3, [r2, #0]
    3df8:	5c1c      	ldrb	r4, [r3, r0]
    3dfa:	4321      	orrs	r1, r4
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3dfc:	244a      	movs	r4, #74	; 0x4a
	inline void epBank1EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT1 = 1; }
    3dfe:	5419      	strb	r1, [r3, r0]
	inline void epBank0EnableTransferComplete(ep_t ep) { usb.DeviceEndpoint[ep].EPINTENSET.bit.TRCPT0 = 1; }
    3e00:	34ff      	adds	r4, #255	; 0xff
    3e02:	5d19      	ldrb	r1, [r3, r4]
    3e04:	3829      	subs	r0, #41	; 0x29
    3e06:	38ff      	subs	r0, #255	; 0xff
    3e08:	4301      	orrs	r1, r0
    3e0a:	5519      	strb	r1, [r3, r4]
    3e0c:	e7d4      	b.n	3db8 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x8c>
		armSend(0, (void*)&_usbSetInterface, 1);
    3e0e:	2301      	movs	r3, #1
    3e10:	4a07      	ldr	r2, [pc, #28]	; (3e30 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    3e12:	e7ae      	b.n	3d72 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x46>
		_usbSetInterface = setup.wValueL;
    3e14:	788a      	ldrb	r2, [r1, #2]
    3e16:	4b06      	ldr	r3, [pc, #24]	; (3e30 <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x104>)
    3e18:	601a      	str	r2, [r3, #0]
    3e1a:	e7b7      	b.n	3d8c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x60>
		return false;
    3e1c:	2000      	movs	r0, #0
    3e1e:	e79e      	b.n	3d5e <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup+0x32>
    3e20:	2000059a 	.word	0x2000059a
    3e24:	200005a2 	.word	0x200005a2
    3e28:	20000a30 	.word	0x20000a30
    3e2c:	20000a28 	.word	0x20000a28
    3e30:	20000a2c 	.word	0x20000a2c

00003e34 <_ZN14USBDeviceClass10ISRHandlerEv>:
}

#else
void USBDeviceClass::ISRHandler()
{
	if (_pack_message == true) {
    3e34:	4b4c      	ldr	r3, [pc, #304]	; (3f68 <_ZN14USBDeviceClass10ISRHandlerEv+0x134>)
{
    3e36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (_pack_message == true) {
    3e38:	781c      	ldrb	r4, [r3, #0]
{
    3e3a:	0007      	movs	r7, r0
	if (_pack_message == true) {
    3e3c:	2c00      	cmp	r4, #0
    3e3e:	d000      	beq.n	3e42 <_ZN14USBDeviceClass10ISRHandlerEv+0xe>
    3e40:	e091      	b.n	3f66 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
	inline bool isEndOfResetInterrupt()        { return usb.INTFLAG.bit.EORST; }
    3e42:	4e4a      	ldr	r6, [pc, #296]	; (3f6c <_ZN14USBDeviceClass10ISRHandlerEv+0x138>)
    3e44:	6833      	ldr	r3, [r6, #0]
    3e46:	8b9b      	ldrh	r3, [r3, #28]
		return;
	}
	// End-Of-Reset
	if (usbd.isEndOfResetInterrupt())
    3e48:	071b      	lsls	r3, r3, #28
    3e4a:	d50e      	bpl.n	3e6a <_ZN14USBDeviceClass10ISRHandlerEv+0x36>
    3e4c:	0021      	movs	r1, r4
    3e4e:	0020      	movs	r0, r4
    3e50:	f7ff f924 	bl	309c <_ZN14USBDeviceClass6initEPEmm.part.5>
	inline void epBank0EnableSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTENSET.bit.RXSTP = 1; }
    3e54:	6832      	ldr	r2, [r6, #0]
    3e56:	2310      	movs	r3, #16
    3e58:	0011      	movs	r1, r2
    3e5a:	31ff      	adds	r1, #255	; 0xff
    3e5c:	7a88      	ldrb	r0, [r1, #10]
    3e5e:	4303      	orrs	r3, r0
    3e60:	728b      	strb	r3, [r1, #10]
		initEP(0, USB_ENDPOINT_TYPE_CONTROL);

		// Enable Setup-Received interrupt
		usbd.epBank0EnableSetupReceived(0);

		_usbConfiguration = 0;
    3e62:	4b43      	ldr	r3, [pc, #268]	; (3f70 <_ZN14USBDeviceClass10ISRHandlerEv+0x13c>)
    3e64:	601c      	str	r4, [r3, #0]
	inline void ackEndOfResetInterrupt()       { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_EORST; }
    3e66:	2308      	movs	r3, #8
    3e68:	8393      	strh	r3, [r2, #28]
	inline bool isStartOfFrameInterrupt()      { return usb.INTFLAG.bit.SOF; }
    3e6a:	6833      	ldr	r3, [r6, #0]
    3e6c:	8b9a      	ldrh	r2, [r3, #28]

		usbd.ackEndOfResetInterrupt();
	}

	// Start-Of-Frame
	if (usbd.isStartOfFrameInterrupt())
    3e6e:	0752      	lsls	r2, r2, #29
    3e70:	d51f      	bpl.n	3eb2 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
	inline void ackStartOfFrameInterrupt()     { usb.INTFLAG.reg = USB_DEVICE_INTFLAG_SOF; }
    3e72:	2204      	movs	r2, #4
    3e74:	839a      	strh	r2, [r3, #28]
	{
		usbd.ackStartOfFrameInterrupt();

		// check whether the one-shot period has elapsed.  if so, turn off the LED
#ifdef PIN_LED_TXL
		if (txLEDPulse > 0) {
    3e76:	4a3f      	ldr	r2, [pc, #252]	; (3f74 <_ZN14USBDeviceClass10ISRHandlerEv+0x140>)
    3e78:	7813      	ldrb	r3, [r2, #0]
    3e7a:	2b00      	cmp	r3, #0
    3e7c:	d00a      	beq.n	3e94 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
			txLEDPulse--;
    3e7e:	7813      	ldrb	r3, [r2, #0]
    3e80:	3b01      	subs	r3, #1
    3e82:	b2db      	uxtb	r3, r3
    3e84:	7013      	strb	r3, [r2, #0]
			if (txLEDPulse == 0)
    3e86:	7813      	ldrb	r3, [r2, #0]
    3e88:	2b00      	cmp	r3, #0
    3e8a:	d103      	bne.n	3e94 <_ZN14USBDeviceClass10ISRHandlerEv+0x60>
				digitalWrite(PIN_LED_TXL, HIGH);
    3e8c:	2101      	movs	r1, #1
    3e8e:	2015      	movs	r0, #21
    3e90:	f000 fa5a 	bl	4348 <digitalWrite>
		}
#endif

#ifdef PIN_LED_RXL
		if (rxLEDPulse > 0) {
    3e94:	4a38      	ldr	r2, [pc, #224]	; (3f78 <_ZN14USBDeviceClass10ISRHandlerEv+0x144>)
    3e96:	7813      	ldrb	r3, [r2, #0]
    3e98:	2b00      	cmp	r3, #0
    3e9a:	d00a      	beq.n	3eb2 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
			rxLEDPulse--;
    3e9c:	7813      	ldrb	r3, [r2, #0]
    3e9e:	3b01      	subs	r3, #1
    3ea0:	b2db      	uxtb	r3, r3
    3ea2:	7013      	strb	r3, [r2, #0]
			if (rxLEDPulse == 0)
    3ea4:	7813      	ldrb	r3, [r2, #0]
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d103      	bne.n	3eb2 <_ZN14USBDeviceClass10ISRHandlerEv+0x7e>
				digitalWrite(PIN_LED_RXL, HIGH);
    3eaa:	2101      	movs	r1, #1
    3eac:	2014      	movs	r0, #20
    3eae:	f000 fa4b 	bl	4348 <digitalWrite>
	inline bool epBank0IsSetupReceived(ep_t ep)     { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.RXSTP; }
    3eb2:	6833      	ldr	r3, [r6, #0]
    3eb4:	33ff      	adds	r3, #255	; 0xff
    3eb6:	7a1a      	ldrb	r2, [r3, #8]
		}
#endif
	}

	// Endpoint 0 Received Setup interrupt
	if (usbd.epBank0IsSetupReceived(0))
    3eb8:	06d2      	lsls	r2, r2, #27
    3eba:	d520      	bpl.n	3efe <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank0AckSetupReceived(ep_t ep)    { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP; }
    3ebc:	2210      	movs	r2, #16
    3ebe:	721a      	strb	r2, [r3, #8]
	inline void epBank0ResetReady(ep_t ep) { usb.DeviceEndpoint[ep].EPSTATUSCLR.bit.BK0RDY = 1; }
    3ec0:	7959      	ldrb	r1, [r3, #5]
    3ec2:	3230      	adds	r2, #48	; 0x30
    3ec4:	430a      	orrs	r2, r1
    3ec6:	715a      	strb	r2, [r3, #5]
		/* Clear the Bank 0 ready flag on Control OUT */
		// The RAM Buffer is empty: we can receive data
		usbd.epBank0ResetReady(0);

		bool ok;
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    3ec8:	2360      	movs	r3, #96	; 0x60
    3eca:	492c      	ldr	r1, [pc, #176]	; (3f7c <_ZN14USBDeviceClass10ISRHandlerEv+0x148>)
			// Standard Requests
			ok = handleStandardSetup(*setup);
    3ecc:	0038      	movs	r0, r7
		if (REQUEST_STANDARD == (setup->bmRequestType & REQUEST_TYPE)) {
    3ece:	780a      	ldrb	r2, [r1, #0]
    3ed0:	421a      	tst	r2, r3
    3ed2:	d135      	bne.n	3f40 <_ZN14USBDeviceClass10ISRHandlerEv+0x10c>
			ok = handleStandardSetup(*setup);
    3ed4:	f7ff ff2a 	bl	3d2c <_ZN14USBDeviceClass19handleStandardSetupER8USBSetup>
		} else {
			// Class Interface Requests
			ok = handleClassInterfaceSetup(*setup);
		}

		if (ok) {
    3ed8:	2800      	cmp	r0, #0
    3eda:	d034      	beq.n	3f46 <_ZN14USBDeviceClass10ISRHandlerEv+0x112>
	inline void epBank1SetReady(ep_t ep)   { usb.DeviceEndpoint[ep].EPSTATUSSET.bit.BK1RDY = 1; }
    3edc:	2280      	movs	r2, #128	; 0x80
    3ede:	6833      	ldr	r3, [r6, #0]
    3ee0:	4252      	negs	r2, r2
    3ee2:	33ff      	adds	r3, #255	; 0xff
    3ee4:	7999      	ldrb	r1, [r3, #6]
    3ee6:	430a      	orrs	r2, r1
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    3ee8:	719a      	strb	r2, [r3, #6]
	inline bool epBank1IsStalled(ep_t ep)           { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.STALL1; }
    3eea:	6833      	ldr	r3, [r6, #0]
    3eec:	33ff      	adds	r3, #255	; 0xff
    3eee:	7a1a      	ldrb	r2, [r3, #8]
			usbd.epBank1SetReady(0);
		} else {
			stall(0);
		}

		if (usbd.epBank1IsStalled(0))
    3ef0:	0652      	lsls	r2, r2, #25
    3ef2:	d504      	bpl.n	3efe <_ZN14USBDeviceClass10ISRHandlerEv+0xca>
	inline void epBank1AckStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL(2); }
    3ef4:	2240      	movs	r2, #64	; 0x40
    3ef6:	721a      	strb	r2, [r3, #8]
	inline void epBank1DisableStalled(ep_t ep)          { usb.DeviceEndpoint[ep].EPINTENCLR.bit.STALL1 = 1; }
    3ef8:	7a59      	ldrb	r1, [r3, #9]
    3efa:	430a      	orrs	r2, r1
    3efc:	725a      	strb	r2, [r3, #9]
	inline uint16_t epInterruptSummary() { return usb.EPINTSMRY.reg; }
    3efe:	6833      	ldr	r3, [r6, #0]
		}

	} // end Received Setup handler

        uint8_t i = (USB_EPT_NUM - 1);
        uint8_t ept_int = usbd.epInterruptSummary() & 0xFE; // Remove endpoint number 0 (setup)
    3f00:	2507      	movs	r5, #7
    3f02:	8c1c      	ldrh	r4, [r3, #32]
    3f04:	2301      	movs	r3, #1
    3f06:	439c      	bics	r4, r3
    3f08:	b2e4      	uxtb	r4, r4
        while (ept_int && i)
        {
                // Check if endpoint has a pending interrupt
                if ((ept_int & (1 << i)) != 0)
    3f0a:	9301      	str	r3, [sp, #4]
    3f0c:	b2e9      	uxtb	r1, r5
        while (ept_int && i)
    3f0e:	2c00      	cmp	r4, #0
    3f10:	d029      	beq.n	3f66 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
    3f12:	2d00      	cmp	r5, #0
    3f14:	d027      	beq.n	3f66 <_ZN14USBDeviceClass10ISRHandlerEv+0x132>
                if ((ept_int & (1 << i)) != 0)
    3f16:	0023      	movs	r3, r4
    3f18:	412b      	asrs	r3, r5
    3f1a:	9a01      	ldr	r2, [sp, #4]
    3f1c:	4213      	tst	r3, r2
    3f1e:	d00d      	beq.n	3f3c <_ZN14USBDeviceClass10ISRHandlerEv+0x108>
	inline bool epBank0IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT0; }
    3f20:	002b      	movs	r3, r5
    3f22:	6832      	ldr	r2, [r6, #0]
    3f24:	3308      	adds	r3, #8
    3f26:	015b      	lsls	r3, r3, #5
    3f28:	18d3      	adds	r3, r2, r3
    3f2a:	79da      	ldrb	r2, [r3, #7]
                {
                        // Endpoint Transfer Complete (0/1) Interrupt
                        if (usbd.epBank0IsTransferComplete(i) ||
    3f2c:	07d2      	lsls	r2, r2, #31
    3f2e:	d411      	bmi.n	3f54 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
	inline bool epBank1IsTransferComplete(ep_t ep)  { return usb.DeviceEndpoint[ep].EPINTFLAG.bit.TRCPT1; }
    3f30:	79db      	ldrb	r3, [r3, #7]
    3f32:	079b      	lsls	r3, r3, #30
    3f34:	d40e      	bmi.n	3f54 <_ZN14USBDeviceClass10ISRHandlerEv+0x120>
                                        epHandlers[i]->handleEndpoint();
                                } else {
                                        handleEndpoint(i);
                                }
                        }
                        ept_int &= ~(1 << i);
    3f36:	9b01      	ldr	r3, [sp, #4]
    3f38:	40ab      	lsls	r3, r5
    3f3a:	439c      	bics	r4, r3
    3f3c:	3d01      	subs	r5, #1
    3f3e:	e7e5      	b.n	3f0c <_ZN14USBDeviceClass10ISRHandlerEv+0xd8>
			ok = handleClassInterfaceSetup(*setup);
    3f40:	f7ff fb78 	bl	3634 <_ZN14USBDeviceClass25handleClassInterfaceSetupER8USBSetup>
    3f44:	e7c8      	b.n	3ed8 <_ZN14USBDeviceClass10ISRHandlerEv+0xa4>
	USB->DEVICE.DeviceEndpoint[ep].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ(2);
    3f46:	2220      	movs	r2, #32
    3f48:	4b0d      	ldr	r3, [pc, #52]	; (3f80 <_ZN14USBDeviceClass10ISRHandlerEv+0x14c>)
    3f4a:	e7cd      	b.n	3ee8 <_ZN14USBDeviceClass10ISRHandlerEv+0xb4>
                                        epHandlers[i]->handleEndpoint();
    3f4c:	6803      	ldr	r3, [r0, #0]
    3f4e:	681b      	ldr	r3, [r3, #0]
    3f50:	4798      	blx	r3
    3f52:	e7f0      	b.n	3f36 <_ZN14USBDeviceClass10ISRHandlerEv+0x102>
                                if (epHandlers[i]) {
    3f54:	4b0b      	ldr	r3, [pc, #44]	; (3f84 <_ZN14USBDeviceClass10ISRHandlerEv+0x150>)
    3f56:	00aa      	lsls	r2, r5, #2
    3f58:	58d0      	ldr	r0, [r2, r3]
    3f5a:	2800      	cmp	r0, #0
    3f5c:	d1f6      	bne.n	3f4c <_ZN14USBDeviceClass10ISRHandlerEv+0x118>
                                        handleEndpoint(i);
    3f5e:	0038      	movs	r0, r7
    3f60:	f7ff faa8 	bl	34b4 <_ZN14USBDeviceClass14handleEndpointEh>
    3f64:	e7e7      	b.n	3f36 <_ZN14USBDeviceClass10ISRHandlerEv+0x102>
                }
                i--;
        }
}
    3f66:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3f68:	20000a25 	.word	0x20000a25
    3f6c:	20000a30 	.word	0x20000a30
    3f70:	20000a28 	.word	0x20000a28
    3f74:	20000599 	.word	0x20000599
    3f78:	20000598 	.word	0x20000598
    3f7c:	20000764 	.word	0x20000764
    3f80:	410000ff 	.word	0x410000ff
    3f84:	2000057c 	.word	0x2000057c

00003f88 <UDD_Handler>:
extern "C" void UDD_Handler(void) {
    3f88:	b510      	push	{r4, lr}
  USBDevice.ISRHandler();
    3f8a:	4802      	ldr	r0, [pc, #8]	; (3f94 <UDD_Handler+0xc>)
    3f8c:	f7ff ff52 	bl	3e34 <_ZN14USBDeviceClass10ISRHandlerEv>
}
    3f90:	bd10      	pop	{r4, pc}
    3f92:	46c0      	nop			; (mov r8, r8)
    3f94:	20000578 	.word	0x20000578

00003f98 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv>:
	USBDevice_SAMD21G18x() : usb(USB->DEVICE) {
    3f98:	2282      	movs	r2, #130	; 0x82
    3f9a:	4b02      	ldr	r3, [pc, #8]	; (3fa4 <_GLOBAL__sub_I__ZN20USBDevice_SAMD21G18x5resetEv+0xc>)
    3f9c:	05d2      	lsls	r2, r2, #23
    3f9e:	601a      	str	r2, [r3, #0]
 * USB Device instance
 * -------------------
 */

// USBDevice class instance
USBDeviceClass USBDevice;
    3fa0:	4770      	bx	lr
    3fa2:	46c0      	nop			; (mov r8, r8)
    3fa4:	20000a30 	.word	0x20000a30

00003fa8 <attachInterrupt>:
  uint32_t config;
  uint32_t pos;

#if (SAML21)
  // The CHANGE and RISING interrupt modes on pin A31 on the SAML21 do not seem to work properly
  if ((GetPort(pin) == 0) && (GetPin(pin) == 31) && ((mode == CHANGE) || (mode == RISING)))
    3fa8:	230c      	movs	r3, #12
{
    3faa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if ((GetPort(pin) == 0) && (GetPin(pin) == 31) && ((mode == CHANGE) || (mode == RISING)))
    3fac:	4343      	muls	r3, r0
{
    3fae:	9201      	str	r2, [sp, #4]
  if ((GetPort(pin) == 0) && (GetPin(pin) == 31) && ((mode == CHANGE) || (mode == RISING)))
    3fb0:	4a43      	ldr	r2, [pc, #268]	; (40c0 <attachInterrupt+0x118>)
{
    3fb2:	9100      	str	r1, [sp, #0]
  if ((GetPort(pin) == 0) && (GetPin(pin) == 31) && ((mode == CHANGE) || (mode == RISING)))
    3fb4:	5c99      	ldrb	r1, [r3, r2]
{
    3fb6:	0006      	movs	r6, r0
  if ((GetPort(pin) == 0) && (GetPin(pin) == 31) && ((mode == CHANGE) || (mode == RISING)))
    3fb8:	2900      	cmp	r1, #0
    3fba:	d108      	bne.n	3fce <attachInterrupt+0x26>
    3fbc:	18d3      	adds	r3, r2, r3
    3fbe:	785b      	ldrb	r3, [r3, #1]
    3fc0:	2b1f      	cmp	r3, #31
    3fc2:	d104      	bne.n	3fce <attachInterrupt+0x26>
    3fc4:	9b01      	ldr	r3, [sp, #4]
    3fc6:	3102      	adds	r1, #2
    3fc8:	3b02      	subs	r3, #2
    3fca:	438b      	bics	r3, r1
    3fcc:	d043      	beq.n	4056 <attachInterrupt+0xae>
    return;
#endif

  EExt_Interrupts in = GetExtInt(pin);
    3fce:	230c      	movs	r3, #12
    3fd0:	4373      	muls	r3, r6
    3fd2:	18d3      	adds	r3, r2, r3
    3fd4:	7a9c      	ldrb	r4, [r3, #10]

#if defined(EXTERNAL_INT_NMI)
  if (in == NOT_AN_INTERRUPT || in == EXTERNAL_INT_NMI) return;
#else
  if (in == NOT_AN_INTERRUPT) return;
    3fd6:	2c12      	cmp	r4, #18
    3fd8:	d03d      	beq.n	4056 <attachInterrupt+0xae>
#endif

  if (!enabled) {
    3fda:	4f3a      	ldr	r7, [pc, #232]	; (40c4 <attachInterrupt+0x11c>)
    3fdc:	683d      	ldr	r5, [r7, #0]
    3fde:	2d00      	cmp	r5, #0
    3fe0:	d12b      	bne.n	403a <attachInterrupt+0x92>
  memset(ISRcallback, 0, sizeof(ISRcallback));
    3fe2:	0029      	movs	r1, r5
    3fe4:	2244      	movs	r2, #68	; 0x44
    3fe6:	4838      	ldr	r0, [pc, #224]	; (40c8 <attachInterrupt+0x120>)
    3fe8:	f008 f8d4 	bl	c194 <memset>
  memset(ISRlist,     0, sizeof(ISRlist));
    3fec:	0029      	movs	r1, r5
    3fee:	2244      	movs	r2, #68	; 0x44
    3ff0:	4836      	ldr	r0, [pc, #216]	; (40cc <attachInterrupt+0x124>)
    3ff2:	f008 f8cf 	bl	c194 <memset>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    3ff6:	2108      	movs	r1, #8
  nints = 0;
    3ff8:	4b35      	ldr	r3, [pc, #212]	; (40d0 <attachInterrupt+0x128>)
    3ffa:	4a36      	ldr	r2, [pc, #216]	; (40d4 <attachInterrupt+0x12c>)
    3ffc:	601d      	str	r5, [r3, #0]
    3ffe:	4b36      	ldr	r3, [pc, #216]	; (40d8 <attachInterrupt+0x130>)
    4000:	67d9      	str	r1, [r3, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4002:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4006:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    400a:	23c0      	movs	r3, #192	; 0xc0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    400c:	20c0      	movs	r0, #192	; 0xc0
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    400e:	005b      	lsls	r3, r3, #1
    4010:	50d1      	str	r1, [r2, r3]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4012:	0080      	lsls	r0, r0, #2
    4014:	5813      	ldr	r3, [r2, r0]
    4016:	408b      	lsls	r3, r1
    4018:	40cb      	lsrs	r3, r1
    401a:	5013      	str	r3, [r2, r0]
  MCLK->APBAMASK.reg |= MCLK_APBAMASK_EIC;
    401c:	2380      	movs	r3, #128	; 0x80
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    401e:	6011      	str	r1, [r2, #0]
    4020:	4a2e      	ldr	r2, [pc, #184]	; (40dc <attachInterrupt+0x134>)
    4022:	009b      	lsls	r3, r3, #2
    4024:	6951      	ldr	r1, [r2, #20]
    4026:	430b      	orrs	r3, r1
    4028:	6153      	str	r3, [r2, #20]
  GCLK->PCHCTRL[GCM_EIC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    402a:	2340      	movs	r3, #64	; 0x40
    402c:	4a2c      	ldr	r2, [pc, #176]	; (40e0 <attachInterrupt+0x138>)
    402e:	6013      	str	r3, [r2, #0]
  while ( (GCLK->PCHCTRL[GCM_EIC].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );	// wait for sync
    4030:	6811      	ldr	r1, [r2, #0]
    4032:	4219      	tst	r1, r3
    4034:	d0fc      	beq.n	4030 <attachInterrupt+0x88>
    __initialize();
    enabled = 1;
    4036:	2301      	movs	r3, #1
    4038:	603b      	str	r3, [r7, #0]
#if (SAMD21 || SAMD11)
  EIC->WAKEUP.reg |= (inMask);
#endif

  // Assign pin to EIC
  if (pinPeripheral(pin, PIO_EXTINT) != RET_STATUS_OK)
    403a:	2104      	movs	r1, #4
    403c:	0030      	movs	r0, r6
    403e:	f000 f9ed 	bl	441c <pinPeripheral>
    4042:	2800      	cmp	r0, #0
    4044:	d107      	bne.n	4056 <attachInterrupt+0xae>
  uint32_t inMask = 1 << in;
    4046:	2201      	movs	r2, #1
    return;

  // Only store when there is really an ISR to call.
  // This allow for calling attachInterrupt(pin, NULL, mode), we set up all needed register
  // but won't service the interrupt, this way we also don't need to check it inside the ISR.
  if (callback)
    4048:	9b00      	ldr	r3, [sp, #0]
  uint32_t inMask = 1 << in;
    404a:	40a2      	lsls	r2, r4
  if (callback)
    404c:	2b00      	cmp	r3, #0
    404e:	d103      	bne.n	4058 <attachInterrupt+0xb0>
    while (EIC->SYNCBUSY.reg & EIC_SYNCBUSY_MASK) { }
    #endif
  }

  // Clear the interrupt flag
  EIC->INTFLAG.reg = (inMask);
    4050:	4b24      	ldr	r3, [pc, #144]	; (40e4 <attachInterrupt+0x13c>)
    4052:	615a      	str	r2, [r3, #20]

  // Enable the interrupt
  EIC->INTENSET.reg = (inMask);
    4054:	611a      	str	r2, [r3, #16]
}
    4056:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    for (current=0; current<nints; current++) {
    4058:	491d      	ldr	r1, [pc, #116]	; (40d0 <attachInterrupt+0x128>)
    405a:	4e1c      	ldr	r6, [pc, #112]	; (40cc <attachInterrupt+0x124>)
    405c:	680d      	ldr	r5, [r1, #0]
    405e:	0083      	lsls	r3, r0, #2
    4060:	42a8      	cmp	r0, r5
    4062:	d127      	bne.n	40b4 <attachInterrupt+0x10c>
      nints++;
    4064:	3001      	adds	r0, #1
    4066:	6008      	str	r0, [r1, #0]
    ISRcallback[current] = callback; // List of callback adresses
    4068:	9800      	ldr	r0, [sp, #0]
    406a:	4917      	ldr	r1, [pc, #92]	; (40c8 <attachInterrupt+0x120>)
    ISRlist[current] = inMask;       // List of interrupt in order of when they were attached
    406c:	50f2      	str	r2, [r6, r3]
    ISRcallback[current] = callback; // List of callback adresses
    406e:	50c8      	str	r0, [r1, r3]
    if (in > EXTERNAL_INT_7) {
    4070:	2307      	movs	r3, #7
    4072:	42a3      	cmp	r3, r4
    4074:	419b      	sbcs	r3, r3
    EIC->CTRLA.reg = 0;   // disable EIC before changing CONFIG
    4076:	2000      	movs	r0, #0
    if (in > EXTERNAL_INT_7) {
    4078:	425b      	negs	r3, r3
    pos = (in - (8 * config)) << 2;                               // compute position (ie: 0, 4, 8, 12, ...)
    407a:	00d9      	lsls	r1, r3, #3
    407c:	1a64      	subs	r4, r4, r1
    EIC->CTRLA.reg = 0;   // disable EIC before changing CONFIG
    407e:	4919      	ldr	r1, [pc, #100]	; (40e4 <attachInterrupt+0x13c>)
    pos = (in - (8 * config)) << 2;                               // compute position (ie: 0, 4, 8, 12, ...)
    4080:	00a4      	lsls	r4, r4, #2
    EIC->CTRLA.reg = 0;   // disable EIC before changing CONFIG
    4082:	7008      	strb	r0, [r1, #0]
    while (EIC->SYNCBUSY.reg & EIC_SYNCBUSY_MASK) { }
    4084:	3003      	adds	r0, #3
    4086:	684d      	ldr	r5, [r1, #4]
    4088:	4205      	tst	r5, r0
    408a:	d1fc      	bne.n	4086 <attachInterrupt+0xde>
    uint32_t regConfig = (~(EIC_CONFIG_SENSE0_Msk << pos) & EIC->CONFIG[config].reg);             // copy register to variable, clearing mode bits
    408c:	2507      	movs	r5, #7
    408e:	40a5      	lsls	r5, r4
    4090:	4814      	ldr	r0, [pc, #80]	; (40e4 <attachInterrupt+0x13c>)
    4092:	009b      	lsls	r3, r3, #2
    4094:	181b      	adds	r3, r3, r0
    4096:	69d8      	ldr	r0, [r3, #28]
    EIC->CONFIG[config].reg = (regConfig | ((5-mode) << pos));
    4098:	9e01      	ldr	r6, [sp, #4]
    uint32_t regConfig = (~(EIC_CONFIG_SENSE0_Msk << pos) & EIC->CONFIG[config].reg);             // copy register to variable, clearing mode bits
    409a:	43a8      	bics	r0, r5
    EIC->CONFIG[config].reg = (regConfig | ((5-mode) << pos));
    409c:	2505      	movs	r5, #5
    409e:	1bad      	subs	r5, r5, r6
    40a0:	40a5      	lsls	r5, r4
    40a2:	4328      	orrs	r0, r5
    40a4:	61d8      	str	r0, [r3, #28]
    EIC->CTRLA.reg = EIC_CTRLA_ENABLE;    // enable EIC
    40a6:	2302      	movs	r3, #2
    40a8:	700b      	strb	r3, [r1, #0]
    while (EIC->SYNCBUSY.reg & EIC_SYNCBUSY_MASK) { }
    40aa:	3301      	adds	r3, #1
    40ac:	6848      	ldr	r0, [r1, #4]
    40ae:	4218      	tst	r0, r3
    40b0:	d1fc      	bne.n	40ac <attachInterrupt+0x104>
    40b2:	e7cd      	b.n	4050 <attachInterrupt+0xa8>
      if (ISRlist[current] == inMask) {
    40b4:	58f7      	ldr	r7, [r6, r3]
    40b6:	42ba      	cmp	r2, r7
    40b8:	d0d6      	beq.n	4068 <attachInterrupt+0xc0>
    for (current=0; current<nints; current++) {
    40ba:	3001      	adds	r0, #1
    40bc:	e7cf      	b.n	405e <attachInterrupt+0xb6>
    40be:	46c0      	nop			; (mov r8, r8)
    40c0:	000107a0 	.word	0x000107a0
    40c4:	20000bbc 	.word	0x20000bbc
    40c8:	20000b34 	.word	0x20000b34
    40cc:	20000b78 	.word	0x20000b78
    40d0:	20000bc0 	.word	0x20000bc0
    40d4:	e000e100 	.word	0xe000e100
    40d8:	e000e104 	.word	0xe000e104
    40dc:	40000400 	.word	0x40000400
    40e0:	4000188c 	.word	0x4000188c
    40e4:	40002400 	.word	0x40002400

000040e8 <EIC_Handler>:
  EIC->INTFLAG.reg = (1 << 15);  // Clear the interrupt
}

#else
void EIC_Handler(void)
{
    40e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  // Calling the routine directly from -here- takes about 1us
  // Depending on where you are in the list it will take longer

  // Loop over all enabled interrupts in the list
  for (uint32_t i=0; i<nints; i++)
    40ea:	2400      	movs	r4, #0
    40ec:	4b09      	ldr	r3, [pc, #36]	; (4114 <EIC_Handler+0x2c>)
    40ee:	681b      	ldr	r3, [r3, #0]
    40f0:	429c      	cmp	r4, r3
    40f2:	d300      	bcc.n	40f6 <EIC_Handler+0xe>
      ISRcallback[i]();
      // Clear the interrupt
      EIC->INTFLAG.reg = ISRlist[i];
    }
  }
}
    40f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((EIC->INTFLAG.reg & ISRlist[i]) != 0)
    40f6:	4e08      	ldr	r6, [pc, #32]	; (4118 <EIC_Handler+0x30>)
    40f8:	4f08      	ldr	r7, [pc, #32]	; (411c <EIC_Handler+0x34>)
    40fa:	00a5      	lsls	r5, r4, #2
    40fc:	6973      	ldr	r3, [r6, #20]
    40fe:	59ea      	ldr	r2, [r5, r7]
    4100:	421a      	tst	r2, r3
    4102:	d004      	beq.n	410e <EIC_Handler+0x26>
      ISRcallback[i]();
    4104:	4b06      	ldr	r3, [pc, #24]	; (4120 <EIC_Handler+0x38>)
    4106:	58eb      	ldr	r3, [r5, r3]
    4108:	4798      	blx	r3
      EIC->INTFLAG.reg = ISRlist[i];
    410a:	59eb      	ldr	r3, [r5, r7]
    410c:	6173      	str	r3, [r6, #20]
  for (uint32_t i=0; i<nints; i++)
    410e:	3401      	adds	r4, #1
    4110:	e7ec      	b.n	40ec <EIC_Handler+0x4>
    4112:	46c0      	nop			; (mov r8, r8)
    4114:	20000bc0 	.word	0x20000bc0
    4118:	40002400 	.word	0x40002400
    411c:	20000b78 	.word	0x20000b78
    4120:	20000b34 	.word	0x20000b34

00004124 <init>:
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4124:	20c0      	movs	r0, #192	; 0xc0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    4126:	491a      	ldr	r1, [pc, #104]	; (4190 <init+0x6c>)
    4128:	4b1a      	ldr	r3, [pc, #104]	; (4194 <init+0x70>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    412a:	4a1b      	ldr	r2, [pc, #108]	; (4198 <init+0x74>)
 *   - At reset, ResetHandler did the system clock configuration. Core is running at 48MHz (optionally 120MHz for D51).
 *   - Watchdog is disabled by default, unless someone plays with NVM User page
 *   - During reset, all PORT lines are configured as inputs with input buffers, output buffers and pull disabled.
 */
void init( void )
{
    412c:	b510      	push	{r4, lr}
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
    412e:	604b      	str	r3, [r1, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4130:	6a13      	ldr	r3, [r2, #32]
    4132:	0600      	lsls	r0, r0, #24
    4134:	021b      	lsls	r3, r3, #8
    4136:	0a1b      	lsrs	r3, r3, #8
    4138:	4303      	orrs	r3, r0
    413a:	6213      	str	r3, [r2, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    413c:	2400      	movs	r4, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    413e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
    4140:	608c      	str	r4, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    4142:	600b      	str	r3, [r1, #0]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    4144:	2180      	movs	r1, #128	; 0x80
    4146:	6a13      	ldr	r3, [r2, #32]
    4148:	0609      	lsls	r1, r1, #24
    414a:	021b      	lsls	r3, r3, #8
    414c:	0a1b      	lsrs	r3, r3, #8
    414e:	430b      	orrs	r3, r1
#elif (SAML21 || SAMC21)
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;

  #if (SAML21)
  regAPBCMASK |= MCLK_APBCMASK_SERCOM0 | MCLK_APBCMASK_SERCOM1 | MCLK_APBCMASK_SERCOM2 | MCLK_APBCMASK_SERCOM3 | MCLK_APBCMASK_SERCOM4 ;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4;	// On the SAML, SERCOM5 and TC4 are on the low power bridge
    4150:	2106      	movs	r1, #6
    4152:	6213      	str	r3, [r2, #32]
  uint32_t regAPBCMASK = MCLK->APBCMASK.reg;
    4154:	4b11      	ldr	r3, [pc, #68]	; (419c <init+0x78>)
    4156:	69da      	ldr	r2, [r3, #28]
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM5 | MCLK_APBDMASK_TC4;	// On the SAML, SERCOM5 and TC4 are on the low power bridge
    4158:	6a18      	ldr	r0, [r3, #32]
    415a:	4301      	orrs	r1, r0
    415c:	6219      	str	r1, [r3, #32]
  regAPBCMASK |= MCLK_APBCMASK_TCC0 | MCLK_APBCMASK_TCC1 | MCLK_APBCMASK_TCC2 | MCLK_APBCMASK_TC0 | MCLK_APBCMASK_TC1 | MCLK_APBCMASK_TC2 | MCLK_APBCMASK_TC3 | MCLK_APBCMASK_TC4 ;
  #endif

  #if (SAML21)
  regAPBCMASK |= MCLK_APBCMASK_DAC ;
  MCLK->APBDMASK.reg |= MCLK_APBDMASK_ADC;	// On the SAML, ADC is on the low power bridge
    415e:	2108      	movs	r1, #8
    4160:	6a18      	ldr	r0, [r3, #32]
    4162:	4301      	orrs	r1, r0
    4164:	6219      	str	r1, [r3, #32]
  #elif (SAMC21)
  regAPBCMASK |= MCLK_APBCMASK_ADC0 | MCLK_APBCMASK_ADC1 | MCLK_APBCMASK_DAC ;
  #endif

  MCLK->APBCMASK.reg |= regAPBCMASK ;
    4166:	69d9      	ldr	r1, [r3, #28]
    4168:	4311      	orrs	r1, r2
    416a:	4a0d      	ldr	r2, [pc, #52]	; (41a0 <init+0x7c>)
    416c:	430a      	orrs	r2, r1
    416e:	61da      	str	r2, [r3, #28]
#endif

  // Setup all pins (digital and analog) in STARTUP mode (enable INEN and set default pull direction to pullup (pullup will not be enabled))
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
  {
    pinMode( ul, PIO_STARTUP ) ;
    4170:	0020      	movs	r0, r4
    4172:	211a      	movs	r1, #26
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    4174:	3401      	adds	r4, #1
    pinMode( ul, PIO_STARTUP ) ;
    4176:	f000 f8e3 	bl	4340 <pinMode>
  for (uint32_t ul = 0 ; ul < NUM_DIGITAL_PINS ; ul++ )
    417a:	2c25      	cmp	r4, #37	; 0x25
    417c:	d1f8      	bne.n	4170 <init+0x4c>
  PORT->Group[0].OUTSET.reg = (uint32_t)(1<<PIN_PA25G_USB_DP);
  PORT->Group[0].PINCFG[PIN_PA25G_USB_DP].reg = (PORT_PINCFG_PULLEN | PORT_PINCFG_INEN);
#endif

#if !defined(ADC_NO_INIT_IF_UNUSED)
  initADC();         // Initialize Analog Controller
    417e:	f000 f895 	bl	42ac <initADC>
  analogReference( VARIANT_AR_DEFAULT ) ;         // Use default reference from variant.h
    4182:	2005      	movs	r0, #5
    4184:	f000 f832 	bl	41ec <analogReference>
#endif

#if !defined(DAC_NO_INIT_IF_UNUSED)
  initDAC();         // Initialize DAC
    4188:	f000 f80c 	bl	41a4 <initDAC>
#endif
}
    418c:	bd10      	pop	{r4, pc}
    418e:	46c0      	nop			; (mov r8, r8)
    4190:	e000e010 	.word	0xe000e010
    4194:	0000bb7f 	.word	0x0000bb7f
    4198:	e000ed00 	.word	0xe000ed00
    419c:	40000400 	.word	0x40000400
    41a0:	000017ff 	.word	0x000017ff

000041a4 <initDAC>:

  while ( DAC->STATUS.bit.SYNCBUSY == 1 ); // Wait for synchronization of registers between the clock domains
  DAC->CTRLB.reg = DAC_CTRLB_REFSEL_AVCC | // Using the 3.3V reference
                   DAC_CTRLB_EOEN ;        // External Output Enable (Vout)
#elif (SAML21 || SAMC21 || SAMD51)
  while ( GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_MASK );
    41a4:	490c      	ldr	r1, [pc, #48]	; (41d8 <initDAC+0x34>)
    41a6:	4b0d      	ldr	r3, [pc, #52]	; (41dc <initDAC+0x38>)
    41a8:	684a      	ldr	r2, [r1, #4]
    41aa:	421a      	tst	r2, r3
    41ac:	d1fc      	bne.n	41a8 <initDAC+0x4>

  #if (SAMD51)
    GCLK->PCHCTRL[GCM_DAC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK4 );  // use 48MHz clock (100MHz max for DAC) from GCLK4, which was setup in startup.c
  #else
    GCLK->PCHCTRL[GCM_DAC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    41ae:	2340      	movs	r3, #64	; 0x40
    41b0:	4a0b      	ldr	r2, [pc, #44]	; (41e0 <initDAC+0x3c>)
    41b2:	6053      	str	r3, [r2, #4]
  #endif
  while ( (GCLK->PCHCTRL[GCM_DAC].reg & GCLK_PCHCTRL_CHEN) == 0 );      // wait for sync
    41b4:	6851      	ldr	r1, [r2, #4]
    41b6:	4219      	tst	r1, r3
    41b8:	d0fc      	beq.n	41b4 <initDAC+0x10>

  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    41ba:	223f      	movs	r2, #63	; 0x3f
    41bc:	4b09      	ldr	r3, [pc, #36]	; (41e4 <initDAC+0x40>)
    41be:	6899      	ldr	r1, [r3, #8]
    41c0:	4211      	tst	r1, r2
    41c2:	d1fc      	bne.n	41be <initDAC+0x1a>
    DAC->CTRLB.reg = (DAC_CTRLB_REFSEL_AVCC | DAC_CTRLB_EOEN);
  #elif (SAML21 || SAMD51)
    #if (SAMD51)
      DAC->CTRLB.reg = DAC_CTRLB_REFSEL_VREFPU;         // VDDANA not funtional due to errata, using unbuffered external reference (REFA, connected externally to VDDANA) instead.
    #else
      DAC->CTRLB.reg = DAC_CTRLB_REFSEL_VDDANA;
    41c4:	2202      	movs	r2, #2
    41c6:	705a      	strb	r2, [r3, #1]
    #endif
    DAC->DACCTRL[0].reg = (DAC_DACCTRL_REFRESH(3) | DAC_DACCTRL_CCTRL(2));
    41c8:	22c2      	movs	r2, #194	; 0xc2
    41ca:	0092      	lsls	r2, r2, #2
    41cc:	819a      	strh	r2, [r3, #12]
    DAC->DACCTRL[1].reg = (DAC_DACCTRL_REFRESH(3) | DAC_DACCTRL_CCTRL(2));
    41ce:	81da      	strh	r2, [r3, #14]
  #endif
#endif

  DACinitialized = 1;
    41d0:	2201      	movs	r2, #1
    41d2:	4b05      	ldr	r3, [pc, #20]	; (41e8 <initDAC+0x44>)
    41d4:	701a      	strb	r2, [r3, #0]
}
    41d6:	4770      	bx	lr
    41d8:	40001800 	.word	0x40001800
    41dc:	000007fd 	.word	0x000007fd
    41e0:	400018fc 	.word	0x400018fc
    41e4:	42003000 	.word	0x42003000
    41e8:	20000bc5 	.word	0x20000bc5

000041ec <analogReference>:
 * External Reference should be between 1V and VDDANA-0.6V=2.7V (1V and VDDANA-0.4V=2.9V for D51)
 *
 * Warning : The maximum IO voltage is Vcc (up to 3.6 volts for the SAMD/SAML, 5V for the SAMC)
 */
void analogReference(eAnalogReference mode)
{
    41ec:	b510      	push	{r4, lr}
  if (!ADCinitialized) {
    41ee:	4b2a      	ldr	r3, [pc, #168]	; (4298 <analogReference+0xac>)
{
    41f0:	0004      	movs	r4, r0
  if (!ADCinitialized) {
    41f2:	781b      	ldrb	r3, [r3, #0]
    41f4:	2b00      	cmp	r3, #0
    41f6:	d104      	bne.n	4202 <analogReference+0x16>
    REFinitialized = 1; // to prevent re-entry
    41f8:	2201      	movs	r2, #1
    41fa:	4b28      	ldr	r3, [pc, #160]	; (429c <analogReference+0xb0>)
    41fc:	701a      	strb	r2, [r3, #0]
    initADC();
    41fe:	f000 f855 	bl	42ac <initADC>
  }

#if (!SAMD11C)
  #if defined(REFA_PIN)
    if (mode == AR_EXTERNAL_REFA) {
    4202:	2c03      	cmp	r4, #3
    4204:	d106      	bne.n	4214 <analogReference+0x28>
#endif

#if (SAMD21 || SAMD11 || SAML21 || SAMD51)
  #if defined(REFB_PIN)
    if (mode == AR_EXTERNAL_REFB) {
      if ( pinPeripheral(REFB_PIN, PIO_ANALOG_REF) != RET_STATUS_OK ) {
    4206:	2107      	movs	r1, #7
    4208:	0020      	movs	r0, r4
    420a:	f000 f907 	bl	441c <pinPeripheral>
    420e:	2800      	cmp	r0, #0
    4210:	d009      	beq.n	4226 <analogReference+0x3a>
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
#endif
  syncADC();

  REFinitialized = 1;
}
    4212:	bd10      	pop	{r4, pc}
    if (mode == AR_EXTERNAL_REFB) {
    4214:	2c04      	cmp	r4, #4
    4216:	d0f6      	beq.n	4206 <analogReference+0x1a>
  if (mode == 0) {		// Set to 1.0V for the SAML, 1.024V for the SAMC
    4218:	2c00      	cmp	r4, #0
    421a:	d12b      	bne.n	4274 <analogReference+0x88>
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    421c:	4a20      	ldr	r2, [pc, #128]	; (42a0 <analogReference+0xb4>)
    421e:	4921      	ldr	r1, [pc, #132]	; (42a4 <analogReference+0xb8>)
    4220:	69d3      	ldr	r3, [r2, #28]
    4222:	400b      	ands	r3, r1
    4224:	61d3      	str	r3, [r2, #28]
    ADC->REFCTRL.bit.REFSEL = mode;
    4226:	210f      	movs	r1, #15
    4228:	4b1f      	ldr	r3, [pc, #124]	; (42a8 <analogReference+0xbc>)
    422a:	400c      	ands	r4, r1
    422c:	789a      	ldrb	r2, [r3, #2]
    422e:	438a      	bics	r2, r1
    4230:	4314      	orrs	r4, r2
    4232:	709c      	strb	r4, [r3, #2]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    4234:	8c1a      	ldrh	r2, [r3, #32]
    4236:	0552      	lsls	r2, r2, #21
    4238:	d1fc      	bne.n	4234 <analogReference+0x48>
  ADC->CTRLA.bit.ENABLE = 0x01;              // Enable ADC
    423a:	7819      	ldrb	r1, [r3, #0]
    423c:	3202      	adds	r2, #2
    423e:	430a      	orrs	r2, r1
    4240:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    4242:	8c1a      	ldrh	r2, [r3, #32]
    4244:	0552      	lsls	r2, r2, #21
    4246:	d1fc      	bne.n	4242 <analogReference+0x56>
  ADC->SWTRIG.bit.START = 1;
    4248:	7e19      	ldrb	r1, [r3, #24]
    424a:	3202      	adds	r2, #2
    424c:	430a      	orrs	r2, r1
    424e:	761a      	strb	r2, [r3, #24]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    4250:	8c1a      	ldrh	r2, [r3, #32]
    4252:	0552      	lsls	r2, r2, #21
    4254:	d1fc      	bne.n	4250 <analogReference+0x64>
  while (ADC->INTFLAG.bit.RESRDY == 0);      // Waiting for conversion to complete
    4256:	799a      	ldrb	r2, [r3, #6]
    4258:	07d2      	lsls	r2, r2, #31
    425a:	d5fc      	bpl.n	4256 <analogReference+0x6a>
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
    425c:	2102      	movs	r1, #2
  valueRead = ADC->RESULT.reg;               // Dummy read (will also clear the Data Ready flag)
    425e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
  ADC->CTRLA.bit.ENABLE = 0x00;              // Disable ADC
    4260:	781a      	ldrb	r2, [r3, #0]
    4262:	438a      	bics	r2, r1
    4264:	701a      	strb	r2, [r3, #0]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    4266:	8c1a      	ldrh	r2, [r3, #32]
    4268:	0552      	lsls	r2, r2, #21
    426a:	d1fc      	bne.n	4266 <analogReference+0x7a>
  REFinitialized = 1;
    426c:	4b0b      	ldr	r3, [pc, #44]	; (429c <analogReference+0xb0>)
    426e:	3201      	adds	r2, #1
    4270:	701a      	strb	r2, [r3, #0]
    4272:	e7ce      	b.n	4212 <analogReference+0x26>
  } else if (mode >= AR_INTREF_1V0) {		// Values starting at AR_INTREF_1V0 are used for the Supply Controller reference (AR_INTREF)
    4274:	2c05      	cmp	r4, #5
    4276:	d9d6      	bls.n	4226 <analogReference+0x3a>
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    4278:	4b09      	ldr	r3, [pc, #36]	; (42a0 <analogReference+0xb4>)
    427a:	490a      	ldr	r1, [pc, #40]	; (42a4 <analogReference+0xb8>)
    427c:	69da      	ldr	r2, [r3, #28]
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    427e:	3c06      	subs	r4, #6
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    4280:	400a      	ands	r2, r1
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    4282:	21f0      	movs	r1, #240	; 0xf0
    SUPC->VREF.reg &= ~SUPC_VREF_SEL_Msk;
    4284:	61da      	str	r2, [r3, #28]
      SUPC->VREF.reg |= SUPC_VREF_SEL(mode - AR_INTREF_1V0);  // See eAnalogReference typedef in wiring_analog.h. AR_INTREF_1V0 = 6.
    4286:	69da      	ldr	r2, [r3, #28]
    4288:	0424      	lsls	r4, r4, #16
    428a:	0309      	lsls	r1, r1, #12
    428c:	400c      	ands	r4, r1
    428e:	4314      	orrs	r4, r2
    4290:	61dc      	str	r4, [r3, #28]
    mode = 0;
    4292:	2400      	movs	r4, #0
    4294:	e7c7      	b.n	4226 <analogReference+0x3a>
    4296:	46c0      	nop			; (mov r8, r8)
    4298:	20000bc4 	.word	0x20000bc4
    429c:	20000bc6 	.word	0x20000bc6
    42a0:	40001400 	.word	0x40001400
    42a4:	fff0ffff 	.word	0xfff0ffff
    42a8:	43000c00 	.word	0x43000c00

000042ac <initADC>:
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    42ac:	4b1e      	ldr	r3, [pc, #120]	; (4328 <initADC+0x7c>)
    42ae:	2107      	movs	r1, #7
    42b0:	681b      	ldr	r3, [r3, #0]
{
    42b2:	b510      	push	{r4, lr}
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    42b4:	001a      	movs	r2, r3
  uint32_t biascomp = (*((uint32_t *) ADC_FUSES_BIASCOMP_ADDR) & ADC_FUSES_BIASCOMP_Msk) >> ADC_FUSES_BIASCOMP_Pos;
    42b6:	08db      	lsrs	r3, r3, #3
  uint32_t biasrefbuf = (*((uint32_t *) ADC_FUSES_BIASREFBUF_ADDR) & ADC_FUSES_BIASREFBUF_Msk) >> ADC_FUSES_BIASREFBUF_Pos;
    42b8:	400a      	ands	r2, r1
  ADC->CALIB.reg = ADC_CALIB_BIASREFBUF(biasrefbuf) | ADC_CALIB_BIASCOMP(biascomp);
    42ba:	0212      	lsls	r2, r2, #8
  uint32_t biascomp = (*((uint32_t *) ADC_FUSES_BIASCOMP_ADDR) & ADC_FUSES_BIASCOMP_Msk) >> ADC_FUSES_BIASCOMP_Pos;
    42bc:	400b      	ands	r3, r1
  ADC->CALIB.reg = ADC_CALIB_BIASREFBUF(biasrefbuf) | ADC_CALIB_BIASCOMP(biascomp);
    42be:	4313      	orrs	r3, r2
    42c0:	4a1a      	ldr	r2, [pc, #104]	; (432c <initADC+0x80>)
    42c2:	8593      	strh	r3, [r2, #44]	; 0x2c
    42c4:	0013      	movs	r3, r2
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    42c6:	8c1a      	ldrh	r2, [r3, #32]
    42c8:	0552      	lsls	r2, r2, #21
    42ca:	d1fc      	bne.n	42c6 <initADC+0x1a>
  SUPC->VREF.reg |= SUPC_VREF_VREFOE;           // Enable Supply Controller Reference output for use with ADC and DAC (AR_INTREF)
    42cc:	4918      	ldr	r1, [pc, #96]	; (4330 <initADC+0x84>)
    42ce:	3204      	adds	r2, #4
    42d0:	69c8      	ldr	r0, [r1, #28]
    42d2:	4302      	orrs	r2, r0
    42d4:	61ca      	str	r2, [r1, #28]
    GCLK->PCHCTRL[GCM_ADC].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    42d6:	2240      	movs	r2, #64	; 0x40
    42d8:	4916      	ldr	r1, [pc, #88]	; (4334 <initADC+0x88>)
    42da:	600a      	str	r2, [r1, #0]
    while ( (GCLK->PCHCTRL[GCM_ADC].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
    42dc:	6808      	ldr	r0, [r1, #0]
    42de:	4210      	tst	r0, r2
    42e0:	d0fc      	beq.n	42dc <initADC+0x30>
    ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV256;                    // Divide Clock by 256.
    42e2:	2207      	movs	r2, #7
    42e4:	705a      	strb	r2, [r3, #1]
    ADC->CTRLC.reg = ADC_CTRLC_RESSEL_10BIT;                        // 10 bits resolution as default
    42e6:	3219      	adds	r2, #25
    42e8:	815a      	strh	r2, [r3, #10]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    42ea:	8c1a      	ldrh	r2, [r3, #32]
    42ec:	0552      	lsls	r2, r2, #21
    42ee:	d1fc      	bne.n	42ea <initADC+0x3e>
  ADC->SAMPCTRL.reg = 0x3f;     // Set max Sampling Time Length
    42f0:	323f      	adds	r2, #63	; 0x3f
    42f2:	735a      	strb	r2, [r3, #13]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    42f4:	8c1a      	ldrh	r2, [r3, #32]
    42f6:	0552      	lsls	r2, r2, #21
    42f8:	d1fc      	bne.n	42f4 <initADC+0x48>
  ADC->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND;   // No Negative input (Internal Ground)
    42fa:	22c0      	movs	r2, #192	; 0xc0
    42fc:	0152      	lsls	r2, r2, #5
    42fe:	811a      	strh	r2, [r3, #8]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    4300:	8c1a      	ldrh	r2, [r3, #32]
    4302:	0552      	lsls	r2, r2, #21
    4304:	0d52      	lsrs	r2, r2, #21
    4306:	d1fb      	bne.n	4300 <initADC+0x54>
  ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_1 |    // 1 sample only (no oversampling nor averaging)
    4308:	731a      	strb	r2, [r3, #12]
  while ( ADC->SYNCBUSY.reg & ADC_SYNCBUSY_MASK );
    430a:	8c1a      	ldrh	r2, [r3, #32]
    430c:	0552      	lsls	r2, r2, #21
    430e:	d1fc      	bne.n	430a <initADC+0x5e>
  ADCinitialized = 1;
    4310:	4b09      	ldr	r3, [pc, #36]	; (4338 <initADC+0x8c>)
    4312:	3201      	adds	r2, #1
    4314:	701a      	strb	r2, [r3, #0]
  if (!REFinitialized) {
    4316:	4b09      	ldr	r3, [pc, #36]	; (433c <initADC+0x90>)
    4318:	781b      	ldrb	r3, [r3, #0]
    431a:	2b00      	cmp	r3, #0
    431c:	d102      	bne.n	4324 <initADC+0x78>
    analogReference( VARIANT_AR_DEFAULT ) ;         // Use default reference from variant.h
    431e:	2005      	movs	r0, #5
    4320:	f7ff ff64 	bl	41ec <analogReference>
}
    4324:	bd10      	pop	{r4, pc}
    4326:	46c0      	nop			; (mov r8, r8)
    4328:	00806020 	.word	0x00806020
    432c:	43000c00 	.word	0x43000c00
    4330:	40001400 	.word	0x40001400
    4334:	400018f8 	.word	0x400018f8
    4338:	20000bc4 	.word	0x20000bc4
    433c:	20000bc6 	.word	0x20000bc6

00004340 <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

void pinMode( uint32_t ulPin, uint32_t ulMode )
{
    4340:	b510      	push	{r4, lr}
  // Set pin mode according to chapter '22.6.3 I/O Pin Configuration'
  pinPeripheral(ulPin, ulMode);
    4342:	f000 f86b 	bl	441c <pinPeripheral>
}
    4346:	bd10      	pop	{r4, pc}

00004348 <digitalWrite>:

void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
    4348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint8_t pinPort = GetPort(ulPin);
    434a:	220c      	movs	r2, #12
    434c:	4342      	muls	r2, r0
    434e:	4d25      	ldr	r5, [pc, #148]	; (43e4 <digitalWrite+0x9c>)
{
    4350:	9001      	str	r0, [sp, #4]
  uint8_t pinPort = GetPort(ulPin);
    4352:	5d53      	ldrb	r3, [r2, r5]
  uint8_t pinNum = GetPin(ulPin);

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    4354:	2b04      	cmp	r3, #4
    4356:	d02f      	beq.n	43b8 <digitalWrite+0x70>
    4358:	2700      	movs	r7, #0
  uint8_t pinNum = GetPin(ulPin);
    435a:	18aa      	adds	r2, r5, r2

#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
#endif

  uint8_t pinConfig = PORT->Group[pinPort].PINCFG[pinNum].reg;
    435c:	7852      	ldrb	r2, [r2, #1]
    435e:	01db      	lsls	r3, r3, #7
    4360:	4e21      	ldr	r6, [pc, #132]	; (43e8 <digitalWrite+0xa0>)
    4362:	18d4      	adds	r4, r2, r3
    4364:	19a4      	adds	r4, r4, r6
    4366:	7826      	ldrb	r6, [r4, #0]
  uint8_t pinDir = (PORT->Group[pinPort].DIR.reg && (1ul << pinNum));
    4368:	4c20      	ldr	r4, [pc, #128]	; (43ec <digitalWrite+0xa4>)
  uint8_t pinConfig = PORT->Group[pinPort].PINCFG[pinNum].reg;
    436a:	b2f6      	uxtb	r6, r6
  uint8_t pinDir = (PORT->Group[pinPort].DIR.reg && (1ul << pinNum));
    436c:	591c      	ldr	r4, [r3, r4]
    436e:	42bc      	cmp	r4, r7
    4370:	d004      	beq.n	437c <digitalWrite+0x34>
    4372:	3701      	adds	r7, #1
    4374:	4097      	lsls	r7, r2
    4376:	1e7c      	subs	r4, r7, #1
    4378:	41a7      	sbcs	r7, r4
    437a:	b2ff      	uxtb	r7, r7
  uint8_t pinOut = (PORT->Group[pinPort].OUT.reg && (1ul << pinNum));
    437c:	4c1b      	ldr	r4, [pc, #108]	; (43ec <digitalWrite+0xa4>)
    437e:	191c      	adds	r4, r3, r4
    4380:	6924      	ldr	r4, [r4, #16]
    4382:	46a4      	mov	ip, r4
    4384:	2400      	movs	r4, #0
    4386:	4660      	mov	r0, ip
    4388:	42a0      	cmp	r0, r4
    438a:	d004      	beq.n	4396 <digitalWrite+0x4e>
    438c:	3401      	adds	r4, #1
    438e:	4094      	lsls	r4, r2
    4390:	1e60      	subs	r0, r4, #1
    4392:	4184      	sbcs	r4, r0
    4394:	b2e4      	uxtb	r4, r4

  // Enable pull resistor if pin attributes allow and only if pin is not configured as output
  // Note that most pins should use PIN_ATTR_DIGITAL, which includes both PIN_ATTR_INPUT_PULLUP and PIN_ATTR_INPUT_PULLDOWN.
  if ( pinDir == 0 ) { // pin DIR is input
    4396:	2f00      	cmp	r7, #0
    4398:	d117      	bne.n	43ca <digitalWrite+0x82>
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
    439a:	9801      	ldr	r0, [sp, #4]
    439c:	370c      	adds	r7, #12
    439e:	4378      	muls	r0, r7
    43a0:	182d      	adds	r5, r5, r0
    43a2:	6868      	ldr	r0, [r5, #4]
     if ( ulVal == HIGH )
    43a4:	2901      	cmp	r1, #1
    43a6:	d10d      	bne.n	43c4 <digitalWrite+0x7c>
     {
#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
       if ( (pinOut == 1 && (pinAttribute & PIN_ATTR_INPUT_PULLUP)) || (pinOut == 0 && (pinAttribute & PIN_ATTR_INPUT_PULLDOWN)) )
    43a8:	2c01      	cmp	r4, #1
    43aa:	d106      	bne.n	43ba <digitalWrite+0x72>
    43ac:	0741      	lsls	r1, r0, #29
    43ae:	d406      	bmi.n	43be <digitalWrite+0x76>
     else
     {
       pinConfig &= ~(uint8_t)(PORT_PINCFG_PULLEN) ;
     }

     PORT->Group[pinPort].PINCFG[pinNum].reg = pinConfig ;
    43b0:	18d3      	adds	r3, r2, r3
    43b2:	4a0d      	ldr	r2, [pc, #52]	; (43e8 <digitalWrite+0xa0>)
    43b4:	189b      	adds	r3, r3, r2
    43b6:	701e      	strb	r6, [r3, #0]
      PORT->Group[pinPort].OUTCLR.reg = (1ul << pinNum) ;
    }
  }

  return ;
}
    43b8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
       if ( (pinOut == 1 && (pinAttribute & PIN_ATTR_INPUT_PULLUP)) || (pinOut == 0 && (pinAttribute & PIN_ATTR_INPUT_PULLDOWN)) )
    43ba:	0701      	lsls	r1, r0, #28
    43bc:	d5f8      	bpl.n	43b0 <digitalWrite+0x68>
         pinConfig |= (uint8_t)(PORT_PINCFG_PULLEN) ;
    43be:	2104      	movs	r1, #4
    43c0:	430e      	orrs	r6, r1
    43c2:	e7f5      	b.n	43b0 <digitalWrite+0x68>
       pinConfig &= ~(uint8_t)(PORT_PINCFG_PULLEN) ;
    43c4:	2104      	movs	r1, #4
    43c6:	438e      	bics	r6, r1
    43c8:	e7f2      	b.n	43b0 <digitalWrite+0x68>
    if ( ulVal == HIGH ) {
    43ca:	2901      	cmp	r1, #1
    43cc:	d104      	bne.n	43d8 <digitalWrite+0x90>
      PORT->Group[pinPort].OUTSET.reg = (1ul << pinNum) ;
    43ce:	4091      	lsls	r1, r2
    43d0:	4a06      	ldr	r2, [pc, #24]	; (43ec <digitalWrite+0xa4>)
    43d2:	189b      	adds	r3, r3, r2
    43d4:	6199      	str	r1, [r3, #24]
    43d6:	e7ef      	b.n	43b8 <digitalWrite+0x70>
      PORT->Group[pinPort].OUTCLR.reg = (1ul << pinNum) ;
    43d8:	2101      	movs	r1, #1
    43da:	4091      	lsls	r1, r2
    43dc:	4a03      	ldr	r2, [pc, #12]	; (43ec <digitalWrite+0xa4>)
    43de:	189b      	adds	r3, r3, r2
    43e0:	6159      	str	r1, [r3, #20]
    43e2:	e7e9      	b.n	43b8 <digitalWrite+0x70>
    43e4:	000107a0 	.word	0x000107a0
    43e8:	40002840 	.word	0x40002840
    43ec:	40002800 	.word	0x40002800

000043f0 <digitalRead>:

int digitalRead( uint32_t ulPin )
{
  uint8_t pinPort = GetPort(ulPin);
    43f0:	230c      	movs	r3, #12
    43f2:	4358      	muls	r0, r3
    43f4:	4907      	ldr	r1, [pc, #28]	; (4414 <digitalRead+0x24>)
    43f6:	2300      	movs	r3, #0
    43f8:	5c42      	ldrb	r2, [r0, r1]
  uint8_t pinNum = GetPin(ulPin);

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    43fa:	2a04      	cmp	r2, #4
    43fc:	d006      	beq.n	440c <digitalRead+0x1c>
  {
    return LOW ;
  }

  if ( (PORT->Group[pinPort].IN.reg & (1ul << pinNum)) != 0 )
    43fe:	4b06      	ldr	r3, [pc, #24]	; (4418 <digitalRead+0x28>)
    4400:	01d2      	lsls	r2, r2, #7
    4402:	18d2      	adds	r2, r2, r3
  uint8_t pinNum = GetPin(ulPin);
    4404:	1809      	adds	r1, r1, r0
  if ( (PORT->Group[pinPort].IN.reg & (1ul << pinNum)) != 0 )
    4406:	6a13      	ldr	r3, [r2, #32]
    4408:	784a      	ldrb	r2, [r1, #1]
    440a:	40d3      	lsrs	r3, r2
    440c:	2001      	movs	r0, #1
  {
    return HIGH ;
  }

  return LOW ;
}
    440e:	4018      	ands	r0, r3
    4410:	4770      	bx	lr
    4412:	46c0      	nop			; (mov r8, r8)
    4414:	000107a0 	.word	0x000107a0
    4418:	40002800 	.word	0x40002800

0000441c <pinPeripheral>:
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
#endif
}

int pinPeripheral( uint32_t ulPin, uint32_t ulPeripheral )
{
    441c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    441e:	0005      	movs	r5, r0
#if !defined(PIN_PERIPHERAL_CHECKS_DISABLED)
  // Prevent out of bounds access
  if (ulPin >= NUM_PIN_DESCRIPTION_ENTRIES)
    4420:	2824      	cmp	r0, #36	; 0x24
    4422:	d900      	bls.n	4426 <pinPeripheral+0xa>
    4424:	e06b      	b.n	44fe <pinPeripheral+0xe2>
  {
    return -1 ;
  }
#endif

  uint8_t pinPort = GetPort(ulPin);
    4426:	230c      	movs	r3, #12
    4428:	4343      	muls	r3, r0
    442a:	4f7f      	ldr	r7, [pc, #508]	; (4628 <pinPeripheral+0x20c>)
    442c:	5dda      	ldrb	r2, [r3, r7]
  uint8_t pinNum = GetPin(ulPin);
    442e:	18fb      	adds	r3, r7, r3
  uint8_t peripheralAttribute = g_APinDescription[ulPin].ulPeripheralAttribute;
    4430:	78d8      	ldrb	r0, [r3, #3]
  uint8_t pinNum = GetPin(ulPin);
    4432:	785c      	ldrb	r4, [r3, #1]
  uint8_t peripheralAttribute = g_APinDescription[ulPin].ulPeripheralAttribute;
    4434:	9001      	str	r0, [sp, #4]

#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  uint8_t pinType = g_APinDescription[ulPin].ulPinType;
    4436:	7898      	ldrb	r0, [r3, #2]
  uint32_t pinAttribute = g_APinDescription[ulPin].ulPinAttribute;
    4438:	685b      	ldr	r3, [r3, #4]
#endif

  // Handle the case the pin isn't usable as PIO
  if ( pinPort == NOT_A_PORT )
    443a:	2a04      	cmp	r2, #4
    443c:	d05f      	beq.n	44fe <pinPeripheral+0xe2>
  }

#if !defined(PIN_PERIPHERAL_CHECKS_DISABLED)
#if !defined(PIN_DESCRIPTION_TABLE_SIMPLE)
  // If pinType is not PIO_MULTI or PIO_STARTUP in the pinDescription table, then it must match ulPeripheral
  if ( pinType != PIO_MULTI && pinType != PIO_STARTUP && pinType != ulPeripheral )
    443e:	2619      	movs	r6, #25
    4440:	4276      	negs	r6, r6
    4442:	46b4      	mov	ip, r6
    4444:	4484      	add	ip, r0
    4446:	4666      	mov	r6, ip
    4448:	2e01      	cmp	r6, #1
    444a:	d901      	bls.n	4450 <pinPeripheral+0x34>
    444c:	4288      	cmp	r0, r1
    444e:	d156      	bne.n	44fe <pinPeripheral+0xe2>
  {
    return -1 ;
  }

  // Make sure ulPeripheral is listed in pinAttribute
  if ( !(pinAttribute & (1UL << ulPeripheral)) && pinType != PIO_STARTUP )
    4450:	40cb      	lsrs	r3, r1
    4452:	07db      	lsls	r3, r3, #31
    4454:	d401      	bmi.n	445a <pinPeripheral+0x3e>
    4456:	281a      	cmp	r0, #26
    4458:	d151      	bne.n	44fe <pinPeripheral+0xe2>
#endif
#endif

  // Determine hardware peripheral to use
  EPioPeripheral peripheral = PER_PORT;
  switch ( ulPeripheral )
    445a:	1f08      	subs	r0, r1, #4
    445c:	2817      	cmp	r0, #23
    445e:	d863      	bhi.n	4528 <pinPeripheral+0x10c>
    4460:	f005 f844 	bl	94ec <__gnu_thumb1_case_uqi>
    4464:	64644736 	.word	0x64644736
    4468:	62626262 	.word	0x62626262
    446c:	0c5d5050 	.word	0x0c5d5050
    4470:	6262620c 	.word	0x6262620c
    4474:	90626262 	.word	0x90626262
    4478:	4d624d92 	.word	0x4d624d92
    case PIO_CAN:
#endif
#if (SAMD51)
    case PIO_QSPI:
#endif
      peripheral = PER_COM;
    447c:	2306      	movs	r3, #6
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC
      //DAC->CTRLB.bit.EOEN = 0x00; // The DAC output is turned off.
      syncDAC();
    }
#elif (SAML21 || SAMD51)
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    447e:	2a00      	cmp	r2, #0
    4480:	d100      	bne.n	4484 <pinPeripheral+0x68>
    4482:	e08f      	b.n	45a4 <pinPeripheral+0x188>
      }
    }
#endif
  }

  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    4484:	4d69      	ldr	r5, [pc, #420]	; (462c <pinPeripheral+0x210>)
    4486:	01d0      	lsls	r0, r2, #7
    4488:	1820      	adds	r0, r4, r0
    448a:	1940      	adds	r0, r0, r5
    448c:	7805      	ldrb	r5, [r0, #0]
    448e:	2004      	movs	r0, #4
    4490:	4028      	ands	r0, r5

  // INEN should be enabled for both input and output (but not analog)
  if ( ulPeripheral != PIO_ANALOG_ADC && ulPeripheral != PIO_ANALOG_DAC && ulPeripheral != PIO_ANALOG_REF )
    4492:	1f4d      	subs	r5, r1, #5
    4494:	2d02      	cmp	r5, #2
    4496:	d901      	bls.n	449c <pinPeripheral+0x80>
  {
    pinCfg |= PORT_PINCFG_INEN;
    4498:	2502      	movs	r5, #2
    449a:	4328      	orrs	r0, r5
  }

  // Set pin drive strength (DRVSTR), which is used with PIO_OUTPUT and PIO_SERCOM (UART, SPI, and I2C)
  if ( (peripheralAttribute & PER_ATTR_DRIVE_MASK) == PER_ATTR_DRIVE_STRONG )
    449c:	9d01      	ldr	r5, [sp, #4]
    449e:	072d      	lsls	r5, r5, #28
    44a0:	d501      	bpl.n	44a6 <pinPeripheral+0x8a>
  {
    pinCfg |= PORT_PINCFG_DRVSTR;
    44a2:	2540      	movs	r5, #64	; 0x40
    44a4:	4328      	orrs	r0, r5
  __ASM volatile ("cpsid i" : : : "memory");
    44a6:	b672      	cpsid	i
    44a8:	01d2      	lsls	r2, r2, #7
  }

  noInterrupts(); // Avoid possible invalid interim pin state

  if ( ulPeripheral == PIO_INPUT || ulPeripheral == PIO_STARTUP )
    44aa:	2900      	cmp	r1, #0
    44ac:	d001      	beq.n	44b2 <pinPeripheral+0x96>
    44ae:	291a      	cmp	r1, #26
    44b0:	d13e      	bne.n	4530 <pinPeripheral+0x114>
  {
    PORT->Group[pinPort].DIRCLR.reg = (uint32_t)(1<<pinNum) ;
    44b2:	2301      	movs	r3, #1
    44b4:	40a3      	lsls	r3, r4
    44b6:	495e      	ldr	r1, [pc, #376]	; (4630 <pinPeripheral+0x214>)
    44b8:	1851      	adds	r1, r2, r1
    44ba:	604b      	str	r3, [r1, #4]
    PORT->Group[pinPort].OUTSET.reg = (uint32_t)(1<<pinNum) ;	// set default pull direction to pullup (will not be enabled)
    44bc:	618b      	str	r3, [r1, #24]
    pinCfg |= PORT_PINCFG_PULLEN;
  }
  else if ( ulPeripheral == PIO_OUTPUT )
  {
    PORT->Group[pinPort].DIRSET.reg = (uint32_t)(1<<pinNum) ;
    pinCfg &= ~PORT_PINCFG_PULLEN;      // Disable pull resistor
    44be:	2304      	movs	r3, #4
    44c0:	4398      	bics	r0, r3

    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
  }

  // Set pin drive strength, enable/disable pull resistor, enable/disable INEN, and enable/disable the peripheral mux
  PORT->Group[pinPort].PINCFG[pinNum].reg = (uint8_t)pinCfg ;
    44c2:	4b5a      	ldr	r3, [pc, #360]	; (462c <pinPeripheral+0x210>)
    44c4:	18a2      	adds	r2, r4, r2
    44c6:	18d2      	adds	r2, r2, r3
    44c8:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    44ca:	b662      	cpsie	i

  interrupts();
  return 0l ;
    44cc:	2000      	movs	r0, #0
}
    44ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ( GetExtInt(ulPin) == NOT_AN_INTERRUPT )
    44d0:	230c      	movs	r3, #12
    44d2:	435d      	muls	r5, r3
    44d4:	197f      	adds	r7, r7, r5
    44d6:	7abb      	ldrb	r3, [r7, #10]
    44d8:	2b12      	cmp	r3, #18
    44da:	d010      	beq.n	44fe <pinPeripheral+0xe2>
      peripheral = PER_EXTINT;
    44dc:	2300      	movs	r3, #0
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    44de:	2a00      	cmp	r2, #0
    44e0:	d060      	beq.n	45a4 <pinPeripheral+0x188>
  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    44e2:	4d52      	ldr	r5, [pc, #328]	; (462c <pinPeripheral+0x210>)
    44e4:	01d0      	lsls	r0, r2, #7
    44e6:	1820      	adds	r0, r4, r0
    44e8:	1940      	adds	r0, r0, r5
    44ea:	7805      	ldrb	r5, [r0, #0]
    44ec:	2004      	movs	r0, #4
    44ee:	4028      	ands	r0, r5
    44f0:	e7d2      	b.n	4498 <pinPeripheral+0x7c>
      if ( GetADC(ulPin) == No_ADC_Channel )
    44f2:	230c      	movs	r3, #12
    44f4:	435d      	muls	r5, r3
    44f6:	197f      	adds	r7, r7, r5
    44f8:	7a7b      	ldrb	r3, [r7, #9]
    44fa:	2b16      	cmp	r3, #22
    44fc:	d14f      	bne.n	459e <pinPeripheral+0x182>
    return -1 ;
    44fe:	2001      	movs	r0, #1
    4500:	4240      	negs	r0, r0
    4502:	e7e4      	b.n	44ce <pinPeripheral+0xb2>
      if ( g_APinDescription[ulPin].ulTCChannel == NOT_ON_TIMER )
    4504:	230c      	movs	r3, #12
    4506:	435d      	muls	r5, r3
    4508:	197f      	adds	r7, r7, r5
    450a:	7a3b      	ldrb	r3, [r7, #8]
    450c:	2b80      	cmp	r3, #128	; 0x80
    450e:	d0f6      	beq.n	44fe <pinPeripheral+0xe2>
      if ( (peripheralAttribute & PER_ATTR_TIMER_MASK) == PER_ATTR_TIMER_STD )
    4510:	2306      	movs	r3, #6
    4512:	9801      	ldr	r0, [sp, #4]
    4514:	4003      	ands	r3, r0
        peripheral = PER_TIMER_ALT;
    4516:	1e58      	subs	r0, r3, #1
    4518:	4183      	sbcs	r3, r0
    451a:	3304      	adds	r3, #4
    451c:	e7af      	b.n	447e <pinPeripheral+0x62>
        peripheral = PER_SERCOM_ALT;
    451e:	2301      	movs	r3, #1
    4520:	9801      	ldr	r0, [sp, #4]
    4522:	4003      	ands	r3, r0
    4524:	3302      	adds	r3, #2
    4526:	e7da      	b.n	44de <pinPeripheral+0xc2>
  EPioPeripheral peripheral = PER_PORT;
    4528:	2309      	movs	r3, #9
    452a:	e7a8      	b.n	447e <pinPeripheral+0x62>
      peripheral = PER_ANALOG;
    452c:	2301      	movs	r3, #1
    452e:	e7a6      	b.n	447e <pinPeripheral+0x62>
  else if ( ulPeripheral == PIO_INPUT_PULLUP || ulPeripheral == PIO_INPUT_PULLDOWN )
    4530:	1e8d      	subs	r5, r1, #2
    4532:	2d01      	cmp	r5, #1
    4534:	d80c      	bhi.n	4550 <pinPeripheral+0x134>
    PORT->Group[pinPort].DIRCLR.reg = (uint32_t)(1<<pinNum) ;
    4536:	2301      	movs	r3, #1
    4538:	40a3      	lsls	r3, r4
    453a:	4d3d      	ldr	r5, [pc, #244]	; (4630 <pinPeripheral+0x214>)
    453c:	1955      	adds	r5, r2, r5
    453e:	606b      	str	r3, [r5, #4]
    if ( ulPeripheral == PIO_INPUT_PULLDOWN ) {
    4540:	2903      	cmp	r1, #3
    4542:	d103      	bne.n	454c <pinPeripheral+0x130>
      PORT->Group[pinPort].OUTCLR.reg = (uint32_t)(1<<pinNum) ;
    4544:	616b      	str	r3, [r5, #20]
    pinCfg |= PORT_PINCFG_PULLEN;
    4546:	2304      	movs	r3, #4
    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
    4548:	4318      	orrs	r0, r3
    454a:	e7ba      	b.n	44c2 <pinPeripheral+0xa6>
      PORT->Group[pinPort].OUTSET.reg = (uint32_t)(1<<pinNum) ;
    454c:	61ab      	str	r3, [r5, #24]
    454e:	e7fa      	b.n	4546 <pinPeripheral+0x12a>
  else if ( ulPeripheral == PIO_OUTPUT )
    4550:	2901      	cmp	r1, #1
    4552:	d104      	bne.n	455e <pinPeripheral+0x142>
    PORT->Group[pinPort].DIRSET.reg = (uint32_t)(1<<pinNum) ;
    4554:	40a1      	lsls	r1, r4
    4556:	4b36      	ldr	r3, [pc, #216]	; (4630 <pinPeripheral+0x214>)
    4558:	18d3      	adds	r3, r2, r3
    455a:	6099      	str	r1, [r3, #8]
    455c:	e7af      	b.n	44be <pinPeripheral+0xa2>
    455e:	0861      	lsrs	r1, r4, #1
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    4560:	4d34      	ldr	r5, [pc, #208]	; (4634 <pinPeripheral+0x218>)
    4562:	1851      	adds	r1, r2, r1
    4564:	1949      	adds	r1, r1, r5
    if ( pinNum & 1 ) // is pin odd?
    4566:	07e5      	lsls	r5, r4, #31
    4568:	d508      	bpl.n	457c <pinPeripheral+0x160>
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXO( peripheral ) ;
    456a:	260f      	movs	r6, #15
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXE( 0xF ) ;
    456c:	780d      	ldrb	r5, [r1, #0]
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXO( peripheral ) ;
    456e:	011b      	lsls	r3, r3, #4
    4570:	4035      	ands	r5, r6
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    4572:	432b      	orrs	r3, r5
    4574:	b2db      	uxtb	r3, r3
    4576:	700b      	strb	r3, [r1, #0]
    pinCfg |= PORT_PINCFG_PMUXEN; // Enable peripheral mux
    4578:	2301      	movs	r3, #1
    457a:	e7e5      	b.n	4548 <pinPeripheral+0x12c>
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    457c:	260f      	movs	r6, #15
      uint32_t temp = (PORT->Group[pinPort].PMUX[pinNum >> 1].reg) & PORT_PMUX_PMUXO( 0xF ) ;
    457e:	780d      	ldrb	r5, [r1, #0]
      PORT->Group[pinPort].PMUX[pinNum >> 1].reg = temp|PORT_PMUX_PMUXE( peripheral ) ;
    4580:	43b5      	bics	r5, r6
    4582:	e7f6      	b.n	4572 <pinPeripheral+0x156>
      peripheral = PER_AC_CLK;
    4584:	2307      	movs	r3, #7
    4586:	e7aa      	b.n	44de <pinPeripheral+0xc2>
      peripheral = PER_CCL;
    4588:	2308      	movs	r3, #8
    458a:	e7a8      	b.n	44de <pinPeripheral+0xc2>
  uint8_t pinCfg = (PORT->Group[pinPort].PINCFG[pinNum].reg & PORT_PINCFG_PULLEN);   // Preserve state of pullup/pulldown enable, clear the rest of the bits
    458c:	4827      	ldr	r0, [pc, #156]	; (462c <pinPeripheral+0x210>)
    458e:	01d3      	lsls	r3, r2, #7
    4590:	18e3      	adds	r3, r4, r3
    4592:	181b      	adds	r3, r3, r0
    4594:	7818      	ldrb	r0, [r3, #0]
    4596:	2304      	movs	r3, #4
    4598:	4018      	ands	r0, r3
      peripheral = PER_ANALOG;
    459a:	3b03      	subs	r3, #3
    459c:	e77e      	b.n	449c <pinPeripheral+0x80>
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    459e:	2a00      	cmp	r2, #0
    45a0:	d1f4      	bne.n	458c <pinPeripheral+0x170>
      peripheral = PER_ANALOG;
    45a2:	2301      	movs	r3, #1
  if ( ((pinPort == 0) && (pinNum == 2 || pinNum == 5)) && ulPeripheral != PIO_ANALOG_DAC )
    45a4:	2c02      	cmp	r4, #2
    45a6:	d002      	beq.n	45ae <pinPeripheral+0x192>
    45a8:	2c05      	cmp	r4, #5
    45aa:	d000      	beq.n	45ae <pinPeripheral+0x192>
    45ac:	e76a      	b.n	4484 <pinPeripheral+0x68>
    45ae:	2906      	cmp	r1, #6
    45b0:	d100      	bne.n	45b4 <pinPeripheral+0x198>
    45b2:	e767      	b.n	4484 <pinPeripheral+0x68>
    if ( (pinPort == 0) && (pinNum == 5) ) {
    45b4:	1f65      	subs	r5, r4, #5
    45b6:	4268      	negs	r0, r5
    45b8:	4145      	adcs	r5, r0
    if (dacEnabled[DACNumber]) {
    45ba:	481f      	ldr	r0, [pc, #124]	; (4638 <pinPeripheral+0x21c>)
    45bc:	5d47      	ldrb	r7, [r0, r5]
    45be:	2f00      	cmp	r7, #0
    45c0:	d100      	bne.n	45c4 <pinPeripheral+0x1a8>
    45c2:	e75f      	b.n	4484 <pinPeripheral+0x68>
      dacEnabled[DACNumber] = false;
    45c4:	2700      	movs	r7, #0
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC controller (so that DACCTRL can be modified)
    45c6:	2602      	movs	r6, #2
      dacEnabled[DACNumber] = false;
    45c8:	5547      	strb	r7, [r0, r5]
      DAC->CTRLA.bit.ENABLE = 0x00; // Disable DAC controller (so that DACCTRL can be modified)
    45ca:	481c      	ldr	r0, [pc, #112]	; (463c <pinPeripheral+0x220>)
    45cc:	7807      	ldrb	r7, [r0, #0]
    45ce:	43b7      	bics	r7, r6
    45d0:	7007      	strb	r7, [r0, #0]
  // VARIANT_MCK / 1000000 == cycles needed to delay 1uS
  //                     3 == cycles used in a loop
  // Divide by 3 before multiplication with usec, so that the maximum usable usec value
  // with the D51 @ 120MHz is at least what it was when multipling by usec first at 48MHz.
  uint32_t n = usec * ((VARIANT_MCK / 1000000) / 3);
  __asm__ __volatile__(
    45d2:	27a0      	movs	r7, #160	; 0xa0
    45d4:	00bf      	lsls	r7, r7, #2
    45d6:	3f01      	subs	r7, #1
    45d8:	d1fd      	bne.n	45d6 <pinPeripheral+0x1ba>
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    45da:	273f      	movs	r7, #63	; 0x3f
    45dc:	6886      	ldr	r6, [r0, #8]
    45de:	423e      	tst	r6, r7
    45e0:	d1fc      	bne.n	45dc <pinPeripheral+0x1c0>
      DAC->DACCTRL[DACNumber].bit.ENABLE = 0x00; // The DACx output is turned off.
    45e2:	4e16      	ldr	r6, [pc, #88]	; (463c <pinPeripheral+0x220>)
    45e4:	1d2f      	adds	r7, r5, #4
    45e6:	46b4      	mov	ip, r6
    45e8:	007f      	lsls	r7, r7, #1
    45ea:	44bc      	add	ip, r7
    45ec:	4666      	mov	r6, ip
    45ee:	88b7      	ldrh	r7, [r6, #4]
    45f0:	2602      	movs	r6, #2
    45f2:	43b7      	bics	r7, r6
    45f4:	4666      	mov	r6, ip
    45f6:	80b7      	strh	r7, [r6, #4]
      if (dacEnabled[0] || dacEnabled[1]) {
    45f8:	4f0f      	ldr	r7, [pc, #60]	; (4638 <pinPeripheral+0x21c>)
    45fa:	783e      	ldrb	r6, [r7, #0]
    45fc:	2e00      	cmp	r6, #0
    45fe:	d103      	bne.n	4608 <pinPeripheral+0x1ec>
    4600:	787f      	ldrb	r7, [r7, #1]
    4602:	2f00      	cmp	r7, #0
    4604:	d100      	bne.n	4608 <pinPeripheral+0x1ec>
    4606:	e73d      	b.n	4484 <pinPeripheral+0x68>
        DAC->CTRLA.bit.ENABLE = 0x01;     // Enable DAC controller, so that the other DAC can function
    4608:	2702      	movs	r7, #2
    460a:	7806      	ldrb	r6, [r0, #0]
    460c:	4337      	orrs	r7, r6
    460e:	7007      	strb	r7, [r0, #0]
  while ( DAC->SYNCBUSY.reg & DAC_SYNCBUSY_MASK );
    4610:	273f      	movs	r7, #63	; 0x3f
    4612:	6886      	ldr	r6, [r0, #8]
    4614:	423e      	tst	r6, r7
    4616:	d1fc      	bne.n	4612 <pinPeripheral+0x1f6>
        while ( (DAC->STATUS.reg & (1 << (1 - DACNumber))) == 0 );   // Must wait for DACx to start
    4618:	2701      	movs	r7, #1
    461a:	1b7d      	subs	r5, r7, r5
    461c:	40af      	lsls	r7, r5
    461e:	79c5      	ldrb	r5, [r0, #7]
    4620:	422f      	tst	r7, r5
    4622:	d0fc      	beq.n	461e <pinPeripheral+0x202>
    4624:	e72e      	b.n	4484 <pinPeripheral+0x68>
    4626:	46c0      	nop			; (mov r8, r8)
    4628:	000107a0 	.word	0x000107a0
    462c:	40002840 	.word	0x40002840
    4630:	40002800 	.word	0x40002800
    4634:	40002830 	.word	0x40002830
    4638:	20000bc7 	.word	0x20000bc7
    463c:	42003000 	.word	0x42003000

00004640 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
    4640:	4770      	bx	lr

00004642 <_ZN11DHT_Unified8HumidityD1Ev>:
    DHT_Unified* _parent;
    int32_t _id;

  };

  class Humidity : public Adafruit_Sensor {
    4642:	4770      	bx	lr

00004644 <_ZN11DHT_Unified11TemperatureD1Ev>:
  class Temperature : public Adafruit_Sensor {
    4644:	4770      	bx	lr

00004646 <_ZN11DHT_Unified11Temperature8getEventEP15sensors_event_t>:
DHT_Unified::Temperature::Temperature(DHT_Unified* parent, int32_t id):
  _parent(parent),
  _id(id)
{}

bool DHT_Unified::Temperature::getEvent(sensors_event_t* event) {
    4646:	b570      	push	{r4, r5, r6, lr}
    4648:	000c      	movs	r4, r1
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    464a:	2624      	movs	r6, #36	; 0x24
bool DHT_Unified::Temperature::getEvent(sensors_event_t* event) {
    464c:	0005      	movs	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
    464e:	0032      	movs	r2, r6
    4650:	2100      	movs	r1, #0
    4652:	0020      	movs	r0, r4
    4654:	f007 fd9e 	bl	c194 <memset>
  // Populate sensor reading values.
  event->version     = sizeof(sensors_event_t);
  event->sensor_id   = _id;
    4658:	68eb      	ldr	r3, [r5, #12]
  event->version     = sizeof(sensors_event_t);
    465a:	6026      	str	r6, [r4, #0]
  event->sensor_id   = _id;
    465c:	6063      	str	r3, [r4, #4]
  event->type        = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    465e:	230d      	movs	r3, #13
    4660:	60a3      	str	r3, [r4, #8]
  event->timestamp   = millis();
    4662:	f7fe f8c1 	bl	27e8 <millis>
  event->temperature = _parent->_dht.readTemperature();
    4666:	2200      	movs	r2, #0
  event->timestamp   = millis();
    4668:	6120      	str	r0, [r4, #16]
  event->temperature = _parent->_dht.readTemperature();
    466a:	0011      	movs	r1, r2
    466c:	68a8      	ldr	r0, [r5, #8]
    466e:	f001 fd33 	bl	60d8 <_ZN3DHT15readTemperatureEbb>
    4672:	6160      	str	r0, [r4, #20]
  
  return true;
}
    4674:	2001      	movs	r0, #1
    4676:	bd70      	pop	{r4, r5, r6, pc}

00004678 <_ZN11DHT_Unified8Humidity8getEventEP15sensors_event_t>:
DHT_Unified::Humidity::Humidity(DHT_Unified* parent, int32_t id):
  _parent(parent),
  _id(id)
{}

bool DHT_Unified::Humidity::getEvent(sensors_event_t* event) {
    4678:	b570      	push	{r4, r5, r6, lr}
    467a:	000c      	movs	r4, r1
  // Clear event definition.
  memset(event, 0, sizeof(sensors_event_t));
    467c:	2624      	movs	r6, #36	; 0x24
bool DHT_Unified::Humidity::getEvent(sensors_event_t* event) {
    467e:	0005      	movs	r5, r0
  memset(event, 0, sizeof(sensors_event_t));
    4680:	0032      	movs	r2, r6
    4682:	2100      	movs	r1, #0
    4684:	0020      	movs	r0, r4
    4686:	f007 fd85 	bl	c194 <memset>
  // Populate sensor reading values.
  event->version           = sizeof(sensors_event_t);
  event->sensor_id         = _id;
    468a:	68eb      	ldr	r3, [r5, #12]
  event->version           = sizeof(sensors_event_t);
    468c:	6026      	str	r6, [r4, #0]
  event->sensor_id         = _id;
    468e:	6063      	str	r3, [r4, #4]
  event->type              = SENSOR_TYPE_RELATIVE_HUMIDITY;
    4690:	230c      	movs	r3, #12
    4692:	60a3      	str	r3, [r4, #8]
  event->timestamp         = millis();
    4694:	f7fe f8a8 	bl	27e8 <millis>
  event->relative_humidity = _parent->_dht.readHumidity();
    4698:	2100      	movs	r1, #0
  event->timestamp         = millis();
    469a:	6120      	str	r0, [r4, #16]
  event->relative_humidity = _parent->_dht.readHumidity();
    469c:	68a8      	ldr	r0, [r5, #8]
    469e:	f001 fd6b 	bl	6178 <_ZN3DHT12readHumidityEb>
    46a2:	6160      	str	r0, [r4, #20]
  
  return true;
}
    46a4:	2001      	movs	r0, #1
    46a6:	bd70      	pop	{r4, r5, r6, pc}

000046a8 <_ZN11DHT_Unified8HumidityD0Ev>:
  class Humidity : public Adafruit_Sensor {
    46a8:	b510      	push	{r4, lr}
    46aa:	0004      	movs	r4, r0
    46ac:	f001 f8a2 	bl	57f4 <_ZdlPv>
    46b0:	0020      	movs	r0, r4
    46b2:	bd10      	pop	{r4, pc}

000046b4 <_ZN11DHT_Unified11TemperatureD0Ev>:
  class Temperature : public Adafruit_Sensor {
    46b4:	b510      	push	{r4, lr}
    46b6:	0004      	movs	r4, r0
    46b8:	f001 f89c 	bl	57f4 <_ZdlPv>
    46bc:	0020      	movs	r0, r4
    46be:	bd10      	pop	{r4, pc}

000046c0 <_ZN11DHT_UnifiedC1Ehhhll>:
DHT_Unified::DHT_Unified(uint8_t pin, uint8_t type, uint8_t count, int32_t tempSensorId, int32_t humiditySensorId):
    46c0:	b570      	push	{r4, r5, r6, lr}
    46c2:	0004      	movs	r4, r0
    46c4:	0015      	movs	r5, r2
  _humidity(this, humiditySensorId)
    46c6:	f001 fc4f 	bl	5f68 <_ZN3DHTC1Ehhh>
  _id(id)
    46ca:	4b07      	ldr	r3, [pc, #28]	; (46e8 <_ZN11DHT_UnifiedC1Ehhhll+0x28>)
  _humidity(this, humiditySensorId)
    46cc:	7525      	strb	r5, [r4, #20]
  _id(id)
    46ce:	3308      	adds	r3, #8
    46d0:	61a3      	str	r3, [r4, #24]
    46d2:	9b04      	ldr	r3, [sp, #16]
{}
    46d4:	0020      	movs	r0, r4
  _id(id)
    46d6:	6263      	str	r3, [r4, #36]	; 0x24
  _id(id)
    46d8:	4b04      	ldr	r3, [pc, #16]	; (46ec <_ZN11DHT_UnifiedC1Ehhhll+0x2c>)
  _id(id)
    46da:	6224      	str	r4, [r4, #32]
  _id(id)
    46dc:	3308      	adds	r3, #8
    46de:	62a3      	str	r3, [r4, #40]	; 0x28
    46e0:	9b05      	ldr	r3, [sp, #20]
    46e2:	6324      	str	r4, [r4, #48]	; 0x30
    46e4:	6363      	str	r3, [r4, #52]	; 0x34
{}
    46e6:	bd70      	pop	{r4, r5, r6, pc}
    46e8:	00010530 	.word	0x00010530
    46ec:	0001054c 	.word	0x0001054c

000046f0 <_ZN11DHT_Unified5beginEv>:
void DHT_Unified::begin() {
    46f0:	b510      	push	{r4, lr}
  _dht.begin();
    46f2:	f001 fc4d 	bl	5f90 <_ZN3DHT5beginEv>
}
    46f6:	bd10      	pop	{r4, pc}

000046f8 <_ZN11DHT_Unified7setNameEP8sensor_t>:
void DHT_Unified::setName(sensor_t* sensor) {
    46f8:	b510      	push	{r4, lr}
  switch(_type) {
    46fa:	7d02      	ldrb	r2, [r0, #20]
void DHT_Unified::setName(sensor_t* sensor) {
    46fc:	000c      	movs	r4, r1
  switch(_type) {
    46fe:	2a15      	cmp	r2, #21
    4700:	d007      	beq.n	4712 <_ZN11DHT_Unified7setNameEP8sensor_t+0x1a>
    4702:	2a16      	cmp	r2, #22
    4704:	d00d      	beq.n	4722 <_ZN11DHT_Unified7setNameEP8sensor_t+0x2a>
      strncpy(sensor->name, "DHT11", sizeof(sensor->name) - 1);
    4706:	4908      	ldr	r1, [pc, #32]	; (4728 <_ZN11DHT_Unified7setNameEP8sensor_t+0x30>)
  switch(_type) {
    4708:	2a0b      	cmp	r2, #11
    470a:	d004      	beq.n	4716 <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
      strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    470c:	220b      	movs	r2, #11
    470e:	4907      	ldr	r1, [pc, #28]	; (472c <_ZN11DHT_Unified7setNameEP8sensor_t+0x34>)
    4710:	e001      	b.n	4716 <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
      strncpy(sensor->name, "DHT21", sizeof(sensor->name) - 1);
    4712:	220b      	movs	r2, #11
    4714:	4906      	ldr	r1, [pc, #24]	; (4730 <_ZN11DHT_Unified7setNameEP8sensor_t+0x38>)
      strncpy(sensor->name, "DHT?", sizeof(sensor->name) - 1);
    4716:	0020      	movs	r0, r4
    4718:	f008 fe80 	bl	d41c <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
    471c:	2300      	movs	r3, #0
    471e:	72e3      	strb	r3, [r4, #11]
}
    4720:	bd10      	pop	{r4, pc}
      strncpy(sensor->name, "DHT22", sizeof(sensor->name) - 1);
    4722:	220b      	movs	r2, #11
    4724:	4903      	ldr	r1, [pc, #12]	; (4734 <_ZN11DHT_Unified7setNameEP8sensor_t+0x3c>)
    4726:	e7f6      	b.n	4716 <_ZN11DHT_Unified7setNameEP8sensor_t+0x1e>
    4728:	00010518 	.word	0x00010518
    472c:	0001052a 	.word	0x0001052a
    4730:	0001051e 	.word	0x0001051e
    4734:	00010524 	.word	0x00010524

00004738 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>:
  switch(_type) {
    4738:	7d03      	ldrb	r3, [r0, #20]
    473a:	2b15      	cmp	r3, #21
    473c:	d006      	beq.n	474c <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
    473e:	2b16      	cmp	r3, #22
    4740:	d004      	beq.n	474c <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
    4742:	2b0b      	cmp	r3, #11
    4744:	d102      	bne.n	474c <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x14>
      sensor->min_delay = 1000000L;  // 1 second (in microseconds)
    4746:	4b02      	ldr	r3, [pc, #8]	; (4750 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x18>)
      sensor->min_delay = 2000000L;  // 2 seconds (in microseconds)
    4748:	624b      	str	r3, [r1, #36]	; 0x24
}
    474a:	4770      	bx	lr
      sensor->min_delay = 2000000L;  // 2 seconds (in microseconds)
    474c:	4b01      	ldr	r3, [pc, #4]	; (4754 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x1c>)
    474e:	e7fb      	b.n	4748 <_ZN11DHT_Unified11setMinDelayEP8sensor_t+0x10>
    4750:	000f4240 	.word	0x000f4240
    4754:	001e8480 	.word	0x001e8480

00004758 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t>:
void DHT_Unified::Temperature::getSensor(sensor_t* sensor) {
    4758:	b570      	push	{r4, r5, r6, lr}
    475a:	000c      	movs	r4, r1
    475c:	0005      	movs	r5, r0
  memset(sensor, 0, sizeof(sensor_t));
    475e:	2228      	movs	r2, #40	; 0x28
    4760:	2100      	movs	r1, #0
    4762:	0020      	movs	r0, r4
    4764:	f007 fd16 	bl	c194 <memset>
  _parent->setName(sensor);
    4768:	0021      	movs	r1, r4
    476a:	68a8      	ldr	r0, [r5, #8]
    476c:	f7ff ffc4 	bl	46f8 <_ZN11DHT_Unified7setNameEP8sensor_t>
  sensor->version         = DHT_SENSOR_VERSION;
    4770:	2301      	movs	r3, #1
    4772:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id       = _id;
    4774:	68eb      	ldr	r3, [r5, #12]
  _parent->setMinDelay(sensor);
    4776:	0021      	movs	r1, r4
  sensor->sensor_id       = _id;
    4778:	6123      	str	r3, [r4, #16]
  sensor->type            = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    477a:	230d      	movs	r3, #13
  _parent->setMinDelay(sensor);
    477c:	68a8      	ldr	r0, [r5, #8]
  sensor->type            = SENSOR_TYPE_AMBIENT_TEMPERATURE;
    477e:	6163      	str	r3, [r4, #20]
  _parent->setMinDelay(sensor);
    4780:	f7ff ffda 	bl	4738 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    4784:	68ab      	ldr	r3, [r5, #8]
    4786:	7d1a      	ldrb	r2, [r3, #20]
    4788:	2a15      	cmp	r2, #21
    478a:	d00b      	beq.n	47a4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x4c>
    478c:	2a16      	cmp	r2, #22
    478e:	d00f      	beq.n	47b0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x58>
    4790:	2300      	movs	r3, #0
    4792:	2a0b      	cmp	r2, #11
    4794:	d10e      	bne.n	47b4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x5c>
      sensor->min_value   = 0.0F;
    4796:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 2.0F;
    4798:	2380      	movs	r3, #128	; 0x80
      sensor->max_value   = 50.0F;
    479a:	4a08      	ldr	r2, [pc, #32]	; (47bc <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x64>)
      sensor->resolution  = 2.0F;
    479c:	05db      	lsls	r3, r3, #23
      sensor->max_value   = 50.0F;
    479e:	61a2      	str	r2, [r4, #24]
      sensor->resolution  = 0.0F;
    47a0:	6223      	str	r3, [r4, #32]
}
    47a2:	bd70      	pop	{r4, r5, r6, pc}
      sensor->max_value   = 80.0F;
    47a4:	4b06      	ldr	r3, [pc, #24]	; (47c0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x68>)
      sensor->max_value   = 125.0F;
    47a6:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = -40.0F;
    47a8:	4b06      	ldr	r3, [pc, #24]	; (47c4 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x6c>)
    47aa:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 0.1F;
    47ac:	4b06      	ldr	r3, [pc, #24]	; (47c8 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x70>)
    47ae:	e7f7      	b.n	47a0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x48>
      sensor->max_value   = 125.0F;
    47b0:	4b06      	ldr	r3, [pc, #24]	; (47cc <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x74>)
    47b2:	e7f8      	b.n	47a6 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x4e>
      sensor->max_value   = 0.0F;
    47b4:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    47b6:	61e3      	str	r3, [r4, #28]
    47b8:	e7f2      	b.n	47a0 <_ZN11DHT_Unified11Temperature9getSensorEP8sensor_t+0x48>
    47ba:	46c0      	nop			; (mov r8, r8)
    47bc:	42480000 	.word	0x42480000
    47c0:	42a00000 	.word	0x42a00000
    47c4:	c2200000 	.word	0xc2200000
    47c8:	3dcccccd 	.word	0x3dcccccd
    47cc:	42fa0000 	.word	0x42fa0000

000047d0 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t>:

void DHT_Unified::Humidity::getSensor(sensor_t* sensor) {
    47d0:	b570      	push	{r4, r5, r6, lr}
    47d2:	000c      	movs	r4, r1
    47d4:	0005      	movs	r5, r0
  // Clear sensor definition.
  memset(sensor, 0, sizeof(sensor_t));
    47d6:	2228      	movs	r2, #40	; 0x28
    47d8:	2100      	movs	r1, #0
    47da:	0020      	movs	r0, r4
    47dc:	f007 fcda 	bl	c194 <memset>
  // Set sensor name.
  _parent->setName(sensor);
    47e0:	0021      	movs	r1, r4
    47e2:	68a8      	ldr	r0, [r5, #8]
    47e4:	f7ff ff88 	bl	46f8 <_ZN11DHT_Unified7setNameEP8sensor_t>
  // Set version and ID
  sensor->version         = DHT_SENSOR_VERSION;
    47e8:	2301      	movs	r3, #1
    47ea:	60e3      	str	r3, [r4, #12]
  sensor->sensor_id       = _id;
    47ec:	68eb      	ldr	r3, [r5, #12]
  // Set type and characteristics.
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
  _parent->setMinDelay(sensor);
    47ee:	0021      	movs	r1, r4
  sensor->sensor_id       = _id;
    47f0:	6123      	str	r3, [r4, #16]
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
    47f2:	230c      	movs	r3, #12
  _parent->setMinDelay(sensor);
    47f4:	68a8      	ldr	r0, [r5, #8]
  sensor->type            = SENSOR_TYPE_RELATIVE_HUMIDITY;
    47f6:	6163      	str	r3, [r4, #20]
  _parent->setMinDelay(sensor);
    47f8:	f7ff ff9e 	bl	4738 <_ZN11DHT_Unified11setMinDelayEP8sensor_t>
  switch (_parent->_type) {
    47fc:	68ab      	ldr	r3, [r5, #8]
    47fe:	7d1b      	ldrb	r3, [r3, #20]
    4800:	2b15      	cmp	r3, #21
    4802:	d00a      	beq.n	481a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x4a>
    4804:	2b16      	cmp	r3, #22
    4806:	d008      	beq.n	481a <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x4a>
    4808:	2b0b      	cmp	r3, #11
    480a:	d10c      	bne.n	4826 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x56>
    case DHT11:
      sensor->max_value   = 80.0F;
    480c:	4b08      	ldr	r3, [pc, #32]	; (4830 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x60>)
    480e:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 20.0F;
    4810:	4b08      	ldr	r3, [pc, #32]	; (4834 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x64>)
    4812:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 5.0F;
    4814:	4b08      	ldr	r3, [pc, #32]	; (4838 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x68>)
      break;
    default:
      // Unknown type, default to 0.
      sensor->max_value   = 0.0F;
      sensor->min_value   = 0.0F;
      sensor->resolution  = 0.0F;
    4816:	6223      	str	r3, [r4, #32]
      break;
  }
}
    4818:	bd70      	pop	{r4, r5, r6, pc}
      sensor->max_value   = 100.0F;
    481a:	4b08      	ldr	r3, [pc, #32]	; (483c <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x6c>)
    481c:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    481e:	2300      	movs	r3, #0
    4820:	61e3      	str	r3, [r4, #28]
      sensor->resolution  = 0.1F;
    4822:	4b07      	ldr	r3, [pc, #28]	; (4840 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x70>)
    4824:	e7f7      	b.n	4816 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x46>
      sensor->max_value   = 0.0F;
    4826:	2300      	movs	r3, #0
    4828:	61a3      	str	r3, [r4, #24]
      sensor->min_value   = 0.0F;
    482a:	61e3      	str	r3, [r4, #28]
    482c:	e7f3      	b.n	4816 <_ZN11DHT_Unified8Humidity9getSensorEP8sensor_t+0x46>
    482e:	46c0      	nop			; (mov r8, r8)
    4830:	42a00000 	.word	0x42a00000
    4834:	41a00000 	.word	0x41a00000
    4838:	40a00000 	.word	0x40a00000
    483c:	42c80000 	.word	0x42c80000
    4840:	3dcccccd 	.word	0x3dcccccd

00004844 <_ZN8SPIClass4initEv>:
  config(DEFAULT_SPI_SETTINGS);
}

void SPIClass::init()
{
  if (initialized)
    4844:	7a43      	ldrb	r3, [r0, #9]
    4846:	2b00      	cmp	r3, #0
    4848:	d104      	bne.n	4854 <_ZN8SPIClass4initEv+0x10>
    return;
  interruptMode = SPI_IMODE_NONE;
    484a:	7283      	strb	r3, [r0, #10]
  interruptSave = 0;
    484c:	72c3      	strb	r3, [r0, #11]
  interruptMask = 0;
    484e:	60c3      	str	r3, [r0, #12]
  initialized = true;
    4850:	3301      	adds	r3, #1
    4852:	7243      	strb	r3, [r0, #9]
}
    4854:	4770      	bx	lr

00004856 <_ZN8SPIClass6configE11SPISettings>:

void SPIClass::config(SPISettings settings)
{
    4856:	b530      	push	{r4, r5, lr}
    4858:	0004      	movs	r4, r0
    485a:	b085      	sub	sp, #20
    485c:	ad02      	add	r5, sp, #8
  _p_sercom->disableSPI();
    485e:	6800      	ldr	r0, [r0, #0]
{
    4860:	9102      	str	r1, [sp, #8]
    4862:	9203      	str	r2, [sp, #12]
  _p_sercom->disableSPI();
    4864:	f001 f8c3 	bl	59ee <_ZN6SERCOM10disableSPIEv>

  _p_sercom->initSPI(_padTx, _padRx, SPI_CHAR_SIZE_8_BITS, settings.bitOrder);
    4868:	796b      	ldrb	r3, [r5, #5]
    486a:	7a22      	ldrb	r2, [r4, #8]
    486c:	79e1      	ldrb	r1, [r4, #7]
    486e:	9300      	str	r3, [sp, #0]
    4870:	6820      	ldr	r0, [r4, #0]
    4872:	2300      	movs	r3, #0
    4874:	f001 f9d2 	bl	5c1c <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>
  _p_sercom->initSPIClock(settings.dataMode, settings.clockFreq);
    4878:	7929      	ldrb	r1, [r5, #4]
    487a:	9a02      	ldr	r2, [sp, #8]
    487c:	6820      	ldr	r0, [r4, #0]
    487e:	f001 f889 	bl	5994 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>

  _p_sercom->enableSPI();
    4882:	6820      	ldr	r0, [r4, #0]
    4884:	f001 f8aa 	bl	59dc <_ZN6SERCOM9enableSPIEv>
}
    4888:	b005      	add	sp, #20
    488a:	bd30      	pop	{r4, r5, pc}

0000488c <_ZN8SPIClass5beginEv>:
{
    488c:	b510      	push	{r4, lr}
    488e:	0004      	movs	r4, r0
  init();
    4890:	f7ff ffd8 	bl	4844 <_ZN8SPIClass4initEv>
  pinPeripheral(_uc_pinMiso, PIO_SERCOM);
    4894:	7920      	ldrb	r0, [r4, #4]
    4896:	210e      	movs	r1, #14
    4898:	f7ff fdc0 	bl	441c <pinPeripheral>
  pinPeripheral(_uc_pinSCK, PIO_SERCOM);
    489c:	79a0      	ldrb	r0, [r4, #6]
    489e:	210e      	movs	r1, #14
    48a0:	f7ff fdbc 	bl	441c <pinPeripheral>
  pinPeripheral(_uc_pinMosi, PIO_SERCOM);
    48a4:	7960      	ldrb	r0, [r4, #5]
    48a6:	210e      	movs	r1, #14
    48a8:	f7ff fdb8 	bl	441c <pinPeripheral>
  config(DEFAULT_SPI_SETTINGS);
    48ac:	4b02      	ldr	r3, [pc, #8]	; (48b8 <_ZN8SPIClass5beginEv+0x2c>)
    48ae:	0020      	movs	r0, r4
    48b0:	cb06      	ldmia	r3!, {r1, r2}
    48b2:	f7ff ffd0 	bl	4856 <_ZN8SPIClass6configE11SPISettings>
}
    48b6:	bd10      	pop	{r4, pc}
    48b8:	20000bdc 	.word	0x20000bdc

000048bc <_ZN8SPIClass16beginTransactionE11SPISettings>:
  if (irestore)
    interrupts();
}

void SPIClass::beginTransaction(SPISettings settings)
{
    48bc:	b507      	push	{r0, r1, r2, lr}
  if (interruptMode != SPI_IMODE_NONE)
    48be:	7a83      	ldrb	r3, [r0, #10]
{
    48c0:	9100      	str	r1, [sp, #0]
    48c2:	9201      	str	r2, [sp, #4]
  if (interruptMode != SPI_IMODE_NONE)
    48c4:	2b00      	cmp	r3, #0
    48c6:	d007      	beq.n	48d8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    48c8:	079a      	lsls	r2, r3, #30
    48ca:	d50a      	bpl.n	48e2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x26>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    48cc:	f3ef 8210 	mrs	r2, PRIMASK
  return (__get_PRIMASK() ? 0 : 1);
    48d0:	4253      	negs	r3, r2
    48d2:	4153      	adcs	r3, r2
    {
      interruptSave = interruptsStatus();
    48d4:	72c3      	strb	r3, [r0, #11]
  __ASM volatile ("cpsid i" : : : "memory");
    48d6:	b672      	cpsid	i
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
  }

  config(settings);
    48d8:	9900      	ldr	r1, [sp, #0]
    48da:	9a01      	ldr	r2, [sp, #4]
    48dc:	f7ff ffbb 	bl	4856 <_ZN8SPIClass6configE11SPISettings>
}
    48e0:	bd07      	pop	{r0, r1, r2, pc}
    else if (interruptMode & SPI_IMODE_EXTINT)
    48e2:	07db      	lsls	r3, r3, #31
    48e4:	d5f8      	bpl.n	48d8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
      EIC->INTENCLR.reg = EIC_INTENCLR_EXTINT(interruptMask);
    48e6:	8983      	ldrh	r3, [r0, #12]
    48e8:	4a01      	ldr	r2, [pc, #4]	; (48f0 <_ZN8SPIClass16beginTransactionE11SPISettings+0x34>)
    48ea:	60d3      	str	r3, [r2, #12]
    48ec:	e7f4      	b.n	48d8 <_ZN8SPIClass16beginTransactionE11SPISettings+0x1c>
    48ee:	46c0      	nop			; (mov r8, r8)
    48f0:	40002400 	.word	0x40002400

000048f4 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
  if (interruptMode != SPI_IMODE_NONE)
    48f4:	7a83      	ldrb	r3, [r0, #10]
    48f6:	2b00      	cmp	r3, #0
    48f8:	d005      	beq.n	4906 <_ZN8SPIClass14endTransactionEv+0x12>
  {
    if (interruptMode & SPI_IMODE_GLOBAL)
    48fa:	079a      	lsls	r2, r3, #30
    48fc:	d504      	bpl.n	4908 <_ZN8SPIClass14endTransactionEv+0x14>
    {
      if (interruptSave)
    48fe:	7ac3      	ldrb	r3, [r0, #11]
    4900:	2b00      	cmp	r3, #0
    4902:	d000      	beq.n	4906 <_ZN8SPIClass14endTransactionEv+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
    4904:	b662      	cpsie	i
        interrupts();
    }
    else if (interruptMode & SPI_IMODE_EXTINT)
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
  }
}
    4906:	4770      	bx	lr
    else if (interruptMode & SPI_IMODE_EXTINT)
    4908:	07db      	lsls	r3, r3, #31
    490a:	d5fc      	bpl.n	4906 <_ZN8SPIClass14endTransactionEv+0x12>
      EIC->INTENSET.reg = EIC_INTENSET_EXTINT(interruptMask);
    490c:	68c3      	ldr	r3, [r0, #12]
    490e:	4a02      	ldr	r2, [pc, #8]	; (4918 <_ZN8SPIClass14endTransactionEv+0x24>)
    4910:	b29b      	uxth	r3, r3
    4912:	6113      	str	r3, [r2, #16]
}
    4914:	e7f7      	b.n	4906 <_ZN8SPIClass14endTransactionEv+0x12>
    4916:	46c0      	nop			; (mov r8, r8)
    4918:	40002400 	.word	0x40002400

0000491c <_ZN8SPIClass8transferEh>:
    _p_sercom->setBaudrateSPI(div);
  }
}

byte SPIClass::transfer(uint8_t data)
{
    491c:	b510      	push	{r4, lr}
  return _p_sercom->transferDataSPI(data);
    491e:	6800      	ldr	r0, [r0, #0]
    4920:	f001 f86e 	bl	5a00 <_ZN6SERCOM15transferDataSPIEh>
}
    4924:	bd10      	pop	{r4, pc}

00004926 <_ZN8SPIClass8transferEPvj>:

  return t.val;
}

void SPIClass::transfer(void *buf, size_t count)
{
    4926:	b570      	push	{r4, r5, r6, lr}
    4928:	0006      	movs	r6, r0
  uint8_t *buffer = reinterpret_cast<uint8_t *>(buf);
    492a:	000c      	movs	r4, r1
    492c:	188d      	adds	r5, r1, r2
  for (size_t i=0; i<count; i++) {
    492e:	42ac      	cmp	r4, r5
    4930:	d006      	beq.n	4940 <_ZN8SPIClass8transferEPvj+0x1a>
    *buffer = transfer(*buffer);
    4932:	7821      	ldrb	r1, [r4, #0]
    4934:	0030      	movs	r0, r6
    4936:	f7ff fff1 	bl	491c <_ZN8SPIClass8transferEh>
    493a:	7020      	strb	r0, [r4, #0]
    buffer++;
    493c:	3401      	adds	r4, #1
  for (size_t i=0; i<count; i++) {
    493e:	e7f6      	b.n	492e <_ZN8SPIClass8transferEPvj+0x8>
  }
}
    4940:	bd70      	pop	{r4, r5, r6, pc}
	...

00004944 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad>:
  void init_AlwaysInline(uint32_t clock, BitOrder bitOrder, uint8_t dataMode) __attribute__((__always_inline__)) {
    // The SAMD51 SERCOM runs at 96MHz when the cpu runs at 120MHz
    #if F_CPU == 120000000
      this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? 96000000ul / SPI_MIN_CLOCK_DIVIDER : clock);
    #else
      this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    4944:	4b09      	ldr	r3, [pc, #36]	; (496c <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x28>)
    4946:	4a0a      	ldr	r2, [pc, #40]	; (4970 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x2c>)
    4948:	601a      	str	r2, [r3, #0]
    #endif

    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    494a:	2200      	movs	r2, #0
    494c:	715a      	strb	r2, [r3, #5]

    switch (dataMode)
    {
      case SPI_MODE0:
        this->dataMode = SERCOM_SPI_MODE_0; break;
    494e:	711a      	strb	r2, [r3, #4]
  initialized = false;
    4950:	4b08      	ldr	r3, [pc, #32]	; (4974 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x30>)
    4952:	725a      	strb	r2, [r3, #9]
  _p_sercom = p_sercom;
    4954:	4a08      	ldr	r2, [pc, #32]	; (4978 <_GLOBAL__sub_I__ZN8SPIClassC2EP6SERCOMhhh14SercomSpiTXPad11SercomRXPad+0x34>)
    4956:	601a      	str	r2, [r3, #0]
  _uc_pinMiso = uc_pinMISO;
    4958:	2223      	movs	r2, #35	; 0x23
    495a:	711a      	strb	r2, [r3, #4]
  _uc_pinSCK = uc_pinSCK;
    495c:	3a02      	subs	r2, #2
    495e:	719a      	strb	r2, [r3, #6]
  _uc_pinMosi = uc_pinMOSI;
    4960:	3a01      	subs	r2, #1
    4962:	715a      	strb	r2, [r3, #5]
  _padTx=PadTx;
    4964:	3a1f      	subs	r2, #31
    4966:	71da      	strb	r2, [r3, #7]
  _padRx=PadRx;
    4968:	721a      	strb	r2, [r3, #8]
  #ifndef PERIPH_SPI
    #define PERIPH_SPI           sercom5                 //sercom4
    #define PAD_SPI_TX           SPI_PAD_2_SCK_3        //SPI_PAD_2_SCK_3
    #define PAD_SPI_RX           SERCOM_RX_PAD_1        //SERCOM_RX_PAD_0
  #endif // PERIPH_SPI
  SPIClass SPI (&PERIPH_SPI,  PIN_SPI_MISO,  PIN_SPI_SCK,  PIN_SPI_MOSI,  PAD_SPI_TX,  PAD_SPI_RX);
    496a:	4770      	bx	lr
    496c:	20000bdc 	.word	0x20000bdc
    4970:	003d0900 	.word	0x003d0900
    4974:	20000bcc 	.word	0x20000bcc
    4978:	200015c4 	.word	0x200015c4

0000497c <_Z13rtc_time_initl>:
 *
 * @brief Init the RTC time
 *
 */
error_t rtc_time_init(int32_t zone)
{
    497c:	b513      	push	{r0, r1, r4, lr}
	// Initialize RTC clock code
	rtc.begin();
    497e:	4c0a      	ldr	r4, [pc, #40]	; (49a8 <_Z13rtc_time_initl+0x2c>)
    4980:	0020      	movs	r0, r4
    4982:	f001 fd13 	bl	63ac <_ZN7RTCZero5beginEv>
	
	// Set default time
	struct rtc_clockreg_value time;
	time.day = 1;
    4986:	466a      	mov	r2, sp
    4988:	2301      	movs	r3, #1
    498a:	70d3      	strb	r3, [r2, #3]
	time.month = 1;
    498c:	7113      	strb	r3, [r2, #4]
	time.year = 2000;
    498e:	23fa      	movs	r3, #250	; 0xfa
    4990:	00db      	lsls	r3, r3, #3
    4992:	80d3      	strh	r3, [r2, #6]
	time.hour = 0;
    4994:	2300      	movs	r3, #0
	time.minute = 0;
	time.second = 0;
	
	rtc.rtc_set_time(&time);
    4996:	0020      	movs	r0, r4
    4998:	4669      	mov	r1, sp
	time.hour = 0;
    499a:	7093      	strb	r3, [r2, #2]
	time.minute = 0;
    499c:	7053      	strb	r3, [r2, #1]
	time.second = 0;
    499e:	7013      	strb	r3, [r2, #0]
	rtc.rtc_set_time(&time);
    49a0:	f001 fcac 	bl	62fc <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>
	
	// Set the timezone
	set_time_zone(zone);
}
    49a4:	bd16      	pop	{r1, r2, r4, pc}
    49a6:	46c0      	nop			; (mov r8, r8)
    49a8:	20000be4 	.word	0x20000be4

000049ac <_Z13get_rtc_epochv>:
 * @brief Get the RTC time in local time
 *
 * 
 */
time_t get_rtc_epoch()
{
    49ac:	b510      	push	{r4, lr}
	// Convert to UTC
	time_t epoch;
	epoch = rtc.getEpoch();
    49ae:	4802      	ldr	r0, [pc, #8]	; (49b8 <_Z13get_rtc_epochv+0xc>)
    49b0:	f001 fd1a 	bl	63e8 <_ZN7RTCZero8getEpochEv>
	return epoch;

} // get_rtc_time()
    49b4:	bd10      	pop	{r4, pc}
    49b6:	46c0      	nop			; (mov r8, r8)
    49b8:	20000be4 	.word	0x20000be4

000049bc <_Z18print_current_timev>:
* Prints the current time
* The time is set to 0 during boot
*
*/
void print_current_time(void)
{
    49bc:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getSeconds();
    49be:	4c0c      	ldr	r4, [pc, #48]	; (49f0 <_Z18print_current_timev+0x34>)
{
    49c0:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getSeconds();
    49c2:	0020      	movs	r0, r4
    49c4:	f001 fc20 	bl	6208 <_ZN7RTCZero10getSecondsEv>
    49c8:	0006      	movs	r6, r0
	b = rtc.getMinutes();
    49ca:	0020      	movs	r0, r4
    49cc:	f001 fc22 	bl	6214 <_ZN7RTCZero10getMinutesEv>
    49d0:	0005      	movs	r5, r0
	c = rtc.getHours();
    49d2:	0020      	movs	r0, r4
    49d4:	f001 fc24 	bl	6220 <_ZN7RTCZero8getHoursEv>
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    49d8:	002b      	movs	r3, r5
	c = rtc.getHours();
    49da:	0002      	movs	r2, r0
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    49dc:	4905      	ldr	r1, [pc, #20]	; (49f4 <_Z18print_current_timev+0x38>)
	a = rtc.getSeconds();
    49de:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Time: %02d:%02d:%02d [hr:min:sec]", c, b, a );
    49e0:	a802      	add	r0, sp, #8
    49e2:	f008 fcad 	bl	d340 <siprintf>
	println(buffer);
    49e6:	a802      	add	r0, sp, #8
    49e8:	f000 f936 	bl	4c58 <_Z7printlnPKc>
	
} // print_current_time
    49ec:	b042      	add	sp, #264	; 0x108
    49ee:	bd70      	pop	{r4, r5, r6, pc}
    49f0:	20000be4 	.word	0x20000be4
    49f4:	000105a3 	.word	0x000105a3

000049f8 <_Z14print_log_timev>:
* Prints the current time specifically for logging
* The time is set to 0 during boot
*
*/
void print_log_time(void)
{
    49f8:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getSeconds();
    49fa:	4c0c      	ldr	r4, [pc, #48]	; (4a2c <_Z14print_log_timev+0x34>)
{
    49fc:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getSeconds();
    49fe:	0020      	movs	r0, r4
    4a00:	f001 fc02 	bl	6208 <_ZN7RTCZero10getSecondsEv>
    4a04:	0006      	movs	r6, r0
	b = rtc.getMinutes();
    4a06:	0020      	movs	r0, r4
    4a08:	f001 fc04 	bl	6214 <_ZN7RTCZero10getMinutesEv>
    4a0c:	0005      	movs	r5, r0
	c = rtc.getHours();
    4a0e:	0020      	movs	r0, r4
    4a10:	f001 fc06 	bl	6220 <_ZN7RTCZero8getHoursEv>
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4a14:	002b      	movs	r3, r5
	c = rtc.getHours();
    4a16:	0002      	movs	r2, r0
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4a18:	4905      	ldr	r1, [pc, #20]	; (4a30 <_Z14print_log_timev+0x38>)
	a = rtc.getSeconds();
    4a1a:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Time: %02d:%02d:%02d: ", c, b, a );
    4a1c:	a802      	add	r0, sp, #8
    4a1e:	f008 fc8f 	bl	d340 <siprintf>
	print(buffer);
    4a22:	a802      	add	r0, sp, #8
    4a24:	f000 f902 	bl	4c2c <_Z5printPKc>
	
} // print_current_time
    4a28:	b042      	add	sp, #264	; 0x108
    4a2a:	bd70      	pop	{r4, r5, r6, pc}
    4a2c:	20000be4 	.word	0x20000be4
    4a30:	00010568 	.word	0x00010568

00004a34 <_Z18print_current_datev>:
* Prints the current date
* The date is set to 0 during boot
*
*/
void print_current_date(void)
{
    4a34:	b570      	push	{r4, r5, r6, lr}
	uint32_t a,b,c;
	char buffer[PRINTF_LEN];

	// Print time
	a = rtc.getYear();
    4a36:	4c0c      	ldr	r4, [pc, #48]	; (4a68 <_Z18print_current_datev+0x34>)
{
    4a38:	b0c2      	sub	sp, #264	; 0x108
	a = rtc.getYear();
    4a3a:	0020      	movs	r0, r4
    4a3c:	f001 fc02 	bl	6244 <_ZN7RTCZero7getYearEv>
    4a40:	0006      	movs	r6, r0
	b = rtc.getDay();
    4a42:	0020      	movs	r0, r4
    4a44:	f001 fbf2 	bl	622c <_ZN7RTCZero6getDayEv>
    4a48:	0005      	movs	r5, r0
	c = rtc.getMonth();
    4a4a:	0020      	movs	r0, r4
    4a4c:	f001 fbf4 	bl	6238 <_ZN7RTCZero8getMonthEv>
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4a50:	002b      	movs	r3, r5
	c = rtc.getMonth();
    4a52:	0002      	movs	r2, r0
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4a54:	4905      	ldr	r1, [pc, #20]	; (4a6c <_Z18print_current_datev+0x38>)
	a = rtc.getYear();
    4a56:	9600      	str	r6, [sp, #0]
	sprintf( buffer, "Date: %02d:%02d:%02d [mon:day:year]", c, b, a );
    4a58:	a802      	add	r0, sp, #8
    4a5a:	f008 fc71 	bl	d340 <siprintf>
	println(buffer);
    4a5e:	a802      	add	r0, sp, #8
    4a60:	f000 f8fa 	bl	4c58 <_Z7printlnPKc>
	
} // print_current_date
    4a64:	b042      	add	sp, #264	; 0x108
    4a66:	bd70      	pop	{r4, r5, r6, pc}
    4a68:	20000be4 	.word	0x20000be4
    4a6c:	0001057f 	.word	0x0001057f

00004a70 <_GLOBAL__sub_I_rtc>:
    4a70:	b510      	push	{r4, lr}
RTCZero rtc;
    4a72:	4802      	ldr	r0, [pc, #8]	; (4a7c <_GLOBAL__sub_I_rtc+0xc>)
    4a74:	f001 fbba 	bl	61ec <_ZN7RTCZeroC1Ev>
} // print_current_date
    4a78:	bd10      	pop	{r4, pc}
    4a7a:	46c0      	nop			; (mov r8, r8)
    4a7c:	20000be4 	.word	0x20000be4

00004a80 <_Z10dlog_leveli>:


void dlog_level(int level)
{
    /* force level bounds */
    level = level >= numlevels ? numlevels - 1 : level;
    4a80:	2807      	cmp	r0, #7
    4a82:	dd00      	ble.n	4a86 <_Z10dlog_leveli+0x6>
    4a84:	2007      	movs	r0, #7
    level = level < 0 ? 0 : level;
    4a86:	43c3      	mvns	r3, r0
    4a88:	17db      	asrs	r3, r3, #31
    4a8a:	4018      	ands	r0, r3

    log_level = level;
    4a8c:	4b01      	ldr	r3, [pc, #4]	; (4a94 <_Z10dlog_leveli+0x14>)
    4a8e:	6018      	str	r0, [r3, #0]
} // dlog_level
    4a90:	4770      	bx	lr
    4a92:	46c0      	nop			; (mov r8, r8)
    4a94:	2000008c 	.word	0x2000008c

00004a98 <_Z8log_initP7Serial_mm>:
{
    4a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pSerMon = pSerial;
    4a9a:	4e0e      	ldr	r6, [pc, #56]	; (4ad4 <_Z8log_initP7Serial_mm+0x3c>)
{
    4a9c:	0017      	movs	r7, r2
	pSerMon = pSerial;
    4a9e:	6030      	str	r0, [r6, #0]
	SerMon.begin(baud);
    4aa0:	f7fe fac0 	bl	3024 <_ZN7Serial_5beginEm>
	log_enabled = false;
    4aa4:	2300      	movs	r3, #0
    4aa6:	2408      	movs	r4, #8
    4aa8:	4d0b      	ldr	r5, [pc, #44]	; (4ad8 <_Z8log_initP7Serial_mm+0x40>)
    4aaa:	702b      	strb	r3, [r5, #0]
		if (!SerMon){
    4aac:	6830      	ldr	r0, [r6, #0]
    4aae:	f7fe fabb 	bl	3028 <_ZN7Serial_cvbEv>
    4ab2:	2800      	cmp	r0, #0
    4ab4:	d10a      	bne.n	4acc <_Z8log_initP7Serial_mm+0x34>
			delay(2000);
    4ab6:	20fa      	movs	r0, #250	; 0xfa
    4ab8:	3c01      	subs	r4, #1
    4aba:	00c0      	lsls	r0, r0, #3
    4abc:	f7fd feca 	bl	2854 <delay>
	for (int indx=0 ; indx < 8 ; indx++) {
    4ac0:	2c00      	cmp	r4, #0
    4ac2:	d1f3      	bne.n	4aac <_Z8log_initP7Serial_mm+0x14>
	dlog_level(log_level);
    4ac4:	0038      	movs	r0, r7
    4ac6:	f7ff ffdb 	bl	4a80 <_Z10dlog_leveli>
} // log_init
    4aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			log_enabled = true;
    4acc:	2301      	movs	r3, #1
    4ace:	702b      	strb	r3, [r5, #0]
			break;
    4ad0:	e7f8      	b.n	4ac4 <_Z8log_initP7Serial_mm+0x2c>
    4ad2:	46c0      	nop			; (mov r8, r8)
    4ad4:	20000be8 	.word	0x20000be8
    4ad8:	20000be5 	.word	0x20000be5

00004adc <_Z4dlogiPKcz>:


void dlog(int level, const char *format, ...)
{
    4adc:	b40e      	push	{r1, r2, r3}
    4ade:	b500      	push	{lr}
    va_list args;
	char buffer[PRINTF_LEN];
	
	// Is logging enabled?
	if (!log_enabled)
    4ae0:	4b0c      	ldr	r3, [pc, #48]	; (4b14 <_Z4dlogiPKcz+0x38>)
{
    4ae2:	b0c2      	sub	sp, #264	; 0x108
	if (!log_enabled)
    4ae4:	781b      	ldrb	r3, [r3, #0]
    4ae6:	2b00      	cmp	r3, #0
    4ae8:	d010      	beq.n	4b0c <_Z4dlogiPKcz+0x30>
	{
		return;
	}
   
    // Check debug log
    if (level > log_level) 
    4aea:	4b0b      	ldr	r3, [pc, #44]	; (4b18 <_Z4dlogiPKcz+0x3c>)
    4aec:	681b      	ldr	r3, [r3, #0]
    4aee:	4283      	cmp	r3, r0
    4af0:	db0c      	blt.n	4b0c <_Z4dlogiPKcz+0x30>
	{
        return;
    }

	// Print time
	print_log_time();
    4af2:	f7ff ff81 	bl	49f8 <_Z14print_log_timev>

	// Print to serial port using the format
	va_start( args, format );
    4af6:	aa44      	add	r2, sp, #272	; 0x110
	vsprintf( buffer,format, args );
    4af8:	9943      	ldr	r1, [sp, #268]	; 0x10c
    4afa:	a802      	add	r0, sp, #8
	va_start( args, format );
    4afc:	9201      	str	r2, [sp, #4]
	vsprintf( buffer,format, args );
    4afe:	f008 ff9f 	bl	da40 <vsiprintf>
	SerMon.println(buffer);
    4b02:	4b06      	ldr	r3, [pc, #24]	; (4b1c <_Z4dlogiPKcz+0x40>)
    4b04:	a902      	add	r1, sp, #8
    4b06:	6818      	ldr	r0, [r3, #0]
    4b08:	f7fd ff54 	bl	29b4 <_ZN5Print7printlnEPKc>
	va_end(args);

} // dlog
    4b0c:	b042      	add	sp, #264	; 0x108
    4b0e:	bc08      	pop	{r3}
    4b10:	b003      	add	sp, #12
    4b12:	4718      	bx	r3
    4b14:	20000be5 	.word	0x20000be5
    4b18:	2000008c 	.word	0x2000008c
    4b1c:	20000be8 	.word	0x20000be8

00004b20 <_Z5ddumpiPKcPKvi>:


void ddump(int level, const char *label, const void *data, int datalen)
{
    4b20:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b22:	001f      	movs	r7, r3
    const uint8_t *b = (const uint8_t *) data;
	char buffer[PRINTF_LEN];
    int i;
    
    // Is logging enabled?
    if (!log_enabled)
    4b24:	4b16      	ldr	r3, [pc, #88]	; (4b80 <_Z5ddumpiPKcPKvi+0x60>)
{
    4b26:	b0c1      	sub	sp, #260	; 0x104
    if (!log_enabled)
    4b28:	781b      	ldrb	r3, [r3, #0]
{
    4b2a:	000c      	movs	r4, r1
    4b2c:	0016      	movs	r6, r2
    if (!log_enabled)
    4b2e:	2b00      	cmp	r3, #0
    4b30:	d024      	beq.n	4b7c <_Z5ddumpiPKcPKvi+0x5c>
    {
	    return;
    }

    if (level > log_level) 
    4b32:	4b14      	ldr	r3, [pc, #80]	; (4b84 <_Z5ddumpiPKcPKvi+0x64>)
    4b34:	681b      	ldr	r3, [r3, #0]
    4b36:	4283      	cmp	r3, r0
    4b38:	db20      	blt.n	4b7c <_Z5ddumpiPKcPKvi+0x5c>
	{
        return;
    }

	// Print time
	print_log_time();
    4b3a:	f7ff ff5d 	bl	49f8 <_Z14print_log_timev>
    4b3e:	4d12      	ldr	r5, [pc, #72]	; (4b88 <_Z5ddumpiPKcPKvi+0x68>)

    if (label) 
    4b40:	2c00      	cmp	r4, #0
    4b42:	d008      	beq.n	4b56 <_Z5ddumpiPKcPKvi+0x36>
	{
		sprintf( buffer, "%s:", label );
    4b44:	4911      	ldr	r1, [pc, #68]	; (4b8c <_Z5ddumpiPKcPKvi+0x6c>)
    4b46:	0022      	movs	r2, r4
    4b48:	4668      	mov	r0, sp
    4b4a:	f008 fbf9 	bl	d340 <siprintf>
        SerMon.print(buffer);
    4b4e:	4669      	mov	r1, sp
    4b50:	6828      	ldr	r0, [r5, #0]
    4b52:	f7fd ff0a 	bl	296a <_ZN5Print5printEPKc>
{
    4b56:	0034      	movs	r4, r6
    }

    for(i = 0; i < datalen; i++) 
    4b58:	1ba3      	subs	r3, r4, r6
    4b5a:	42bb      	cmp	r3, r7
    4b5c:	da0a      	bge.n	4b74 <_Z5ddumpiPKcPKvi+0x54>
	{
		sprintf( buffer, " %02x", b[i] );
    4b5e:	7822      	ldrb	r2, [r4, #0]
    4b60:	490b      	ldr	r1, [pc, #44]	; (4b90 <_Z5ddumpiPKcPKvi+0x70>)
    4b62:	4668      	mov	r0, sp
    4b64:	f008 fbec 	bl	d340 <siprintf>
        SerMon.print(buffer);
    4b68:	4669      	mov	r1, sp
    4b6a:	6828      	ldr	r0, [r5, #0]
    4b6c:	f7fd fefd 	bl	296a <_ZN5Print5printEPKc>
    4b70:	3401      	adds	r4, #1
    4b72:	e7f1      	b.n	4b58 <_Z5ddumpiPKcPKvi+0x38>
    }
    
    SerMon.println("");
    4b74:	4907      	ldr	r1, [pc, #28]	; (4b94 <_Z5ddumpiPKcPKvi+0x74>)
    4b76:	6828      	ldr	r0, [r5, #0]
    4b78:	f7fd ff1c 	bl	29b4 <_ZN5Print7printlnEPKc>

} // ddump
    4b7c:	b041      	add	sp, #260	; 0x104
    4b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b80:	20000be5 	.word	0x20000be5
    4b84:	2000008c 	.word	0x2000008c
    4b88:	20000be8 	.word	0x20000be8
    4b8c:	00010602 	.word	0x00010602
    4b90:	00010606 	.word	0x00010606
    4b94:	00010477 	.word	0x00010477

00004b98 <_Z7log_msgPKcPKvii>:


void log_msg(const char *label, const void *data, int datalen, int eol)
{
    4b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4b9a:	9301      	str	r3, [sp, #4]
    static char llabel[64];
    static int llen;
    static uint8_t line[256];
    
    // Is logging enabled?
    if (!log_enabled)
    4b9c:	4b1e      	ldr	r3, [pc, #120]	; (4c18 <_Z7log_msgPKcPKvii+0x80>)
{
    4b9e:	0006      	movs	r6, r0
    if (!log_enabled)
    4ba0:	781b      	ldrb	r3, [r3, #0]
{
    4ba2:	9100      	str	r1, [sp, #0]
    4ba4:	0014      	movs	r4, r2
    if (!log_enabled)
    4ba6:	2b00      	cmp	r3, #0
    4ba8:	d034      	beq.n	4c14 <_Z7log_msgPKcPKvii+0x7c>
    {
	    return;
    }

    if ( LOG_DEBUG > log_level ) 
    4baa:	4b1c      	ldr	r3, [pc, #112]	; (4c1c <_Z7log_msgPKcPKvii+0x84>)
    4bac:	681b      	ldr	r3, [r3, #0]
    4bae:	2b06      	cmp	r3, #6
    4bb0:	dd30      	ble.n	4c14 <_Z7log_msgPKcPKvii+0x7c>
	{
        return;
    }

    if ((!eol || llen) && (llen + datalen < sizeof(line))) {
    4bb2:	9b01      	ldr	r3, [sp, #4]
    4bb4:	4d1a      	ldr	r5, [pc, #104]	; (4c20 <_Z7log_msgPKcPKvii+0x88>)
    4bb6:	2b00      	cmp	r3, #0
    4bb8:	d002      	beq.n	4bc0 <_Z7log_msgPKcPKvii+0x28>
    4bba:	682b      	ldr	r3, [r5, #0]
    4bbc:	2b00      	cmp	r3, #0
    4bbe:	d012      	beq.n	4be6 <_Z7log_msgPKcPKvii+0x4e>
    4bc0:	682b      	ldr	r3, [r5, #0]
    4bc2:	18e7      	adds	r7, r4, r3
    4bc4:	2fff      	cmp	r7, #255	; 0xff
    4bc6:	d80e      	bhi.n	4be6 <_Z7log_msgPKcPKvii+0x4e>
        /* buffer if we can */
        memcpy(line + llen, data, datalen);
    4bc8:	4816      	ldr	r0, [pc, #88]	; (4c24 <_Z7log_msgPKcPKvii+0x8c>)
    4bca:	0022      	movs	r2, r4
    4bcc:	18c0      	adds	r0, r0, r3
    4bce:	9900      	ldr	r1, [sp, #0]
    4bd0:	f007 fac5 	bl	c15e <memcpy>
        llen += datalen;
        datalen = 0;    /* consumed */
    4bd4:	1e34      	subs	r4, r6, #0
        llen += datalen;
    4bd6:	602f      	str	r7, [r5, #0]
        if (label) {
    4bd8:	d005      	beq.n	4be6 <_Z7log_msgPKcPKvii+0x4e>
            strncpy(llabel, label, sizeof(llabel)-1);
    4bda:	223f      	movs	r2, #63	; 0x3f
    4bdc:	0031      	movs	r1, r6
    4bde:	4812      	ldr	r0, [pc, #72]	; (4c28 <_Z7log_msgPKcPKvii+0x90>)
    4be0:	f008 fc1c 	bl	d41c <strncpy>
        datalen = 0;    /* consumed */
    4be4:	2400      	movs	r4, #0
        }
    }

    if (eol || datalen) {
    4be6:	9b01      	ldr	r3, [sp, #4]
    4be8:	4323      	orrs	r3, r4
    4bea:	d013      	beq.n	4c14 <_Z7log_msgPKcPKvii+0x7c>
        /* flush */
        if (llen) {
    4bec:	682b      	ldr	r3, [r5, #0]
    4bee:	2b00      	cmp	r3, #0
    4bf0:	d008      	beq.n	4c04 <_Z7log_msgPKcPKvii+0x6c>
            ddump(LOG_DEBUG, llabel, line, llen);
    4bf2:	4f0d      	ldr	r7, [pc, #52]	; (4c28 <_Z7log_msgPKcPKvii+0x90>)
    4bf4:	4a0b      	ldr	r2, [pc, #44]	; (4c24 <_Z7log_msgPKcPKvii+0x8c>)
    4bf6:	0039      	movs	r1, r7
    4bf8:	2007      	movs	r0, #7
    4bfa:	f7ff ff91 	bl	4b20 <_Z5ddumpiPKcPKvi>
            llabel[0] = 0;
    4bfe:	2300      	movs	r3, #0
    4c00:	703b      	strb	r3, [r7, #0]
            llen = 0;
    4c02:	602b      	str	r3, [r5, #0]
        }
        
        if (datalen) {
    4c04:	2c00      	cmp	r4, #0
    4c06:	d005      	beq.n	4c14 <_Z7log_msgPKcPKvii+0x7c>
            ddump(LOG_DEBUG, label, data, datalen);
    4c08:	0023      	movs	r3, r4
    4c0a:	9a00      	ldr	r2, [sp, #0]
    4c0c:	0031      	movs	r1, r6
    4c0e:	2007      	movs	r0, #7
    4c10:	f7ff ff86 	bl	4b20 <_Z5ddumpiPKcPKvi>
        }

    } // if

} // log_msg
    4c14:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4c16:	46c0      	nop			; (mov r8, r8)
    4c18:	20000be5 	.word	0x20000be5
    4c1c:	2000008c 	.word	0x2000008c
    4c20:	20000cec 	.word	0x20000cec
    4c24:	20000bec 	.word	0x20000bec
    4c28:	20000cf0 	.word	0x20000cf0

00004c2c <_Z5printPKc>:


void print( const char * buf )
{
	// Is logging enabled?
	if (!log_enabled)
    4c2c:	4b07      	ldr	r3, [pc, #28]	; (4c4c <_Z5printPKc+0x20>)
{
    4c2e:	b510      	push	{r4, lr}
	if (!log_enabled)
    4c30:	781b      	ldrb	r3, [r3, #0]
{
    4c32:	0001      	movs	r1, r0
	if (!log_enabled)
    4c34:	2b00      	cmp	r3, #0
    4c36:	d007      	beq.n	4c48 <_Z5printPKc+0x1c>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    4c38:	4b05      	ldr	r3, [pc, #20]	; (4c50 <_Z5printPKc+0x24>)
    4c3a:	681b      	ldr	r3, [r3, #0]
    4c3c:	2b06      	cmp	r3, #6
    4c3e:	dd03      	ble.n	4c48 <_Z5printPKc+0x1c>
	{
        return;
    }

	SerMon.print(buf);
    4c40:	4b04      	ldr	r3, [pc, #16]	; (4c54 <_Z5printPKc+0x28>)
    4c42:	6818      	ldr	r0, [r3, #0]
    4c44:	f7fd fe91 	bl	296a <_ZN5Print5printEPKc>
	
} // print
    4c48:	bd10      	pop	{r4, pc}
    4c4a:	46c0      	nop			; (mov r8, r8)
    4c4c:	20000be5 	.word	0x20000be5
    4c50:	2000008c 	.word	0x2000008c
    4c54:	20000be8 	.word	0x20000be8

00004c58 <_Z7printlnPKc>:


void println( const char * buf )
{
	// Is logging enabled?
	if (!log_enabled)
    4c58:	4b07      	ldr	r3, [pc, #28]	; (4c78 <_Z7printlnPKc+0x20>)
{
    4c5a:	b510      	push	{r4, lr}
	if (!log_enabled)
    4c5c:	781b      	ldrb	r3, [r3, #0]
{
    4c5e:	0001      	movs	r1, r0
	if (!log_enabled)
    4c60:	2b00      	cmp	r3, #0
    4c62:	d007      	beq.n	4c74 <_Z7printlnPKc+0x1c>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    4c64:	4b05      	ldr	r3, [pc, #20]	; (4c7c <_Z7printlnPKc+0x24>)
    4c66:	681b      	ldr	r3, [r3, #0]
    4c68:	2b06      	cmp	r3, #6
    4c6a:	dd03      	ble.n	4c74 <_Z7printlnPKc+0x1c>
	{
        return;
    }

	SerMon.println(buf);
    4c6c:	4b04      	ldr	r3, [pc, #16]	; (4c80 <_Z7printlnPKc+0x28>)
    4c6e:	6818      	ldr	r0, [r3, #0]
    4c70:	f7fd fea0 	bl	29b4 <_ZN5Print7printlnEPKc>
	
} // println
    4c74:	bd10      	pop	{r4, pc}
    4c76:	46c0      	nop			; (mov r8, r8)
    4c78:	20000be5 	.word	0x20000be5
    4c7c:	2000008c 	.word	0x2000008c
    4c80:	20000be8 	.word	0x20000be8

00004c84 <_Z8printnumi>:


void printnum( int n )
{
	// Is logging enabled?
	if (!log_enabled)
    4c84:	4b07      	ldr	r3, [pc, #28]	; (4ca4 <_Z8printnumi+0x20>)
{
    4c86:	b510      	push	{r4, lr}
	if (!log_enabled)
    4c88:	781b      	ldrb	r3, [r3, #0]
{
    4c8a:	0001      	movs	r1, r0
	if (!log_enabled)
    4c8c:	2b00      	cmp	r3, #0
    4c8e:	d008      	beq.n	4ca2 <_Z8printnumi+0x1e>
	{
		return;
	}
	
    if ( LOG_DEBUG > log_level ) 
    4c90:	4b05      	ldr	r3, [pc, #20]	; (4ca8 <_Z8printnumi+0x24>)
    4c92:	681b      	ldr	r3, [r3, #0]
    4c94:	2b06      	cmp	r3, #6
    4c96:	dd04      	ble.n	4ca2 <_Z8printnumi+0x1e>
	{
        return;
    }

	SerMon.print(n);
    4c98:	4b04      	ldr	r3, [pc, #16]	; (4cac <_Z8printnumi+0x28>)
    4c9a:	220a      	movs	r2, #10
    4c9c:	6818      	ldr	r0, [r3, #0]
    4c9e:	f7fd fee8 	bl	2a72 <_ZN5Print5printEii>
	
} // println
    4ca2:	bd10      	pop	{r4, pc}
    4ca4:	20000be5 	.word	0x20000be5
    4ca8:	2000008c 	.word	0x2000008c
    4cac:	20000be8 	.word	0x20000be8

00004cb0 <_Z12capture_dumpPhi>:
	char str[6];
    uint8_t ch;
	uint16_t ix;
	
	// Is logging enabled?
	if (!log_enabled)
    4cb0:	4b1b      	ldr	r3, [pc, #108]	; (4d20 <_Z12capture_dumpPhi+0x70>)
{
    4cb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!log_enabled)
    4cb4:	781b      	ldrb	r3, [r3, #0]
{
    4cb6:	0006      	movs	r6, r0
    4cb8:	000f      	movs	r7, r1
	if (!log_enabled)
    4cba:	2b00      	cmp	r3, #0
    4cbc:	d02e      	beq.n	4d1c <_Z12capture_dumpPhi+0x6c>
	{
		return;
	}

    // Check debug log
    if ( LOG_DEBUG > log_level ) 
    4cbe:	4b19      	ldr	r3, [pc, #100]	; (4d24 <_Z12capture_dumpPhi+0x74>)
    4cc0:	681b      	ldr	r3, [r3, #0]
    4cc2:	2b06      	cmp	r3, #6
    4cc4:	dd2a      	ble.n	4d1c <_Z12capture_dumpPhi+0x6c>
	{
        return;
    }
	
	if (!p)
    4cc6:	2800      	cmp	r0, #0
    4cc8:	d100      	bne.n	4ccc <_Z12capture_dumpPhi+0x1c>
	{
		p = &capture_buf[0];
    4cca:	4e17      	ldr	r6, [pc, #92]	; (4d28 <_Z12capture_dumpPhi+0x78>)
	}

	if ( !count && ( cap_count >= 0 ))
    4ccc:	2f00      	cmp	r7, #0
    4cce:	d101      	bne.n	4cd4 <_Z12capture_dumpPhi+0x24>
	{
		count = cap_count;
    4cd0:	4b16      	ldr	r3, [pc, #88]	; (4d2c <_Z12capture_dumpPhi+0x7c>)
    4cd2:	881f      	ldrh	r7, [r3, #0]
		
	}
	
	SerMon.println("======================================================");
    4cd4:	4d16      	ldr	r5, [pc, #88]	; (4d30 <_Z12capture_dumpPhi+0x80>)
    4cd6:	4917      	ldr	r1, [pc, #92]	; (4d34 <_Z12capture_dumpPhi+0x84>)
    4cd8:	6828      	ldr	r0, [r5, #0]
    4cda:	f7fd fe6b 	bl	29b4 <_ZN5Print7printlnEPKc>
	for( ix = 0; ix < count-1; ix++ )
    4cde:	2400      	movs	r4, #0
    4ce0:	1e7b      	subs	r3, r7, #1
		ch = p[ix];
		sprintf( str, "%02x,", ch );
		SerMon.print(str);

	} // for
	sprintf( str, "%02x", p[ix] );
    4ce2:	5d32      	ldrb	r2, [r6, r4]
	for( ix = 0; ix < count-1; ix++ )
    4ce4:	429c      	cmp	r4, r3
    4ce6:	da0a      	bge.n	4cfe <_Z12capture_dumpPhi+0x4e>
		sprintf( str, "%02x,", ch );
    4ce8:	4913      	ldr	r1, [pc, #76]	; (4d38 <_Z12capture_dumpPhi+0x88>)
    4cea:	4668      	mov	r0, sp
    4cec:	f008 fb28 	bl	d340 <siprintf>
	for( ix = 0; ix < count-1; ix++ )
    4cf0:	3401      	adds	r4, #1
		SerMon.print(str);
    4cf2:	4669      	mov	r1, sp
    4cf4:	6828      	ldr	r0, [r5, #0]
    4cf6:	f7fd fe38 	bl	296a <_ZN5Print5printEPKc>
	for( ix = 0; ix < count-1; ix++ )
    4cfa:	b2a4      	uxth	r4, r4
    4cfc:	e7f0      	b.n	4ce0 <_Z12capture_dumpPhi+0x30>
	sprintf( str, "%02x", p[ix] );
    4cfe:	490f      	ldr	r1, [pc, #60]	; (4d3c <_Z12capture_dumpPhi+0x8c>)
    4d00:	4668      	mov	r0, sp
    4d02:	f008 fb1d 	bl	d340 <siprintf>
	SerMon.println(str);
    4d06:	4669      	mov	r1, sp
    4d08:	6828      	ldr	r0, [r5, #0]
    4d0a:	f7fd fe53 	bl	29b4 <_ZN5Print7printlnEPKc>
	SerMon.println("======================================================");
    4d0e:	4909      	ldr	r1, [pc, #36]	; (4d34 <_Z12capture_dumpPhi+0x84>)
    4d10:	6828      	ldr	r0, [r5, #0]
    4d12:	f7fd fe4f 	bl	29b4 <_ZN5Print7printlnEPKc>

	// Reset the count
	cap_count = 0;
    4d16:	2200      	movs	r2, #0
    4d18:	4b04      	ldr	r3, [pc, #16]	; (4d2c <_Z12capture_dumpPhi+0x7c>)
    4d1a:	801a      	strh	r2, [r3, #0]

} // capture_dump
    4d1c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4d1e:	46c0      	nop			; (mov r8, r8)
    4d20:	20000be5 	.word	0x20000be5
    4d24:	2000008c 	.word	0x2000008c
    4d28:	20000d32 	.word	0x20000d32
    4d2c:	20000d30 	.word	0x20000d30
    4d30:	20000be8 	.word	0x20000be8
    4d34:	000105c5 	.word	0x000105c5
    4d38:	000105fc 	.word	0x000105fc
    4d3c:	00010607 	.word	0x00010607

00004d40 <_Z8free_ramv>:


// Function to return the amount of Free Ram.
extern "C" char *sbrk(int i);
int free_ram()
{
    4d40:	b513      	push	{r0, r1, r4, lr}
	char stack_dummy = 0;
    4d42:	2000      	movs	r0, #0
    4d44:	466b      	mov	r3, sp
    4d46:	1ddc      	adds	r4, r3, #7
    4d48:	71d8      	strb	r0, [r3, #7]
	return &stack_dummy - sbrk(0);
    4d4a:	f008 fc13 	bl	d574 <sbrk>
    4d4e:	1a20      	subs	r0, r4, r0
}
    4d50:	bd16      	pop	{r1, r2, r4, pc}
	...

00004d54 <_Z10eraseBlockv>:
//
//////////////////////////////////////////////////////////////////////////



bool eraseBlock (){
    4d54:	b510      	push	{r4, lr}
	if (! flash . eraseBlock64K (1))
    4d56:	2101      	movs	r1, #1
    4d58:	4805      	ldr	r0, [pc, #20]	; (4d70 <_Z10eraseBlockv+0x1c>)
    4d5a:	f001 fd3f 	bl	67dc <_ZN8SPIFlash13eraseBlock64KEm>
	{
		Serial.println("Erase Failed");
    4d5e:	4905      	ldr	r1, [pc, #20]	; (4d74 <_Z10eraseBlockv+0x20>)
	if (! flash . eraseBlock64K (1))
    4d60:	1e04      	subs	r4, r0, #0
    4d62:	4805      	ldr	r0, [pc, #20]	; (4d78 <_Z10eraseBlockv+0x24>)
    4d64:	d000      	beq.n	4d68 <_Z10eraseBlockv+0x14>
		return false ;
	}
	else
	{
		Serial.println("Erase Succeed");
    4d66:	4905      	ldr	r1, [pc, #20]	; (4d7c <_Z10eraseBlockv+0x28>)
    4d68:	f7fd fe24 	bl	29b4 <_ZN5Print7printlnEPKc>
		return true ;
	}
}
    4d6c:	0020      	movs	r0, r4
    4d6e:	bd10      	pop	{r4, pc}
    4d70:	20001134 	.word	0x20001134
    4d74:	0001060c 	.word	0x0001060c
    4d78:	2000055c 	.word	0x2000055c
    4d7c:	00010619 	.word	0x00010619

00004d80 <_Z9getStringi>:
	str += inChar;
	// Serial.println("end run");
	str += '\0';
	return str;
}
String getString(int addr){
    4d80:	b5f0      	push	{r4, r5, r6, r7, lr}
    4d82:	b0c7      	sub	sp, #284	; 0x11c
    4d84:	000c      	movs	r4, r1
    4d86:	0005      	movs	r5, r0

	String output = "";
    4d88:	4914      	ldr	r1, [pc, #80]	; (4ddc <_Z9getStringi+0x5c>)
    4d8a:	a803      	add	r0, sp, #12
    4d8c:	f001 f816 	bl	5dbc <_ZN6StringC1EPKc>
	uint8_t data_buffer[BLOCKSIZE];
	flash.readByteArray(addr, &data_buffer[0], BLOCKSIZE);
    4d90:	2300      	movs	r3, #0
    4d92:	ae06      	add	r6, sp, #24
    4d94:	9300      	str	r3, [sp, #0]
    4d96:	3301      	adds	r3, #1
    4d98:	0021      	movs	r1, r4
    4d9a:	33ff      	adds	r3, #255	; 0xff
    4d9c:	0032      	movs	r2, r6
    4d9e:	4810      	ldr	r0, [pc, #64]	; (4de0 <_Z9getStringi+0x60>)
	for (int i = 2; i < BLOCKSIZE; i++)
    4da0:	2780      	movs	r7, #128	; 0x80
	flash.readByteArray(addr, &data_buffer[0], BLOCKSIZE);
    4da2:	f001 fbd1 	bl	6548 <_ZN8SPIFlash13readByteArrayEmPhjb>
	for (int i = 2; i < BLOCKSIZE; i++)
    4da6:	2402      	movs	r4, #2
    4da8:	007f      	lsls	r7, r7, #1
	{
		if (data_buffer[i] == 255 )
    4daa:	5d31      	ldrb	r1, [r6, r4]
    4dac:	29ff      	cmp	r1, #255	; 0xff
    4dae:	d109      	bne.n	4dc4 <_Z9getStringi+0x44>
		return output;
    4db0:	a903      	add	r1, sp, #12
    4db2:	0028      	movs	r0, r5
    4db4:	f000 ffac 	bl	5d10 <_ZN6StringC1EOS_>
	String output = "";
    4db8:	a803      	add	r0, sp, #12
    4dba:	f000 ffb7 	bl	5d2c <_ZN6StringD1Ev>
		output += (char)data_buffer[i];
	}
	return "No Data";
	
}
    4dbe:	0028      	movs	r0, r5
    4dc0:	b047      	add	sp, #284	; 0x11c
    4dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
    4dc4:	a803      	add	r0, sp, #12
	for (int i = 2; i < BLOCKSIZE; i++)
    4dc6:	3401      	adds	r4, #1
    4dc8:	f001 f859 	bl	5e7e <_ZN6String6concatEc>
    4dcc:	42bc      	cmp	r4, r7
    4dce:	d1ec      	bne.n	4daa <_Z9getStringi+0x2a>
	return "No Data";
    4dd0:	4904      	ldr	r1, [pc, #16]	; (4de4 <_Z9getStringi+0x64>)
    4dd2:	0028      	movs	r0, r5
    4dd4:	f000 fff2 	bl	5dbc <_ZN6StringC1EPKc>
    4dd8:	e7ee      	b.n	4db8 <_Z9getStringi+0x38>
    4dda:	46c0      	nop			; (mov r8, r8)
    4ddc:	00010477 	.word	0x00010477
    4de0:	20001134 	.word	0x20001134
    4de4:	00010774 	.word	0x00010774

00004de8 <_Z5getIDv>:
String getID(){
    4de8:	b5f0      	push	{r4, r5, r6, r7, lr}

	String ID1 = "";
    4dea:	4914      	ldr	r1, [pc, #80]	; (4e3c <_Z5getIDv+0x54>)
String getID(){
    4dec:	b085      	sub	sp, #20
    4dee:	0005      	movs	r5, r0
	//  Serial.println(F("Initialising"));
	//  UniqueIDdump(Serial);
	for (size_t i = 0; i < UniqueIDsize; i++)
    4df0:	2400      	movs	r4, #0
	String ID1 = "";
    4df2:	f000 ffe3 	bl	5dbc <_ZN6StringC1EPKc>
	{
		ID1 += String(UniqueID[i],HEX);
		if (i%4==3 && i < (UniqueIDsize - 1))
    4df6:	2703      	movs	r7, #3
		ID1 += String(UniqueID[i],HEX);
    4df8:	4b11      	ldr	r3, [pc, #68]	; (4e40 <_Z5getIDv+0x58>)
    4dfa:	2210      	movs	r2, #16
    4dfc:	5d19      	ldrb	r1, [r3, r4]
    4dfe:	a801      	add	r0, sp, #4
    4e00:	f001 f800 	bl	5e04 <_ZN6StringC1Ehh>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
    4e04:	a901      	add	r1, sp, #4
    4e06:	0028      	movs	r0, r5
    4e08:	f001 f826 	bl	5e58 <_ZN6String6concatERKS_>
    4e0c:	a801      	add	r0, sp, #4
    4e0e:	f000 ff8d 	bl	5d2c <_ZN6StringD1Ev>
		if (i%4==3 && i < (UniqueIDsize - 1))
    4e12:	0023      	movs	r3, r4
    4e14:	1c66      	adds	r6, r4, #1
    4e16:	403b      	ands	r3, r7
    4e18:	2b03      	cmp	r3, #3
    4e1a:	d105      	bne.n	4e28 <_Z5getIDv+0x40>
    4e1c:	2c0f      	cmp	r4, #15
    4e1e:	d006      	beq.n	4e2e <_Z5getIDv+0x46>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
    4e20:	4908      	ldr	r1, [pc, #32]	; (4e44 <_Z5getIDv+0x5c>)
    4e22:	0028      	movs	r0, r5
    4e24:	f001 f81e 	bl	5e64 <_ZN6String6concatEPKc>
	for (size_t i = 0; i < UniqueIDsize; i++)
    4e28:	0034      	movs	r4, r6
    4e2a:	2e10      	cmp	r6, #16
    4e2c:	d1e4      	bne.n	4df8 <_Z5getIDv+0x10>
		{
			ID1 += ("-");
		}
	}
	ID1.toUpperCase();
    4e2e:	0028      	movs	r0, r5
    4e30:	f001 f85f 	bl	5ef2 <_ZN6String11toUpperCaseEv>
	return ID1;
}
    4e34:	0028      	movs	r0, r5
    4e36:	b005      	add	sp, #20
    4e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e3a:	46c0      	nop			; (mov r8, r8)
    4e3c:	00010477 	.word	0x00010477
    4e40:	200015d4 	.word	0x200015d4
    4e44:	0001241b 	.word	0x0001241b

00004e48 <_Z17ParamSendIntervalv>:
//
// Load all the parameters from SPI FLASH
//
//////////////////////////////////////////////////////////////////////////
int ParamSendInterval(){
	return sampleRate*sendInterval;
    4e48:	4b02      	ldr	r3, [pc, #8]	; (4e54 <_Z17ParamSendIntervalv+0xc>)
    4e4a:	4a03      	ldr	r2, [pc, #12]	; (4e58 <_Z17ParamSendIntervalv+0x10>)
    4e4c:	681b      	ldr	r3, [r3, #0]
    4e4e:	6810      	ldr	r0, [r2, #0]
    4e50:	4358      	muls	r0, r3
}
    4e52:	4770      	bx	lr
    4e54:	20001240 	.word	0x20001240
    4e58:	20001244 	.word	0x20001244

00004e5c <_Z15ParamSampleRatev>:

int ParamSampleRate(){
	return sampleRate;
    4e5c:	4b01      	ldr	r3, [pc, #4]	; (4e64 <_Z15ParamSampleRatev+0x8>)
    4e5e:	6818      	ldr	r0, [r3, #0]
}
    4e60:	4770      	bx	lr
    4e62:	46c0      	nop			; (mov r8, r8)
    4e64:	20001240 	.word	0x20001240

00004e68 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm>:
// Register a sensor.
//
//////////////////////////////////////////////////////////////////////////
uint8_t sapi_register_sensor(char *sensor_type, SensorInitFuncPtr sensor_init, SensorReadFuncPtr sensor_read, SensorReadCfgFuncPtr sensor_readcfg,
							 SensorWriteCfgFuncPtr sensor_writecfg, uint8_t is_observer, uint32_t frequency)
{
    4e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e6a:	b087      	sub	sp, #28
    4e6c:	9304      	str	r3, [sp, #16]
    4e6e:	ab0c      	add	r3, sp, #48	; 0x30
    4e70:	9203      	str	r2, [sp, #12]
	uint8_t sensor_id = sensor_info_index;
    4e72:	4f1c      	ldr	r7, [pc, #112]	; (4ee4 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x7c>)
{
    4e74:	cb04      	ldmia	r3!, {r2}
	uint8_t sensor_id = sensor_info_index;
    4e76:	783d      	ldrb	r5, [r7, #0]
{
    4e78:	781b      	ldrb	r3, [r3, #0]
	
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    4e7a:	4c1b      	ldr	r4, [pc, #108]	; (4ee8 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x80>)
{
    4e7c:	9301      	str	r3, [sp, #4]
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    4e7e:	016b      	lsls	r3, r5, #5
    4e80:	18e4      	adds	r4, r4, r3
{
    4e82:	9102      	str	r1, [sp, #8]
    4e84:	0006      	movs	r6, r0
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    4e86:	0001      	movs	r1, r0
    4e88:	0020      	movs	r0, r4
{
    4e8a:	9205      	str	r2, [sp, #20]
	strcpy(sensor_info[sensor_id].devicetype, sensor_type);
    4e8c:	f008 fa91 	bl	d3b2 <strcpy>
	sensor_info[sensor_id].init = sensor_init;
    4e90:	9b02      	ldr	r3, [sp, #8]
    4e92:	60a3      	str	r3, [r4, #8]
	sensor_info[sensor_id].read = sensor_read;
    4e94:	9b03      	ldr	r3, [sp, #12]
    4e96:	60e3      	str	r3, [r4, #12]
	sensor_info[sensor_id].readcfg = sensor_readcfg;
    4e98:	9b04      	ldr	r3, [sp, #16]
    4e9a:	6123      	str	r3, [r4, #16]
	sensor_info[sensor_id].writecfg = sensor_writecfg;
    4e9c:	9b05      	ldr	r3, [sp, #20]
    4e9e:	6163      	str	r3, [r4, #20]
	sensor_info[sensor_id].frequency = frequency;
    4ea0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    4ea2:	61a3      	str	r3, [r4, #24]
	
	sensor_info[sensor_id].observer = 0;
	if (is_observer == 1)
    4ea4:	9b01      	ldr	r3, [sp, #4]
    4ea6:	2b01      	cmp	r3, #1
    4ea8:	d00c      	beq.n	4ec4 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x5c>
	sensor_info[sensor_id].observer = 0;
    4eaa:	2300      	movs	r3, #0
    4eac:	7723      	strb	r3, [r4, #28]
		
		// Set the URI used for obtaining token etc in CoAP Observe response msg and set the observe handler, frequency, sensor id.
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
	}
	sensor_info_index++;
    4eae:	783b      	ldrb	r3, [r7, #0]
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    4eb0:	0032      	movs	r2, r6
	sensor_info_index++;
    4eb2:	3301      	adds	r3, #1
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    4eb4:	490d      	ldr	r1, [pc, #52]	; (4eec <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x84>)
    4eb6:	2007      	movs	r0, #7
	sensor_info_index++;
    4eb8:	703b      	strb	r3, [r7, #0]
	dlog(LOG_DEBUG, "Registered sensor: %s", sensor_type);
    4eba:	f7ff fe0f 	bl	4adc <_Z4dlogiPKcz>
	return sensor_id;
}
    4ebe:	0028      	movs	r0, r5
    4ec0:	b007      	add	sp, #28
    4ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sensor_info[sensor_id].observer = 1;
    4ec4:	466b      	mov	r3, sp
    4ec6:	791b      	ldrb	r3, [r3, #4]
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    4ec8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
		sensor_info[sensor_id].observer = 1;
    4eca:	7723      	strb	r3, [r4, #28]
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    4ecc:	4908      	ldr	r1, [pc, #32]	; (4ef0 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x88>)
    4ece:	002b      	movs	r3, r5
    4ed0:	0030      	movs	r0, r6
    4ed2:	f002 fe35 	bl	7b40 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh>
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
    4ed6:	4907      	ldr	r1, [pc, #28]	; (4ef4 <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x8c>)
		sensor_info[sensor_id].observer_id = set_observer_sapi(sensor_type, sapi_observation_handler, frequency, sensor_id);
    4ed8:	0002      	movs	r2, r0
    4eda:	7760      	strb	r0, [r4, #29]
		dlog(LOG_DEBUG, "Set Observer Id: %d", sensor_info[sensor_id].observer_id);
    4edc:	2007      	movs	r0, #7
    4ede:	f7ff fdfd 	bl	4adc <_Z4dlogiPKcz>
    4ee2:	e7e4      	b.n	4eae <_Z20sapi_register_sensorPcPF12sapi_error_evEPFS0_S_PhES5_S5_hm+0x46>
    4ee4:	20001132 	.word	0x20001132
    4ee8:	20001248 	.word	0x20001248
    4eec:	000106f8 	.word	0x000106f8
    4ef0:	00005229 	.word	0x00005229
    4ef4:	000106e4 	.word	0x000106e4

00004ef8 <_Z16sapi_init_sensorh>:
//
// Initialize a sensor (hardware) and sensor related code.
//
//////////////////////////////////////////////////////////////////////////
sapi_error_t sapi_init_sensor(uint8_t sensor_id)
{
    4ef8:	b510      	push	{r4, lr}
	// Initialize Sensor
	SensorInitFuncPtr pInitFunc = sensor_info[sensor_id].init;
    4efa:	0143      	lsls	r3, r0, #5
    4efc:	4802      	ldr	r0, [pc, #8]	; (4f08 <_Z16sapi_init_sensorh+0x10>)
    4efe:	18c0      	adds	r0, r0, r3
	sapi_error_t rcode = (*pInitFunc)();
    4f00:	6883      	ldr	r3, [r0, #8]
    4f02:	4798      	blx	r3
	
	return rcode;
}
    4f04:	bd10      	pop	{r4, pc}
    4f06:	46c0      	nop			; (mov r8, r8)
    4f08:	20001248 	.word	0x20001248

00004f0c <_Z22sapi_push_notificationh>:
//////////////////////////////////////////////////////////////////////////
sapi_error_t sapi_push_notification(uint8_t sensor_id)
{
	// Simple here. Just make the call. Heavy lifting is done in the CoAP Server
	// Does the milli hardware handshake if needed.
	error_t rc = coap_observe_rsp(sensor_info[sensor_id].observer_id);
    4f0c:	0143      	lsls	r3, r0, #5
    4f0e:	4807      	ldr	r0, [pc, #28]	; (4f2c <_Z22sapi_push_notificationh+0x20>)
{
    4f10:	b510      	push	{r4, lr}
	error_t rc = coap_observe_rsp(sensor_info[sensor_id].observer_id);
    4f12:	18c0      	adds	r0, r0, r3
    4f14:	7f40      	ldrb	r0, [r0, #29]
    4f16:	f002 fe8d 	bl	7c34 <_Z16coap_observe_rsph>

	if (rc == ERR_NO_ENTRY)
		return SAPI_ERR_NO_ENTRY;
    4f1a:	2302      	movs	r3, #2
	if (rc == ERR_NO_ENTRY)
    4f1c:	280c      	cmp	r0, #12
    4f1e:	d003      	beq.n	4f28 <_Z22sapi_push_notificationh+0x1c>
	if (rc == ERR_NO_MEM)
		return SAPI_ERR_NO_MEM;
    4f20:	3301      	adds	r3, #1
	if (rc == ERR_NO_MEM)
    4f22:	4298      	cmp	r0, r3
    4f24:	d000      	beq.n	4f28 <_Z22sapi_push_notificationh+0x1c>
	
	return SAPI_ERR_OK;
    4f26:	2300      	movs	r3, #0
}
    4f28:	0018      	movs	r0, r3
    4f2a:	bd10      	pop	{r4, pc}
    4f2c:	20001248 	.word	0x20001248

00004f30 <_Z17cbor_enc_nic_typeP8cbor_bufPc>:
//
// Add sensor type to a CBOR payload wrapper
//
//////////////////////////////////////////////////////////////////////////
uint8_t cbor_enc_nic_type(struct cbor_buf *cbuf, char *sensor_type)
{
    4f30:	b570      	push	{r4, r5, r6, lr}
    4f32:	000d      	movs	r5, r1
	uint8_t rcode;

	// Top level map, first element is for device type.
	// Device type used to provide a namespace for use at the MQTT broker.
	if ((rcode = cbor_enc_map(cbuf, 2)))
    4f34:	2102      	movs	r1, #2
{
    4f36:	0004      	movs	r4, r0
	if ((rcode = cbor_enc_map(cbuf, 2)))
    4f38:	f001 fffd 	bl	6f36 <_Z12cbor_enc_mapP8cbor_bufi>
    4f3c:	b2c0      	uxtb	r0, r0
    4f3e:	2800      	cmp	r0, #0
    4f40:	d116      	bne.n	4f70 <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}

	// NIC type, key and value
	if ((rcode = cbor_enc_int(cbuf, NAMESPACE_NIC_TYPE_KEY)))
    4f42:	0001      	movs	r1, r0
    4f44:	0020      	movs	r0, r4
    4f46:	f001 ffce 	bl	6ee6 <_Z12cbor_enc_intP8cbor_bufi>
    4f4a:	b2c0      	uxtb	r0, r0
    4f4c:	2800      	cmp	r0, #0
    4f4e:	d10f      	bne.n	4f70 <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}
	if ((rcode = cbor_enc_text(cbuf, sensor_type, strlen(sensor_type))))
    4f50:	0028      	movs	r0, r5
    4f52:	f008 fa36 	bl	d3c2 <strlen>
    4f56:	0029      	movs	r1, r5
    4f58:	0002      	movs	r2, r0
    4f5a:	0020      	movs	r0, r4
    4f5c:	f001 ffcf 	bl	6efe <_Z13cbor_enc_textP8cbor_bufPKci>
    4f60:	b2c0      	uxtb	r0, r0
    4f62:	2800      	cmp	r0, #0
    4f64:	d104      	bne.n	4f70 <_Z17cbor_enc_nic_typeP8cbor_bufPc+0x40>
	{
		return rcode;
	}

	// Remaining device-specific key
	rcode = cbor_enc_int(cbuf, NAMESPACE_DEVICE_SPECIFIC_KEY);
    4f66:	2101      	movs	r1, #1
    4f68:	0020      	movs	r0, r4
    4f6a:	f001 ffbc 	bl	6ee6 <_Z12cbor_enc_intP8cbor_bufi>
    4f6e:	b2c0      	uxtb	r0, r0
	return rcode;
}
    4f70:	bd70      	pop	{r4, r5, r6, pc}
	...

00004f74 <_Z13build_rsp_msgP4mbufPhPcmh>:
//
// A typical CBOR payload: {0:"temp",1:<text payload>"}
//
//////////////////////////////////////////////////////////////////////////
error_t build_rsp_msg(struct mbuf *m, uint8_t *len, char *payload, uint32_t payloadlen, uint8_t sensor_id)
{
    4f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f76:	b0a7      	sub	sp, #156	; 0x9c
    4f78:	001f      	movs	r7, r3
    4f7a:	ab2c      	add	r3, sp, #176	; 0xb0
    4f7c:	9101      	str	r1, [sp, #4]
    4f7e:	781c      	ldrb	r4, [r3, #0]
	
	// If payload needs to be in CBOR format we add the CBOR wrapper.
	error_t	rcode = ERR_FAIL;
	struct cbor_buf cbuf;
		
	cbor_enc_init(&cbuf, cbor_payload, SAPI_MAX_PAYLOAD_LEN);
    4f80:	a906      	add	r1, sp, #24
{
    4f82:	0005      	movs	r5, r0
    4f84:	0016      	movs	r6, r2
	cbor_enc_init(&cbuf, cbor_payload, SAPI_MAX_PAYLOAD_LEN);
    4f86:	a802      	add	r0, sp, #8
    4f88:	2280      	movs	r2, #128	; 0x80
    4f8a:	f001 ff9b 	bl	6ec4 <_Z13cbor_enc_initP8cbor_bufPvi>
	
	if (!cbor_enc_nic_type(&cbuf, sensor_info[sensor_id].devicetype))
    4f8e:	491c      	ldr	r1, [pc, #112]	; (5000 <_Z13build_rsp_msgP4mbufPhPcmh+0x8c>)
    4f90:	0164      	lsls	r4, r4, #5
    4f92:	1909      	adds	r1, r1, r4
    4f94:	a802      	add	r0, sp, #8
    4f96:	f7ff ffcb 	bl	4f30 <_Z17cbor_enc_nic_typeP8cbor_bufPc>
    4f9a:	2800      	cmp	r0, #0
    4f9c:	d003      	beq.n	4fa6 <_Z13build_rsp_msgP4mbufPhPcmh+0x32>
{
    4f9e:	2363      	movs	r3, #99	; 0x63
	ddump(LOG_DEBUG, "Payload", cbor_payload, l);
	
	int freeram = free_ram();
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
	return ERR_OK;
}
    4fa0:	0018      	movs	r0, r3
    4fa2:	b027      	add	sp, #156	; 0x9c
    4fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!cbor_enc_text(&cbuf, payload, payloadlen))
    4fa6:	0031      	movs	r1, r6
    4fa8:	003a      	movs	r2, r7
    4faa:	a802      	add	r0, sp, #8
    4fac:	f001 ffa7 	bl	6efe <_Z13cbor_enc_textP8cbor_bufPKci>
    4fb0:	1e06      	subs	r6, r0, #0
    4fb2:	d1f4      	bne.n	4f9e <_Z13build_rsp_msgP4mbufPhPcmh+0x2a>
	l = cbor_buf_get_len(&cbuf);
    4fb4:	a802      	add	r0, sp, #8
    4fb6:	f001 ff92 	bl	6ede <_Z16cbor_buf_get_lenP8cbor_buf>
    4fba:	b2c7      	uxtb	r7, r0
    4fbc:	0004      	movs	r4, r0
	p = (char *) m_append(m, l);
    4fbe:	b239      	sxth	r1, r7
    4fc0:	0028      	movs	r0, r5
    4fc2:	f003 fbb5 	bl	8730 <_Z8m_appendP4mbufs>
		return ERR_NO_MEM;
    4fc6:	2303      	movs	r3, #3
	if (!p)
    4fc8:	2800      	cmp	r0, #0
    4fca:	d0e9      	beq.n	4fa0 <_Z13build_rsp_msgP4mbufPhPcmh+0x2c>
    4fcc:	b2e4      	uxtb	r4, r4
	memcpy(p, cbor_payload, l);
    4fce:	0022      	movs	r2, r4
    4fd0:	a906      	add	r1, sp, #24
    4fd2:	f007 f8c4 	bl	c15e <memcpy>
	*len = l;
    4fd6:	9b01      	ldr	r3, [sp, #4]
	dlog(LOG_DEBUG, "CBOR Payload Dump:");
    4fd8:	490a      	ldr	r1, [pc, #40]	; (5004 <_Z13build_rsp_msgP4mbufPhPcmh+0x90>)
	*len = l;
    4fda:	701f      	strb	r7, [r3, #0]
	dlog(LOG_DEBUG, "CBOR Payload Dump:");
    4fdc:	2007      	movs	r0, #7
    4fde:	f7ff fd7d 	bl	4adc <_Z4dlogiPKcz>
	ddump(LOG_DEBUG, "Payload", cbor_payload, l);
    4fe2:	0023      	movs	r3, r4
    4fe4:	aa06      	add	r2, sp, #24
    4fe6:	4908      	ldr	r1, [pc, #32]	; (5008 <_Z13build_rsp_msgP4mbufPhPcmh+0x94>)
    4fe8:	2007      	movs	r0, #7
    4fea:	f7ff fd99 	bl	4b20 <_Z5ddumpiPKcPKvi>
	int freeram = free_ram();
    4fee:	f7ff fea7 	bl	4d40 <_Z8free_ramv>
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    4ff2:	4906      	ldr	r1, [pc, #24]	; (500c <_Z13build_rsp_msgP4mbufPhPcmh+0x98>)
	int freeram = free_ram();
    4ff4:	0002      	movs	r2, r0
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    4ff6:	2007      	movs	r0, #7
    4ff8:	f7ff fd70 	bl	4adc <_Z4dlogiPKcz>
	return ERR_OK;
    4ffc:	0033      	movs	r3, r6
    4ffe:	e7cf      	b.n	4fa0 <_Z13build_rsp_msgP4mbufPhPcmh+0x2c>
    5000:	20001248 	.word	0x20001248
    5004:	00010627 	.word	0x00010627
    5008:	00011062 	.word	0x00011062
    500c:	00010e63 	.word	0x00010e63

00005010 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh>:
{
    5010:	b5f0      	push	{r4, r5, r6, r7, lr}
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    5012:	0006      	movs	r6, r0
{
    5014:	b0a9      	sub	sp, #164	; 0xa4
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    5016:	364c      	adds	r6, #76	; 0x4c
{
    5018:	9205      	str	r2, [sp, #20]
    501a:	0005      	movs	r5, r0
    501c:	000f      	movs	r7, r1
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    501e:	aa05      	add	r2, sp, #20
    5020:	210b      	movs	r1, #11
    5022:	0030      	movs	r0, r6
{
    5024:	001c      	movs	r4, r3
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    5026:	f002 fd29 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    502a:	9003      	str	r0, [sp, #12]
    if (o)
    502c:	2800      	cmp	r0, #0
    502e:	d004      	beq.n	503a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x2a>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    5030:	2384      	movs	r3, #132	; 0x84
			rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    5032:	70bb      	strb	r3, [r7, #2]
    rsp->plen = 0;
    5034:	2300      	movs	r3, #0
    5036:	643b      	str	r3, [r7, #64]	; 0x40
    return ERR_OK;
    5038:	e03e      	b.n	50b8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
    if (!(o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL))) 
    503a:	9a03      	ldr	r2, [sp, #12]
    503c:	210f      	movs	r1, #15
    503e:	0030      	movs	r0, r6
    5040:	f002 fd1c 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    5044:	9002      	str	r0, [sp, #8]
    5046:	2800      	cmp	r0, #0
    5048:	d101      	bne.n	504e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x3e>
        rsp->code = COAP_RSP_405_METHOD_NOT_ALLOWED;
    504a:	2385      	movs	r3, #133	; 0x85
    504c:	e7f1      	b.n	5032 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    if (req->code == COAP_REQUEST_GET)
    504e:	78ad      	ldrb	r5, [r5, #2]
    5050:	2d01      	cmp	r5, #1
    5052:	d000      	beq.n	5056 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x46>
    5054:	e081      	b.n	515a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x14a>
        uint8_t len = 0;
    5056:	466a      	mov	r2, sp
    5058:	7b12      	ldrb	r2, [r2, #12]
    505a:	ab02      	add	r3, sp, #8
        if (!coap_opt_strcmp(o, "cfg"))
    505c:	4954      	ldr	r1, [pc, #336]	; (51b0 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a0>)
    505e:	9802      	ldr	r0, [sp, #8]
        uint8_t len = 0;
    5060:	759a      	strb	r2, [r3, #22]
        if (!coap_opt_strcmp(o, "cfg"))
    5062:	f001 ffe1 	bl	7028 <_Z15coap_opt_strcmpPK5optlvPKc>
    5066:	9003      	str	r0, [sp, #12]
    5068:	2800      	cmp	r0, #0
    506a:	d128      	bne.n	50be <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xae>
            uint8_t payloadlen = 0;
    506c:	ab02      	add	r3, sp, #8
    506e:	3516      	adds	r5, #22
    5070:	18ed      	adds	r5, r5, r3
    5072:	466b      	mov	r3, sp
    5074:	7b1b      	ldrb	r3, [r3, #12]
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    5076:	0162      	lsls	r2, r4, #5
            uint8_t payloadlen = 0;
    5078:	702b      	strb	r3, [r5, #0]
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    507a:	4b4e      	ldr	r3, [pc, #312]	; (51b4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
            sapi_error_t rcode = (*pReadCfgFunc)(payload, &payloadlen);
    507c:	0029      	movs	r1, r5
            SensorReadCfgFuncPtr pReadCfgFunc = sensor_info[sensor_id].readcfg;
    507e:	189b      	adds	r3, r3, r2
            sapi_error_t rcode = (*pReadCfgFunc)(payload, &payloadlen);
    5080:	691b      	ldr	r3, [r3, #16]
    5082:	a808      	add	r0, sp, #32
    5084:	4798      	blx	r3
            rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    5086:	2116      	movs	r1, #22
    5088:	782b      	ldrb	r3, [r5, #0]
    508a:	a802      	add	r0, sp, #8
    508c:	9400      	str	r4, [sp, #0]
    508e:	1809      	adds	r1, r1, r0
    5090:	aa08      	add	r2, sp, #32
    5092:	6d38      	ldr	r0, [r7, #80]	; 0x50
    5094:	f7ff ff6e 	bl	4f74 <_Z13build_rsp_msgP4mbufPhPcmh>
    5098:	0004      	movs	r4, r0
	uint8_t obs = false;
    509a:	9d03      	ldr	r5, [sp, #12]
        dlog(LOG_DEBUG, "crresourcehandler: GET status: %d len: %d bytes", rc, len);
    509c:	ab02      	add	r3, sp, #8
    509e:	7d9b      	ldrb	r3, [r3, #22]
    50a0:	0022      	movs	r2, r4
    50a2:	4945      	ldr	r1, [pc, #276]	; (51b8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a8>)
    50a4:	2007      	movs	r0, #7
    50a6:	f7ff fd19 	bl	4adc <_Z4dlogiPKcz>
        if (!rc)
    50aa:	2c00      	cmp	r4, #0
    50ac:	d14f      	bne.n	514e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x13e>
			if (obs)
    50ae:	2d00      	cmp	r5, #0
    50b0:	d043      	beq.n	513a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x12a>
				rsp->code = COAP_RSP_203_VALID;
    50b2:	2343      	movs	r3, #67	; 0x43
				rsp->plen = 0;
    50b4:	643c      	str	r4, [r7, #64]	; 0x40
				rsp->code = COAP_RSP_203_VALID;
    50b6:	70bb      	strb	r3, [r7, #2]
}
    50b8:	2000      	movs	r0, #0
    50ba:	b029      	add	sp, #164	; 0xa4
    50bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if (!coap_opt_strcmp(o, "sens"))
    50be:	493f      	ldr	r1, [pc, #252]	; (51bc <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1ac>)
    50c0:	9802      	ldr	r0, [sp, #8]
    50c2:	f001 ffb1 	bl	7028 <_Z15coap_opt_strcmpPK5optlvPKc>
    50c6:	9002      	str	r0, [sp, #8]
    50c8:	2800      	cmp	r0, #0
    50ca:	d16a      	bne.n	51a2 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x192>
			if ((o = copt_get_next_opt_type((sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))) 
    50cc:	0002      	movs	r2, r0
    50ce:	2106      	movs	r1, #6
    50d0:	0030      	movs	r0, r6
    50d2:	f002 fcd3 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    50d6:	1e06      	subs	r6, r0, #0
    50d8:	d018      	beq.n	510c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xfc>
				uint32_t obsval = co_uint32_n2h(o);
    50da:	f002 f8db 	bl	7294 <_Z13co_uint32_n2hPK5optlv>
				switch(obsval)
    50de:	2800      	cmp	r0, #0
    50e0:	d003      	beq.n	50ea <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xda>
    50e2:	2801      	cmp	r0, #1
    50e4:	d009      	beq.n	50fa <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xea>
						rc = ERR_INVAL;
    50e6:	2404      	movs	r4, #4
    50e8:	e00e      	b.n	5108 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xf8>
						rc = coap_obs_reg_sapi(sensor_info[sensor_id].observer_id);
    50ea:	4b32      	ldr	r3, [pc, #200]	; (51b4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    50ec:	0164      	lsls	r4, r4, #5
    50ee:	191c      	adds	r4, r3, r4
    50f0:	7f60      	ldrb	r0, [r4, #29]
    50f2:	f002 fd75 	bl	7be0 <_Z17coap_obs_reg_sapih>
    50f6:	0004      	movs	r4, r0
						break;
    50f8:	e7d0      	b.n	509c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
						rc = coap_obs_dereg_sapi(sensor_info[sensor_id].observer_id);
    50fa:	4b2e      	ldr	r3, [pc, #184]	; (51b4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    50fc:	0164      	lsls	r4, r4, #5
    50fe:	191c      	adds	r4, r3, r4
    5100:	7f60      	ldrb	r0, [r4, #29]
    5102:	f002 fd81 	bl	7c08 <_Z19coap_obs_dereg_sapih>
    5106:	0004      	movs	r4, r0
	uint8_t obs = false;
    5108:	9d02      	ldr	r5, [sp, #8]
    510a:	e7c7      	b.n	509c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
				uint8_t payloadlen = 0;
    510c:	2517      	movs	r5, #23
    510e:	ab02      	add	r3, sp, #8
    5110:	18ed      	adds	r5, r5, r3
				SensorReadFuncPtr pReadSensor = sensor_info[sensor_id].read;
    5112:	4b28      	ldr	r3, [pc, #160]	; (51b4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    5114:	0162      	lsls	r2, r4, #5
    5116:	189b      	adds	r3, r3, r2
				uint8_t payloadlen = 0;
    5118:	7028      	strb	r0, [r5, #0]
				sapi_error_t rcode = (*pReadSensor)(payload, &payloadlen);
    511a:	0029      	movs	r1, r5
    511c:	68db      	ldr	r3, [r3, #12]
    511e:	a808      	add	r0, sp, #32
    5120:	4798      	blx	r3
				rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    5122:	2116      	movs	r1, #22
    5124:	782b      	ldrb	r3, [r5, #0]
    5126:	a802      	add	r0, sp, #8
    5128:	9400      	str	r4, [sp, #0]
    512a:	1809      	adds	r1, r1, r0
    512c:	aa08      	add	r2, sp, #32
    512e:	6d38      	ldr	r0, [r7, #80]	; 0x50
    5130:	f7ff ff20 	bl	4f74 <_Z13build_rsp_msgP4mbufPhPcmh>
	uint8_t obs = false;
    5134:	0035      	movs	r5, r6
				rc = build_rsp_msg(rsp->msg, &len, payload, payloadlen, sensor_id);
    5136:	0004      	movs	r4, r0
    5138:	e7b0      	b.n	509c <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x8c>
				rsp->plen = len;
    513a:	ab02      	add	r3, sp, #8
    513c:	7d9b      	ldrb	r3, [r3, #22]
				rsp->cf = COAP_CF_CSV;
    513e:	2202      	movs	r2, #2
				rsp->plen = len;
    5140:	643b      	str	r3, [r7, #64]	; 0x40
				rsp->cf = COAP_CF_CSV;
    5142:	003b      	movs	r3, r7
    5144:	333c      	adds	r3, #60	; 0x3c
    5146:	701a      	strb	r2, [r3, #0]
				rsp->code = COAP_RSP_205_CONTENT;
    5148:	2345      	movs	r3, #69	; 0x45
    514a:	70bb      	strb	r3, [r7, #2]
    514c:	e7b4      	b.n	50b8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
            switch (rc)
    514e:	2c04      	cmp	r4, #4
    5150:	d001      	beq.n	5156 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x146>
    5152:	2c14      	cmp	r4, #20
    5154:	d129      	bne.n	51aa <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x19a>
			rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    5156:	2386      	movs	r3, #134	; 0x86
    5158:	e76b      	b.n	5032 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    else if (req->code == COAP_REQUEST_PUT) 
    515a:	2d03      	cmp	r5, #3
    515c:	d000      	beq.n	5160 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x150>
    515e:	e774      	b.n	504a <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x3a>
		len = o->ol;
    5160:	2617      	movs	r6, #23
		SensorWriteCfgFuncPtr pSetCfgSensor = sensor_info[sensor_id].writecfg;
    5162:	4b14      	ldr	r3, [pc, #80]	; (51b4 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x1a4>)
    5164:	0164      	lsls	r4, r4, #5
    5166:	191c      	adds	r4, r3, r4
    5168:	6963      	ldr	r3, [r4, #20]
		strncpy(payload, (char*)o->ov, len);
    516a:	ac08      	add	r4, sp, #32
		SensorWriteCfgFuncPtr pSetCfgSensor = sensor_info[sensor_id].writecfg;
    516c:	9304      	str	r3, [sp, #16]
		len = o->ol;
    516e:	9b02      	ldr	r3, [sp, #8]
		strncpy(payload, (char*)o->ov, len);
    5170:	0020      	movs	r0, r4
		len = o->ol;
    5172:	789d      	ldrb	r5, [r3, #2]
    5174:	ab02      	add	r3, sp, #8
    5176:	18f6      	adds	r6, r6, r3
		strncpy(payload, (char*)o->ov, len);
    5178:	9b02      	ldr	r3, [sp, #8]
		len = o->ol;
    517a:	7035      	strb	r5, [r6, #0]
		strncpy(payload, (char*)o->ov, len);
    517c:	6859      	ldr	r1, [r3, #4]
    517e:	002a      	movs	r2, r5
    5180:	f008 f94c 	bl	d41c <strncpy>
		payload[len] = '\0';
    5184:	466b      	mov	r3, sp
    5186:	7b1b      	ldrb	r3, [r3, #12]
		sapi_error_t rcode = (*pSetCfgSensor)(payload, &len);
    5188:	0031      	movs	r1, r6
		payload[len] = '\0';
    518a:	5563      	strb	r3, [r4, r5]
		sapi_error_t rcode = (*pSetCfgSensor)(payload, &len);
    518c:	0020      	movs	r0, r4
    518e:	9b04      	ldr	r3, [sp, #16]
    5190:	4798      	blx	r3
		if (rcode == SAPI_ERR_OK)
    5192:	2800      	cmp	r0, #0
    5194:	d103      	bne.n	519e <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x18e>
			rsp->code = COAP_RSP_204_CHANGED;
    5196:	2344      	movs	r3, #68	; 0x44
			rsp->plen = 0;
    5198:	6438      	str	r0, [r7, #64]	; 0x40
			rsp->code = COAP_RSP_204_CHANGED;
    519a:	70bb      	strb	r3, [r7, #2]
    519c:	e78c      	b.n	50b8 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0xa8>
		else if (rcode == SAPI_ERR_NOT_IMPLEMENTED)
    519e:	2801      	cmp	r0, #1
    51a0:	d101      	bne.n	51a6 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x196>
			rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    51a2:	23a1      	movs	r3, #161	; 0xa1
    51a4:	e745      	b.n	5032 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
		else if (rcode == SAPI_ERR_BAD_DATA)
    51a6:	2804      	cmp	r0, #4
    51a8:	d0d5      	beq.n	5156 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x146>
			rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    51aa:	23a0      	movs	r3, #160	; 0xa0
    51ac:	e741      	b.n	5032 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh+0x22>
    51ae:	46c0      	nop			; (mov r8, r8)
    51b0:	000106ab 	.word	0x000106ab
    51b4:	20001248 	.word	0x20001248
    51b8:	000106b4 	.word	0x000106b4
    51bc:	000106af 	.word	0x000106af

000051c0 <_Z6crsapiP12coap_msg_ctxS0_>:
{
    51c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    51c2:	0006      	movs	r6, r0
	void *it = NULL;
    51c4:	2400      	movs	r4, #0
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    51c6:	364c      	adds	r6, #76	; 0x4c
    51c8:	aa01      	add	r2, sp, #4
{
    51ca:	0007      	movs	r7, r0
    51cc:	000d      	movs	r5, r1
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    51ce:	0030      	movs	r0, r6
    51d0:	210b      	movs	r1, #11
	void *it = NULL;
    51d2:	9401      	str	r4, [sp, #4]
	copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it);
    51d4:	f002 fc52 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
	if ((o = copt_get_next_opt_type((const sl_co*) & (req->oh), COAP_OPTION_URI_PATH, &it)))
    51d8:	0030      	movs	r0, r6
    51da:	aa01      	add	r2, sp, #4
    51dc:	210b      	movs	r1, #11
    51de:	f002 fc4d 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    51e2:	0006      	movs	r6, r0
    51e4:	42a0      	cmp	r0, r4
    51e6:	d017      	beq.n	5218 <_Z6crsapiP12coap_msg_ctxS0_+0x58>
		for (uint8_t indx = 0 ; indx < sensor_info_index ; indx++)
    51e8:	4b0d      	ldr	r3, [pc, #52]	; (5220 <_Z6crsapiP12coap_msg_ctxS0_+0x60>)
    51ea:	781b      	ldrb	r3, [r3, #0]
    51ec:	429c      	cmp	r4, r3
    51ee:	da11      	bge.n	5214 <_Z6crsapiP12coap_msg_ctxS0_+0x54>
			if (!coap_opt_strcmp(o, sensor_info[indx].devicetype))
    51f0:	490c      	ldr	r1, [pc, #48]	; (5224 <_Z6crsapiP12coap_msg_ctxS0_+0x64>)
    51f2:	0163      	lsls	r3, r4, #5
    51f4:	18c9      	adds	r1, r1, r3
    51f6:	0030      	movs	r0, r6
    51f8:	f001 ff16 	bl	7028 <_Z15coap_opt_strcmpPK5optlvPKc>
    51fc:	2800      	cmp	r0, #0
    51fe:	d106      	bne.n	520e <_Z6crsapiP12coap_msg_ctxS0_+0x4e>
				rc = crresourcehandler(req, rsp, it, indx);
    5200:	0023      	movs	r3, r4
    5202:	9a01      	ldr	r2, [sp, #4]
    5204:	0029      	movs	r1, r5
    5206:	0038      	movs	r0, r7
    5208:	f7ff ff02 	bl	5010 <_Z17crresourcehandlerP12coap_msg_ctxS0_Pvh>
}
    520c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		for (uint8_t indx = 0 ; indx < sensor_info_index ; indx++)
    520e:	3401      	adds	r4, #1
    5210:	b2e4      	uxtb	r4, r4
    5212:	e7e9      	b.n	51e8 <_Z6crsapiP12coap_msg_ctxS0_+0x28>
		rsp->code = COAP_RSP_404_NOT_FOUND;
    5214:	2384      	movs	r3, #132	; 0x84
    5216:	70ab      	strb	r3, [r5, #2]
	rsp->plen = 0;
    5218:	2000      	movs	r0, #0
    521a:	6428      	str	r0, [r5, #64]	; 0x40
	return ERR_OK;
    521c:	e7f6      	b.n	520c <_Z6crsapiP12coap_msg_ctxS0_+0x4c>
    521e:	46c0      	nop			; (mov r8, r8)
    5220:	20001132 	.word	0x20001132
    5224:	20001248 	.word	0x20001248

00005228 <_Z24sapi_observation_handlerP4mbufPhh>:
{
    5228:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t payloadlen = 0;
    522a:	250f      	movs	r5, #15
{
    522c:	b0a7      	sub	sp, #156	; 0x9c
	uint8_t payloadlen = 0;
    522e:	ab02      	add	r3, sp, #8
    5230:	18ed      	adds	r5, r5, r3
    5232:	2300      	movs	r3, #0
{
    5234:	000f      	movs	r7, r1
    5236:	0016      	movs	r6, r2
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    5238:	4c0b      	ldr	r4, [pc, #44]	; (5268 <_Z24sapi_observation_handlerP4mbufPhh+0x40>)
	uint8_t payloadlen = 0;
    523a:	702b      	strb	r3, [r5, #0]
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    523c:	0153      	lsls	r3, r2, #5
    523e:	18e4      	adds	r4, r4, r3
    5240:	0022      	movs	r2, r4
{
    5242:	9003      	str	r0, [sp, #12]
	dlog(LOG_DEBUG, "SAPI observe for sensor: %s", sensor_info[sensor_id].devicetype);
    5244:	4909      	ldr	r1, [pc, #36]	; (526c <_Z24sapi_observation_handlerP4mbufPhh+0x44>)
    5246:	2007      	movs	r0, #7
    5248:	f7ff fc48 	bl	4adc <_Z4dlogiPKcz>
	sapi_error_t rcode = (*pReadFunc)(payload, &payloadlen);
    524c:	68e3      	ldr	r3, [r4, #12]
    524e:	0029      	movs	r1, r5
    5250:	a806      	add	r0, sp, #24
    5252:	4798      	blx	r3
	error_t rc = build_rsp_msg(m, len, payload, payloadlen, sensor_id);
    5254:	782b      	ldrb	r3, [r5, #0]
    5256:	aa06      	add	r2, sp, #24
    5258:	9600      	str	r6, [sp, #0]
    525a:	0039      	movs	r1, r7
    525c:	9803      	ldr	r0, [sp, #12]
    525e:	f7ff fe89 	bl	4f74 <_Z13build_rsp_msgP4mbufPhPcmh>
}
    5262:	b027      	add	sp, #156	; 0x9c
    5264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5266:	46c0      	nop			; (mov r8, r8)
    5268:	20001248 	.word	0x20001248
    526c:	0001070e 	.word	0x0001070e

00005270 <_Z9crarduinoP12coap_msg_ctxS0_>:
//
//////////////////////////////////////////////////////////////////////////
error_t crarduino( struct coap_msg_ctx *req, struct coap_msg_ctx *rsp )
{
	// Dummy. Should not be called!
	rsp->code = COAP_RSP_404_NOT_FOUND;
    5270:	2384      	movs	r3, #132	; 0x84
    5272:	708b      	strb	r3, [r1, #2]
	rsp->plen = 0;
    5274:	2300      	movs	r3, #0
	return ERR_FAIL;
}
    5276:	2063      	movs	r0, #99	; 0x63
	rsp->plen = 0;
    5278:	640b      	str	r3, [r1, #64]	; 0x40
}
    527a:	4770      	bx	lr

0000527c <_Z15sapi_log_bannerv>:
//
// Helper function to print a banner in the log.
//
//////////////////////////////////////////////////////////////////////////
void sapi_log_banner()
{
    527c:	b500      	push	{lr}
    527e:	b091      	sub	sp, #68	; 0x44
	// Log Banner: version number, time and date
	char ver[64];
	strcpy(ver, COAP_SERVER_VERSION_STRING);
    5280:	4915      	ldr	r1, [pc, #84]	; (52d8 <_Z15sapi_log_bannerv+0x5c>)
    5282:	4668      	mov	r0, sp
    5284:	f008 f895 	bl	d3b2 <strcpy>
	strcat(ver, COAP_SERVER_VERSION_NUMBER);
    5288:	4914      	ldr	r1, [pc, #80]	; (52dc <_Z15sapi_log_bannerv+0x60>)
    528a:	4668      	mov	r0, sp
    528c:	f008 f87a 	bl	d384 <strcat>
	println(ver);
    5290:	4668      	mov	r0, sp
    5292:	f7ff fce1 	bl	4c58 <_Z7printlnPKc>
	
	strcpy(ver, SAPI_VERSION_STRING);
    5296:	4912      	ldr	r1, [pc, #72]	; (52e0 <_Z15sapi_log_bannerv+0x64>)
    5298:	4668      	mov	r0, sp
    529a:	f008 f88a 	bl	d3b2 <strcpy>
	strcat(ver, SAPI_VERSION_NUMBER);
    529e:	4911      	ldr	r1, [pc, #68]	; (52e4 <_Z15sapi_log_bannerv+0x68>)
    52a0:	4668      	mov	r0, sp
    52a2:	f008 f86f 	bl	d384 <strcat>
	println(ver);
    52a6:	4668      	mov	r0, sp
    52a8:	f7ff fcd6 	bl	4c58 <_Z7printlnPKc>
	
	sprintf(ver, "Build Time: %s  Date: %s", __TIME__, __DATE__);
    52ac:	4b0e      	ldr	r3, [pc, #56]	; (52e8 <_Z15sapi_log_bannerv+0x6c>)
    52ae:	4a0f      	ldr	r2, [pc, #60]	; (52ec <_Z15sapi_log_bannerv+0x70>)
    52b0:	490f      	ldr	r1, [pc, #60]	; (52f0 <_Z15sapi_log_bannerv+0x74>)
    52b2:	4668      	mov	r0, sp
    52b4:	f008 f844 	bl	d340 <siprintf>
	println(ver);
    52b8:	4668      	mov	r0, sp
    52ba:	f7ff fccd 	bl	4c58 <_Z7printlnPKc>
	println("");
    52be:	480d      	ldr	r0, [pc, #52]	; (52f4 <_Z15sapi_log_bannerv+0x78>)
    52c0:	f7ff fcca 	bl	4c58 <_Z7printlnPKc>
	
	// Log free memory
	int freeram = free_ram();
    52c4:	f7ff fd3c 	bl	4d40 <_Z8free_ramv>
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    52c8:	490b      	ldr	r1, [pc, #44]	; (52f8 <_Z15sapi_log_bannerv+0x7c>)
	int freeram = free_ram();
    52ca:	0002      	movs	r2, r0
	dlog(LOG_DEBUG, "Free Ram: %d", freeram);
    52cc:	2007      	movs	r0, #7
    52ce:	f7ff fc05 	bl	4adc <_Z4dlogiPKcz>
}
    52d2:	b011      	add	sp, #68	; 0x44
    52d4:	bd00      	pop	{pc}
    52d6:	46c0      	nop			; (mov r8, r8)
    52d8:	00010646 	.word	0x00010646
    52dc:	00010664 	.word	0x00010664
    52e0:	0001066a 	.word	0x0001066a
    52e4:	00010677 	.word	0x00010677
    52e8:	0001067d 	.word	0x0001067d
    52ec:	00010689 	.word	0x00010689
    52f0:	00010692 	.word	0x00010692
    52f4:	00010477 	.word	0x00010477
    52f8:	00010e63 	.word	0x00010e63

000052fc <_Z15sapi_initializePc>:
{
    52fc:	b507      	push	{r0, r1, r2, lr}
	is_sapi = 1;
    52fe:	2201      	movs	r2, #1
    5300:	4b19      	ldr	r3, [pc, #100]	; (5368 <_Z15sapi_initializePc+0x6c>)
{
    5302:	0001      	movs	r1, r0
	is_sapi = 1;
    5304:	701a      	strb	r2, [r3, #0]
	sensor_info_index = 0;
    5306:	2200      	movs	r2, #0
    5308:	4b18      	ldr	r3, [pc, #96]	; (536c <_Z15sapi_initializePc+0x70>)
    530a:	4819      	ldr	r0, [pc, #100]	; (5370 <_Z15sapi_initializePc+0x74>)
    530c:	701a      	strb	r2, [r3, #0]
	if (url_classifier == NULL)
    530e:	4291      	cmp	r1, r2
    5310:	d128      	bne.n	5364 <_Z15sapi_initializePc+0x68>
		strncpy(classifier, DEFAULT_CLASSIFIER, CLASSIFIER_MAX_LEN);
    5312:	4918      	ldr	r1, [pc, #96]	; (5374 <_Z15sapi_initializePc+0x78>)
    5314:	3210      	adds	r2, #16
		strncpy(classifier, url_classifier, CLASSIFIER_MAX_LEN);
    5316:	f008 f881 	bl	d41c <strncpy>
	rtc_time_init(LOCAL_TIME_ZONE);
    531a:	2008      	movs	r0, #8
    531c:	4240      	negs	r0, r0
    531e:	f7ff fb2d 	bl	497c <_Z13rtc_time_initl>
	log_init(SER_MON_PTR, SER_MON_BAUD_RATE, LOG_LEVEL);
    5322:	21e1      	movs	r1, #225	; 0xe1
    5324:	2207      	movs	r2, #7
    5326:	0249      	lsls	r1, r1, #9
    5328:	4813      	ldr	r0, [pc, #76]	; (5378 <_Z15sapi_initializePc+0x7c>)
    532a:	f7ff fbb5 	bl	4a98 <_Z8log_initP7Serial_mm>
	pinMode(MNIC_WAKEUP_PIN, OUTPUT);
    532e:	2101      	movs	r1, #1
    5330:	2009      	movs	r0, #9
    5332:	f7ff f805 	bl	4340 <pinMode>
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);
    5336:	2101      	movs	r1, #1
    5338:	2009      	movs	r0, #9
    533a:	f7ff f805 	bl	4348 <digitalWrite>
	coap_s_init(UART_PTR, COAP_MSG_MAX_AGE_IN_SECS, HDLC_UART_TIMEOUT_IN_MS, HDLC_MAX_PAYLOAD_LEN, "", NULL);
    533e:	2300      	movs	r3, #0
    5340:	22fa      	movs	r2, #250	; 0xfa
    5342:	9301      	str	r3, [sp, #4]
    5344:	4b0d      	ldr	r3, [pc, #52]	; (537c <_Z15sapi_initializePc+0x80>)
    5346:	00d2      	lsls	r2, r2, #3
    5348:	215a      	movs	r1, #90	; 0x5a
    534a:	9300      	str	r3, [sp, #0]
    534c:	480c      	ldr	r0, [pc, #48]	; (5380 <_Z15sapi_initializePc+0x84>)
    534e:	23ff      	movs	r3, #255	; 0xff
    5350:	f003 f856 	bl	8400 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE>
	coap_put_ic_reboot_event();
    5354:	f003 f822 	bl	839c <_Z24coap_put_ic_reboot_eventv>
	delay(50);
    5358:	2032      	movs	r0, #50	; 0x32
    535a:	f7fd fa7b 	bl	2854 <delay>
	sapi_log_banner();
    535e:	f7ff ff8d 	bl	527c <_Z15sapi_log_bannerv>
}
    5362:	bd07      	pop	{r0, r1, r2, pc}
		strncpy(classifier, url_classifier, CLASSIFIER_MAX_LEN);
    5364:	2210      	movs	r2, #16
    5366:	e7d6      	b.n	5316 <_Z15sapi_initializePc+0x1a>
    5368:	20000092 	.word	0x20000092
    536c:	20001132 	.word	0x20001132
    5370:	2000009c 	.word	0x2000009c
    5374:	0001063e 	.word	0x0001063e
    5378:	2000055c 	.word	0x2000055c
    537c:	00010477 	.word	0x00010477
    5380:	20001438 	.word	0x20001438

00005384 <_GLOBAL__sub_I_flash>:
}
    5384:	b510      	push	{r4, lr}
SPIFlash flash;
    5386:	4a03      	ldr	r2, [pc, #12]	; (5394 <_GLOBAL__sub_I_flash+0x10>)
    5388:	210d      	movs	r1, #13
    538a:	4803      	ldr	r0, [pc, #12]	; (5398 <_GLOBAL__sub_I_flash+0x14>)
    538c:	f001 f858 	bl	6440 <_ZN8SPIFlashC1EhP8SPIClass>
}
    5390:	bd10      	pop	{r4, pc}
    5392:	46c0      	nop			; (mov r8, r8)
    5394:	20000bcc 	.word	0x20000bcc
    5398:	20001134 	.word	0x20001134

0000539c <_Z13readSerialStrv>:
String readSerialStr() {
    539c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    539e:	0005      	movs	r5, r0
	String str = "";
    53a0:	4916      	ldr	r1, [pc, #88]	; (53fc <_Z13readSerialStrv+0x60>)
    53a2:	a801      	add	r0, sp, #4
    53a4:	f000 fd0a 	bl	5dbc <_ZN6StringC1EPKc>
	inChar = Serial.read();
    53a8:	4e15      	ldr	r6, [pc, #84]	; (5400 <_Z13readSerialStrv+0x64>)
    53aa:	0030      	movs	r0, r6
    53ac:	f7fd fddc 	bl	2f68 <_ZN7Serial_4readEv>
    53b0:	b2c4      	uxtb	r4, r0
	while (inChar != '.') {
    53b2:	2c2e      	cmp	r4, #46	; 0x2e
    53b4:	d015      	beq.n	53e2 <_Z13readSerialStrv+0x46>
		if (inChar != 255)
    53b6:	2cff      	cmp	r4, #255	; 0xff
    53b8:	d0f7      	beq.n	53aa <_Z13readSerialStrv+0xe>
	String & operator += (char c)			{concat(c); return (*this);}
    53ba:	0021      	movs	r1, r4
    53bc:	a801      	add	r0, sp, #4
    53be:	f000 fd5e 	bl	5e7e <_ZN6String6concatEc>
		if (inChar == '$')
    53c2:	2c24      	cmp	r4, #36	; 0x24
    53c4:	d109      	bne.n	53da <_Z13readSerialStrv+0x3e>
		return "$";
    53c6:	490f      	ldr	r1, [pc, #60]	; (5404 <_Z13readSerialStrv+0x68>)
		return "#";
    53c8:	0028      	movs	r0, r5
    53ca:	f000 fcf7 	bl	5dbc <_ZN6StringC1EPKc>
	String str = "";
    53ce:	a801      	add	r0, sp, #4
    53d0:	f000 fcac 	bl	5d2c <_ZN6StringD1Ev>
}
    53d4:	0028      	movs	r0, r5
    53d6:	b004      	add	sp, #16
    53d8:	bd70      	pop	{r4, r5, r6, pc}
		if (inChar == '#')
    53da:	2c23      	cmp	r4, #35	; 0x23
    53dc:	d1e5      	bne.n	53aa <_Z13readSerialStrv+0xe>
		return "#";
    53de:	490a      	ldr	r1, [pc, #40]	; (5408 <_Z13readSerialStrv+0x6c>)
    53e0:	e7f2      	b.n	53c8 <_Z13readSerialStrv+0x2c>
    53e2:	0021      	movs	r1, r4
    53e4:	a801      	add	r0, sp, #4
    53e6:	f000 fd4a 	bl	5e7e <_ZN6String6concatEc>
    53ea:	2100      	movs	r1, #0
    53ec:	a801      	add	r0, sp, #4
    53ee:	f000 fd46 	bl	5e7e <_ZN6String6concatEc>
	return str;
    53f2:	a901      	add	r1, sp, #4
    53f4:	0028      	movs	r0, r5
    53f6:	f000 fc8b 	bl	5d10 <_ZN6StringC1EOS_>
    53fa:	e7e8      	b.n	53ce <_Z13readSerialStrv+0x32>
    53fc:	00010477 	.word	0x00010477
    5400:	2000055c 	.word	0x2000055c
    5404:	0001063a 	.word	0x0001063a
    5408:	0001063c 	.word	0x0001063c

0000540c <_Z6GoHerev>:
void GoHere(){
    540c:	b510      	push	{r4, lr}
    540e:	b086      	sub	sp, #24
	String str = readSerialStr();
    5410:	4668      	mov	r0, sp
    5412:	f7ff ffc3 	bl	539c <_Z13readSerialStrv>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    5416:	491a      	ldr	r1, [pc, #104]	; (5480 <_Z6GoHerev+0x74>)
    5418:	4668      	mov	r0, sp
    541a:	f000 fd3a 	bl	5e92 <_ZNK6String6equalsEPKc>
    541e:	4c19      	ldr	r4, [pc, #100]	; (5484 <_Z6GoHerev+0x78>)
	if (str == "$"){
    5420:	2800      	cmp	r0, #0
    5422:	d00f      	beq.n	5444 <_Z6GoHerev+0x38>
	Serial.println(getString(addr));
    5424:	2101      	movs	r1, #1
    5426:	a803      	add	r0, sp, #12
    5428:	f7ff fcaa 	bl	4d80 <_Z9getStringi>
	Serial.println(getID());
    542c:	a903      	add	r1, sp, #12
    542e:	0020      	movs	r0, r4
    5430:	f7fd fab6 	bl	29a0 <_ZN5Print7printlnERK6String>
    5434:	a803      	add	r0, sp, #12
    5436:	f000 fc79 	bl	5d2c <_ZN6StringD1Ev>
	String str = readSerialStr();
    543a:	4668      	mov	r0, sp
    543c:	f000 fc76 	bl	5d2c <_ZN6StringD1Ev>
}
    5440:	b006      	add	sp, #24
    5442:	bd10      	pop	{r4, pc}
    5444:	4910      	ldr	r1, [pc, #64]	; (5488 <_Z6GoHerev+0x7c>)
    5446:	4668      	mov	r0, sp
    5448:	f000 fd23 	bl	5e92 <_ZNK6String6equalsEPKc>
	else if (str == "#"){
    544c:	2800      	cmp	r0, #0
    544e:	d003      	beq.n	5458 <_Z6GoHerev+0x4c>
	Serial.println(getID());
    5450:	a803      	add	r0, sp, #12
    5452:	f7ff fcc9 	bl	4de8 <_Z5getIDv>
    5456:	e7e9      	b.n	542c <_Z6GoHerev+0x20>
		eraseBlock();
    5458:	f7ff fc7c 	bl	4d54 <_Z10eraseBlockv>
		if (flash.writeStr(addr, str)) {
    545c:	2301      	movs	r3, #1
    545e:	466a      	mov	r2, sp
    5460:	0019      	movs	r1, r3
    5462:	480a      	ldr	r0, [pc, #40]	; (548c <_Z6GoHerev+0x80>)
    5464:	f001 f892 	bl	658c <_ZN8SPIFlash8writeStrEmR6Stringb>
    5468:	2800      	cmp	r0, #0
    546a:	d004      	beq.n	5476 <_Z6GoHerev+0x6a>
			Serial.println("complete");
    546c:	4908      	ldr	r1, [pc, #32]	; (5490 <_Z6GoHerev+0x84>)
    546e:	0020      	movs	r0, r4
    5470:	f7fd faa0 	bl	29b4 <_ZN5Print7printlnEPKc>
    5474:	e7e1      	b.n	543a <_Z6GoHerev+0x2e>
			Serial.print("failed");
    5476:	4907      	ldr	r1, [pc, #28]	; (5494 <_Z6GoHerev+0x88>)
    5478:	0020      	movs	r0, r4
    547a:	f7fd fa76 	bl	296a <_ZN5Print5printEPKc>
    547e:	e7dc      	b.n	543a <_Z6GoHerev+0x2e>
    5480:	0001063a 	.word	0x0001063a
    5484:	2000055c 	.word	0x2000055c
    5488:	0001063c 	.word	0x0001063c
    548c:	20001134 	.word	0x20001134
    5490:	0001072a 	.word	0x0001072a
    5494:	00010733 	.word	0x00010733

00005498 <_Z8sapi_runv>:
{
    5498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(initBoot){ 
    549a:	4b21      	ldr	r3, [pc, #132]	; (5520 <_Z8sapi_runv+0x88>)
    549c:	781b      	ldrb	r3, [r3, #0]
    549e:	2b00      	cmp	r3, #0
    54a0:	d03b      	beq.n	551a <_Z8sapi_runv+0x82>
		if(init1){
    54a2:	4c20      	ldr	r4, [pc, #128]	; (5524 <_Z8sapi_runv+0x8c>)
    54a4:	7823      	ldrb	r3, [r4, #0]
    54a6:	2b00      	cmp	r3, #0
    54a8:	d009      	beq.n	54be <_Z8sapi_runv+0x26>
		Serial.println("Enter any key to go to BootProgram before it counts to 10"); 
    54aa:	491f      	ldr	r1, [pc, #124]	; (5528 <_Z8sapi_runv+0x90>)
    54ac:	481f      	ldr	r0, [pc, #124]	; (552c <_Z8sapi_runv+0x94>)
    54ae:	f7fd fa81 	bl	29b4 <_ZN5Print7printlnEPKc>
		flash.begin(); 
    54b2:	2100      	movs	r1, #0
    54b4:	481e      	ldr	r0, [pc, #120]	; (5530 <_Z8sapi_runv+0x98>)
    54b6:	f001 f815 	bl	64e4 <_ZN8SPIFlash5beginEm>
		init1 = false;
    54ba:	2300      	movs	r3, #0
    54bc:	7023      	strb	r3, [r4, #0]
		if (!init2){
    54be:	4e1d      	ldr	r6, [pc, #116]	; (5534 <_Z8sapi_runv+0x9c>)
    54c0:	7833      	ldrb	r3, [r6, #0]
    54c2:	2b00      	cmp	r3, #0
    54c4:	d126      	bne.n	5514 <_Z8sapi_runv+0x7c>
			for (l = 1; l < 11; l++){
    54c6:	4c1c      	ldr	r4, [pc, #112]	; (5538 <_Z8sapi_runv+0xa0>)
    54c8:	3301      	adds	r3, #1
    54ca:	6023      	str	r3, [r4, #0]
    54cc:	6823      	ldr	r3, [r4, #0]
    54ce:	2b0a      	cmp	r3, #10
    54d0:	dc10      	bgt.n	54f4 <_Z8sapi_runv+0x5c>
				if(Serial.available()){
    54d2:	4d16      	ldr	r5, [pc, #88]	; (552c <_Z8sapi_runv+0x94>)
    54d4:	0028      	movs	r0, r5
    54d6:	f7fd fd1f 	bl	2f18 <_ZN7Serial_9availableEv>
    54da:	1e07      	subs	r7, r0, #0
    54dc:	d00b      	beq.n	54f6 <_Z8sapi_runv+0x5e>
					input = Serial.read();
    54de:	0028      	movs	r0, r5
    54e0:	f7fd fd42 	bl	2f68 <_ZN7Serial_4readEv>
    54e4:	4b15      	ldr	r3, [pc, #84]	; (553c <_Z8sapi_runv+0xa4>)
    54e6:	b2c1      	uxtb	r1, r0
					Serial.println(input);
    54e8:	0028      	movs	r0, r5
					input = Serial.read();
    54ea:	7019      	strb	r1, [r3, #0]
					Serial.println(input);
    54ec:	f7fd fa6c 	bl	29c8 <_ZN5Print7printlnEc>
					init2 = true;
    54f0:	2301      	movs	r3, #1
    54f2:	7033      	strb	r3, [r6, #0]
}
    54f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				Serial.print(l);
    54f6:	220a      	movs	r2, #10
    54f8:	6821      	ldr	r1, [r4, #0]
    54fa:	0028      	movs	r0, r5
    54fc:	f7fd fab9 	bl	2a72 <_ZN5Print5printEii>
				delay(1000);
    5500:	20fa      	movs	r0, #250	; 0xfa
    5502:	0080      	lsls	r0, r0, #2
    5504:	f7fd f9a6 	bl	2854 <delay>
				if(l == 10){
    5508:	6823      	ldr	r3, [r4, #0]
    550a:	2b0a      	cmp	r3, #10
    550c:	d1dc      	bne.n	54c8 <_Z8sapi_runv+0x30>
					initBoot = false;
    550e:	4b04      	ldr	r3, [pc, #16]	; (5520 <_Z8sapi_runv+0x88>)
    5510:	701f      	strb	r7, [r3, #0]
					break;
    5512:	e7ef      	b.n	54f4 <_Z8sapi_runv+0x5c>
		GoHere();
    5514:	f7ff ff7a 	bl	540c <_Z6GoHerev>
    5518:	e7ec      	b.n	54f4 <_Z8sapi_runv+0x5c>
	coap_s_run();
    551a:	f003 f875 	bl	8608 <_Z10coap_s_runv>
}
    551e:	e7e9      	b.n	54f4 <_Z8sapi_runv+0x5c>
    5520:	20000091 	.word	0x20000091
    5524:	20000090 	.word	0x20000090
    5528:	0001073a 	.word	0x0001073a
    552c:	2000055c 	.word	0x2000055c
    5530:	20001134 	.word	0x20001134
    5534:	20001238 	.word	0x20001238
    5538:	2000123c 	.word	0x2000123c
    553c:	20001239 	.word	0x20001239

00005540 <_ZN7TwoWire5writeEPKhj>:

  return 1 ;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    5540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5542:	0005      	movs	r5, r0
    5544:	000e      	movs	r6, r1
    5546:	0017      	movs	r7, r2
  //Try to store all data
  for(size_t i = 0; i < quantity; ++i)
    5548:	2400      	movs	r4, #0
    554a:	42bc      	cmp	r4, r7
    554c:	d008      	beq.n	5560 <_ZN7TwoWire5writeEPKhj+0x20>
  {
    //Return the number of data stored, when the buffer is full (if write return 0)
    if(!write(data[i]))
    554e:	682b      	ldr	r3, [r5, #0]
    5550:	5d31      	ldrb	r1, [r6, r4]
    5552:	681b      	ldr	r3, [r3, #0]
    5554:	0028      	movs	r0, r5
    5556:	4798      	blx	r3
    5558:	2800      	cmp	r0, #0
    555a:	d001      	beq.n	5560 <_ZN7TwoWire5writeEPKhj+0x20>
  for(size_t i = 0; i < quantity; ++i)
    555c:	3401      	adds	r4, #1
    555e:	e7f4      	b.n	554a <_ZN7TwoWire5writeEPKhj+0xa>
      return i;
  }

  //All data stored
  return quantity;
}
    5560:	0020      	movs	r0, r4
    5562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005564 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
  // Do nothing, use endTransmission(..) to force
  // data transfer.
}
    5564:	4770      	bx	lr

00005566 <_ZN7TwoWire9availableEv>:
{
    5566:	b510      	push	{r4, lr}
  return rxBuffer.available();
    5568:	3018      	adds	r0, #24
    556a:	f000 f971 	bl	5850 <_ZN10RingBuffer9availableEv>
}
    556e:	bd10      	pop	{r4, pc}

00005570 <_ZN7TwoWire4readEv>:
{
    5570:	b510      	push	{r4, lr}
  return rxBuffer.read_char();
    5572:	3018      	adds	r0, #24
    5574:	f000 f95c 	bl	5830 <_ZN10RingBuffer9read_charEv>
}
    5578:	bd10      	pop	{r4, pc}

0000557a <_ZN7TwoWire5writeEh>:
{
    557a:	b570      	push	{r4, r5, r6, lr}
  if ( !transmissionBegun || txBuffer.isFull() )
    557c:	7d83      	ldrb	r3, [r0, #22]
{
    557e:	000d      	movs	r5, r1
  if ( !transmissionBegun || txBuffer.isFull() )
    5580:	2b00      	cmp	r3, #0
    5582:	d101      	bne.n	5588 <_ZN7TwoWire5writeEh+0xe>
    return 0 ;
    5584:	2000      	movs	r0, #0
}
    5586:	bd70      	pop	{r4, r5, r6, pc}
  if ( !transmissionBegun || txBuffer.isFull() )
    5588:	3060      	adds	r0, #96	; 0x60
    558a:	0004      	movs	r4, r0
    558c:	f000 f97e 	bl	588c <_ZN10RingBuffer6isFullEv>
    5590:	2800      	cmp	r0, #0
    5592:	d1f7      	bne.n	5584 <_ZN7TwoWire5writeEh+0xa>
  txBuffer.store_char( ucData ) ;
    5594:	0020      	movs	r0, r4
    5596:	0029      	movs	r1, r5
    5598:	f000 f93b 	bl	5812 <_ZN10RingBuffer10store_charEh>
  return 1 ;
    559c:	2001      	movs	r0, #1
    559e:	e7f2      	b.n	5586 <_ZN7TwoWire5writeEh+0xc>

000055a0 <_ZN7TwoWire4peekEv>:
{
    55a0:	b510      	push	{r4, lr}
  return rxBuffer.peek();
    55a2:	3018      	adds	r0, #24
    55a4:	f000 f968 	bl	5878 <_ZN10RingBuffer4peekEv>
}
    55a8:	bd10      	pop	{r4, pc}
	...

000055ac <_ZN7TwoWireC1EP6SERCOMhh>:
TwoWire::TwoWire(SERCOM * s, uint8_t pinSDA, uint8_t pinSCL)
    55ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    55ae:	9301      	str	r3, [sp, #4]
    55b0:	23fa      	movs	r3, #250	; 0xfa
    55b2:	2500      	movs	r5, #0
    55b4:	0004      	movs	r4, r0
    55b6:	009b      	lsls	r3, r3, #2
    55b8:	6083      	str	r3, [r0, #8]
    55ba:	4b0a      	ldr	r3, [pc, #40]	; (55e4 <_ZN7TwoWireC1EP6SERCOMhh+0x38>)
    55bc:	6045      	str	r5, [r0, #4]
    55be:	3308      	adds	r3, #8
    55c0:	6003      	str	r3, [r0, #0]
    55c2:	3018      	adds	r0, #24
    55c4:	000f      	movs	r7, r1
    55c6:	0016      	movs	r6, r2
    55c8:	f000 f918 	bl	57fc <_ZN10RingBufferC1Ev>
    55cc:	0020      	movs	r0, r4
    55ce:	3060      	adds	r0, #96	; 0x60
    55d0:	f000 f914 	bl	57fc <_ZN10RingBufferC1Ev>
  this->_uc_pinSCL=pinSCL;
    55d4:	466b      	mov	r3, sp
    55d6:	791b      	ldrb	r3, [r3, #4]
  this->sercom = s;
    55d8:	6127      	str	r7, [r4, #16]
  this->_uc_pinSDA=pinSDA;
    55da:	7526      	strb	r6, [r4, #20]
  transmissionBegun = false;
    55dc:	75a5      	strb	r5, [r4, #22]
}
    55de:	0020      	movs	r0, r4
  this->_uc_pinSCL=pinSCL;
    55e0:	7563      	strb	r3, [r4, #21]
}
    55e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    55e4:	0001077c 	.word	0x0001077c

000055e8 <_ZN7TwoWire9onServiceEv>:
  }
}

#else
void TwoWire::onService(void)
{
    55e8:	b570      	push	{r4, r5, r6, lr}
    55ea:	0004      	movs	r4, r0
  if ( sercom->isSlaveWIRE() )
    55ec:	6900      	ldr	r0, [r0, #16]
    55ee:	f000 fa4f 	bl	5a90 <_ZN6SERCOM11isSlaveWIREEv>
    55f2:	2800      	cmp	r0, #0
    55f4:	d028      	beq.n	5648 <_ZN7TwoWire9onServiceEv+0x60>
  {
    if(sercom->isStopDetectedWIRE() || 
    55f6:	6920      	ldr	r0, [r4, #16]
    55f8:	f000 fa58 	bl	5aac <_ZN6SERCOM18isStopDetectedWIREEv>
    55fc:	2800      	cmp	r0, #0
    55fe:	d10e      	bne.n	561e <_ZN7TwoWire9onServiceEv+0x36>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    5600:	6920      	ldr	r0, [r4, #16]
    5602:	f000 fa5d 	bl	5ac0 <_ZN6SERCOM14isAddressMatchEv>
    if(sercom->isStopDetectedWIRE() || 
    5606:	2800      	cmp	r0, #0
    5608:	d050      	beq.n	56ac <_ZN7TwoWire9onServiceEv+0xc4>
        (sercom->isAddressMatch() && sercom->isRestartDetectedWIRE() && !sercom->isMasterReadOperationWIRE())) //Stop or Restart detected
    560a:	6920      	ldr	r0, [r4, #16]
    560c:	f000 fa53 	bl	5ab6 <_ZN6SERCOM21isRestartDetectedWIREEv>
    5610:	2800      	cmp	r0, #0
    5612:	d04b      	beq.n	56ac <_ZN7TwoWire9onServiceEv+0xc4>
    5614:	6920      	ldr	r0, [r4, #16]
    5616:	f000 fa58 	bl	5aca <_ZN6SERCOM25isMasterReadOperationWIREEv>
    561a:	2800      	cmp	r0, #0
    561c:	d146      	bne.n	56ac <_ZN7TwoWire9onServiceEv+0xc4>
    {
      sercom->prepareAckBitWIRE();
    561e:	6920      	ldr	r0, [r4, #16]
    5620:	f000 fa02 	bl	5a28 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    5624:	2103      	movs	r1, #3
    5626:	6920      	ldr	r0, [r4, #16]
    5628:	f000 fa08 	bl	5a3c <_ZN6SERCOM22prepareCommandBitsWireEh>

      //Calling onReceiveCallback, if exists
      if(onReceiveCallback)
    562c:	0023      	movs	r3, r4
    562e:	33b0      	adds	r3, #176	; 0xb0
    5630:	681d      	ldr	r5, [r3, #0]
    5632:	2d00      	cmp	r5, #0
    5634:	d004      	beq.n	5640 <_ZN7TwoWire9onServiceEv+0x58>
      {
        onReceiveCallback(available());
    5636:	6823      	ldr	r3, [r4, #0]
    5638:	0020      	movs	r0, r4
    563a:	691b      	ldr	r3, [r3, #16]
    563c:	4798      	blx	r3
    563e:	47a8      	blx	r5
      }

      rxBuffer.clear();
    5640:	0020      	movs	r0, r4
    5642:	3018      	adds	r0, #24
    5644:	f000 f8f0 	bl	5828 <_ZN10RingBuffer5clearEv>

        sercom->prepareCommandBitsWire(0x03);
      }
    }
  }
}
    5648:	bd70      	pop	{r4, r5, r6, pc}
      sercom->prepareAckBitWIRE();
    564a:	6920      	ldr	r0, [r4, #16]
    564c:	f000 f9ec 	bl	5a28 <_ZN6SERCOM17prepareAckBitWIREEv>
      sercom->prepareCommandBitsWire(0x03);
    5650:	6920      	ldr	r0, [r4, #16]
    5652:	2103      	movs	r1, #3
    5654:	f000 f9f2 	bl	5a3c <_ZN6SERCOM22prepareCommandBitsWireEh>
      if(sercom->isMasterReadOperationWIRE()) //Is a request ?
    5658:	6920      	ldr	r0, [r4, #16]
    565a:	f000 fa36 	bl	5aca <_ZN6SERCOM25isMasterReadOperationWIREEv>
    565e:	2800      	cmp	r0, #0
    5660:	d0f2      	beq.n	5648 <_ZN7TwoWire9onServiceEv+0x60>
        txBuffer.clear();
    5662:	0020      	movs	r0, r4
    5664:	3060      	adds	r0, #96	; 0x60
    5666:	f000 f8df 	bl	5828 <_ZN10RingBuffer5clearEv>
        transmissionBegun = true;
    566a:	2301      	movs	r3, #1
    566c:	75a3      	strb	r3, [r4, #22]
        if(onRequestCallback)
    566e:	34ac      	adds	r4, #172	; 0xac
    5670:	6823      	ldr	r3, [r4, #0]
    5672:	2b00      	cmp	r3, #0
    5674:	d0e8      	beq.n	5648 <_ZN7TwoWire9onServiceEv+0x60>
          onRequestCallback();
    5676:	4798      	blx	r3
    5678:	e7e6      	b.n	5648 <_ZN7TwoWire9onServiceEv+0x60>
        if (rxBuffer.isFull()) {
    567a:	3518      	adds	r5, #24
    567c:	0028      	movs	r0, r5
    567e:	f000 f905 	bl	588c <_ZN10RingBuffer6isFullEv>
    5682:	2800      	cmp	r0, #0
    5684:	d007      	beq.n	5696 <_ZN7TwoWire9onServiceEv+0xae>
          sercom->prepareNackBitWIRE(); 
    5686:	6920      	ldr	r0, [r4, #16]
    5688:	f000 f9c6 	bl	5a18 <_ZN6SERCOM18prepareNackBitWIREEv>
        sercom->prepareCommandBitsWire(0x03);
    568c:	2103      	movs	r1, #3
    568e:	6920      	ldr	r0, [r4, #16]
    5690:	f000 f9d4 	bl	5a3c <_ZN6SERCOM22prepareCommandBitsWireEh>
}
    5694:	e7d8      	b.n	5648 <_ZN7TwoWire9onServiceEv+0x60>
          rxBuffer.store_char(sercom->readDataWIRE());
    5696:	6920      	ldr	r0, [r4, #16]
    5698:	f000 fa1c 	bl	5ad4 <_ZN6SERCOM12readDataWIREEv>
    569c:	0001      	movs	r1, r0
    569e:	0028      	movs	r0, r5
    56a0:	f000 f8b7 	bl	5812 <_ZN10RingBuffer10store_charEh>
          sercom->prepareAckBitWIRE(); 
    56a4:	6920      	ldr	r0, [r4, #16]
    56a6:	f000 f9bf 	bl	5a28 <_ZN6SERCOM17prepareAckBitWIREEv>
    56aa:	e7ef      	b.n	568c <_ZN7TwoWire9onServiceEv+0xa4>
    else if(sercom->isAddressMatch())  //Address Match
    56ac:	6920      	ldr	r0, [r4, #16]
    56ae:	f000 fa07 	bl	5ac0 <_ZN6SERCOM14isAddressMatchEv>
    56b2:	2800      	cmp	r0, #0
    56b4:	d1c9      	bne.n	564a <_ZN7TwoWire9onServiceEv+0x62>
    else if(sercom->isDataReadyWIRE())
    56b6:	6920      	ldr	r0, [r4, #16]
    56b8:	f000 f9f3 	bl	5aa2 <_ZN6SERCOM15isDataReadyWIREEv>
    56bc:	2800      	cmp	r0, #0
    56be:	d0c3      	beq.n	5648 <_ZN7TwoWire9onServiceEv+0x60>
      if (sercom->isMasterReadOperationWIRE())
    56c0:	6920      	ldr	r0, [r4, #16]
    56c2:	f000 fa02 	bl	5aca <_ZN6SERCOM25isMasterReadOperationWIREEv>
        if( txBuffer.available() ) {
    56c6:	0025      	movs	r5, r4
      if (sercom->isMasterReadOperationWIRE())
    56c8:	2800      	cmp	r0, #0
    56ca:	d0d6      	beq.n	567a <_ZN7TwoWire9onServiceEv+0x92>
        if( txBuffer.available() ) {
    56cc:	3560      	adds	r5, #96	; 0x60
    56ce:	0028      	movs	r0, r5
    56d0:	f000 f8be 	bl	5850 <_ZN10RingBuffer9availableEv>
        uint8_t c = 0xff;
    56d4:	21ff      	movs	r1, #255	; 0xff
        if( txBuffer.available() ) {
    56d6:	2800      	cmp	r0, #0
    56d8:	d003      	beq.n	56e2 <_ZN7TwoWire9onServiceEv+0xfa>
          c = txBuffer.read_char();
    56da:	0028      	movs	r0, r5
    56dc:	f000 f8a8 	bl	5830 <_ZN10RingBuffer9read_charEv>
    56e0:	b2c1      	uxtb	r1, r0
        transmissionBegun = sercom->sendDataSlaveWIRE(c);
    56e2:	6920      	ldr	r0, [r4, #16]
    56e4:	f000 f9c6 	bl	5a74 <_ZN6SERCOM17sendDataSlaveWIREEh>
    56e8:	75a0      	strb	r0, [r4, #22]
    56ea:	e7ad      	b.n	5648 <_ZN7TwoWire9onServiceEv+0x60>

000056ec <SERCOM5_Handler>:

    void WIRE_DATA_READY_HANDLER(void) {
      Wire.onDataReady();
    }
  #else
    void WIRE_IT_HANDLER(void) {
    56ec:	b510      	push	{r4, lr}
      Wire.onService();
    56ee:	4802      	ldr	r0, [pc, #8]	; (56f8 <SERCOM5_Handler+0xc>)
    56f0:	f7ff ff7a 	bl	55e8 <_ZN7TwoWire9onServiceEv>
    }
    56f4:	bd10      	pop	{r4, pc}
    56f6:	46c0      	nop			; (mov r8, r8)
    56f8:	200012c8 	.word	0x200012c8

000056fc <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh>:
    56fc:	b510      	push	{r4, lr}
  TwoWire Wire(&PERIPH_WIRE, PIN_WIRE_SDA, PIN_WIRE_SCL);
    56fe:	2317      	movs	r3, #23
    5700:	2216      	movs	r2, #22
    5702:	4902      	ldr	r1, [pc, #8]	; (570c <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x10>)
    5704:	4802      	ldr	r0, [pc, #8]	; (5710 <_GLOBAL__sub_I__ZN7TwoWireC2EP6SERCOMhh+0x14>)
    5706:	f7ff ff51 	bl	55ac <_ZN7TwoWireC1EP6SERCOMhh>
    }
    570a:	bd10      	pop	{r4, pc}
    570c:	200015c4 	.word	0x200015c4
    5710:	200012c8 	.word	0x200012c8

00005714 <SERCOM4_Handler>:

    void SERCOM4_3_Handler(void) {
      Serial1.errorHandler();
    }
  #else
    void SERCOM4_Handler()  {
    5714:	b510      	push	{r4, lr}
      Serial1.IrqHandler();
    5716:	4802      	ldr	r0, [pc, #8]	; (5720 <SERCOM4_Handler+0xc>)
    5718:	f7fd fad0 	bl	2cbc <_ZN4Uart10IrqHandlerEv>
    }
    571c:	bd10      	pop	{r4, pc}
    571e:	46c0      	nop			; (mov r8, r8)
    5720:	2000137c 	.word	0x2000137c

00005724 <SERCOM2_Handler>:

    void SERCOM2_3_Handler(void) {
      Serial2.errorHandler();
    }
  #else
    void SERCOM2_Handler()  {
    5724:	b510      	push	{r4, lr}
      Serial2.IrqHandler();
    5726:	4802      	ldr	r0, [pc, #8]	; (5730 <SERCOM2_Handler+0xc>)
    5728:	f7fd fac8 	bl	2cbc <_ZN4Uart10IrqHandlerEv>
    }
    572c:	bd10      	pop	{r4, pc}
    572e:	46c0      	nop			; (mov r8, r8)
    5730:	20001438 	.word	0x20001438

00005734 <SERCOM3_Handler>:

    void SERCOM3_3_Handler(void) {
      Serial3.errorHandler();
    }
  #else
    void SERCOM3_Handler()  {
    5734:	b510      	push	{r4, lr}
      Serial3.IrqHandler();
    5736:	4802      	ldr	r0, [pc, #8]	; (5740 <SERCOM3_Handler+0xc>)
    5738:	f7fd fac0 	bl	2cbc <_ZN4Uart10IrqHandlerEv>
    }
    573c:	bd10      	pop	{r4, pc}
    573e:	46c0      	nop			; (mov r8, r8)
    5740:	200014f4 	.word	0x200014f4

00005744 <_GLOBAL__sub_I_g_APinDescription>:
    5744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
SERCOM sercom0( SERCOM0 ) ;
    5746:	2184      	movs	r1, #132	; 0x84
    5748:	481a      	ldr	r0, [pc, #104]	; (57b4 <_GLOBAL__sub_I_g_APinDescription+0x70>)
    574a:	05c9      	lsls	r1, r1, #23
    574c:	f000 f8a9 	bl	58a2 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom1( SERCOM1 ) ;
    5750:	4919      	ldr	r1, [pc, #100]	; (57b8 <_GLOBAL__sub_I_g_APinDescription+0x74>)
    5752:	481a      	ldr	r0, [pc, #104]	; (57bc <_GLOBAL__sub_I_g_APinDescription+0x78>)
    5754:	f000 f8a5 	bl	58a2 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom2( SERCOM2 ) ;
    5758:	4f19      	ldr	r7, [pc, #100]	; (57c0 <_GLOBAL__sub_I_g_APinDescription+0x7c>)
    575a:	491a      	ldr	r1, [pc, #104]	; (57c4 <_GLOBAL__sub_I_g_APinDescription+0x80>)
    575c:	0038      	movs	r0, r7
    575e:	f000 f8a0 	bl	58a2 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom3( SERCOM3 ) ;
    5762:	4d19      	ldr	r5, [pc, #100]	; (57c8 <_GLOBAL__sub_I_g_APinDescription+0x84>)
    5764:	4919      	ldr	r1, [pc, #100]	; (57cc <_GLOBAL__sub_I_g_APinDescription+0x88>)
    5766:	0028      	movs	r0, r5
    5768:	f000 f89b 	bl	58a2 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom4( SERCOM4 ) ;
    576c:	4e18      	ldr	r6, [pc, #96]	; (57d0 <_GLOBAL__sub_I_g_APinDescription+0x8c>)
    576e:	4919      	ldr	r1, [pc, #100]	; (57d4 <_GLOBAL__sub_I_g_APinDescription+0x90>)
    5770:	0030      	movs	r0, r6
    5772:	f000 f896 	bl	58a2 <_ZN6SERCOMC1EP6Sercom>
SERCOM sercom5( SERCOM5 ) ;
    5776:	4918      	ldr	r1, [pc, #96]	; (57d8 <_GLOBAL__sub_I_g_APinDescription+0x94>)
    5778:	4818      	ldr	r0, [pc, #96]	; (57dc <_GLOBAL__sub_I_g_APinDescription+0x98>)
    577a:	f000 f892 	bl	58a2 <_ZN6SERCOMC1EP6Sercom>
Uart Serial1( SERCOM_INSTANCE_SERIAL1, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    577e:	2401      	movs	r4, #1
    5780:	2300      	movs	r3, #0
    5782:	0031      	movs	r1, r6
Uart Serial2( SERCOM_INSTANCE_SERIAL2, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX ) ;
    5784:	2603      	movs	r6, #3
Uart Serial1( SERCOM_INSTANCE_SERIAL1, PIN_SERIAL1_RX, PIN_SERIAL1_TX, PAD_SERIAL1_RX, PAD_SERIAL1_TX ) ;
    5786:	9301      	str	r3, [sp, #4]
    5788:	0022      	movs	r2, r4
    578a:	9400      	str	r4, [sp, #0]
    578c:	4814      	ldr	r0, [pc, #80]	; (57e0 <_GLOBAL__sub_I_g_APinDescription+0x9c>)
    578e:	f7fd fa67 	bl	2c60 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial2( SERCOM_INSTANCE_SERIAL2, PIN_SERIAL2_RX, PIN_SERIAL2_TX, PAD_SERIAL2_RX, PAD_SERIAL2_TX ) ;
    5792:	0039      	movs	r1, r7
    5794:	9600      	str	r6, [sp, #0]
    5796:	9401      	str	r4, [sp, #4]
    5798:	230a      	movs	r3, #10
    579a:	220b      	movs	r2, #11
    579c:	4811      	ldr	r0, [pc, #68]	; (57e4 <_GLOBAL__sub_I_g_APinDescription+0xa0>)
    579e:	f7fd fa5f 	bl	2c60 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
Uart Serial3( SERCOM_INSTANCE_SERIAL3, PIN_SERIAL3_RX, PIN_SERIAL3_TX, PAD_SERIAL3_RX, PAD_SERIAL3_TX ) ;
    57a2:	9600      	str	r6, [sp, #0]
    57a4:	0029      	movs	r1, r5
    57a6:	9401      	str	r4, [sp, #4]
    57a8:	2312      	movs	r3, #18
    57aa:	2215      	movs	r2, #21
    57ac:	480e      	ldr	r0, [pc, #56]	; (57e8 <_GLOBAL__sub_I_g_APinDescription+0xa4>)
    57ae:	f7fd fa57 	bl	2c60 <_ZN4UartC1EP6SERCOMhh11SercomRXPad15SercomUartTXPad>
    }
    57b2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    57b4:	200015b0 	.word	0x200015b0
    57b8:	42000400 	.word	0x42000400
    57bc:	200015b4 	.word	0x200015b4
    57c0:	200015b8 	.word	0x200015b8
    57c4:	42000800 	.word	0x42000800
    57c8:	200015bc 	.word	0x200015bc
    57cc:	42000c00 	.word	0x42000c00
    57d0:	200015c0 	.word	0x200015c0
    57d4:	42001000 	.word	0x42001000
    57d8:	43000400 	.word	0x43000400
    57dc:	200015c4 	.word	0x200015c4
    57e0:	2000137c 	.word	0x2000137c
    57e4:	20001438 	.word	0x20001438
    57e8:	200014f4 	.word	0x200014f4

000057ec <_Znwj>:
    57ec:	b510      	push	{r4, lr}
    57ee:	f006 fc81 	bl	c0f4 <malloc>
    57f2:	bd10      	pop	{r4, pc}

000057f4 <_ZdlPv>:
    57f4:	b510      	push	{r4, lr}
    57f6:	f006 fc87 	bl	c108 <free>
    57fa:	bd10      	pop	{r4, pc}

000057fc <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
    57fc:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    57fe:	2240      	movs	r2, #64	; 0x40
    5800:	2100      	movs	r1, #0
RingBuffer::RingBuffer( void )
    5802:	0004      	movs	r4, r0
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
    5804:	f006 fcc6 	bl	c194 <memset>
  }
}

void RingBuffer::clear()
{
	_iHead = 0;
    5808:	2300      	movs	r3, #0
}
    580a:	0020      	movs	r0, r4
	_iHead = 0;
    580c:	6423      	str	r3, [r4, #64]	; 0x40
	_iTail = 0;
    580e:	6463      	str	r3, [r4, #68]	; 0x44
}
    5810:	bd10      	pop	{r4, pc}

00005812 <_ZN10RingBuffer10store_charEh>:
	return _aucBuffer[_iTail];
}

int RingBuffer::nextIndex(int index)
{
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    5812:	223f      	movs	r2, #63	; 0x3f
  int i = nextIndex(_iHead);
    5814:	6c03      	ldr	r3, [r0, #64]	; 0x40
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    5816:	3301      	adds	r3, #1
    5818:	4013      	ands	r3, r2
  if ( i != _iTail )
    581a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    581c:	429a      	cmp	r2, r3
    581e:	d002      	beq.n	5826 <_ZN10RingBuffer10store_charEh+0x14>
    _aucBuffer[_iHead] = c ;
    5820:	6c02      	ldr	r2, [r0, #64]	; 0x40
    5822:	5481      	strb	r1, [r0, r2]
    _iHead = i ;
    5824:	6403      	str	r3, [r0, #64]	; 0x40
}
    5826:	4770      	bx	lr

00005828 <_ZN10RingBuffer5clearEv>:
	_iHead = 0;
    5828:	2300      	movs	r3, #0
    582a:	6403      	str	r3, [r0, #64]	; 0x40
	_iTail = 0;
    582c:	6443      	str	r3, [r0, #68]	; 0x44
}
    582e:	4770      	bx	lr

00005830 <_ZN10RingBuffer9read_charEv>:
	if(_iTail == _iHead)
    5830:	6c42      	ldr	r2, [r0, #68]	; 0x44
    5832:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5834:	429a      	cmp	r2, r3
    5836:	d008      	beq.n	584a <_ZN10RingBuffer9read_charEv+0x1a>
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    5838:	213f      	movs	r1, #63	; 0x3f
	uint8_t value = _aucBuffer[_iTail];
    583a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    583c:	5cc2      	ldrb	r2, [r0, r3]
	_iTail = nextIndex(_iTail);
    583e:	6c43      	ldr	r3, [r0, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    5840:	3301      	adds	r3, #1
    5842:	400b      	ands	r3, r1
	_iTail = nextIndex(_iTail);
    5844:	6443      	str	r3, [r0, #68]	; 0x44
	return value;
    5846:	0010      	movs	r0, r2
}
    5848:	4770      	bx	lr
		return -1;
    584a:	2001      	movs	r0, #1
    584c:	4240      	negs	r0, r0
    584e:	e7fb      	b.n	5848 <_ZN10RingBuffer9read_charEv+0x18>

00005850 <_ZN10RingBuffer9availableEv>:
	int delta = _iHead - _iTail;
    5850:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5852:	6c40      	ldr	r0, [r0, #68]	; 0x44
    5854:	1a18      	subs	r0, r3, r0
	if(delta < 0)
    5856:	d500      	bpl.n	585a <_ZN10RingBuffer9availableEv+0xa>
		return SERIAL_BUFFER_SIZE + delta;
    5858:	3040      	adds	r0, #64	; 0x40
}
    585a:	4770      	bx	lr

0000585c <_ZN10RingBuffer17availableForStoreEv>:
	if (_iHead >= _iTail)
    585c:	6c02      	ldr	r2, [r0, #64]	; 0x40
    585e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    5860:	429a      	cmp	r2, r3
    5862:	db04      	blt.n	586e <_ZN10RingBuffer17availableForStoreEv+0x12>
		return SERIAL_BUFFER_SIZE - 1 - _iHead + _iTail;
    5864:	6c03      	ldr	r3, [r0, #64]	; 0x40
    5866:	6c40      	ldr	r0, [r0, #68]	; 0x44
    5868:	1ac0      	subs	r0, r0, r3
    586a:	303f      	adds	r0, #63	; 0x3f
}
    586c:	4770      	bx	lr
		return _iTail - _iHead - 1;
    586e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    5870:	6c00      	ldr	r0, [r0, #64]	; 0x40
    5872:	1a18      	subs	r0, r3, r0
    5874:	3801      	subs	r0, #1
    5876:	e7f9      	b.n	586c <_ZN10RingBuffer17availableForStoreEv+0x10>

00005878 <_ZN10RingBuffer4peekEv>:
	if(_iTail == _iHead)
    5878:	6c42      	ldr	r2, [r0, #68]	; 0x44
    587a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    587c:	429a      	cmp	r2, r3
    587e:	d002      	beq.n	5886 <_ZN10RingBuffer4peekEv+0xe>
	return _aucBuffer[_iTail];
    5880:	6c43      	ldr	r3, [r0, #68]	; 0x44
    5882:	5cc0      	ldrb	r0, [r0, r3]
}
    5884:	4770      	bx	lr
		return -1;
    5886:	2001      	movs	r0, #1
    5888:	4240      	negs	r0, r0
    588a:	e7fb      	b.n	5884 <_ZN10RingBuffer4peekEv+0xc>

0000588c <_ZN10RingBuffer6isFullEv>:
}

bool RingBuffer::isFull()
{
    588c:	0003      	movs	r3, r0
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    588e:	223f      	movs	r2, #63	; 0x3f
	return (nextIndex(_iHead) == _iTail);
    5890:	6c00      	ldr	r0, [r0, #64]	; 0x40
    5892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	return (uint32_t)(index + 1) % SERIAL_BUFFER_SIZE;
    5894:	3001      	adds	r0, #1
    5896:	4010      	ands	r0, r2
	return (nextIndex(_iHead) == _iTail);
    5898:	1ac0      	subs	r0, r0, r3
    589a:	4243      	negs	r3, r0
    589c:	4158      	adcs	r0, r3
    589e:	b2c0      	uxtb	r0, r0
}
    58a0:	4770      	bx	lr

000058a2 <_ZN6SERCOMC1EP6Sercom>:
#define WIRE_RISE_TIME_NANOSECONDS 125
#endif

SERCOM::SERCOM(Sercom* s)
{
  sercom = s;
    58a2:	6001      	str	r1, [r0, #0]
}
    58a4:	4770      	bx	lr

000058a6 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit>:
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
  }
}

void SERCOM::initFrame(SercomUartCharSize charSize, SercomDataOrder dataOrder, SercomParityMode parityMode, SercomNumberStopBit nbStopBits)
{
    58a6:	b5f0      	push	{r4, r5, r6, r7, lr}
    58a8:	ac05      	add	r4, sp, #20
    58aa:	7825      	ldrb	r5, [r4, #0]
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    58ac:	6804      	ldr	r4, [r0, #0]
    58ae:	1e98      	subs	r0, r3, #2
    58b0:	1e47      	subs	r7, r0, #1
    58b2:	41b8      	sbcs	r0, r7
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    58b4:	6826      	ldr	r6, [r4, #0]
    58b6:	0792      	lsls	r2, r2, #30
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    58b8:	0600      	lsls	r0, r0, #24
                dataOrder << SERCOM_USART_CTRLA_DORD_Pos;
    58ba:	4332      	orrs	r2, r6
    58bc:	4302      	orrs	r2, r0

  //Setting the CTRLB register
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    58be:	2007      	movs	r0, #7
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_FORM( (parityMode == SERCOM_NO_PARITY ? 0 : 1) ) |
    58c0:	6022      	str	r2, [r4, #0]
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    58c2:	4001      	ands	r1, r0
                nbStopBits << SERCOM_USART_CTRLB_SBMODE_Pos |
    58c4:	01ad      	lsls	r5, r5, #6
                (parityMode == SERCOM_NO_PARITY ? 0 : parityMode) << SERCOM_USART_CTRLB_PMODE_Pos; //If no parity use default value
    58c6:	6862      	ldr	r2, [r4, #4]
    58c8:	4329      	orrs	r1, r5
    58ca:	2000      	movs	r0, #0
    58cc:	2b02      	cmp	r3, #2
    58ce:	d000      	beq.n	58d2 <_ZN6SERCOM9initFrameE18SercomUartCharSize15SercomDataOrder16SercomParityMode19SercomNumberStopBit+0x2c>
    58d0:	0358      	lsls	r0, r3, #13
    58d2:	4311      	orrs	r1, r2
    58d4:	4301      	orrs	r1, r0
  sercom->USART.CTRLB.reg |=	SERCOM_USART_CTRLB_CHSIZE(charSize) |
    58d6:	6061      	str	r1, [r4, #4]
}
    58d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000058da <_ZN6SERCOM8initPadsE15SercomUartTXPad11SercomRXPad>:

void SERCOM::initPads(SercomUartTXPad txPad, SercomRXPad rxPad)
{
    58da:	b510      	push	{r4, lr}
  //Setting the CTRLA register
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
                SERCOM_USART_CTRLA_RXPO(rxPad);
    58dc:	24c0      	movs	r4, #192	; 0xc0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    58de:	6803      	ldr	r3, [r0, #0]
                SERCOM_USART_CTRLA_RXPO(rxPad);
    58e0:	03a4      	lsls	r4, r4, #14
    58e2:	6818      	ldr	r0, [r3, #0]
    58e4:	0512      	lsls	r2, r2, #20
    58e6:	4022      	ands	r2, r4
    58e8:	4302      	orrs	r2, r0
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    58ea:	20c0      	movs	r0, #192	; 0xc0
    58ec:	0409      	lsls	r1, r1, #16
    58ee:	0280      	lsls	r0, r0, #10
    58f0:	4001      	ands	r1, r0
                SERCOM_USART_CTRLA_RXPO(rxPad);
    58f2:	4311      	orrs	r1, r2
  sercom->USART.CTRLA.reg |=	SERCOM_USART_CTRLA_TXPO(txPad) |
    58f4:	6019      	str	r1, [r3, #0]

  // Enable Transceiver and Receiver
  sercom->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN | SERCOM_USART_CTRLB_RXEN ;
    58f6:	685a      	ldr	r2, [r3, #4]
    58f8:	4310      	orrs	r0, r2
    58fa:	6058      	str	r0, [r3, #4]
}
    58fc:	bd10      	pop	{r4, pc}

000058fe <_ZN6SERCOM9resetUARTEv>:

void SERCOM::resetUART()
{
  // Start the Software Reset
  sercom->USART.CTRLA.bit.SWRST = 1 ;
    58fe:	2201      	movs	r2, #1
    5900:	6803      	ldr	r3, [r0, #0]
    5902:	6819      	ldr	r1, [r3, #0]
    5904:	430a      	orrs	r2, r1
    5906:	601a      	str	r2, [r3, #0]

  while ( sercom->USART.CTRLA.bit.SWRST || sercom->USART.SYNCBUSY.bit.SWRST )
    5908:	681a      	ldr	r2, [r3, #0]
    590a:	07d2      	lsls	r2, r2, #31
    590c:	d4fc      	bmi.n	5908 <_ZN6SERCOM9resetUARTEv+0xa>
    590e:	69da      	ldr	r2, [r3, #28]
    5910:	07d2      	lsls	r2, r2, #31
    5912:	d4f9      	bmi.n	5908 <_ZN6SERCOM9resetUARTEv+0xa>
  {
    // Wait for both bits Software Reset from CTRLA and SYNCBUSY coming back to 0
  }
}
    5914:	4770      	bx	lr

00005916 <_ZN6SERCOM10enableUARTEv>:

void SERCOM::enableUART()
{
  //Setting  the enable bit to 1
  sercom->USART.CTRLA.bit.ENABLE = 0x1u;
    5916:	2202      	movs	r2, #2
    5918:	6803      	ldr	r3, [r0, #0]
    591a:	6819      	ldr	r1, [r3, #0]
    591c:	430a      	orrs	r2, r1
    591e:	601a      	str	r2, [r3, #0]

  //Wait for then enable bit from SYNCBUSY is equal to 0;
  while(sercom->USART.SYNCBUSY.bit.ENABLE);
    5920:	69da      	ldr	r2, [r3, #28]
    5922:	0792      	lsls	r2, r2, #30
    5924:	d4fc      	bmi.n	5920 <_ZN6SERCOM10enableUARTEv+0xa>
}
    5926:	4770      	bx	lr

00005928 <_ZN6SERCOM9flushUARTEv>:
}

bool SERCOM::isDataRegisterEmptyUART()
{
  //DRE : Data Register Empty
  return sercom->USART.INTFLAG.bit.DRE;
    5928:	6803      	ldr	r3, [r0, #0]
    592a:	7e1a      	ldrb	r2, [r3, #24]
  if(isDataRegisterEmptyUART())
    592c:	07d2      	lsls	r2, r2, #31
    592e:	d402      	bmi.n	5936 <_ZN6SERCOM9flushUARTEv+0xe>
  while(!sercom->USART.INTFLAG.bit.TXC);
    5930:	7e1a      	ldrb	r2, [r3, #24]
    5932:	0792      	lsls	r2, r2, #30
    5934:	d5fc      	bpl.n	5930 <_ZN6SERCOM9flushUARTEv+0x8>
}
    5936:	4770      	bx	lr

00005938 <_ZN6SERCOM15clearStatusUARTEv>:
  sercom->USART.STATUS.reg = SERCOM_USART_STATUS_RESETVALUE;
    5938:	2200      	movs	r2, #0
    593a:	6803      	ldr	r3, [r0, #0]
    593c:	835a      	strh	r2, [r3, #26]
}
    593e:	4770      	bx	lr

00005940 <_ZN6SERCOM17availableDataUARTEv>:
  return sercom->USART.INTFLAG.bit.RXC;
    5940:	6803      	ldr	r3, [r0, #0]
    5942:	7e18      	ldrb	r0, [r3, #24]
    5944:	0740      	lsls	r0, r0, #29
    5946:	0fc0      	lsrs	r0, r0, #31
}
    5948:	4770      	bx	lr

0000594a <_ZN6SERCOM11isUARTErrorEv>:
  return sercom->USART.INTFLAG.bit.ERROR;
    594a:	6803      	ldr	r3, [r0, #0]
    594c:	7e18      	ldrb	r0, [r3, #24]
    594e:	09c0      	lsrs	r0, r0, #7
}
    5950:	4770      	bx	lr

00005952 <_ZN6SERCOM20acknowledgeUARTErrorEv>:
  sercom->USART.INTFLAG.bit.ERROR = 1;
    5952:	2380      	movs	r3, #128	; 0x80
    5954:	6802      	ldr	r2, [r0, #0]
    5956:	425b      	negs	r3, r3
    5958:	7e11      	ldrb	r1, [r2, #24]
    595a:	430b      	orrs	r3, r1
    595c:	7613      	strb	r3, [r2, #24]
}
    595e:	4770      	bx	lr

00005960 <_ZN6SERCOM23isDataRegisterEmptyUARTEv>:
  return sercom->USART.INTFLAG.bit.DRE;
    5960:	6803      	ldr	r3, [r0, #0]
    5962:	7e18      	ldrb	r0, [r3, #24]
    5964:	07c0      	lsls	r0, r0, #31
    5966:	0fc0      	lsrs	r0, r0, #31
}
    5968:	4770      	bx	lr

0000596a <_ZN6SERCOM12readDataUARTEv>:

uint8_t SERCOM::readDataUART()
{
  return sercom->USART.DATA.bit.DATA;
    596a:	6803      	ldr	r3, [r0, #0]
    596c:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    596e:	b2c0      	uxtb	r0, r0
}
    5970:	4770      	bx	lr

00005972 <_ZN6SERCOM13writeDataUARTEh>:
  return sercom->USART.INTFLAG.bit.DRE;
    5972:	6803      	ldr	r3, [r0, #0]
    5974:	7e1a      	ldrb	r2, [r3, #24]

int SERCOM::writeDataUART(uint8_t data)
{
  // Wait for data register to be empty
  while(!isDataRegisterEmptyUART());
    5976:	07d2      	lsls	r2, r2, #31
    5978:	d5fc      	bpl.n	5974 <_ZN6SERCOM13writeDataUARTEh+0x2>

  //Put data into DATA register
  sercom->USART.DATA.reg = (uint16_t)data;
    597a:	b289      	uxth	r1, r1
  return 1;
}
    597c:	2001      	movs	r0, #1
  sercom->USART.DATA.reg = (uint16_t)data;
    597e:	8519      	strh	r1, [r3, #40]	; 0x28
}
    5980:	4770      	bx	lr

00005982 <_ZN6SERCOM36enableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::enableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
    5982:	2201      	movs	r2, #1
    5984:	6803      	ldr	r3, [r0, #0]
    5986:	759a      	strb	r2, [r3, #22]
}
    5988:	4770      	bx	lr

0000598a <_ZN6SERCOM37disableDataRegisterEmptyInterruptUARTEv>:

void SERCOM::disableDataRegisterEmptyInterruptUART()
{
  sercom->USART.INTENCLR.reg = SERCOM_USART_INTENCLR_DRE;
    598a:	2201      	movs	r2, #1
    598c:	6803      	ldr	r3, [r0, #0]
    598e:	751a      	strb	r2, [r3, #20]
}
    5990:	4770      	bx	lr
	...

00005994 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem>:


}

void SERCOM::initSPIClock(SercomSpiClockMode clockMode, uint32_t baudrate)
{
    5994:	b570      	push	{r4, r5, r6, lr}
  if((clockMode & (0x1ul)) == 0 )
    cpha = 0;
  else
    cpha = 1;

  if((clockMode & (0x2ul)) == 0)
    5996:	2501      	movs	r5, #1
    cpol = 0;
  else
    cpol = 1;

  //Setting the CTRLA register
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    5998:	6804      	ldr	r4, [r0, #0]
  if((clockMode & (0x2ul)) == 0)
    599a:	084b      	lsrs	r3, r1, #1
    599c:	402b      	ands	r3, r5
    cpha = 0;
    599e:	4029      	ands	r1, r5
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    59a0:	6820      	ldr	r0, [r4, #0]
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    59a2:	0709      	lsls	r1, r1, #28
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    59a4:	075b      	lsls	r3, r3, #29
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    59a6:	430b      	orrs	r3, r1
                            ( cpol << SERCOM_SPI_CTRLA_CPOL_Pos );
    59a8:	4303      	orrs	r3, r0
  sercom->SPI.CTRLA.reg |=	( cpha << SERCOM_SPI_CTRLA_CPHA_Pos ) |
    59aa:	6023      	str	r3, [r4, #0]
//	return sercom->SPI.INTFLAG.bit.RXC;
//}

uint32_t SERCOM::calculateBaudrateSynchronous(uint32_t baudrate)
{
  return ((SercomClock / (2 * baudrate)) - 1);
    59ac:	4b04      	ldr	r3, [pc, #16]	; (59c0 <_ZN6SERCOM12initSPIClockE18SercomSpiClockModem+0x2c>)
    59ae:	0051      	lsls	r1, r2, #1
    59b0:	6818      	ldr	r0, [r3, #0]
    59b2:	f003 fda5 	bl	9500 <__udivsi3>
    59b6:	3801      	subs	r0, #1
  sercom->SPI.BAUD.reg = calculateBaudrateSynchronous(baudrate);
    59b8:	b2c0      	uxtb	r0, r0
    59ba:	7320      	strb	r0, [r4, #12]
}
    59bc:	bd70      	pop	{r4, r5, r6, pc}
    59be:	46c0      	nop			; (mov r8, r8)
    59c0:	20000094 	.word	0x20000094

000059c4 <_ZN6SERCOM8resetSPIEv>:
  sercom->SPI.CTRLA.bit.SWRST = 1;
    59c4:	2201      	movs	r2, #1
    59c6:	6803      	ldr	r3, [r0, #0]
    59c8:	6819      	ldr	r1, [r3, #0]
    59ca:	430a      	orrs	r2, r1
    59cc:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.CTRLA.bit.SWRST || sercom->SPI.SYNCBUSY.bit.SWRST);
    59ce:	681a      	ldr	r2, [r3, #0]
    59d0:	07d2      	lsls	r2, r2, #31
    59d2:	d4fc      	bmi.n	59ce <_ZN6SERCOM8resetSPIEv+0xa>
    59d4:	69da      	ldr	r2, [r3, #28]
    59d6:	07d2      	lsls	r2, r2, #31
    59d8:	d4f9      	bmi.n	59ce <_ZN6SERCOM8resetSPIEv+0xa>
}
    59da:	4770      	bx	lr

000059dc <_ZN6SERCOM9enableSPIEv>:
  sercom->SPI.CTRLA.bit.ENABLE = 1;
    59dc:	2202      	movs	r2, #2
    59de:	6803      	ldr	r3, [r0, #0]
    59e0:	6819      	ldr	r1, [r3, #0]
    59e2:	430a      	orrs	r2, r1
    59e4:	601a      	str	r2, [r3, #0]
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    59e6:	69da      	ldr	r2, [r3, #28]
    59e8:	0792      	lsls	r2, r2, #30
    59ea:	d4fc      	bmi.n	59e6 <_ZN6SERCOM9enableSPIEv+0xa>
}
    59ec:	4770      	bx	lr

000059ee <_ZN6SERCOM10disableSPIEv>:
  while(sercom->SPI.SYNCBUSY.bit.ENABLE)
    59ee:	6803      	ldr	r3, [r0, #0]
    59f0:	69da      	ldr	r2, [r3, #28]
    59f2:	0792      	lsls	r2, r2, #30
    59f4:	d4fc      	bmi.n	59f0 <_ZN6SERCOM10disableSPIEv+0x2>
  sercom->SPI.CTRLA.bit.ENABLE = 0;
    59f6:	2102      	movs	r1, #2
    59f8:	681a      	ldr	r2, [r3, #0]
    59fa:	438a      	bics	r2, r1
    59fc:	601a      	str	r2, [r3, #0]
}
    59fe:	4770      	bx	lr

00005a00 <_ZN6SERCOM15transferDataSPIEh>:
  sercom->SPI.DATA.bit.DATA = data; // Writing data into Data register
    5a00:	6802      	ldr	r2, [r0, #0]
    5a02:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5a04:	0a5b      	lsrs	r3, r3, #9
    5a06:	025b      	lsls	r3, r3, #9
    5a08:	4319      	orrs	r1, r3
    5a0a:	6291      	str	r1, [r2, #40]	; 0x28
  while( sercom->SPI.INTFLAG.bit.RXC == 0 )
    5a0c:	7e13      	ldrb	r3, [r2, #24]
    5a0e:	075b      	lsls	r3, r3, #29
    5a10:	d5fc      	bpl.n	5a0c <_ZN6SERCOM15transferDataSPIEh+0xc>
  return sercom->SPI.DATA.bit.DATA;  // Reading data
    5a12:	6a90      	ldr	r0, [r2, #40]	; 0x28
    5a14:	b2c0      	uxtb	r0, r0
}
    5a16:	4770      	bx	lr

00005a18 <_ZN6SERCOM18prepareNackBitWIREEv>:
  // Synchronous arithmetic baudrate
  sercom->I2CM.BAUD.bit.BAUD = SercomClock / ( 2 * baudrate) - 5 - (((SercomClock / 1000000) * WIRE_RISE_TIME_NANOSECONDS) / (2 * 1000));
}

void SERCOM::prepareNackBitWIRE( void )
{
    5a18:	2380      	movs	r3, #128	; 0x80
    return true;
}

bool SERCOM::isMasterWIRE( void )
{
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    5a1a:	6802      	ldr	r2, [r0, #0]
    5a1c:	02db      	lsls	r3, r3, #11
    5a1e:	6811      	ldr	r1, [r2, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 1;
    5a20:	6851      	ldr	r1, [r2, #4]
    5a22:	430b      	orrs	r3, r1
    5a24:	6053      	str	r3, [r2, #4]
}
    5a26:	4770      	bx	lr

00005a28 <_ZN6SERCOM17prepareAckBitWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    5a28:	6803      	ldr	r3, [r0, #0]
    5a2a:	4903      	ldr	r1, [pc, #12]	; (5a38 <_ZN6SERCOM17prepareAckBitWIREEv+0x10>)
    5a2c:	681a      	ldr	r2, [r3, #0]
    sercom->I2CS.CTRLB.bit.ACKACT = 0;
    5a2e:	685a      	ldr	r2, [r3, #4]
    5a30:	400a      	ands	r2, r1
    5a32:	605a      	str	r2, [r3, #4]
}
    5a34:	4770      	bx	lr
    5a36:	46c0      	nop			; (mov r8, r8)
    5a38:	fffbffff 	.word	0xfffbffff

00005a3c <_ZN6SERCOM22prepareCommandBitsWireEh>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    5a3c:	6803      	ldr	r3, [r0, #0]
{
    5a3e:	b510      	push	{r4, lr}
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    5a40:	6818      	ldr	r0, [r3, #0]
    5a42:	2203      	movs	r2, #3
    5a44:	06c0      	lsls	r0, r0, #27
    5a46:	0f40      	lsrs	r0, r0, #29
    5a48:	4c09      	ldr	r4, [pc, #36]	; (5a70 <_ZN6SERCOM22prepareCommandBitsWireEh+0x34>)
  if(isMasterWIRE()) {
    5a4a:	2805      	cmp	r0, #5
    5a4c:	d109      	bne.n	5a62 <_ZN6SERCOM22prepareCommandBitsWireEh+0x26>
    sercom->I2CM.CTRLB.bit.CMD = cmd;
    5a4e:	6858      	ldr	r0, [r3, #4]
    5a50:	4011      	ands	r1, r2
    5a52:	0409      	lsls	r1, r1, #16
    5a54:	4020      	ands	r0, r4
    5a56:	4301      	orrs	r1, r0
    5a58:	6059      	str	r1, [r3, #4]
    while(sercom->I2CM.SYNCBUSY.bit.SYSOP)
    5a5a:	69da      	ldr	r2, [r3, #28]
    5a5c:	0752      	lsls	r2, r2, #29
    5a5e:	d4fc      	bmi.n	5a5a <_ZN6SERCOM22prepareCommandBitsWireEh+0x1e>
}
    5a60:	bd10      	pop	{r4, pc}
    sercom->I2CS.CTRLB.bit.CMD = cmd;
    5a62:	6858      	ldr	r0, [r3, #4]
    5a64:	4011      	ands	r1, r2
    5a66:	0409      	lsls	r1, r1, #16
    5a68:	4020      	ands	r0, r4
    5a6a:	4301      	orrs	r1, r0
    5a6c:	6059      	str	r1, [r3, #4]
}
    5a6e:	e7f7      	b.n	5a60 <_ZN6SERCOM22prepareCommandBitsWireEh+0x24>
    5a70:	fffcffff 	.word	0xfffcffff

00005a74 <_ZN6SERCOM17sendDataSlaveWIREEh>:
  sercom->I2CS.DATA.bit.DATA = data;
    5a74:	6803      	ldr	r3, [r0, #0]
    return false;
    5a76:	2000      	movs	r0, #0
  sercom->I2CS.DATA.bit.DATA = data;
    5a78:	001a      	movs	r2, r3
    5a7a:	3228      	adds	r2, #40	; 0x28
    5a7c:	7011      	strb	r1, [r2, #0]
  if(!sercom->I2CS.INTFLAG.bit.DRDY || sercom->I2CS.STATUS.bit.RXNACK)
    5a7e:	7e1a      	ldrb	r2, [r3, #24]
    5a80:	0752      	lsls	r2, r2, #29
    5a82:	d504      	bpl.n	5a8e <_ZN6SERCOM17sendDataSlaveWIREEh+0x1a>
    5a84:	8b58      	ldrh	r0, [r3, #26]
    5a86:	2301      	movs	r3, #1
    5a88:	0740      	lsls	r0, r0, #29
    5a8a:	0fc0      	lsrs	r0, r0, #31
    5a8c:	4058      	eors	r0, r3
}
    5a8e:	4770      	bx	lr

00005a90 <_ZN6SERCOM11isSlaveWIREEv>:
}

bool SERCOM::isSlaveWIRE( void )
{
  return sercom->I2CS.CTRLA.bit.MODE == I2C_SLAVE_OPERATION;
    5a90:	6803      	ldr	r3, [r0, #0]
    5a92:	6818      	ldr	r0, [r3, #0]
    5a94:	06c0      	lsls	r0, r0, #27
    5a96:	0f40      	lsrs	r0, r0, #29
    5a98:	3804      	subs	r0, #4
    5a9a:	4243      	negs	r3, r0
    5a9c:	4158      	adcs	r0, r3
    5a9e:	b2c0      	uxtb	r0, r0
}
    5aa0:	4770      	bx	lr

00005aa2 <_ZN6SERCOM15isDataReadyWIREEv>:
  return sercom->I2CM.STATUS.bit.BUSSTATE == WIRE_OWNER_STATE;
}

bool SERCOM::isDataReadyWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.DRDY;
    5aa2:	6803      	ldr	r3, [r0, #0]
    5aa4:	7e18      	ldrb	r0, [r3, #24]
    5aa6:	0740      	lsls	r0, r0, #29
    5aa8:	0fc0      	lsrs	r0, r0, #31
}
    5aaa:	4770      	bx	lr

00005aac <_ZN6SERCOM18isStopDetectedWIREEv>:

bool SERCOM::isStopDetectedWIRE( void )
{
  return sercom->I2CS.INTFLAG.bit.PREC;
    5aac:	6803      	ldr	r3, [r0, #0]
    5aae:	7e18      	ldrb	r0, [r3, #24]
    5ab0:	07c0      	lsls	r0, r0, #31
    5ab2:	0fc0      	lsrs	r0, r0, #31
}
    5ab4:	4770      	bx	lr

00005ab6 <_ZN6SERCOM21isRestartDetectedWIREEv>:

bool SERCOM::isRestartDetectedWIRE( void )
{
  return sercom->I2CS.STATUS.bit.SR;
    5ab6:	6803      	ldr	r3, [r0, #0]
    5ab8:	8b58      	ldrh	r0, [r3, #26]
    5aba:	06c0      	lsls	r0, r0, #27
    5abc:	0fc0      	lsrs	r0, r0, #31
}
    5abe:	4770      	bx	lr

00005ac0 <_ZN6SERCOM14isAddressMatchEv>:

bool SERCOM::isAddressMatch( void )
{
  return sercom->I2CS.INTFLAG.bit.AMATCH;
    5ac0:	6803      	ldr	r3, [r0, #0]
    5ac2:	7e18      	ldrb	r0, [r3, #24]
    5ac4:	0780      	lsls	r0, r0, #30
    5ac6:	0fc0      	lsrs	r0, r0, #31
}
    5ac8:	4770      	bx	lr

00005aca <_ZN6SERCOM25isMasterReadOperationWIREEv>:

bool SERCOM::isMasterReadOperationWIRE( void )
{
  return sercom->I2CS.STATUS.bit.DIR;
    5aca:	6803      	ldr	r3, [r0, #0]
    5acc:	8b58      	ldrh	r0, [r3, #26]
    5ace:	0700      	lsls	r0, r0, #28
    5ad0:	0fc0      	lsrs	r0, r0, #31
}
    5ad2:	4770      	bx	lr

00005ad4 <_ZN6SERCOM12readDataWIREEv>:
  return sercom->I2CS.CTRLA.bit.MODE == I2C_MASTER_OPERATION;
    5ad4:	6803      	ldr	r3, [r0, #0]
    5ad6:	681a      	ldr	r2, [r3, #0]
    5ad8:	06d2      	lsls	r2, r2, #27
    5ada:	0f52      	lsrs	r2, r2, #29
    return sercom->I2CS.INTFLAG.bit.DRDY;
}

uint8_t SERCOM::readDataWIRE( void )
{
  if(isMasterWIRE())
    5adc:	2a05      	cmp	r2, #5
    5ade:	d102      	bne.n	5ae6 <_ZN6SERCOM12readDataWIREEv+0x12>
  {
    while( sercom->I2CM.INTFLAG.bit.SB == 0 )
    5ae0:	7e1a      	ldrb	r2, [r3, #24]
    5ae2:	0792      	lsls	r2, r2, #30
    5ae4:	d5fc      	bpl.n	5ae0 <_ZN6SERCOM12readDataWIREEv+0xc>

    return sercom->I2CM.DATA.bit.DATA ;
  }
  else
  {
    return sercom->I2CS.DATA.reg ;
    5ae6:	3328      	adds	r3, #40	; 0x28
    5ae8:	7818      	ldrb	r0, [r3, #0]
    5aea:	b2c0      	uxtb	r0, r0
  }
}
    5aec:	4770      	bx	lr
	...

00005af0 <_ZN6SERCOM13initClockNVICEv>:
    IRQn_Type IdNvic3=PendSV_IRQn ;
  #else
    IRQn_Type IdNvic=PendSV_IRQn ; // Dummy init to intercept potential error later
  #endif

  if(sercom == SERCOM0)
    5af0:	2284      	movs	r2, #132	; 0x84
    5af2:	6803      	ldr	r3, [r0, #0]
{
    5af4:	b530      	push	{r4, r5, lr}
  if(sercom == SERCOM0)
    5af6:	05d2      	lsls	r2, r2, #23
    5af8:	4293      	cmp	r3, r2
    5afa:	d011      	beq.n	5b20 <_ZN6SERCOM13initClockNVICEv+0x30>
      IdNvic3 = SERCOM0_3_IRQn;
    #else
      IdNvic = SERCOM0_IRQn;
    #endif
  }
  else if(sercom == SERCOM1)
    5afc:	4a21      	ldr	r2, [pc, #132]	; (5b84 <_ZN6SERCOM13initClockNVICEv+0x94>)
    5afe:	4293      	cmp	r3, r2
    5b00:	d034      	beq.n	5b6c <_ZN6SERCOM13initClockNVICEv+0x7c>
    #else
      IdNvic = SERCOM1_IRQn;
    #endif
  }
#if !(SAMD11C14)
  else if(sercom == SERCOM2)
    5b02:	4a21      	ldr	r2, [pc, #132]	; (5b88 <_ZN6SERCOM13initClockNVICEv+0x98>)
    5b04:	4293      	cmp	r3, r2
    5b06:	d034      	beq.n	5b72 <_ZN6SERCOM13initClockNVICEv+0x82>
      IdNvic = SERCOM2_IRQn;
    #endif
  }
#endif
#if !(SAMD11_SERIES)
  else if(sercom == SERCOM3)
    5b08:	4a20      	ldr	r2, [pc, #128]	; (5b8c <_ZN6SERCOM13initClockNVICEv+0x9c>)
    5b0a:	4293      	cmp	r3, r2
    5b0c:	d034      	beq.n	5b78 <_ZN6SERCOM13initClockNVICEv+0x88>
      IdNvic = SERCOM3_IRQn;
    #endif
  }
#endif
#if !(SAMD11_SERIES) && !(SAMD21E) && !(SAMC21E)
  else if(sercom == SERCOM4)
    5b0e:	4a20      	ldr	r2, [pc, #128]	; (5b90 <_ZN6SERCOM13initClockNVICEv+0xa0>)
    5b10:	4293      	cmp	r3, r2
    5b12:	d034      	beq.n	5b7e <_ZN6SERCOM13initClockNVICEv+0x8e>
      IdNvic3 = SERCOM4_3_IRQn;
    #else
      IdNvic = SERCOM4_IRQn;
    #endif
  }
  else if(sercom == SERCOM5)
    5b14:	4a1f      	ldr	r2, [pc, #124]	; (5b94 <_ZN6SERCOM13initClockNVICEv+0xa4>)
    5b16:	4293      	cmp	r3, r2
    5b18:	d127      	bne.n	5b6a <_ZN6SERCOM13initClockNVICEv+0x7a>
      IdNvic0 = SERCOM5_0_IRQn;
      IdNvic1 = SERCOM5_1_IRQn;
      IdNvic2 = SERCOM5_2_IRQn;
      IdNvic3 = SERCOM5_3_IRQn;
    #else
      IdNvic = SERCOM5_IRQn;
    5b1a:	230d      	movs	r3, #13
    clockId = GCM_SERCOM5_CORE;
    5b1c:	2218      	movs	r2, #24
    5b1e:	e001      	b.n	5b24 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM0_IRQn;
    5b20:	2308      	movs	r3, #8
    clockId = GCM_SERCOM0_CORE;
    5b22:	2212      	movs	r2, #18
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5b24:	2101      	movs	r1, #1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    5b26:	2503      	movs	r5, #3
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5b28:	4099      	lsls	r1, r3
    5b2a:	481b      	ldr	r0, [pc, #108]	; (5b98 <_ZN6SERCOM13initClockNVICEv+0xa8>)
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    5b2c:	24c0      	movs	r4, #192	; 0xc0
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    5b2e:	6001      	str	r1, [r0, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    5b30:	0899      	lsrs	r1, r3, #2
    5b32:	402b      	ands	r3, r5
    5b34:	40ab      	lsls	r3, r5
    5b36:	35fc      	adds	r5, #252	; 0xfc
    5b38:	409d      	lsls	r5, r3
    5b3a:	0089      	lsls	r1, r1, #2
    5b3c:	1809      	adds	r1, r1, r0
    5b3e:	00a4      	lsls	r4, r4, #2
    5b40:	5908      	ldr	r0, [r1, r4]
    5b42:	0092      	lsls	r2, r2, #2
    5b44:	43a8      	bics	r0, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
    5b46:	25c0      	movs	r5, #192	; 0xc0
    5b48:	409d      	lsls	r5, r3
    5b4a:	002b      	movs	r3, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
    5b4c:	4303      	orrs	r3, r0
    5b4e:	510b      	str	r3, [r1, r4]
#if (SAMD21 || SAMD11)
  GCLK->CLKCTRL.reg = ( GCLK_CLKCTRL_ID( clockId ) | GCLK_CLKCTRL_GEN_GCLK0 | GCLK_CLKCTRL_CLKEN );
  SercomClock = SystemCoreClock;
  while ( GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY );
#elif (SAML21 || SAMC21)
  GCLK->PCHCTRL[clockId].reg = ( GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0 );
    5b50:	4b12      	ldr	r3, [pc, #72]	; (5b9c <_ZN6SERCOM13initClockNVICEv+0xac>)
    5b52:	18d1      	adds	r1, r2, r3
    5b54:	2340      	movs	r3, #64	; 0x40
    5b56:	67cb      	str	r3, [r1, #124]	; 0x7c
  SercomClock = SystemCoreClock;
    5b58:	4911      	ldr	r1, [pc, #68]	; (5ba0 <_ZN6SERCOM13initClockNVICEv+0xb0>)
    5b5a:	6808      	ldr	r0, [r1, #0]
    5b5c:	4911      	ldr	r1, [pc, #68]	; (5ba4 <_ZN6SERCOM13initClockNVICEv+0xb4>)
    5b5e:	6008      	str	r0, [r1, #0]
  while ( (GCLK->PCHCTRL[clockId].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
    5b60:	490e      	ldr	r1, [pc, #56]	; (5b9c <_ZN6SERCOM13initClockNVICEv+0xac>)
    5b62:	1852      	adds	r2, r2, r1
    5b64:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
    5b66:	4219      	tst	r1, r3
    5b68:	d0fc      	beq.n	5b64 <_ZN6SERCOM13initClockNVICEv+0x74>
  SercomClock = 96000000ul;
  while ( (GCLK->PCHCTRL[clockId].reg & GCLK_PCHCTRL_CHEN) != GCLK_PCHCTRL_CHEN );      // wait for sync
#else
  #error "SERCOM.cpp: Unsupported chip"
#endif
}
    5b6a:	bd30      	pop	{r4, r5, pc}
      IdNvic = SERCOM1_IRQn;
    5b6c:	2309      	movs	r3, #9
    clockId = GCM_SERCOM1_CORE;
    5b6e:	2213      	movs	r2, #19
    5b70:	e7d8      	b.n	5b24 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM2_IRQn;
    5b72:	230a      	movs	r3, #10
    clockId = GCM_SERCOM2_CORE;
    5b74:	2214      	movs	r2, #20
    5b76:	e7d5      	b.n	5b24 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM3_IRQn;
    5b78:	230b      	movs	r3, #11
    clockId = GCM_SERCOM3_CORE;
    5b7a:	2215      	movs	r2, #21
    5b7c:	e7d2      	b.n	5b24 <_ZN6SERCOM13initClockNVICEv+0x34>
      IdNvic = SERCOM4_IRQn;
    5b7e:	230c      	movs	r3, #12
    clockId = GCM_SERCOM4_CORE;
    5b80:	2216      	movs	r2, #22
    5b82:	e7cf      	b.n	5b24 <_ZN6SERCOM13initClockNVICEv+0x34>
    5b84:	42000400 	.word	0x42000400
    5b88:	42000800 	.word	0x42000800
    5b8c:	42000c00 	.word	0x42000c00
    5b90:	42001000 	.word	0x42001000
    5b94:	43000400 	.word	0x43000400
    5b98:	e000e100 	.word	0xe000e100
    5b9c:	40001804 	.word	0x40001804
    5ba0:	20000088 	.word	0x20000088
    5ba4:	20000094 	.word	0x20000094

00005ba8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem>:
{
    5ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5baa:	0016      	movs	r6, r2
    5bac:	001d      	movs	r5, r3
  if (sercom == SERCOM5) {
    5bae:	6802      	ldr	r2, [r0, #0]
    5bb0:	4b18      	ldr	r3, [pc, #96]	; (5c14 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6c>)
{
    5bb2:	0004      	movs	r4, r0
    5bb4:	000f      	movs	r7, r1
  if (sercom == SERCOM5) {
    5bb6:	429a      	cmp	r2, r3
    5bb8:	d100      	bne.n	5bbc <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x14>
    sampleRate = SAMPLE_RATE_x16;
    5bba:	2601      	movs	r6, #1
  initClockNVIC();
    5bbc:	0020      	movs	r0, r4
    5bbe:	f7ff ff97 	bl	5af0 <_ZN6SERCOM13initClockNVICEv>
  resetUART();
    5bc2:	0020      	movs	r0, r4
    5bc4:	f7ff fe9b 	bl	58fe <_ZN6SERCOM9resetUARTEv>
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    5bc8:	221c      	movs	r2, #28
    5bca:	00bb      	lsls	r3, r7, #2
    5bcc:	4013      	ands	r3, r2
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    5bce:	0772      	lsls	r2, r6, #29
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    5bd0:	6824      	ldr	r4, [r4, #0]
                SERCOM_USART_CTRLA_SAMPR(sampleRate);
    5bd2:	0c12      	lsrs	r2, r2, #16
  sercom->USART.CTRLA.reg =	SERCOM_USART_CTRLA_MODE(mode) |
    5bd4:	4313      	orrs	r3, r2
    5bd6:	6023      	str	r3, [r4, #0]
  sercom->USART.INTENSET.reg =	SERCOM_USART_INTENSET_RXC |  //Received complete
    5bd8:	2384      	movs	r3, #132	; 0x84
    5bda:	75a3      	strb	r3, [r4, #22]
  if ( mode == UART_INT_CLOCK )
    5bdc:	2f01      	cmp	r7, #1
    5bde:	d118      	bne.n	5c12 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x6a>
      sampleRateValue = 16;
    5be0:	2110      	movs	r1, #16
    if (sampleRate == SAMPLE_RATE_x16) {
    5be2:	2e01      	cmp	r6, #1
    5be4:	d000      	beq.n	5be8 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x40>
      sampleRateValue = 8;
    5be6:	3908      	subs	r1, #8
    uint32_t baudTimes8 = (SercomClock * 8) / (sampleRateValue * baudrate);
    5be8:	4b0b      	ldr	r3, [pc, #44]	; (5c18 <_ZN6SERCOM8initUARTE14SercomUartMode20SercomUartSampleRatem+0x70>)
    5bea:	4369      	muls	r1, r5
    5bec:	6818      	ldr	r0, [r3, #0]
    5bee:	00c0      	lsls	r0, r0, #3
    5bf0:	f003 fc86 	bl	9500 <__udivsi3>
    sercom->USART.BAUD.FRAC.FP   = (baudTimes8 % 8);
    5bf4:	2207      	movs	r2, #7
    5bf6:	89a3      	ldrh	r3, [r4, #12]
    5bf8:	4002      	ands	r2, r0
    5bfa:	04db      	lsls	r3, r3, #19
    5bfc:	0352      	lsls	r2, r2, #13
    5bfe:	0cdb      	lsrs	r3, r3, #19
    5c00:	4313      	orrs	r3, r2
    5c02:	81a3      	strh	r3, [r4, #12]
    sercom->USART.BAUD.FRAC.BAUD = (baudTimes8 / 8);
    5c04:	0403      	lsls	r3, r0, #16
    5c06:	89a0      	ldrh	r0, [r4, #12]
    5c08:	0cdb      	lsrs	r3, r3, #19
    5c0a:	0b40      	lsrs	r0, r0, #13
    5c0c:	0340      	lsls	r0, r0, #13
    5c0e:	4318      	orrs	r0, r3
    5c10:	81a0      	strh	r0, [r4, #12]
}
    5c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5c14:	43000400 	.word	0x43000400
    5c18:	20000094 	.word	0x20000094

00005c1c <_ZN6SERCOM7initSPIE14SercomSpiTXPad11SercomRXPad17SercomSpiCharSize15SercomDataOrder>:
{
    5c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5c1e:	0007      	movs	r7, r0
    5c20:	9301      	str	r3, [sp, #4]
    5c22:	ab08      	add	r3, sp, #32
    5c24:	781e      	ldrb	r6, [r3, #0]
    5c26:	000d      	movs	r5, r1
    5c28:	0014      	movs	r4, r2
  resetSPI();
    5c2a:	f7ff fecb 	bl	59c4 <_ZN6SERCOM8resetSPIEv>
  initClockNVIC();
    5c2e:	0038      	movs	r0, r7
    5c30:	f7ff ff5e 	bl	5af0 <_ZN6SERCOM13initClockNVICEv>
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    5c34:	22c0      	movs	r2, #192	; 0xc0
    5c36:	0524      	lsls	r4, r4, #20
    5c38:	0392      	lsls	r2, r2, #14
    5c3a:	4014      	ands	r4, r2
                          dataOrder << SERCOM_SPI_CTRLA_DORD_Pos;
    5c3c:	07b2      	lsls	r2, r6, #30
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    5c3e:	260c      	movs	r6, #12
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    5c40:	2107      	movs	r1, #7
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    5c42:	4316      	orrs	r6, r2
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    5c44:	9a01      	ldr	r2, [sp, #4]
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    5c46:	4334      	orrs	r4, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    5c48:	400a      	ands	r2, r1
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    5c4a:	26c0      	movs	r6, #192	; 0xc0
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    5c4c:	0011      	movs	r1, r2
    5c4e:	2280      	movs	r2, #128	; 0x80
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    5c50:	02b6      	lsls	r6, r6, #10
    5c52:	042d      	lsls	r5, r5, #16
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE( SPI_MASTER_OPERATION ) |
    5c54:	683b      	ldr	r3, [r7, #0]
                          SERCOM_SPI_CTRLA_DOPO(mosi) |
    5c56:	4035      	ands	r5, r6
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    5c58:	0292      	lsls	r2, r2, #10
                          SERCOM_SPI_CTRLA_DIPO(miso) |
    5c5a:	4325      	orrs	r5, r4
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    5c5c:	430a      	orrs	r2, r1
  sercom->SPI.CTRLA.reg =	SERCOM_SPI_CTRLA_MODE( SPI_MASTER_OPERATION ) |
    5c5e:	601d      	str	r5, [r3, #0]
  sercom->SPI.CTRLB.reg = SERCOM_SPI_CTRLB_CHSIZE(charSize) |
    5c60:	605a      	str	r2, [r3, #4]
}
    5c62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00005c64 <_ZN13PluggableUSB_12getInterfaceEPh>:
#ifdef PLUGGABLE_USB_ENABLED

extern uint32_t EndPoints[];

int PluggableUSB_::getInterface(uint8_t* interfaceCount)
{
    5c64:	b570      	push	{r4, r5, r6, lr}
    5c66:	000e      	movs	r6, r1
	int sent = 0;
    5c68:	2500      	movs	r5, #0
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5c6a:	6844      	ldr	r4, [r0, #4]
    5c6c:	2c00      	cmp	r4, #0
    5c6e:	d00b      	beq.n	5c88 <_ZN13PluggableUSB_12getInterfaceEPh+0x24>
		int res = node->getInterface(interfaceCount);
    5c70:	6823      	ldr	r3, [r4, #0]
    5c72:	0031      	movs	r1, r6
    5c74:	685b      	ldr	r3, [r3, #4]
    5c76:	0020      	movs	r0, r4
    5c78:	4798      	blx	r3
		if (res < 0)
    5c7a:	2800      	cmp	r0, #0
    5c7c:	db02      	blt.n	5c84 <_ZN13PluggableUSB_12getInterfaceEPh+0x20>
			return -1;
		sent += res;
    5c7e:	182d      	adds	r5, r5, r0
	for (node = rootNode; node; node = node->next) {
    5c80:	68e4      	ldr	r4, [r4, #12]
    5c82:	e7f3      	b.n	5c6c <_ZN13PluggableUSB_12getInterfaceEPh+0x8>
			return -1;
    5c84:	2501      	movs	r5, #1
    5c86:	426d      	negs	r5, r5
	}
	return sent;
}
    5c88:	0028      	movs	r0, r5
    5c8a:	bd70      	pop	{r4, r5, r6, pc}

00005c8c <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:

int PluggableUSB_::getDescriptor(USBSetup& setup)
{
    5c8c:	b570      	push	{r4, r5, r6, lr}
    5c8e:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5c90:	6844      	ldr	r4, [r0, #4]
    5c92:	2c00      	cmp	r4, #0
    5c94:	d008      	beq.n	5ca8 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1c>
		int ret = node->getDescriptor(setup);
    5c96:	6823      	ldr	r3, [r4, #0]
    5c98:	0029      	movs	r1, r5
    5c9a:	689b      	ldr	r3, [r3, #8]
    5c9c:	0020      	movs	r0, r4
    5c9e:	4798      	blx	r3
		// ret!=0 -> request has been processed
		if (ret)
    5ca0:	2800      	cmp	r0, #0
    5ca2:	d102      	bne.n	5caa <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    5ca4:	68e4      	ldr	r4, [r4, #12]
    5ca6:	e7f4      	b.n	5c92 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x6>
			return ret;
	}
	return 0;
    5ca8:	0020      	movs	r0, r4
}
    5caa:	bd70      	pop	{r4, r5, r6, pc}

00005cac <_ZN13PluggableUSB_12getShortNameEPc>:

void PluggableUSB_::getShortName(char *iSerialNum)
{
    5cac:	b570      	push	{r4, r5, r6, lr}
    5cae:	000d      	movs	r5, r1
       PluggableUSBModule* node;
       for (node = rootNode; node; node = node->next) {
    5cb0:	6844      	ldr	r4, [r0, #4]
    5cb2:	2c00      	cmp	r4, #0
    5cb4:	d007      	beq.n	5cc6 <_ZN13PluggableUSB_12getShortNameEPc+0x1a>
               iSerialNum += node->getShortName(iSerialNum);
    5cb6:	6823      	ldr	r3, [r4, #0]
    5cb8:	0029      	movs	r1, r5
    5cba:	0020      	movs	r0, r4
    5cbc:	68db      	ldr	r3, [r3, #12]
    5cbe:	4798      	blx	r3
       for (node = rootNode; node; node = node->next) {
    5cc0:	68e4      	ldr	r4, [r4, #12]
               iSerialNum += node->getShortName(iSerialNum);
    5cc2:	182d      	adds	r5, r5, r0
       for (node = rootNode; node; node = node->next) {
    5cc4:	e7f5      	b.n	5cb2 <_ZN13PluggableUSB_12getShortNameEPc+0x6>
       }
       *iSerialNum = 0;
    5cc6:	702c      	strb	r4, [r5, #0]
}
    5cc8:	bd70      	pop	{r4, r5, r6, pc}

00005cca <_ZN13PluggableUSB_5setupER8USBSetup>:

bool PluggableUSB_::setup(USBSetup& setup)
{
    5cca:	b570      	push	{r4, r5, r6, lr}
    5ccc:	000d      	movs	r5, r1
	PluggableUSBModule* node;
	for (node = rootNode; node; node = node->next) {
    5cce:	6844      	ldr	r4, [r0, #4]
    5cd0:	2c00      	cmp	r4, #0
    5cd2:	d008      	beq.n	5ce6 <_ZN13PluggableUSB_5setupER8USBSetup+0x1c>
		if (node->setup(setup)) {
    5cd4:	6823      	ldr	r3, [r4, #0]
    5cd6:	0029      	movs	r1, r5
    5cd8:	681b      	ldr	r3, [r3, #0]
    5cda:	0020      	movs	r0, r4
    5cdc:	4798      	blx	r3
    5cde:	2800      	cmp	r0, #0
    5ce0:	d102      	bne.n	5ce8 <_ZN13PluggableUSB_5setupER8USBSetup+0x1e>
	for (node = rootNode; node; node = node->next) {
    5ce2:	68e4      	ldr	r4, [r4, #12]
    5ce4:	e7f4      	b.n	5cd0 <_ZN13PluggableUSB_5setupER8USBSetup+0x6>
			return true;
		}
	}
	return false;
    5ce6:	0020      	movs	r0, r4
}
    5ce8:	bd70      	pop	{r4, r5, r6, pc}
	...

00005cec <_Z12PluggableUSBv>:
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    5cec:	2101      	movs	r1, #1
    5cee:	4a06      	ldr	r2, [pc, #24]	; (5d08 <_Z12PluggableUSBv+0x1c>)
{
    5cf0:	b510      	push	{r4, lr}
	static PluggableUSB_ obj;
    5cf2:	6813      	ldr	r3, [r2, #0]
    5cf4:	4805      	ldr	r0, [pc, #20]	; (5d0c <_Z12PluggableUSBv+0x20>)
    5cf6:	400b      	ands	r3, r1
    5cf8:	d105      	bne.n	5d06 <_Z12PluggableUSBv+0x1a>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    5cfa:	2402      	movs	r4, #2
    5cfc:	7004      	strb	r4, [r0, #0]
    5cfe:	1924      	adds	r4, r4, r4
    5d00:	7044      	strb	r4, [r0, #1]
    5d02:	6043      	str	r3, [r0, #4]
	static PluggableUSB_ obj;
    5d04:	6011      	str	r1, [r2, #0]
}
    5d06:	bd10      	pop	{r4, pc}
    5d08:	200015c8 	.word	0x200015c8
    5d0c:	200015cc 	.word	0x200015cc

00005d10 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    5d10:	2300      	movs	r3, #0
    5d12:	6003      	str	r3, [r0, #0]
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
    5d14:	680a      	ldr	r2, [r1, #0]
	capacity = 0;
    5d16:	6043      	str	r3, [r0, #4]
	buffer = rhs.buffer;
    5d18:	6002      	str	r2, [r0, #0]
	capacity = rhs.capacity;
    5d1a:	684a      	ldr	r2, [r1, #4]
	len = 0;
    5d1c:	6083      	str	r3, [r0, #8]
	capacity = rhs.capacity;
    5d1e:	6042      	str	r2, [r0, #4]
	len = rhs.len;
    5d20:	688a      	ldr	r2, [r1, #8]
    5d22:	6082      	str	r2, [r0, #8]
	rhs.buffer = NULL;
    5d24:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
    5d26:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
    5d28:	608b      	str	r3, [r1, #8]
}
    5d2a:	4770      	bx	lr

00005d2c <_ZN6StringD1Ev>:
String::~String()
    5d2c:	b510      	push	{r4, lr}
    5d2e:	0004      	movs	r4, r0
	free(buffer);
    5d30:	6800      	ldr	r0, [r0, #0]
    5d32:	f006 f9e9 	bl	c108 <free>
}
    5d36:	0020      	movs	r0, r4
    5d38:	bd10      	pop	{r4, pc}

00005d3a <_ZN6String10invalidateEv>:
{
    5d3a:	b510      	push	{r4, lr}
    5d3c:	0004      	movs	r4, r0
	if (buffer) free(buffer);
    5d3e:	6800      	ldr	r0, [r0, #0]
    5d40:	2800      	cmp	r0, #0
    5d42:	d001      	beq.n	5d48 <_ZN6String10invalidateEv+0xe>
    5d44:	f006 f9e0 	bl	c108 <free>
	buffer = NULL;
    5d48:	2300      	movs	r3, #0
    5d4a:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
    5d4c:	60a3      	str	r3, [r4, #8]
    5d4e:	6063      	str	r3, [r4, #4]
}
    5d50:	bd10      	pop	{r4, pc}

00005d52 <_ZN6String12changeBufferEj>:
{
    5d52:	b570      	push	{r4, r5, r6, lr}
    5d54:	0004      	movs	r4, r0
    5d56:	000d      	movs	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    5d58:	6800      	ldr	r0, [r0, #0]
    5d5a:	3101      	adds	r1, #1
    5d5c:	f007 fad4 	bl	d308 <realloc>
    5d60:	1e03      	subs	r3, r0, #0
	if (newbuffer) {
    5d62:	d001      	beq.n	5d68 <_ZN6String12changeBufferEj+0x16>
		return 1;
    5d64:	2001      	movs	r0, #1
		capacity = maxStrLen;
    5d66:	c428      	stmia	r4!, {r3, r5}
}
    5d68:	bd70      	pop	{r4, r5, r6, pc}

00005d6a <_ZN6String7reserveEj>:
	if (buffer && capacity >= size) return 1;
    5d6a:	6803      	ldr	r3, [r0, #0]
{
    5d6c:	b510      	push	{r4, lr}
    5d6e:	0004      	movs	r4, r0
	if (buffer && capacity >= size) return 1;
    5d70:	2b00      	cmp	r3, #0
    5d72:	d004      	beq.n	5d7e <_ZN6String7reserveEj+0x14>
    5d74:	6843      	ldr	r3, [r0, #4]
    5d76:	428b      	cmp	r3, r1
    5d78:	d301      	bcc.n	5d7e <_ZN6String7reserveEj+0x14>
		if (len == 0) buffer[0] = 0;
    5d7a:	2001      	movs	r0, #1
}
    5d7c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
    5d7e:	0020      	movs	r0, r4
    5d80:	f7ff ffe7 	bl	5d52 <_ZN6String12changeBufferEj>
    5d84:	2800      	cmp	r0, #0
    5d86:	d0f9      	beq.n	5d7c <_ZN6String7reserveEj+0x12>
		if (len == 0) buffer[0] = 0;
    5d88:	68a3      	ldr	r3, [r4, #8]
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	d1f5      	bne.n	5d7a <_ZN6String7reserveEj+0x10>
    5d8e:	6822      	ldr	r2, [r4, #0]
    5d90:	7013      	strb	r3, [r2, #0]
    5d92:	e7f2      	b.n	5d7a <_ZN6String7reserveEj+0x10>

00005d94 <_ZN6String4copyEPKcj>:
{
    5d94:	b570      	push	{r4, r5, r6, lr}
    5d96:	000e      	movs	r6, r1
	if (!reserve(length)) {
    5d98:	0011      	movs	r1, r2
{
    5d9a:	0004      	movs	r4, r0
    5d9c:	0015      	movs	r5, r2
	if (!reserve(length)) {
    5d9e:	f7ff ffe4 	bl	5d6a <_ZN6String7reserveEj>
    5da2:	2800      	cmp	r0, #0
    5da4:	d104      	bne.n	5db0 <_ZN6String4copyEPKcj+0x1c>
		invalidate();
    5da6:	0020      	movs	r0, r4
    5da8:	f7ff ffc7 	bl	5d3a <_ZN6String10invalidateEv>
}
    5dac:	0020      	movs	r0, r4
    5dae:	bd70      	pop	{r4, r5, r6, pc}
	len = length;
    5db0:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    5db2:	0031      	movs	r1, r6
    5db4:	6820      	ldr	r0, [r4, #0]
    5db6:	f007 fafc 	bl	d3b2 <strcpy>
	return *this;
    5dba:	e7f7      	b.n	5dac <_ZN6String4copyEPKcj+0x18>

00005dbc <_ZN6StringC1EPKc>:
	buffer = NULL;
    5dbc:	2300      	movs	r3, #0
String::String(const char *cstr)
    5dbe:	b570      	push	{r4, r5, r6, lr}
    5dc0:	0004      	movs	r4, r0
    5dc2:	000d      	movs	r5, r1
	buffer = NULL;
    5dc4:	6003      	str	r3, [r0, #0]
	capacity = 0;
    5dc6:	6043      	str	r3, [r0, #4]
	len = 0;
    5dc8:	6083      	str	r3, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
    5dca:	4299      	cmp	r1, r3
    5dcc:	d007      	beq.n	5dde <_ZN6StringC1EPKc+0x22>
    5dce:	0008      	movs	r0, r1
    5dd0:	f007 faf7 	bl	d3c2 <strlen>
    5dd4:	0029      	movs	r1, r5
    5dd6:	0002      	movs	r2, r0
    5dd8:	0020      	movs	r0, r4
    5dda:	f7ff ffdb 	bl	5d94 <_ZN6String4copyEPKcj>
}
    5dde:	0020      	movs	r0, r4
    5de0:	bd70      	pop	{r4, r5, r6, pc}

00005de2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    5de2:	b570      	push	{r4, r5, r6, lr}
    5de4:	0004      	movs	r4, r0
    5de6:	1e0d      	subs	r5, r1, #0
	if (cstr) copy(cstr, strlen(cstr));
    5de8:	d009      	beq.n	5dfe <_ZN6StringaSEPKc+0x1c>
    5dea:	0008      	movs	r0, r1
    5dec:	f007 fae9 	bl	d3c2 <strlen>
    5df0:	0029      	movs	r1, r5
    5df2:	0002      	movs	r2, r0
    5df4:	0020      	movs	r0, r4
    5df6:	f7ff ffcd 	bl	5d94 <_ZN6String4copyEPKcj>
	else invalidate();
	
	return *this;
}
    5dfa:	0020      	movs	r0, r4
    5dfc:	bd70      	pop	{r4, r5, r6, pc}
	else invalidate();
    5dfe:	f7ff ff9c 	bl	5d3a <_ZN6String10invalidateEv>
    5e02:	e7fa      	b.n	5dfa <_ZN6StringaSEPKc+0x18>

00005e04 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
    5e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5e06:	0004      	movs	r4, r0
	buffer = NULL;
    5e08:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
    5e0a:	0008      	movs	r0, r1
	buffer = NULL;
    5e0c:	6023      	str	r3, [r4, #0]
	capacity = 0;
    5e0e:	6063      	str	r3, [r4, #4]
	len = 0;
    5e10:	60a3      	str	r3, [r4, #8]
	utoa(value, buf, base);
    5e12:	a901      	add	r1, sp, #4
    5e14:	f002 fef4 	bl	8c00 <utoa>
	*this = buf;
    5e18:	a901      	add	r1, sp, #4
    5e1a:	0020      	movs	r0, r4
    5e1c:	f7ff ffe1 	bl	5de2 <_ZN6StringaSEPKc>
}
    5e20:	0020      	movs	r0, r4
    5e22:	b004      	add	sp, #16
    5e24:	bd10      	pop	{r4, pc}

00005e26 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    5e26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5e28:	0004      	movs	r4, r0
    5e2a:	1e0f      	subs	r7, r1, #0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
    5e2c:	d102      	bne.n	5e34 <_ZN6String6concatEPKcj+0xe>
    5e2e:	2600      	movs	r6, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    5e30:	0030      	movs	r0, r6
    5e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (length == 0) return 1;
    5e34:	2601      	movs	r6, #1
    5e36:	2a00      	cmp	r2, #0
    5e38:	d0fa      	beq.n	5e30 <_ZN6String6concatEPKcj+0xa>
	unsigned int newlen = len + length;
    5e3a:	6883      	ldr	r3, [r0, #8]
    5e3c:	18d5      	adds	r5, r2, r3
	if (!reserve(newlen)) return 0;
    5e3e:	0029      	movs	r1, r5
    5e40:	f7ff ff93 	bl	5d6a <_ZN6String7reserveEj>
    5e44:	2800      	cmp	r0, #0
    5e46:	d0f2      	beq.n	5e2e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
    5e48:	6823      	ldr	r3, [r4, #0]
    5e4a:	68a2      	ldr	r2, [r4, #8]
    5e4c:	0039      	movs	r1, r7
    5e4e:	1898      	adds	r0, r3, r2
    5e50:	f007 faaf 	bl	d3b2 <strcpy>
	len = newlen;
    5e54:	60a5      	str	r5, [r4, #8]
	return 1;
    5e56:	e7eb      	b.n	5e30 <_ZN6String6concatEPKcj+0xa>

00005e58 <_ZN6String6concatERKS_>:
{
    5e58:	b510      	push	{r4, lr}
	return concat(s.buffer, s.len);
    5e5a:	688a      	ldr	r2, [r1, #8]
    5e5c:	6809      	ldr	r1, [r1, #0]
    5e5e:	f7ff ffe2 	bl	5e26 <_ZN6String6concatEPKcj>
}
    5e62:	bd10      	pop	{r4, pc}

00005e64 <_ZN6String6concatEPKc>:

unsigned char String::concat(const char *cstr)
{
    5e64:	b570      	push	{r4, r5, r6, lr}
    5e66:	0005      	movs	r5, r0
    5e68:	000c      	movs	r4, r1
	if (!cstr) return 0;
    5e6a:	1e08      	subs	r0, r1, #0
    5e6c:	d006      	beq.n	5e7c <_ZN6String6concatEPKc+0x18>
	return concat(cstr, strlen(cstr));
    5e6e:	f007 faa8 	bl	d3c2 <strlen>
    5e72:	0021      	movs	r1, r4
    5e74:	0002      	movs	r2, r0
    5e76:	0028      	movs	r0, r5
    5e78:	f7ff ffd5 	bl	5e26 <_ZN6String6concatEPKcj>
}
    5e7c:	bd70      	pop	{r4, r5, r6, pc}

00005e7e <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    5e7e:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
    5e80:	2200      	movs	r2, #0
	buf[0] = c;
    5e82:	ab01      	add	r3, sp, #4
    5e84:	7019      	strb	r1, [r3, #0]
	buf[1] = 0;
    5e86:	705a      	strb	r2, [r3, #1]
	return concat(buf, 1);
    5e88:	0019      	movs	r1, r3
    5e8a:	3201      	adds	r2, #1
    5e8c:	f7ff ffcb 	bl	5e26 <_ZN6String6concatEPKcj>
}
    5e90:	bd0e      	pop	{r1, r2, r3, pc}

00005e92 <_ZNK6String6equalsEPKc>:
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    5e92:	6883      	ldr	r3, [r0, #8]
{
    5e94:	b510      	push	{r4, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
    5e96:	2b00      	cmp	r3, #0
    5e98:	d107      	bne.n	5eaa <_ZNK6String6equalsEPKc+0x18>
    5e9a:	2001      	movs	r0, #1
    5e9c:	2900      	cmp	r1, #0
    5e9e:	d003      	beq.n	5ea8 <_ZNK6String6equalsEPKc+0x16>
    5ea0:	780b      	ldrb	r3, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
    5ea2:	4258      	negs	r0, r3
    5ea4:	4158      	adcs	r0, r3
    5ea6:	b2c0      	uxtb	r0, r0
}
    5ea8:	bd10      	pop	{r4, pc}
	if (cstr == NULL) return buffer[0] == 0;
    5eaa:	2900      	cmp	r1, #0
    5eac:	d102      	bne.n	5eb4 <_ZNK6String6equalsEPKc+0x22>
    5eae:	6803      	ldr	r3, [r0, #0]
    5eb0:	781b      	ldrb	r3, [r3, #0]
    5eb2:	e7f6      	b.n	5ea2 <_ZNK6String6equalsEPKc+0x10>
	return strcmp(buffer, cstr) == 0;
    5eb4:	6800      	ldr	r0, [r0, #0]
    5eb6:	f007 fa72 	bl	d39e <strcmp>
    5eba:	0003      	movs	r3, r0
    5ebc:	e7f1      	b.n	5ea2 <_ZNK6String6equalsEPKc+0x10>

00005ebe <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    5ebe:	b570      	push	{r4, r5, r6, lr}
    5ec0:	000d      	movs	r5, r1
	if (!bufsize || !buf) return;
    5ec2:	2a00      	cmp	r2, #0
    5ec4:	d006      	beq.n	5ed4 <_ZNK6String8getBytesEPhjj+0x16>
    5ec6:	2900      	cmp	r1, #0
    5ec8:	d004      	beq.n	5ed4 <_ZNK6String8getBytesEPhjj+0x16>
	if (index >= len) {
    5eca:	6884      	ldr	r4, [r0, #8]
    5ecc:	429c      	cmp	r4, r3
    5ece:	d802      	bhi.n	5ed6 <_ZNK6String8getBytesEPhjj+0x18>
		buf[0] = 0;
    5ed0:	2300      	movs	r3, #0
    5ed2:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    5ed4:	bd70      	pop	{r4, r5, r6, pc}
	unsigned int n = bufsize - 1;
    5ed6:	3a01      	subs	r2, #1
	if (n > len - index) n = len - index;
    5ed8:	1ae4      	subs	r4, r4, r3
    5eda:	4294      	cmp	r4, r2
    5edc:	d900      	bls.n	5ee0 <_ZNK6String8getBytesEPhjj+0x22>
    5ede:	0014      	movs	r4, r2
	strncpy((char *)buf, buffer + index, n);
    5ee0:	6801      	ldr	r1, [r0, #0]
    5ee2:	0022      	movs	r2, r4
    5ee4:	18c9      	adds	r1, r1, r3
    5ee6:	0028      	movs	r0, r5
    5ee8:	f007 fa98 	bl	d41c <strncpy>
	buf[n] = 0;
    5eec:	2300      	movs	r3, #0
    5eee:	552b      	strb	r3, [r5, r4]
    5ef0:	e7f0      	b.n	5ed4 <_ZNK6String8getBytesEPhjj+0x16>

00005ef2 <_ZN6String11toUpperCaseEv>:
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
{
    5ef2:	b510      	push	{r4, lr}
	if (!buffer) return;
    5ef4:	6804      	ldr	r4, [r0, #0]
    5ef6:	2c00      	cmp	r4, #0
    5ef8:	d007      	beq.n	5f0a <_ZN6String11toUpperCaseEv+0x18>
	for (char *p = buffer; *p; p++) {
    5efa:	7820      	ldrb	r0, [r4, #0]
    5efc:	2800      	cmp	r0, #0
    5efe:	d004      	beq.n	5f0a <_ZN6String11toUpperCaseEv+0x18>
		*p = toupper(*p);
    5f00:	f007 fb42 	bl	d588 <toupper>
    5f04:	7020      	strb	r0, [r4, #0]
	for (char *p = buffer; *p; p++) {
    5f06:	3401      	adds	r4, #1
    5f08:	e7f7      	b.n	5efa <_ZN6String11toUpperCaseEv+0x8>
	}
}
    5f0a:	bd10      	pop	{r4, pc}

00005f0c <_ZN15ArduinoUniqueIDC1Ev>:
// Copyright © Luiz Henrique Cassettari. All rights reserved.
// Licensed under the MIT license.

#include "ArduinoUniqueID.h"

ArduinoUniqueID::ArduinoUniqueID()
    5f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	#define SERIAL_NUMBER_WORD_1	*(volatile uint32_t*)(0x0080A040)
	#define SERIAL_NUMBER_WORD_2	*(volatile uint32_t*)(0x0080A044)
	#define SERIAL_NUMBER_WORD_3	*(volatile uint32_t*)(0x0080A048)

	uint32_t pdwUniqueID[4];
	pdwUniqueID[0] = SERIAL_NUMBER_WORD_0;
    5f0e:	4b0e      	ldr	r3, [pc, #56]	; (5f48 <_ZN15ArduinoUniqueIDC1Ev+0x3c>)
	pdwUniqueID[1] = SERIAL_NUMBER_WORD_1;
	pdwUniqueID[2] = SERIAL_NUMBER_WORD_2;
	pdwUniqueID[3] = SERIAL_NUMBER_WORD_3;
    5f10:	2200      	movs	r2, #0
	pdwUniqueID[0] = SERIAL_NUMBER_WORD_0;
    5f12:	681b      	ldr	r3, [r3, #0]
    5f14:	9300      	str	r3, [sp, #0]
	pdwUniqueID[1] = SERIAL_NUMBER_WORD_1;
    5f16:	4b0d      	ldr	r3, [pc, #52]	; (5f4c <_ZN15ArduinoUniqueIDC1Ev+0x40>)
    5f18:	681b      	ldr	r3, [r3, #0]
    5f1a:	9301      	str	r3, [sp, #4]
	pdwUniqueID[2] = SERIAL_NUMBER_WORD_2;
    5f1c:	4b0c      	ldr	r3, [pc, #48]	; (5f50 <_ZN15ArduinoUniqueIDC1Ev+0x44>)
    5f1e:	681b      	ldr	r3, [r3, #0]
    5f20:	9302      	str	r3, [sp, #8]
	pdwUniqueID[3] = SERIAL_NUMBER_WORD_3;
    5f22:	4b0c      	ldr	r3, [pc, #48]	; (5f54 <_ZN15ArduinoUniqueIDC1Ev+0x48>)
    5f24:	681b      	ldr	r3, [r3, #0]
    5f26:	9303      	str	r3, [sp, #12]
    5f28:	0003      	movs	r3, r0

	for (int i = 0; i < 4; i++)
	{
		id[i*4+0] = (uint8_t)(pdwUniqueID[i] >> 24);
    5f2a:	4669      	mov	r1, sp
    5f2c:	5889      	ldr	r1, [r1, r2]
    5f2e:	3204      	adds	r2, #4
    5f30:	0e0c      	lsrs	r4, r1, #24
    5f32:	701c      	strb	r4, [r3, #0]
		id[i*4+1] = (uint8_t)(pdwUniqueID[i] >> 16);
    5f34:	0c0c      	lsrs	r4, r1, #16
    5f36:	705c      	strb	r4, [r3, #1]
		id[i*4+2] = (uint8_t)(pdwUniqueID[i] >> 8);
    5f38:	0a0c      	lsrs	r4, r1, #8
    5f3a:	709c      	strb	r4, [r3, #2]
		id[i*4+3] = (uint8_t)(pdwUniqueID[i] >> 0);
    5f3c:	70d9      	strb	r1, [r3, #3]
    5f3e:	3304      	adds	r3, #4
	for (int i = 0; i < 4; i++)
    5f40:	2a10      	cmp	r2, #16
    5f42:	d1f2      	bne.n	5f2a <_ZN15ArduinoUniqueIDC1Ev+0x1e>
		id[i*4+1] = (uint8_t)(pdwUniqueID[i] >> 16);
		id[i*4+2] = (uint8_t)(pdwUniqueID[i] >> 8);
		id[i*4+3] = (uint8_t)(pdwUniqueID[i] >> 0);
	}
#endif
}
    5f44:	b004      	add	sp, #16
    5f46:	bd10      	pop	{r4, pc}
    5f48:	0080a00c 	.word	0x0080a00c
    5f4c:	0080a040 	.word	0x0080a040
    5f50:	0080a044 	.word	0x0080a044
    5f54:	0080a048 	.word	0x0080a048

00005f58 <_GLOBAL__sub_I__ZN15ArduinoUniqueIDC2Ev>:

ArduinoUniqueID _UniqueID;
    5f58:	b510      	push	{r4, lr}
    5f5a:	4802      	ldr	r0, [pc, #8]	; (5f64 <_GLOBAL__sub_I__ZN15ArduinoUniqueIDC2Ev+0xc>)
    5f5c:	f7ff ffd6 	bl	5f0c <_ZN15ArduinoUniqueIDC1Ev>
    5f60:	bd10      	pop	{r4, pc}
    5f62:	46c0      	nop			; (mov r8, r8)
    5f64:	200015d4 	.word	0x200015d4

00005f68 <_ZN3DHTC1Ehhh>:
  _type = type;
  #ifdef __AVR
    _bit = digitalPinToBitMask(pin);
    _port = digitalPinToPort(pin);
  #endif
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
    5f68:	4b07      	ldr	r3, [pc, #28]	; (5f88 <_ZN3DHTC1Ehhh+0x20>)
DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
    5f6a:	b510      	push	{r4, lr}
    5f6c:	0004      	movs	r4, r0
  _pin = pin;
    5f6e:	7141      	strb	r1, [r0, #5]
  _type = type;
    5f70:	7182      	strb	r2, [r0, #6]
  _maxcycles = microsecondsToClockCycles(1000);  // 1 millisecond timeout for
    5f72:	4906      	ldr	r1, [pc, #24]	; (5f8c <_ZN3DHTC1Ehhh+0x24>)
    5f74:	6818      	ldr	r0, [r3, #0]
    5f76:	f003 fac3 	bl	9500 <__udivsi3>
    5f7a:	23fa      	movs	r3, #250	; 0xfa
    5f7c:	009b      	lsls	r3, r3, #2
    5f7e:	4358      	muls	r0, r3
    5f80:	60e0      	str	r0, [r4, #12]
                                                 // reading pulses from DHT sensor.
  // Note that count is now ignored as the DHT reading algorithm adjusts itself
  // basd on the speed of the processor.
}
    5f82:	0020      	movs	r0, r4
    5f84:	bd10      	pop	{r4, pc}
    5f86:	46c0      	nop			; (mov r8, r8)
    5f88:	20000088 	.word	0x20000088
    5f8c:	000f4240 	.word	0x000f4240

00005f90 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
    5f90:	b510      	push	{r4, lr}
    5f92:	0004      	movs	r4, r0
  // set up the pins!
  pinMode(_pin, INPUT_PULLUP);
    5f94:	2102      	movs	r1, #2
    5f96:	7940      	ldrb	r0, [r0, #5]
    5f98:	f7fe f9d2 	bl	4340 <pinMode>
  // Using this value makes sure that millis() - lastreadtime will be
  // >= MIN_INTERVAL right away. Note that this assignment wraps around,
  // but so will the subtraction.
  _lastreadtime = -MIN_INTERVAL;
    5f9c:	4b01      	ldr	r3, [pc, #4]	; (5fa4 <_ZN3DHT5beginEv+0x14>)
    5f9e:	60a3      	str	r3, [r4, #8]
  DEBUG_PRINT("Max clock cycles: "); DEBUG_PRINTLN(_maxcycles, DEC);
}
    5fa0:	bd10      	pop	{r4, pc}
    5fa2:	46c0      	nop			; (mov r8, r8)
    5fa4:	fffff830 	.word	0xfffff830

00005fa8 <_ZN3DHT11expectPulseEb>:
// used to compare the relative time of two pulses).  If more than a millisecond
// ellapses without the level changing then the call fails with a 0 response.
// This is adapted from Arduino's pulseInLong function (which is only available
// in the very latest IDE versions):
//   https://github.com/arduino/Arduino/blob/master/hardware/arduino/avr/cores/arduino/wiring_pulse.c
uint32_t DHT::expectPulse(bool level) {
    5fa8:	b570      	push	{r4, r5, r6, lr}
    5faa:	0005      	movs	r5, r0
    5fac:	000e      	movs	r6, r1
  uint32_t count = 0;
    5fae:	2400      	movs	r4, #0
      }
    }
  // Otherwise fall back to using digitalRead (this seems to be necessary on ESP8266
  // right now, perhaps bugs in direct port access functions?).
  #else
    while (digitalRead(_pin) == level) {
    5fb0:	7968      	ldrb	r0, [r5, #5]
    5fb2:	f7fe fa1d 	bl	43f0 <digitalRead>
    5fb6:	42b0      	cmp	r0, r6
    5fb8:	d104      	bne.n	5fc4 <_ZN3DHT11expectPulseEb+0x1c>
      if (count++ >= _maxcycles) {
    5fba:	68ea      	ldr	r2, [r5, #12]
    5fbc:	1c63      	adds	r3, r4, #1
    5fbe:	4294      	cmp	r4, r2
    5fc0:	d302      	bcc.n	5fc8 <_ZN3DHT11expectPulseEb+0x20>
        return 0; // Exceeded timeout, fail.
    5fc2:	2400      	movs	r4, #0
      }
    }
  #endif

  return count;
}
    5fc4:	0020      	movs	r0, r4
    5fc6:	bd70      	pop	{r4, r5, r6, pc}
      if (count++ >= _maxcycles) {
    5fc8:	001c      	movs	r4, r3
    5fca:	e7f1      	b.n	5fb0 <_ZN3DHT11expectPulseEb+0x8>

00005fcc <_ZN3DHT4readEb>:
boolean DHT::read(bool force) {
    5fcc:	b570      	push	{r4, r5, r6, lr}
    5fce:	b0d0      	sub	sp, #320	; 0x140
    5fd0:	000d      	movs	r5, r1
    5fd2:	0004      	movs	r4, r0
  uint32_t currenttime = millis();
    5fd4:	f7fc fc08 	bl	27e8 <millis>
  if (!force && ((currenttime - _lastreadtime) < 2000)) {
    5fd8:	2d00      	cmp	r5, #0
    5fda:	d107      	bne.n	5fec <_ZN3DHT4readEb+0x20>
    5fdc:	68a3      	ldr	r3, [r4, #8]
    5fde:	4a3d      	ldr	r2, [pc, #244]	; (60d4 <_ZN3DHT4readEb+0x108>)
    5fe0:	1ac3      	subs	r3, r0, r3
    5fe2:	4293      	cmp	r3, r2
    5fe4:	d802      	bhi.n	5fec <_ZN3DHT4readEb+0x20>
    return _lastresult; // return last correct measurement
    5fe6:	7c20      	ldrb	r0, [r4, #16]
}
    5fe8:	b050      	add	sp, #320	; 0x140
    5fea:	bd70      	pop	{r4, r5, r6, pc}
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    5fec:	2500      	movs	r5, #0
  _lastreadtime = currenttime;
    5fee:	60a0      	str	r0, [r4, #8]
  digitalWrite(_pin, HIGH);
    5ff0:	2101      	movs	r1, #1
    5ff2:	7960      	ldrb	r0, [r4, #5]
  data[0] = data[1] = data[2] = data[3] = data[4] = 0;
    5ff4:	7125      	strb	r5, [r4, #4]
    5ff6:	70e5      	strb	r5, [r4, #3]
    5ff8:	70a5      	strb	r5, [r4, #2]
    5ffa:	7065      	strb	r5, [r4, #1]
    5ffc:	7025      	strb	r5, [r4, #0]
  digitalWrite(_pin, HIGH);
    5ffe:	f7fe f9a3 	bl	4348 <digitalWrite>
  delay(250);
    6002:	20fa      	movs	r0, #250	; 0xfa
    6004:	f7fc fc26 	bl	2854 <delay>
  pinMode(_pin, OUTPUT);
    6008:	7960      	ldrb	r0, [r4, #5]
    600a:	2101      	movs	r1, #1
    600c:	f7fe f998 	bl	4340 <pinMode>
  digitalWrite(_pin, LOW);
    6010:	7960      	ldrb	r0, [r4, #5]
    6012:	0029      	movs	r1, r5
    6014:	f7fe f998 	bl	4348 <digitalWrite>
  delay(20);
    6018:	2014      	movs	r0, #20
    601a:	f7fc fc1b 	bl	2854 <delay>
  __ASM volatile ("cpsid i" : : : "memory");
    601e:	b672      	cpsid	i
    digitalWrite(_pin, HIGH);
    6020:	2101      	movs	r1, #1
    6022:	7960      	ldrb	r0, [r4, #5]
    6024:	f7fe f990 	bl	4348 <digitalWrite>
    "   sub %0, #1   \n" // substract 1 from %0 (n)
    "   bne 1b       \n" // if result is not 0 jump to 1
    : "+r" (n)           // '%0' is n variable with RW constraints
    :                    // no input
    :                    // no clobber
  );
    6028:	23a0      	movs	r3, #160	; 0xa0
    602a:	009b      	lsls	r3, r3, #2
    602c:	3b01      	subs	r3, #1
    602e:	d1fd      	bne.n	602c <_ZN3DHT4readEb+0x60>
    pinMode(_pin, INPUT_PULLUP);
    6030:	2102      	movs	r1, #2
    6032:	7960      	ldrb	r0, [r4, #5]
    6034:	f7fe f984 	bl	4340 <pinMode>
    6038:	23a0      	movs	r3, #160	; 0xa0
    603a:	3b01      	subs	r3, #1
    603c:	d1fd      	bne.n	603a <_ZN3DHT4readEb+0x6e>
    if (expectPulse(LOW) == 0) {
    603e:	0029      	movs	r1, r5
    6040:	0020      	movs	r0, r4
    6042:	f7ff ffb1 	bl	5fa8 <_ZN3DHT11expectPulseEb>
    6046:	42a8      	cmp	r0, r5
    6048:	d103      	bne.n	6052 <_ZN3DHT4readEb+0x86>
      _lastresult = false;
    604a:	2000      	movs	r0, #0
    604c:	7420      	strb	r0, [r4, #16]
  __ASM volatile ("cpsie i" : : : "memory");
    604e:	b662      	cpsie	i
    6050:	e7ca      	b.n	5fe8 <_ZN3DHT4readEb+0x1c>
    if (expectPulse(HIGH) == 0) {
    6052:	2101      	movs	r1, #1
    6054:	0020      	movs	r0, r4
    6056:	f7ff ffa7 	bl	5fa8 <_ZN3DHT11expectPulseEb>
    605a:	2800      	cmp	r0, #0
    605c:	d0f5      	beq.n	604a <_ZN3DHT4readEb+0x7e>
    for (int i=0; i<80; i+=2) {
    605e:	26a0      	movs	r6, #160	; 0xa0
    6060:	0076      	lsls	r6, r6, #1
      cycles[i]   = expectPulse(LOW);
    6062:	2100      	movs	r1, #0
    6064:	0020      	movs	r0, r4
    6066:	f7ff ff9f 	bl	5fa8 <_ZN3DHT11expectPulseEb>
    606a:	466b      	mov	r3, sp
      cycles[i+1] = expectPulse(HIGH);
    606c:	2101      	movs	r1, #1
      cycles[i]   = expectPulse(LOW);
    606e:	50e8      	str	r0, [r5, r3]
      cycles[i+1] = expectPulse(HIGH);
    6070:	0020      	movs	r0, r4
    6072:	f7ff ff99 	bl	5fa8 <_ZN3DHT11expectPulseEb>
    6076:	002b      	movs	r3, r5
    6078:	3508      	adds	r5, #8
    607a:	446b      	add	r3, sp
    607c:	6058      	str	r0, [r3, #4]
    for (int i=0; i<80; i+=2) {
    607e:	42b5      	cmp	r5, r6
    6080:	d1ef      	bne.n	6062 <_ZN3DHT4readEb+0x96>
    6082:	b662      	cpsie	i
  for (int i=0; i<40; ++i) {
    6084:	2200      	movs	r2, #0
      data[i/8] |= 1;
    6086:	2101      	movs	r1, #1
    uint32_t lowCycles  = cycles[2*i];
    6088:	4668      	mov	r0, sp
    608a:	00d3      	lsls	r3, r2, #3
    608c:	58c0      	ldr	r0, [r0, r3]
    uint32_t highCycles = cycles[2*i+1];
    608e:	446b      	add	r3, sp
    6090:	685e      	ldr	r6, [r3, #4]
    if ((lowCycles == 0) || (highCycles == 0)) {
    6092:	2800      	cmp	r0, #0
    6094:	d001      	beq.n	609a <_ZN3DHT4readEb+0xce>
    6096:	2e00      	cmp	r6, #0
    6098:	d102      	bne.n	60a0 <_ZN3DHT4readEb+0xd4>
      _lastresult = false;
    609a:	2000      	movs	r0, #0
    _lastresult = true;
    609c:	7420      	strb	r0, [r4, #16]
    return _lastresult;
    609e:	e7a3      	b.n	5fe8 <_ZN3DHT4readEb+0x1c>
    data[i/8] <<= 1;
    60a0:	10d5      	asrs	r5, r2, #3
    60a2:	5d63      	ldrb	r3, [r4, r5]
    60a4:	005b      	lsls	r3, r3, #1
    60a6:	b2db      	uxtb	r3, r3
    if (highCycles > lowCycles) {
    60a8:	42b0      	cmp	r0, r6
    60aa:	d310      	bcc.n	60ce <_ZN3DHT4readEb+0x102>
  for (int i=0; i<40; ++i) {
    60ac:	3201      	adds	r2, #1
      data[i/8] |= 1;
    60ae:	5563      	strb	r3, [r4, r5]
  for (int i=0; i<40; ++i) {
    60b0:	2a28      	cmp	r2, #40	; 0x28
    60b2:	d1e9      	bne.n	6088 <_ZN3DHT4readEb+0xbc>
  if (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) {
    60b4:	7861      	ldrb	r1, [r4, #1]
    60b6:	7823      	ldrb	r3, [r4, #0]
    60b8:	7922      	ldrb	r2, [r4, #4]
    60ba:	185b      	adds	r3, r3, r1
    60bc:	78a1      	ldrb	r1, [r4, #2]
    60be:	185b      	adds	r3, r3, r1
    60c0:	78e1      	ldrb	r1, [r4, #3]
    60c2:	185b      	adds	r3, r3, r1
    60c4:	b2db      	uxtb	r3, r3
    60c6:	429a      	cmp	r2, r3
    60c8:	d1e7      	bne.n	609a <_ZN3DHT4readEb+0xce>
    _lastresult = true;
    60ca:	2001      	movs	r0, #1
    60cc:	e7e6      	b.n	609c <_ZN3DHT4readEb+0xd0>
      data[i/8] |= 1;
    60ce:	430b      	orrs	r3, r1
    60d0:	e7ec      	b.n	60ac <_ZN3DHT4readEb+0xe0>
    60d2:	46c0      	nop			; (mov r8, r8)
    60d4:	000007cf 	.word	0x000007cf

000060d8 <_ZN3DHT15readTemperatureEbb>:
float DHT::readTemperature(bool S, bool force) {
    60d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    60da:	000d      	movs	r5, r1
  if (read(force)) {
    60dc:	0011      	movs	r1, r2
float DHT::readTemperature(bool S, bool force) {
    60de:	0004      	movs	r4, r0
  if (read(force)) {
    60e0:	f7ff ff74 	bl	5fcc <_ZN3DHT4readEb>
    60e4:	2800      	cmp	r0, #0
    60e6:	d007      	beq.n	60f8 <_ZN3DHT15readTemperatureEbb+0x20>
    switch (_type) {
    60e8:	79a3      	ldrb	r3, [r4, #6]
    60ea:	b2da      	uxtb	r2, r3
    60ec:	2a0b      	cmp	r2, #11
    60ee:	d005      	beq.n	60fc <_ZN3DHT15readTemperatureEbb+0x24>
    60f0:	d302      	bcc.n	60f8 <_ZN3DHT15readTemperatureEbb+0x20>
    60f2:	3b15      	subs	r3, #21
    60f4:	2b01      	cmp	r3, #1
    60f6:	d913      	bls.n	6120 <_ZN3DHT15readTemperatureEbb+0x48>
  float f = NAN;
    60f8:	4819      	ldr	r0, [pc, #100]	; (6160 <_ZN3DHT15readTemperatureEbb+0x88>)
  return f;
    60fa:	e010      	b.n	611e <_ZN3DHT15readTemperatureEbb+0x46>
      f = data[2];
    60fc:	78a0      	ldrb	r0, [r4, #2]
    60fe:	f003 ffcf 	bl	a0a0 <__aeabi_ui2f>
      if(S) {
    6102:	2d00      	cmp	r5, #0
    6104:	d00b      	beq.n	611e <_ZN3DHT15readTemperatureEbb+0x46>
  return c * 1.8 + 32;
    6106:	f005 fdb9 	bl	bc7c <__aeabi_f2d>
    610a:	4a16      	ldr	r2, [pc, #88]	; (6164 <_ZN3DHT15readTemperatureEbb+0x8c>)
    610c:	4b16      	ldr	r3, [pc, #88]	; (6168 <_ZN3DHT15readTemperatureEbb+0x90>)
    610e:	f004 ff51 	bl	afb4 <__aeabi_dmul>
    6112:	2200      	movs	r2, #0
    6114:	4b15      	ldr	r3, [pc, #84]	; (616c <_ZN3DHT15readTemperatureEbb+0x94>)
    6116:	f004 f809 	bl	a12c <__aeabi_dadd>
    611a:	f005 fe01 	bl	bd20 <__aeabi_d2f>
}
    611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      f = data[2] & 0x7F;
    6120:	207f      	movs	r0, #127	; 0x7f
    6122:	78a6      	ldrb	r6, [r4, #2]
    6124:	4030      	ands	r0, r6
    6126:	f003 ff6b 	bl	a000 <__aeabi_i2f>
      f *= 256;
    612a:	2187      	movs	r1, #135	; 0x87
    612c:	05c9      	lsls	r1, r1, #23
    612e:	f003 fe0f 	bl	9d50 <__aeabi_fmul>
    6132:	1c07      	adds	r7, r0, #0
      f += data[3];
    6134:	78e0      	ldrb	r0, [r4, #3]
    6136:	f003 ff63 	bl	a000 <__aeabi_i2f>
    613a:	1c39      	adds	r1, r7, #0
    613c:	f003 fbce 	bl	98dc <__aeabi_fadd>
      f *= 0.1;
    6140:	f005 fd9c 	bl	bc7c <__aeabi_f2d>
    6144:	4a0a      	ldr	r2, [pc, #40]	; (6170 <_ZN3DHT15readTemperatureEbb+0x98>)
    6146:	4b0b      	ldr	r3, [pc, #44]	; (6174 <_ZN3DHT15readTemperatureEbb+0x9c>)
    6148:	f004 ff34 	bl	afb4 <__aeabi_dmul>
      if (data[2] & 0x80) {
    614c:	b276      	sxtb	r6, r6
      f *= 0.1;
    614e:	f005 fde7 	bl	bd20 <__aeabi_d2f>
      if (data[2] & 0x80) {
    6152:	2e00      	cmp	r6, #0
    6154:	dad5      	bge.n	6102 <_ZN3DHT15readTemperatureEbb+0x2a>
        f *= -1;
    6156:	2380      	movs	r3, #128	; 0x80
    6158:	061b      	lsls	r3, r3, #24
    615a:	18c0      	adds	r0, r0, r3
    615c:	e7d1      	b.n	6102 <_ZN3DHT15readTemperatureEbb+0x2a>
    615e:	46c0      	nop			; (mov r8, r8)
    6160:	7fc00000 	.word	0x7fc00000
    6164:	cccccccd 	.word	0xcccccccd
    6168:	3ffccccc 	.word	0x3ffccccc
    616c:	40400000 	.word	0x40400000
    6170:	9999999a 	.word	0x9999999a
    6174:	3fb99999 	.word	0x3fb99999

00006178 <_ZN3DHT12readHumidityEb>:
float DHT::readHumidity(bool force) {
    6178:	b570      	push	{r4, r5, r6, lr}
  if (read()) {
    617a:	2100      	movs	r1, #0
float DHT::readHumidity(bool force) {
    617c:	0004      	movs	r4, r0
  if (read()) {
    617e:	f7ff ff25 	bl	5fcc <_ZN3DHT4readEb>
    6182:	2800      	cmp	r0, #0
    6184:	d007      	beq.n	6196 <_ZN3DHT12readHumidityEb+0x1e>
    switch (_type) {
    6186:	79a3      	ldrb	r3, [r4, #6]
    6188:	b2da      	uxtb	r2, r3
    618a:	2a0b      	cmp	r2, #11
    618c:	d005      	beq.n	619a <_ZN3DHT12readHumidityEb+0x22>
    618e:	d302      	bcc.n	6196 <_ZN3DHT12readHumidityEb+0x1e>
    6190:	3b15      	subs	r3, #21
    6192:	2b01      	cmp	r3, #1
    6194:	d905      	bls.n	61a2 <_ZN3DHT12readHumidityEb+0x2a>
  float f = NAN;
    6196:	480e      	ldr	r0, [pc, #56]	; (61d0 <_ZN3DHT12readHumidityEb+0x58>)
  return f;
    6198:	e002      	b.n	61a0 <_ZN3DHT12readHumidityEb+0x28>
      f = data[0];
    619a:	7820      	ldrb	r0, [r4, #0]
    619c:	f003 ff80 	bl	a0a0 <__aeabi_ui2f>
}
    61a0:	bd70      	pop	{r4, r5, r6, pc}
      f = data[0];
    61a2:	7820      	ldrb	r0, [r4, #0]
    61a4:	f003 ff7c 	bl	a0a0 <__aeabi_ui2f>
      f *= 256;
    61a8:	2187      	movs	r1, #135	; 0x87
    61aa:	05c9      	lsls	r1, r1, #23
    61ac:	f003 fdd0 	bl	9d50 <__aeabi_fmul>
    61b0:	1c05      	adds	r5, r0, #0
      f += data[1];
    61b2:	7860      	ldrb	r0, [r4, #1]
    61b4:	f003 ff24 	bl	a000 <__aeabi_i2f>
    61b8:	1c29      	adds	r1, r5, #0
    61ba:	f003 fb8f 	bl	98dc <__aeabi_fadd>
      f *= 0.1;
    61be:	f005 fd5d 	bl	bc7c <__aeabi_f2d>
    61c2:	4a04      	ldr	r2, [pc, #16]	; (61d4 <_ZN3DHT12readHumidityEb+0x5c>)
    61c4:	4b04      	ldr	r3, [pc, #16]	; (61d8 <_ZN3DHT12readHumidityEb+0x60>)
    61c6:	f004 fef5 	bl	afb4 <__aeabi_dmul>
    61ca:	f005 fda9 	bl	bd20 <__aeabi_d2f>
      break;
    61ce:	e7e7      	b.n	61a0 <_ZN3DHT12readHumidityEb+0x28>
    61d0:	7fc00000 	.word	0x7fc00000
    61d4:	9999999a 	.word	0x9999999a
    61d8:	3fb99999 	.word	0x3fb99999

000061dc <_ZL15is_rtc_syncbusyv>:
}


static inline bool is_rtc_syncbusy()
{
	if (RTC->MODE2.SYNCBUSY.reg)
    61dc:	4b02      	ldr	r3, [pc, #8]	; (61e8 <_ZL15is_rtc_syncbusyv+0xc>)
    61de:	6918      	ldr	r0, [r3, #16]
    61e0:	1e43      	subs	r3, r0, #1
    61e2:	4198      	sbcs	r0, r3
    61e4:	b2c0      	uxtb	r0, r0
	{
		return true;
	}
	
	return false;
}
    61e6:	4770      	bx	lr
    61e8:	40002000 	.word	0x40002000

000061ec <_ZN7RTCZeroC1Ev>:
	_configured = false;
    61ec:	2300      	movs	r3, #0
    61ee:	7003      	strb	r3, [r0, #0]
}
    61f0:	4770      	bx	lr
	...

000061f4 <_ZN7RTCZero12rtc_get_timeEv>:
{
    61f4:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    61f6:	f7ff fff1 	bl	61dc <_ZL15is_rtc_syncbusyv>
    61fa:	2800      	cmp	r0, #0
    61fc:	d1fb      	bne.n	61f6 <_ZN7RTCZero12rtc_get_timeEv+0x2>
	uint32_t register_value = RTC->MODE2.CLOCK.reg;
    61fe:	4b01      	ldr	r3, [pc, #4]	; (6204 <_ZN7RTCZero12rtc_get_timeEv+0x10>)
    6200:	6998      	ldr	r0, [r3, #24]
}
    6202:	bd10      	pop	{r4, pc}
    6204:	40002000 	.word	0x40002000

00006208 <_ZN7RTCZero10getSecondsEv>:
{
    6208:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    620a:	f7ff fff3 	bl	61f4 <_ZN7RTCZero12rtc_get_timeEv>
	return value;
    620e:	233f      	movs	r3, #63	; 0x3f
    6210:	4018      	ands	r0, r3
}
    6212:	bd10      	pop	{r4, pc}

00006214 <_ZN7RTCZero10getMinutesEv>:
{
    6214:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    6216:	f7ff ffed 	bl	61f4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    621a:	0500      	lsls	r0, r0, #20
	return value;
    621c:	0e80      	lsrs	r0, r0, #26
}
    621e:	bd10      	pop	{r4, pc}

00006220 <_ZN7RTCZero8getHoursEv>:
{
    6220:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    6222:	f7ff ffe7 	bl	61f4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >> RTC_MODE2_CLOCK_HOUR_Pos);
    6226:	03c0      	lsls	r0, r0, #15
	return value;
    6228:	0ec0      	lsrs	r0, r0, #27
}
    622a:	bd10      	pop	{r4, pc}

0000622c <_ZN7RTCZero6getDayEv>:
{
    622c:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    622e:	f7ff ffe1 	bl	61f4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    6232:	0280      	lsls	r0, r0, #10
	return value;
    6234:	0ec0      	lsrs	r0, r0, #27
}
    6236:	bd10      	pop	{r4, pc}

00006238 <_ZN7RTCZero8getMonthEv>:
{
    6238:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    623a:	f7ff ffdb 	bl	61f4 <_ZN7RTCZero12rtc_get_timeEv>
	int8_t value = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >> RTC_MODE2_CLOCK_MONTH_Pos);
    623e:	0180      	lsls	r0, r0, #6
	return value;
    6240:	0f00      	lsrs	r0, r0, #28
}
    6242:	bd10      	pop	{r4, pc}

00006244 <_ZN7RTCZero7getYearEv>:
{
    6244:	b510      	push	{r4, lr}
	uint32_t register_value = rtc_get_time();
    6246:	f7ff ffd5 	bl	61f4 <_ZN7RTCZero12rtc_get_timeEv>
	return value;
    624a:	0e80      	lsrs	r0, r0, #26
}
    624c:	bd10      	pop	{r4, pc}
	...

00006250 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value>:
	clock_reg_value = ((time->year - 2000) << RTC_MODE2_CLOCK_YEAR_Pos);
    6250:	88c8      	ldrh	r0, [r1, #6]
    6252:	4b09      	ldr	r3, [pc, #36]	; (6278 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value+0x28>)
	clock_reg_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    6254:	78ca      	ldrb	r2, [r1, #3]
	clock_reg_value = ((time->year - 2000) << RTC_MODE2_CLOCK_YEAR_Pos);
    6256:	18c0      	adds	r0, r0, r3
    6258:	0683      	lsls	r3, r0, #26
	clock_reg_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    625a:	7908      	ldrb	r0, [r1, #4]
	clock_reg_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    625c:	0452      	lsls	r2, r2, #17
	clock_reg_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    625e:	0580      	lsls	r0, r0, #22
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    6260:	4310      	orrs	r0, r2
    6262:	780a      	ldrb	r2, [r1, #0]
    6264:	4310      	orrs	r0, r2
	clock_reg_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    6266:	788a      	ldrb	r2, [r1, #2]
    6268:	0312      	lsls	r2, r2, #12
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    626a:	4310      	orrs	r0, r2
	clock_reg_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    626c:	784a      	ldrb	r2, [r1, #1]
    626e:	0192      	lsls	r2, r2, #6
	clock_reg_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    6270:	4310      	orrs	r0, r2
    6272:	4318      	orrs	r0, r3
}
    6274:	4770      	bx	lr
    6276:	46c0      	nop			; (mov r8, r8)
    6278:	fffff830 	.word	0xfffff830

0000627c <_ZN7RTCZero26rtc_register_value_to_timeEmP18rtc_clockreg_value>:
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    627c:	20fa      	movs	r0, #250	; 0xfa
{
    627e:	b510      	push	{r4, lr}
	time->day = ((clock_reg_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    6280:	241f      	movs	r4, #31
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    6282:	0e8b      	lsrs	r3, r1, #26
    6284:	00c0      	lsls	r0, r0, #3
    6286:	181b      	adds	r3, r3, r0
	time->day = ((clock_reg_value & RTC_MODE2_CLOCK_DAY_Msk) >> RTC_MODE2_CLOCK_DAY_Pos);
    6288:	0c48      	lsrs	r0, r1, #17
    628a:	4020      	ands	r0, r4
    628c:	70d0      	strb	r0, [r2, #3]
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    628e:	203f      	movs	r0, #63	; 0x3f
	time->year = ((clock_reg_value & RTC_MODE2_CLOCK_YEAR_Msk) >> RTC_MODE2_CLOCK_YEAR_Pos) + 2000;
    6290:	80d3      	strh	r3, [r2, #6]
	time->month = ((clock_reg_value & RTC_MODE2_CLOCK_MONTH_Msk) >> RTC_MODE2_CLOCK_MONTH_Pos);
    6292:	018b      	lsls	r3, r1, #6
    6294:	0f1b      	lsrs	r3, r3, #28
    6296:	7113      	strb	r3, [r2, #4]
	time->hour = ((clock_reg_value & RTC_MODE2_CLOCK_HOUR_Msk) >> RTC_MODE2_CLOCK_HOUR_Pos);
    6298:	0b0b      	lsrs	r3, r1, #12
    629a:	4023      	ands	r3, r4
    629c:	7093      	strb	r3, [r2, #2]
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    629e:	098b      	lsrs	r3, r1, #6
    62a0:	4003      	ands	r3, r0
	time->second = ((clock_reg_value & RTC_MODE2_CLOCK_SECOND_Msk) >> RTC_MODE2_CLOCK_SECOND_Pos);
    62a2:	4001      	ands	r1, r0
	time->minute = ((clock_reg_value & RTC_MODE2_CLOCK_MINUTE_Msk) >> RTC_MODE2_CLOCK_MINUTE_Pos);
    62a4:	7053      	strb	r3, [r2, #1]
	time->second = ((clock_reg_value & RTC_MODE2_CLOCK_SECOND_Msk) >> RTC_MODE2_CLOCK_SECOND_Pos);
    62a6:	7011      	strb	r1, [r2, #0]
}
    62a8:	bd10      	pop	{r4, pc}
	...

000062ac <_ZN7RTCZero10RTCdisableEv>:


void RTCZero::RTCdisable()
{
    62ac:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    62ae:	f7ff ff95 	bl	61dc <_ZL15is_rtc_syncbusyv>
    62b2:	2800      	cmp	r0, #0
    62b4:	d1fb      	bne.n	62ae <_ZN7RTCZero10RTCdisableEv+0x2>
		// Wait for synchronization
	}
	
	RTC->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;		// disable interrupt
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;			// clear interrupt flag
	RTC->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;			// disable RTC
    62b6:	2102      	movs	r1, #2
	RTC->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;		// disable interrupt
    62b8:	4b05      	ldr	r3, [pc, #20]	; (62d0 <_ZN7RTCZero10RTCdisableEv+0x24>)
    62ba:	4a06      	ldr	r2, [pc, #24]	; (62d4 <_ZN7RTCZero10RTCdisableEv+0x28>)
    62bc:	811a      	strh	r2, [r3, #8]
	RTC->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;			// clear interrupt flag
    62be:	819a      	strh	r2, [r3, #12]
	RTC->MODE2.CTRLA.reg &= ~RTC_MODE2_CTRLA_ENABLE;			// disable RTC
    62c0:	881a      	ldrh	r2, [r3, #0]
    62c2:	438a      	bics	r2, r1
    62c4:	801a      	strh	r2, [r3, #0]
	
	while (is_rtc_syncbusy())
    62c6:	f7ff ff89 	bl	61dc <_ZL15is_rtc_syncbusyv>
    62ca:	2800      	cmp	r0, #0
    62cc:	d1fb      	bne.n	62c6 <_ZN7RTCZero10RTCdisableEv+0x1a>
	{
		// Wait for synchronization
	}
}
    62ce:	bd10      	pop	{r4, pc}
    62d0:	40002000 	.word	0x40002000
    62d4:	ffff81ff 	.word	0xffff81ff

000062d8 <_ZN7RTCZero9RTCenableEv>:

void RTCZero::RTCenable()
{
    62d8:	b510      	push	{r4, lr}
	while (is_rtc_syncbusy())
    62da:	f7ff ff7f 	bl	61dc <_ZL15is_rtc_syncbusyv>
    62de:	2800      	cmp	r0, #0
    62e0:	d1fb      	bne.n	62da <_ZN7RTCZero9RTCenableEv+0x2>
	{
		// Wait for synchronization
	}
	
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_ENABLE;			// enable RTC
    62e2:	2302      	movs	r3, #2
    62e4:	4a04      	ldr	r2, [pc, #16]	; (62f8 <_ZN7RTCZero9RTCenableEv+0x20>)
    62e6:	8811      	ldrh	r1, [r2, #0]
    62e8:	430b      	orrs	r3, r1
    62ea:	8013      	strh	r3, [r2, #0]
	
	while (is_rtc_syncbusy())
    62ec:	f7ff ff76 	bl	61dc <_ZL15is_rtc_syncbusyv>
    62f0:	2800      	cmp	r0, #0
    62f2:	d1fb      	bne.n	62ec <_ZN7RTCZero9RTCenableEv+0x14>
	{
		// Wait for synchronization
	}
}
    62f4:	bd10      	pop	{r4, pc}
    62f6:	46c0      	nop			; (mov r8, r8)
    62f8:	40002000 	.word	0x40002000

000062fc <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>:
{
    62fc:	b570      	push	{r4, r5, r6, lr}
    62fe:	0005      	movs	r5, r0
	uint32_t register_value = rtc_time_to_register_value(time);
    6300:	f7ff ffa6 	bl	6250 <_ZN7RTCZero26rtc_time_to_register_valueEP18rtc_clockreg_value>
    6304:	0006      	movs	r6, r0
	while (is_rtc_syncbusy())
    6306:	f7ff ff69 	bl	61dc <_ZL15is_rtc_syncbusyv>
    630a:	2800      	cmp	r0, #0
    630c:	d1fb      	bne.n	6306 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0xa>
	RTC->MODE2.CLOCK.reg = register_value;
    630e:	4c0b      	ldr	r4, [pc, #44]	; (633c <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x40>)
	RTCdisable();
    6310:	0028      	movs	r0, r5
    6312:	f7ff ffcb 	bl	62ac <_ZN7RTCZero10RTCdisableEv>
	RTC->MODE2.CLOCK.reg = register_value;
    6316:	61a6      	str	r6, [r4, #24]
	while (is_rtc_syncbusy())
    6318:	f7ff ff60 	bl	61dc <_ZL15is_rtc_syncbusyv>
    631c:	2800      	cmp	r0, #0
    631e:	d1fb      	bne.n	6318 <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x1c>
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_SYNCBUSY_CLOCKSYNC;
    6320:	2280      	movs	r2, #128	; 0x80
    6322:	8823      	ldrh	r3, [r4, #0]
    6324:	0212      	lsls	r2, r2, #8
    6326:	4313      	orrs	r3, r2
    6328:	8023      	strh	r3, [r4, #0]
	while (is_rtc_syncbusy())
    632a:	f7ff ff57 	bl	61dc <_ZL15is_rtc_syncbusyv>
    632e:	2800      	cmp	r0, #0
    6330:	d1fb      	bne.n	632a <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value+0x2e>
	RTCenable();
    6332:	0028      	movs	r0, r5
    6334:	f7ff ffd0 	bl	62d8 <_ZN7RTCZero9RTCenableEv>
}
    6338:	bd70      	pop	{r4, r5, r6, pc}
    633a:	46c0      	nop			; (mov r8, r8)
    633c:	40002000 	.word	0x40002000

00006340 <_ZN7RTCZero8setEpochEm>:
{
    6340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	time_t etime = epoch;
    6342:	4b0e      	ldr	r3, [pc, #56]	; (637c <_ZN7RTCZero8setEpochEm+0x3c>)
{
    6344:	0004      	movs	r4, r0
	time_t etime = epoch;
    6346:	4299      	cmp	r1, r3
    6348:	d200      	bcs.n	634c <_ZN7RTCZero8setEpochEm+0xc>
    634a:	0019      	movs	r1, r3
	struct tm* tmp = gmtime(&etime);
    634c:	a801      	add	r0, sp, #4
	time_t etime = epoch;
    634e:	9101      	str	r1, [sp, #4]
	struct tm* tmp = gmtime(&etime);
    6350:	f005 fdca 	bl	bee8 <gmtime>
	time.day    = tmp->tm_mday;
    6354:	7b03      	ldrb	r3, [r0, #12]
    6356:	a902      	add	r1, sp, #8
    6358:	70cb      	strb	r3, [r1, #3]
	time.month  = tmp->tm_mon + 1;
    635a:	6903      	ldr	r3, [r0, #16]
	time.year   = tmp->tm_year + 1900;		// Years since 2000
    635c:	4a08      	ldr	r2, [pc, #32]	; (6380 <_ZN7RTCZero8setEpochEm+0x40>)
	time.month  = tmp->tm_mon + 1;
    635e:	3301      	adds	r3, #1
    6360:	710b      	strb	r3, [r1, #4]
	time.year   = tmp->tm_year + 1900;		// Years since 2000
    6362:	6943      	ldr	r3, [r0, #20]
    6364:	189b      	adds	r3, r3, r2
    6366:	80cb      	strh	r3, [r1, #6]
	time.hour   = tmp->tm_hour;
    6368:	7a03      	ldrb	r3, [r0, #8]
    636a:	708b      	strb	r3, [r1, #2]
	time.minute = tmp->tm_min;
    636c:	7903      	ldrb	r3, [r0, #4]
    636e:	704b      	strb	r3, [r1, #1]
	time.second = tmp->tm_sec;
    6370:	6803      	ldr	r3, [r0, #0]
	rtc_set_time(&time);
    6372:	0020      	movs	r0, r4
	time.second = tmp->tm_sec;
    6374:	700b      	strb	r3, [r1, #0]
	rtc_set_time(&time);
    6376:	f7ff ffc1 	bl	62fc <_ZN7RTCZero12rtc_set_timeEP18rtc_clockreg_value>
}
    637a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    637c:	386d4380 	.word	0x386d4380
    6380:	0000076c 	.word	0x0000076c

00006384 <_ZN7RTCZero8RTCresetEv>:

void RTCZero::RTCreset()
{
    6384:	b510      	push	{r4, lr}
	RTCdisable();
    6386:	f7ff ff91 	bl	62ac <_ZN7RTCZero10RTCdisableEv>
	
	while (is_rtc_syncbusy())
    638a:	f7ff ff27 	bl	61dc <_ZL15is_rtc_syncbusyv>
    638e:	2800      	cmp	r0, #0
    6390:	d1fb      	bne.n	638a <_ZN7RTCZero8RTCresetEv+0x6>
	{
		// Wait for synchronization
	}
	
	RTC->MODE2.CTRLA.reg |= RTC_MODE2_CTRLA_SWRST;			// software reset
    6392:	2301      	movs	r3, #1
    6394:	4a04      	ldr	r2, [pc, #16]	; (63a8 <_ZN7RTCZero8RTCresetEv+0x24>)
    6396:	8811      	ldrh	r1, [r2, #0]
    6398:	430b      	orrs	r3, r1
    639a:	8013      	strh	r3, [r2, #0]
	
	while (is_rtc_syncbusy())
    639c:	f7ff ff1e 	bl	61dc <_ZL15is_rtc_syncbusyv>
    63a0:	2800      	cmp	r0, #0
    63a2:	d1fb      	bne.n	639c <_ZN7RTCZero8RTCresetEv+0x18>
	{
		// Wait for synchronization
	}
}
    63a4:	bd10      	pop	{r4, pc}
    63a6:	46c0      	nop			; (mov r8, r8)
    63a8:	40002000 	.word	0x40002000

000063ac <_ZN7RTCZero5beginEv>:
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    63ac:	2380      	movs	r3, #128	; 0x80
{
    63ae:	b510      	push	{r4, lr}
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    63b0:	4a09      	ldr	r2, [pc, #36]	; (63d8 <_ZN7RTCZero5beginEv+0x2c>)
    63b2:	005b      	lsls	r3, r3, #1
    63b4:	6951      	ldr	r1, [r2, #20]
{
    63b6:	0004      	movs	r4, r0
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_RTC;				// turn on digital interface clock
    63b8:	430b      	orrs	r3, r1
    63ba:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = OSC32KCTRL_RTCCTRL_RTCSEL_XOSC1K;
    63bc:	2204      	movs	r2, #4
    63be:	4b07      	ldr	r3, [pc, #28]	; (63dc <_ZN7RTCZero5beginEv+0x30>)
    63c0:	611a      	str	r2, [r3, #16]
	RTCreset();
    63c2:	f7ff ffdf 	bl	6384 <_ZN7RTCZero8RTCresetEv>
	RTC->MODE2.CTRLA.reg = tmp_reg;
    63c6:	4a06      	ldr	r2, [pc, #24]	; (63e0 <_ZN7RTCZero5beginEv+0x34>)
    63c8:	4b06      	ldr	r3, [pc, #24]	; (63e4 <_ZN7RTCZero5beginEv+0x38>)
	RTCenable();
    63ca:	0020      	movs	r0, r4
	RTC->MODE2.CTRLA.reg = tmp_reg;
    63cc:	801a      	strh	r2, [r3, #0]
	RTCenable();
    63ce:	f7ff ff83 	bl	62d8 <_ZN7RTCZero9RTCenableEv>
	_configured = true;
    63d2:	2301      	movs	r3, #1
    63d4:	7023      	strb	r3, [r4, #0]
}
    63d6:	bd10      	pop	{r4, pc}
    63d8:	40000400 	.word	0x40000400
    63dc:	40001000 	.word	0x40001000
    63e0:	ffff8b08 	.word	0xffff8b08
    63e4:	40002000 	.word	0x40002000

000063e8 <_ZN7RTCZero8getEpochEv>:
{
    63e8:	b530      	push	{r4, r5, lr}
	if (temp100 == 0) {
    63ea:	4c13      	ldr	r4, [pc, #76]	; (6438 <_ZN7RTCZero8getEpochEv+0x50>)
{
    63ec:	b08d      	sub	sp, #52	; 0x34
	if (temp100 == 0) {
    63ee:	6823      	ldr	r3, [r4, #0]
{
    63f0:	0005      	movs	r5, r0
	if (temp100 == 0) {
    63f2:	2b00      	cmp	r3, #0
    63f4:	d103      	bne.n	63fe <_ZN7RTCZero8getEpochEv+0x16>
		begin();
    63f6:	f7ff ffd9 	bl	63ac <_ZN7RTCZero5beginEv>
		temp100 = 1;
    63fa:	2301      	movs	r3, #1
    63fc:	6023      	str	r3, [r4, #0]
	uint32_t register_value = rtc_get_time();
    63fe:	0028      	movs	r0, r5
    6400:	f7ff fef8 	bl	61f4 <_ZN7RTCZero12rtc_get_timeEv>
	rtc_register_value_to_time(register_value, &time);
    6404:	ac01      	add	r4, sp, #4
	uint32_t register_value = rtc_get_time();
    6406:	0001      	movs	r1, r0
	rtc_register_value_to_time(register_value, &time);
    6408:	0022      	movs	r2, r4
    640a:	0028      	movs	r0, r5
    640c:	f7ff ff36 	bl	627c <_ZN7RTCZero26rtc_register_value_to_timeEmP18rtc_clockreg_value>
	tm.tm_year = time.year - 1900;		// Years since 1900
    6410:	88e3      	ldrh	r3, [r4, #6]
    6412:	4a0a      	ldr	r2, [pc, #40]	; (643c <_ZN7RTCZero8getEpochEv+0x54>)
	uint32_t epoch = mktime(&tm);
    6414:	a803      	add	r0, sp, #12
	tm.tm_year = time.year - 1900;		// Years since 1900
    6416:	189b      	adds	r3, r3, r2
    6418:	9308      	str	r3, [sp, #32]
	tm.tm_mon  = time.month - 1;
    641a:	7923      	ldrb	r3, [r4, #4]
    641c:	3b01      	subs	r3, #1
    641e:	9307      	str	r3, [sp, #28]
	tm.tm_mday = time.day;
    6420:	78e3      	ldrb	r3, [r4, #3]
    6422:	9306      	str	r3, [sp, #24]
	tm.tm_hour = time.hour;
    6424:	78a3      	ldrb	r3, [r4, #2]
    6426:	9305      	str	r3, [sp, #20]
	tm.tm_min  = time.minute;
    6428:	7863      	ldrb	r3, [r4, #1]
    642a:	9304      	str	r3, [sp, #16]
	tm.tm_sec  = time.second;
    642c:	7823      	ldrb	r3, [r4, #0]
    642e:	9303      	str	r3, [sp, #12]
	uint32_t epoch = mktime(&tm);
    6430:	f005 ff84 	bl	c33c <mktime>
}
    6434:	b00d      	add	sp, #52	; 0x34
    6436:	bd30      	pop	{r4, r5, pc}
    6438:	200015e4 	.word	0x200015e4
    643c:	fffff894 	.word	0xfffff894

00006440 <_ZN8SPIFlashC1EhP8SPIClass>:
  cs_mask = digitalPinToBitMask(csPin);
  pinMode(csPin, OUTPUT);
  CHIP_DESELECT
}
#elif defined (ARDUINO_ARCH_SAMD) || defined (ARCH_STM32) || defined(ARDUINO_ARCH_ESP32)
SPIFlash::SPIFlash(uint8_t cs, SPIClass *spiinterface) {
    6440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      this->clockFreq = (clock >= (F_CPU / SPI_MIN_CLOCK_DIVIDER) ? F_CPU / SPI_MIN_CLOCK_DIVIDER : clock);
    6442:	4b25      	ldr	r3, [pc, #148]	; (64d8 <_ZN8SPIFlashC1EhP8SPIClass+0x98>)
    6444:	0016      	movs	r6, r2
  // Object declaration for the GPIO HAL type for csPin - @boseji <salearj@hotmail.com> 02.03.17
  gpio_t      csPin;
  #endif

  // Variables specific to using non-standard SPI (currently only tested with ESP32)
  struct _SPIPins {
    6446:	22ff      	movs	r2, #255	; 0xff
    6448:	6003      	str	r3, [r0, #0]
    this->bitOrder = (bitOrder == MSBFIRST ? MSB_FIRST : LSB_FIRST);
    644a:	2300      	movs	r3, #0
    644c:	000d      	movs	r5, r1
    644e:	2152      	movs	r1, #82	; 0x52
    6450:	7442      	strb	r2, [r0, #17]
    6452:	7482      	strb	r2, [r0, #18]
    6454:	74c2      	strb	r2, [r0, #19]
    6456:	7502      	strb	r2, [r0, #20]
    6458:	1c42      	adds	r2, r0, #1
    645a:	7143      	strb	r3, [r0, #5]
        this->dataMode = SERCOM_SPI_MODE_0; break;
    645c:	7103      	strb	r3, [r0, #4]
    645e:	7203      	strb	r3, [r0, #8]
    6460:	7743      	strb	r3, [r0, #29]
    6462:	7783      	strb	r3, [r0, #30]
    6464:	77c3      	strb	r3, [r0, #31]
    6466:	77d3      	strb	r3, [r2, #31]
    6468:	322a      	adds	r2, #42	; 0x2a
    646a:	7011      	strb	r1, [r2, #0]
    646c:	3105      	adds	r1, #5
    646e:	7051      	strb	r1, [r2, #1]
    6470:	2200      	movs	r2, #0
    6472:	0004      	movs	r4, r0
    6474:	4f19      	ldr	r7, [pc, #100]	; (64dc <_ZN8SPIFlashC1EhP8SPIClass+0x9c>)
    6476:	6783      	str	r3, [r0, #120]	; 0x78
    6478:	67c3      	str	r3, [r0, #124]	; 0x7c
    647a:	6302      	str	r2, [r0, #48]	; 0x30
    647c:	0039      	movs	r1, r7
    647e:	2212      	movs	r2, #18
    6480:	309c      	adds	r0, #156	; 0x9c
    6482:	f005 fe6c 	bl	c15e <memcpy>
    6486:	0020      	movs	r0, r4
    6488:	0039      	movs	r1, r7
    648a:	2248      	movs	r2, #72	; 0x48
    648c:	3114      	adds	r1, #20
    648e:	30b0      	adds	r0, #176	; 0xb0
    6490:	f005 fe65 	bl	c15e <memcpy>
    6494:	0020      	movs	r0, r4
    6496:	0039      	movs	r1, r7
    6498:	2209      	movs	r2, #9
    649a:	315c      	adds	r1, #92	; 0x5c
    649c:	30f8      	adds	r0, #248	; 0xf8
    649e:	f005 fe5e 	bl	c15e <memcpy>
    64a2:	0039      	movs	r1, r7
    64a4:	1ca0      	adds	r0, r4, #2
    64a6:	3165      	adds	r1, #101	; 0x65
    64a8:	30ff      	adds	r0, #255	; 0xff
    64aa:	2203      	movs	r2, #3
    64ac:	f005 fe57 	bl	c15e <memcpy>
  _spi = spiinterface;  //Sets SPI interface - if no user selection is made, this defaults to SPI
  if (_spi == &SPI) {
    64b0:	4b0b      	ldr	r3, [pc, #44]	; (64e0 <_ZN8SPIFlashC1EhP8SPIClass+0xa0>)
  _spi = spiinterface;  //Sets SPI interface - if no user selection is made, this defaults to SPI
    64b2:	60e6      	str	r6, [r4, #12]
  if (_spi == &SPI) {
    64b4:	429e      	cmp	r6, r3
    64b6:	d10c      	bne.n	64d2 <_ZN8SPIFlashC1EhP8SPIClass+0x92>
    _SPIInUse = STDSPI;
    64b8:	230a      	movs	r3, #10
  }
  else {
    _SPIInUse = ALTSPI;
  }
  csPin = cs;
  pinMode(csPin, OUTPUT);
    64ba:	0028      	movs	r0, r5
    _SPIInUse = ALTSPI;
    64bc:	7563      	strb	r3, [r4, #21]
  csPin = cs;
    64be:	7425      	strb	r5, [r4, #16]
  pinMode(csPin, OUTPUT);
    64c0:	2101      	movs	r1, #1
    64c2:	f7fd ff3d 	bl	4340 <pinMode>
  CHIP_DESELECT
    64c6:	7c20      	ldrb	r0, [r4, #16]
    64c8:	2101      	movs	r1, #1
    64ca:	f7fd ff3d 	bl	4348 <digitalWrite>
}
    64ce:	0020      	movs	r0, r4
    64d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _SPIInUse = ALTSPI;
    64d2:	230b      	movs	r3, #11
    64d4:	e7f1      	b.n	64ba <_ZN8SPIFlashC1EhP8SPIClass+0x7a>
    64d6:	46c0      	nop			; (mov r8, r8)
    64d8:	003d0900 	.word	0x003d0900
    64dc:	0001095c 	.word	0x0001095c
    64e0:	20000bcc 	.word	0x20000bcc

000064e4 <_ZN8SPIFlash5beginEm>:
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
//     Public functions used for read, write and erase operations     //
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//Identifies chip and establishes parameters
bool SPIFlash::begin(uint32_t flashChipSize) {
    64e4:	b570      	push	{r4, r5, r6, lr}
#endif
#ifdef HIGHSPEED
  Serial.println(F("Highspeed mode initiated."));
  Serial.println();
#endif
  if (_SPIInUse == ALTSPI) {
    64e6:	7d43      	ldrb	r3, [r0, #21]
bool SPIFlash::begin(uint32_t flashChipSize) {
    64e8:	0004      	movs	r4, r0
    64ea:	000d      	movs	r5, r1
  if (_SPIInUse == ALTSPI) {
    64ec:	2b0b      	cmp	r3, #11
    64ee:	d002      	beq.n	64f6 <_ZN8SPIFlash5beginEm+0x12>
    #if defined (ARDUINO_ARCH_ESP32)
    SPI.begin(_nonStdSPI.sck, _nonStdSPI.miso, _nonStdSPI.mosi, _nonStdSPI.ss);
    #endif
  }
  else {
    BEGIN_SPI
    64f0:	68c0      	ldr	r0, [r0, #12]
    64f2:	f7fe f9cb 	bl	488c <_ZN8SPIClass5beginEv>
  }

#ifdef SPI_HAS_TRANSACTION
  //Define the settings to be used by the SPI bus
  if (!_SPISettingsSet) {
    64f6:	7a23      	ldrb	r3, [r4, #8]
    64f8:	2b00      	cmp	r3, #0
    64fa:	d107      	bne.n	650c <_ZN8SPIFlash5beginEm+0x28>
    _settings = SPISettings(SPI_CLK, MSBFIRST, SPI_MODE0);
    64fc:	221b      	movs	r2, #27
    64fe:	7062      	strb	r2, [r4, #1]
    6500:	3a64      	subs	r2, #100	; 0x64
    6502:	7023      	strb	r3, [r4, #0]
    6504:	70a2      	strb	r2, [r4, #2]
    6506:	70e3      	strb	r3, [r4, #3]
    6508:	7123      	strb	r3, [r4, #4]
    650a:	7163      	strb	r3, [r4, #5]
#else
  if (!_clockdiv) {
    _clockdiv = SPI_CLOCK_DIV2;
  }
#endif
  bool retVal = _chipID(flashChipSize);
    650c:	0029      	movs	r1, r5
    650e:	0020      	movs	r0, r4
    6510:	f000 fbe4 	bl	6cdc <_ZN8SPIFlash7_chipIDEm>
    6514:	0005      	movs	r5, r0
  _endSPI();
    6516:	0020      	movs	r0, r4
    6518:	f000 faa0 	bl	6a5c <_ZN8SPIFlash7_endSPIEv>
  chipPoweredDown = false;
    651c:	2300      	movs	r3, #0
  _disableGlobalBlockProtect();
    651e:	0020      	movs	r0, r4
  chipPoweredDown = false;
    6520:	77a3      	strb	r3, [r4, #30]
  _disableGlobalBlockProtect();
    6522:	f000 fb95 	bl	6c50 <_ZN8SPIFlash26_disableGlobalBlockProtectEv>
  return retVal;
}
    6526:	0028      	movs	r0, r5
    6528:	bd70      	pop	{r4, r5, r6, pc}
	...

0000652c <_ZN8SPIFlash5errorEb>:
void SPIFlash::setClock(uint8_t clockdiv) {
  _clockdiv = clockdiv;
}
#endif

uint8_t SPIFlash::error(bool _verbosity) {
    652c:	b510      	push	{r4, lr}
    652e:	4c05      	ldr	r4, [pc, #20]	; (6544 <_ZN8SPIFlash5errorEb+0x18>)
  if (!_verbosity) {
    6530:	2900      	cmp	r1, #0
    6532:	d101      	bne.n	6538 <_ZN8SPIFlash5errorEb+0xc>
    return diagnostics.errorcode;
  }
  else {
    _troubleshoot(diagnostics.errorcode, PRINTOVERRIDE);
    return diagnostics.errorcode;
    6534:	7820      	ldrb	r0, [r4, #0]
  }
}
    6536:	bd10      	pop	{r4, pc}
    _troubleshoot(diagnostics.errorcode, PRINTOVERRIDE);
    6538:	7821      	ldrb	r1, [r4, #0]
    653a:	2201      	movs	r2, #1
    653c:	f000 fc6e 	bl	6e1c <_ZN8SPIFlash13_troubleshootEhb>
    6540:	e7f8      	b.n	6534 <_ZN8SPIFlash5errorEb+0x8>
    6542:	46c0      	nop			; (mov r8, r8)
    6544:	20001d44 	.word	0x20001d44

00006548 <_ZN8SPIFlash13readByteArrayEmPhjb>:
//    1. _addr --> Any address from 0 to capacity
//    2. data_buffer --> The array of bytes to be read from the flash memory - starting at the address indicated
//    3. bufferSize --> The size of the buffer - in number of bytes.
//    4. fastRead --> defaults to false - executes _beginFastRead() if set to true

bool  SPIFlash::readByteArray(uint32_t _addr, uint8_t *data_buffer, size_t bufferSize, bool fastRead) {
    6548:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    654a:	001e      	movs	r6, r3
    654c:	ab08      	add	r3, sp, #32
    654e:	781b      	ldrb	r3, [r3, #0]
    6550:	0017      	movs	r7, r2
    6552:	9301      	str	r3, [sp, #4]
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros();
  #endif
  if (!_prep(READDATA, _addr, bufferSize)) {
    6554:	000a      	movs	r2, r1
    6556:	0033      	movs	r3, r6
    6558:	2103      	movs	r1, #3
bool  SPIFlash::readByteArray(uint32_t _addr, uint8_t *data_buffer, size_t bufferSize, bool fastRead) {
    655a:	0004      	movs	r4, r0
  if (!_prep(READDATA, _addr, bufferSize)) {
    655c:	f000 fae2 	bl	6b24 <_ZN8SPIFlash5_prepEhmm>
    6560:	1e05      	subs	r5, r0, #0
    6562:	d010      	beq.n	6586 <_ZN8SPIFlash13readByteArrayEmPhjb+0x3e>
    return false;
  }
  if(fastRead) {
    6564:	9b01      	ldr	r3, [sp, #4]
    _beginSPI(FASTREAD);
    6566:	210b      	movs	r1, #11
  if(fastRead) {
    6568:	2b00      	cmp	r3, #0
    656a:	d100      	bne.n	656e <_ZN8SPIFlash13readByteArrayEmPhjb+0x26>
  }
  else {
    _beginSPI(READDATA);
    656c:	2103      	movs	r1, #3
    656e:	0020      	movs	r0, r4
    6570:	f000 f9aa 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
  }
  _nextBuf(READDATA, &(*data_buffer), bufferSize);
    6574:	0020      	movs	r0, r4
    6576:	0033      	movs	r3, r6
    6578:	003a      	movs	r2, r7
    657a:	2103      	movs	r1, #3
    657c:	f000 f9fe 	bl	697c <_ZN8SPIFlash8_nextBufEhPhm>
  _endSPI();
    6580:	0020      	movs	r0, r4
    6582:	f000 fa6b 	bl	6a5c <_ZN8SPIFlash7_endSPIEv>
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros() - _spifuncruntime;
  #endif
	return true;
}
    6586:	0028      	movs	r0, r5
    6588:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0000658c <_ZN8SPIFlash8writeStrEmR6Stringb>:
//    1. _addr --> Any address - from 0 to capacity
//    2. data --> One String to be written to a particular location on a page
//    3. errorCheck --> Turned on by default. Checks for writing errors
// WARNING: You can only write to previously erased memory locations (see datasheet).
// Use the eraseSector()/eraseBlock32K/eraseBlock64K commands to first clear memory (write 0xFFs)
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    658c:	b5f0      	push	{r4, r5, r6, r7, lr}
    658e:	b089      	sub	sp, #36	; 0x24
    6590:	6896      	ldr	r6, [r2, #8]
    6592:	0004      	movs	r4, r0
    6594:	0010      	movs	r0, r2
  _spifuncruntime = micros();
  #endif

  uint32_t _sz = (sizeof(char)*(data.length()+1));

  char _outCharArray[_sz];
    6596:	466a      	mov	r2, sp
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    6598:	af00      	add	r7, sp, #0
    659a:	607b      	str	r3, [r7, #4]
  uint32_t _sz = (sizeof(char)*(data.length()+1));
    659c:	1c73      	adds	r3, r6, #1
    659e:	61fb      	str	r3, [r7, #28]
  char _outCharArray[_sz];
    65a0:	3307      	adds	r3, #7
    65a2:	08db      	lsrs	r3, r3, #3
    65a4:	00db      	lsls	r3, r3, #3
    65a6:	1ad3      	subs	r3, r2, r3
    65a8:	469d      	mov	sp, r3
bool SPIFlash::writeStr(uint32_t _addr, String &data, bool errorCheck) {
    65aa:	6179      	str	r1, [r7, #20]
  char _outCharArray[_sz];
    65ac:	60fb      	str	r3, [r7, #12]
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{ getBytes((unsigned char *)buf, bufsize, index); }
    65ae:	1c72      	adds	r2, r6, #1
    65b0:	2300      	movs	r3, #0
    65b2:	4669      	mov	r1, sp
    65b4:	f7ff fc83 	bl	5ebe <_ZNK6String8getBytesEPhjj>
  data.toCharArray(_outCharArray, _sz);

  if(_isChipPoweredDown() || !_addressCheck(_addr, sizeof(_sz)) || !_notPrevWritten(_addr, sizeof(_sz)+_sz) || !_notBusy() || !_writeEnable()) {
    65b8:	0020      	movs	r0, r4
    65ba:	f000 fa61 	bl	6a80 <_ZN8SPIFlash18_isChipPoweredDownEv>
    65be:	1e05      	subs	r5, r0, #0
    65c0:	d002      	beq.n	65c8 <_ZN8SPIFlash8writeStrEmR6Stringb+0x3c>
    return false;
    65c2:	2300      	movs	r3, #0
    65c4:	61bb      	str	r3, [r7, #24]
    65c6:	e074      	b.n	66b2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x126>
  if(_isChipPoweredDown() || !_addressCheck(_addr, sizeof(_sz)) || !_notPrevWritten(_addr, sizeof(_sz)+_sz) || !_notBusy() || !_writeEnable()) {
    65c8:	2204      	movs	r2, #4
    65ca:	6979      	ldr	r1, [r7, #20]
    65cc:	0020      	movs	r0, r4
    65ce:	f000 f92f 	bl	6830 <_ZN8SPIFlash13_addressCheckEmm>
    65d2:	2800      	cmp	r0, #0
    65d4:	d0f5      	beq.n	65c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    65d6:	1d72      	adds	r2, r6, #5
    65d8:	6979      	ldr	r1, [r7, #20]
    65da:	0020      	movs	r0, r4
    65dc:	f000 f9a4 	bl	6928 <_ZN8SPIFlash15_notPrevWrittenEmm>
    65e0:	2800      	cmp	r0, #0
    65e2:	d0ee      	beq.n	65c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    65e4:	497c      	ldr	r1, [pc, #496]	; (67d8 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    65e6:	0020      	movs	r0, r4
    65e8:	f000 fa58 	bl	6a9c <_ZN8SPIFlash8_notBusyEm>
    65ec:	2800      	cmp	r0, #0
    65ee:	d0e8      	beq.n	65c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    65f0:	2101      	movs	r1, #1
    65f2:	0020      	movs	r0, r4
    65f4:	f000 fa78 	bl	6ae8 <_ZN8SPIFlash12_writeEnableEb>
    65f8:	2800      	cmp	r0, #0
    65fa:	d0e2      	beq.n	65c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
  }

  _beginSPI(PAGEPROG);
    65fc:	2102      	movs	r1, #2
    65fe:	0020      	movs	r0, r4
    6600:	f000 f962 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
  for (uint8_t i = 0; i < sizeof(_sz); i++) {
    _nextByte(WRITE, _sz >> (8*i));
    6604:	69fa      	ldr	r2, [r7, #28]
    6606:	0026      	movs	r6, r4
    6608:	40ea      	lsrs	r2, r5
    660a:	362c      	adds	r6, #44	; 0x2c
    660c:	b2d2      	uxtb	r2, r2
    660e:	7831      	ldrb	r1, [r6, #0]
    6610:	0020      	movs	r0, r4
    6612:	3508      	adds	r5, #8
    6614:	f000 f9ac 	bl	6970 <_ZN8SPIFlash9_nextByteEch>
  for (uint8_t i = 0; i < sizeof(_sz); i++) {
    6618:	2d20      	cmp	r5, #32
    661a:	d1f3      	bne.n	6604 <_ZN8SPIFlash8writeStrEmR6Stringb+0x78>
  }
  CHIP_DESELECT
    661c:	2101      	movs	r1, #1
    661e:	7c20      	ldrb	r0, [r4, #16]
    6620:	f7fd fe92 	bl	4348 <digitalWrite>
  _endSPI();
    6624:	0020      	movs	r0, r4
    6626:	f000 fa19 	bl	6a5c <_ZN8SPIFlash7_endSPIEv>

  if(!_addressCheck(_addr+sizeof(_sz), _sz) || !_notBusy() || !_writeEnable()) {
    662a:	697b      	ldr	r3, [r7, #20]
    662c:	69fa      	ldr	r2, [r7, #28]
    662e:	3304      	adds	r3, #4
    6630:	0019      	movs	r1, r3
    6632:	0020      	movs	r0, r4
    6634:	60bb      	str	r3, [r7, #8]
    6636:	f000 f8fb 	bl	6830 <_ZN8SPIFlash13_addressCheckEmm>
    663a:	2800      	cmp	r0, #0
    663c:	d0c1      	beq.n	65c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    663e:	4966      	ldr	r1, [pc, #408]	; (67d8 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    6640:	0020      	movs	r0, r4
    6642:	f000 fa2b 	bl	6a9c <_ZN8SPIFlash8_notBusyEm>
    6646:	2800      	cmp	r0, #0
    6648:	d0bb      	beq.n	65c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    664a:	2101      	movs	r1, #1
    664c:	0020      	movs	r0, r4
    664e:	f000 fa4b 	bl	6ae8 <_ZN8SPIFlash12_writeEnableEb>
    6652:	61b8      	str	r0, [r7, #24]
    6654:	2800      	cmp	r0, #0
    6656:	d0b4      	beq.n	65c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    return false;
  }
  uint16_t maxBytes = SPI_PAGESIZE-(_addr % SPI_PAGESIZE);  // Force the first set of bytes to stay within the first page
    6658:	2580      	movs	r5, #128	; 0x80
    665a:	7d3b      	ldrb	r3, [r7, #20]
    665c:	006d      	lsls	r5, r5, #1
    665e:	1aed      	subs	r5, r5, r3

  if (_sz <= maxBytes) {
    6660:	69fb      	ldr	r3, [r7, #28]
  uint16_t maxBytes = SPI_PAGESIZE-(_addr % SPI_PAGESIZE);  // Force the first set of bytes to stay within the first page
    6662:	b2ad      	uxth	r5, r5
  if (_sz <= maxBytes) {
    6664:	42ab      	cmp	r3, r5
    6666:	d828      	bhi.n	66ba <_ZN8SPIFlash8writeStrEmR6Stringb+0x12e>
    CHIP_SELECT
    6668:	7c20      	ldrb	r0, [r4, #16]
    666a:	2100      	movs	r1, #0
    666c:	f7fd fe6c 	bl	4348 <digitalWrite>
    _nextByte(WRITE, PAGEPROG);
    6670:	7831      	ldrb	r1, [r6, #0]
    6672:	2202      	movs	r2, #2
    6674:	0020      	movs	r0, r4
    6676:	f000 f97b 	bl	6970 <_ZN8SPIFlash9_nextByteEch>
    _transferAddress();
    667a:	0020      	movs	r0, r4
    667c:	f000 f8fc 	bl	6878 <_ZN8SPIFlash16_transferAddressEv>
    //_nextBuf(PAGEPROG, &_outCharArray[0], _sz);
    for (uint16_t i = 0; i < _sz; ++i) {
    6680:	2500      	movs	r5, #0
    6682:	69fb      	ldr	r3, [r7, #28]
    6684:	42ab      	cmp	r3, r5
    6686:	d90a      	bls.n	669e <_ZN8SPIFlash8writeStrEmR6Stringb+0x112>
      _nextByte(WRITE, _outCharArray[i]);
    6688:	68fb      	ldr	r3, [r7, #12]
    668a:	0020      	movs	r0, r4
    668c:	5d5a      	ldrb	r2, [r3, r5]
    668e:	0023      	movs	r3, r4
    6690:	332c      	adds	r3, #44	; 0x2c
    6692:	7819      	ldrb	r1, [r3, #0]
    for (uint16_t i = 0; i < _sz; ++i) {
    6694:	3501      	adds	r5, #1
      _nextByte(WRITE, _outCharArray[i]);
    6696:	f000 f96b 	bl	6970 <_ZN8SPIFlash9_nextByteEch>
    for (uint16_t i = 0; i < _sz; ++i) {
    669a:	b2ad      	uxth	r5, r5
    669c:	e7f1      	b.n	6682 <_ZN8SPIFlash8writeStrEmR6Stringb+0xf6>
    }
    CHIP_DESELECT
    669e:	7c20      	ldrb	r0, [r4, #16]
    66a0:	2101      	movs	r1, #1
    66a2:	f7fd fe51 	bl	4348 <digitalWrite>
      }

    } while (length > 0);
  }

  if (!errorCheck) {
    66a6:	687b      	ldr	r3, [r7, #4]
    66a8:	2b00      	cmp	r3, #0
    66aa:	d14f      	bne.n	674c <_ZN8SPIFlash8writeStrEmR6Stringb+0x1c0>
    _endSPI();
    66ac:	0020      	movs	r0, r4
    66ae:	f000 f9d5 	bl	6a5c <_ZN8SPIFlash7_endSPIEv>
    #ifdef RUNDIAGNOSTIC
      _spifuncruntime = micros() - _spifuncruntime;
    #endif
  }
  return true;
}
    66b2:	46bd      	mov	sp, r7
    66b4:	69b8      	ldr	r0, [r7, #24]
    66b6:	b009      	add	sp, #36	; 0x24
    66b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t length = _sz;
    66ba:	8bbb      	ldrh	r3, [r7, #28]
    66bc:	617b      	str	r3, [r7, #20]
    uint16_t data_offset = 0;
    66be:	2300      	movs	r3, #0
    66c0:	613b      	str	r3, [r7, #16]
      writeBufSz = (length<=maxBytes) ? length : maxBytes;
    66c2:	697b      	ldr	r3, [r7, #20]
    66c4:	42ab      	cmp	r3, r5
    66c6:	dc00      	bgt.n	66ca <_ZN8SPIFlash8writeStrEmR6Stringb+0x13e>
    66c8:	001d      	movs	r5, r3
      CHIP_SELECT
    66ca:	7c20      	ldrb	r0, [r4, #16]
    66cc:	2100      	movs	r1, #0
    66ce:	f7fd fe3b 	bl	4348 <digitalWrite>
      _nextByte(WRITE, PAGEPROG);
    66d2:	0023      	movs	r3, r4
    66d4:	332c      	adds	r3, #44	; 0x2c
    66d6:	7819      	ldrb	r1, [r3, #0]
    66d8:	2202      	movs	r2, #2
    66da:	0020      	movs	r0, r4
    66dc:	f000 f948 	bl	6970 <_ZN8SPIFlash9_nextByteEch>
      _transferAddress();
    66e0:	0020      	movs	r0, r4
    66e2:	f000 f8c9 	bl	6878 <_ZN8SPIFlash16_transferAddressEv>
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    66e6:	2600      	movs	r6, #0
    66e8:	42ae      	cmp	r6, r5
    66ea:	da0c      	bge.n	6706 <_ZN8SPIFlash8writeStrEmR6Stringb+0x17a>
        _nextByte(WRITE, _outCharArray[data_offset + i]);
    66ec:	693a      	ldr	r2, [r7, #16]
    66ee:	68fb      	ldr	r3, [r7, #12]
    66f0:	0020      	movs	r0, r4
    66f2:	189b      	adds	r3, r3, r2
    66f4:	5d9a      	ldrb	r2, [r3, r6]
    66f6:	0023      	movs	r3, r4
    66f8:	332c      	adds	r3, #44	; 0x2c
    66fa:	7819      	ldrb	r1, [r3, #0]
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    66fc:	3601      	adds	r6, #1
        _nextByte(WRITE, _outCharArray[data_offset + i]);
    66fe:	f000 f937 	bl	6970 <_ZN8SPIFlash9_nextByteEch>
      for (uint16_t i = 0; i < writeBufSz; ++i) {
    6702:	b2b6      	uxth	r6, r6
    6704:	e7f0      	b.n	66e8 <_ZN8SPIFlash8writeStrEmR6Stringb+0x15c>
      CHIP_DESELECT
    6706:	7c20      	ldrb	r0, [r4, #16]
    6708:	2101      	movs	r1, #1
    670a:	f7fd fe1d 	bl	4348 <digitalWrite>
      _currentAddress += writeBufSz;
    670e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      if(!_notBusy() || !_writeEnable()){
    6710:	4931      	ldr	r1, [pc, #196]	; (67d8 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
      _currentAddress += writeBufSz;
    6712:	195b      	adds	r3, r3, r5
    6714:	67a3      	str	r3, [r4, #120]	; 0x78
      data_offset += writeBufSz;
    6716:	693b      	ldr	r3, [r7, #16]
      if(!_notBusy() || !_writeEnable()){
    6718:	0020      	movs	r0, r4
      data_offset += writeBufSz;
    671a:	195b      	adds	r3, r3, r5
    671c:	b29b      	uxth	r3, r3
    671e:	613b      	str	r3, [r7, #16]
      length -= writeBufSz;
    6720:	697b      	ldr	r3, [r7, #20]
    6722:	1b5d      	subs	r5, r3, r5
    6724:	b2ab      	uxth	r3, r5
    6726:	617b      	str	r3, [r7, #20]
      if(!_notBusy() || !_writeEnable()){
    6728:	f000 f9b8 	bl	6a9c <_ZN8SPIFlash8_notBusyEm>
    672c:	2800      	cmp	r0, #0
    672e:	d100      	bne.n	6732 <_ZN8SPIFlash8writeStrEmR6Stringb+0x1a6>
    6730:	e747      	b.n	65c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    6732:	2101      	movs	r1, #1
    6734:	0020      	movs	r0, r4
    6736:	f000 f9d7 	bl	6ae8 <_ZN8SPIFlash12_writeEnableEb>
    673a:	2800      	cmp	r0, #0
    673c:	d100      	bne.n	6740 <_ZN8SPIFlash8writeStrEmR6Stringb+0x1b4>
    673e:	e740      	b.n	65c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
      maxBytes = 256;   // Now we can do up to 256 bytes per loop
    6740:	2580      	movs	r5, #128	; 0x80
    } while (length > 0);
    6742:	697b      	ldr	r3, [r7, #20]
      maxBytes = 256;   // Now we can do up to 256 bytes per loop
    6744:	006d      	lsls	r5, r5, #1
    } while (length > 0);
    6746:	2b00      	cmp	r3, #0
    6748:	d1bb      	bne.n	66c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x136>
    674a:	e7ac      	b.n	66a6 <_ZN8SPIFlash8writeStrEmR6Stringb+0x11a>
    }
    674c:	466b      	mov	r3, sp
    if (!_notBusy()) {
    674e:	4922      	ldr	r1, [pc, #136]	; (67d8 <_ZN8SPIFlash8writeStrEmR6Stringb+0x24c>)
    6750:	0020      	movs	r0, r4
    }
    6752:	617b      	str	r3, [r7, #20]
    if (!_notBusy()) {
    6754:	f000 f9a2 	bl	6a9c <_ZN8SPIFlash8_notBusyEm>
    6758:	61b8      	str	r0, [r7, #24]
    675a:	2800      	cmp	r0, #0
    675c:	d038      	beq.n	67d0 <_ZN8SPIFlash8writeStrEmR6Stringb+0x244>
    char _inCharArray[_sz];
    675e:	466a      	mov	r2, sp
    _currentAddress = (_addr + sizeof(_sz));
    6760:	68bb      	ldr	r3, [r7, #8]
    CHIP_SELECT
    6762:	7c20      	ldrb	r0, [r4, #16]
    _currentAddress = (_addr + sizeof(_sz));
    6764:	67a3      	str	r3, [r4, #120]	; 0x78
    char _inCharArray[_sz];
    6766:	69fb      	ldr	r3, [r7, #28]
    CHIP_SELECT
    6768:	2100      	movs	r1, #0
    char _inCharArray[_sz];
    676a:	3307      	adds	r3, #7
    676c:	08db      	lsrs	r3, r3, #3
    676e:	00db      	lsls	r3, r3, #3
    6770:	1ad3      	subs	r3, r2, r3
    6772:	469d      	mov	sp, r3
    CHIP_SELECT
    6774:	f7fd fde8 	bl	4348 <digitalWrite>
    _nextByte(WRITE, READDATA);
    6778:	0023      	movs	r3, r4
    677a:	332c      	adds	r3, #44	; 0x2c
    677c:	7819      	ldrb	r1, [r3, #0]
    677e:	2203      	movs	r2, #3
    6780:	0020      	movs	r0, r4
    6782:	f000 f8f5 	bl	6970 <_ZN8SPIFlash9_nextByteEch>
    _transferAddress();
    6786:	0020      	movs	r0, r4
    char _inCharArray[_sz];
    6788:	466e      	mov	r6, sp
    _transferAddress();
    678a:	f000 f875 	bl	6878 <_ZN8SPIFlash16_transferAddressEv>
    for (uint8_t i = 0; i < _sz; i++) {
    678e:	2500      	movs	r5, #0
    6790:	69fb      	ldr	r3, [r7, #28]
    6792:	42ab      	cmp	r3, r5
    6794:	d90a      	bls.n	67ac <_ZN8SPIFlash8writeStrEmR6Stringb+0x220>
      _inCharArray[i] = _nextByte(READ);
    6796:	0023      	movs	r3, r4
    6798:	332b      	adds	r3, #43	; 0x2b
    679a:	7819      	ldrb	r1, [r3, #0]
    679c:	2200      	movs	r2, #0
    679e:	0020      	movs	r0, r4
    67a0:	f000 f8e6 	bl	6970 <_ZN8SPIFlash9_nextByteEch>
    67a4:	5570      	strb	r0, [r6, r5]
    for (uint8_t i = 0; i < _sz; i++) {
    67a6:	3501      	adds	r5, #1
    67a8:	b2ed      	uxtb	r5, r5
    67aa:	e7f1      	b.n	6790 <_ZN8SPIFlash8writeStrEmR6Stringb+0x204>
    _endSPI();
    67ac:	0020      	movs	r0, r4
    67ae:	f000 f955 	bl	6a5c <_ZN8SPIFlash7_endSPIEv>
    for (uint8_t i = 0; i < _sz; i++) {
    67b2:	2300      	movs	r3, #0
    67b4:	69fa      	ldr	r2, [r7, #28]
    67b6:	429a      	cmp	r2, r3
    67b8:	d907      	bls.n	67ca <_ZN8SPIFlash8writeStrEmR6Stringb+0x23e>
      if (_inCharArray[i] != _outCharArray[i]) {
    67ba:	68fa      	ldr	r2, [r7, #12]
    67bc:	5cf1      	ldrb	r1, [r6, r3]
    67be:	5cd2      	ldrb	r2, [r2, r3]
    67c0:	4291      	cmp	r1, r2
    67c2:	d105      	bne.n	67d0 <_ZN8SPIFlash8writeStrEmR6Stringb+0x244>
    for (uint8_t i = 0; i < _sz; i++) {
    67c4:	3301      	adds	r3, #1
    67c6:	b2db      	uxtb	r3, r3
    67c8:	e7f4      	b.n	67b4 <_ZN8SPIFlash8writeStrEmR6Stringb+0x228>
    67ca:	697b      	ldr	r3, [r7, #20]
    67cc:	469d      	mov	sp, r3
  return true;
    67ce:	e770      	b.n	66b2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x126>
    67d0:	697b      	ldr	r3, [r7, #20]
    67d2:	469d      	mov	sp, r3
    67d4:	e6f5      	b.n	65c2 <_ZN8SPIFlash8writeStrEmR6Stringb+0x36>
    67d6:	46c0      	nop			; (mov r8, r8)
    67d8:	3b9aca00 	.word	0x3b9aca00

000067dc <_ZN8SPIFlash13eraseBlock64KEm>:
}

// Erases one 64k block.
//  Takes an address as the argument and erases the block containing the address.
bool SPIFlash::eraseBlock64K(uint32_t _addr) {
  if (!kb64Erase.supported) {
    67dc:	0003      	movs	r3, r0
bool SPIFlash::eraseBlock64K(uint32_t _addr) {
    67de:	b570      	push	{r4, r5, r6, lr}
  if (!kb64Erase.supported) {
    67e0:	3354      	adds	r3, #84	; 0x54
    67e2:	781d      	ldrb	r5, [r3, #0]
bool SPIFlash::eraseBlock64K(uint32_t _addr) {
    67e4:	0004      	movs	r4, r0
    67e6:	000a      	movs	r2, r1
  if (!kb64Erase.supported) {
    67e8:	2d00      	cmp	r5, #0
    67ea:	d105      	bne.n	67f8 <_ZN8SPIFlash13eraseBlock64KEm+0x1c>
    _troubleshoot(UNSUPPORTEDFUNC);
    67ec:	002a      	movs	r2, r5
    67ee:	210c      	movs	r1, #12
    67f0:	f000 fb14 	bl	6e1c <_ZN8SPIFlash13_troubleshootEhb>
  }
  #ifdef RUNDIAGNOSTIC
    _spifuncruntime = micros() - _spifuncruntime;
  #endif
	return true;
}
    67f4:	0028      	movs	r0, r5
    67f6:	bd70      	pop	{r4, r5, r6, pc}
  if (!_prep(ERASEFUNC, _addr, KB(64))) {
    67f8:	2380      	movs	r3, #128	; 0x80
    67fa:	21ef      	movs	r1, #239	; 0xef
    67fc:	025b      	lsls	r3, r3, #9
    67fe:	f000 f991 	bl	6b24 <_ZN8SPIFlash5_prepEhmm>
    6802:	1e05      	subs	r5, r0, #0
    6804:	d0f6      	beq.n	67f4 <_ZN8SPIFlash13eraseBlock64KEm+0x18>
  _beginSPI(kb64Erase.opcode);
    6806:	0023      	movs	r3, r4
    6808:	3355      	adds	r3, #85	; 0x55
    680a:	7819      	ldrb	r1, [r3, #0]
    680c:	0020      	movs	r0, r4
    680e:	f000 f85b 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
  _endSPI();
    6812:	0020      	movs	r0, r4
    6814:	f000 f922 	bl	6a5c <_ZN8SPIFlash7_endSPIEv>
  if(!_notBusy(kb64Erase.time)) {
    6818:	6da1      	ldr	r1, [r4, #88]	; 0x58
    681a:	0020      	movs	r0, r4
    681c:	f000 f93e 	bl	6a9c <_ZN8SPIFlash8_notBusyEm>
    6820:	0005      	movs	r5, r0
    6822:	e7e7      	b.n	67f4 <_ZN8SPIFlash13eraseBlock64KEm+0x18>

00006824 <_ZN8SPIFlash9_nextByteEch.constprop.8>:
   return true;
 }
 //SPI data lines are left open until _endSPI() is called

 //Reads/Writes next byte. Call 'n' times to read/write 'n' number of bytes. Should be called after _beginSPI()
 uint8_t SPIFlash::_nextByte(char IOType, uint8_t data) {
    6824:	b510      	push	{r4, lr}
     } rxData, txData;
     txData.val = data;
     spi_transfer(txData.dataBuf, rxData.dataBuf, 1);
     return rxData.val;
   #else
     return xfer(data);
    6826:	68c0      	ldr	r0, [r0, #12]
    6828:	f7fe f878 	bl	491c <_ZN8SPIClass8transferEh>
   #endif
 #else
   return xfer(data);
 #endif
 }
    682c:	bd10      	pop	{r4, pc}
	...

00006830 <_ZN8SPIFlash13_addressCheckEmm>:
 bool SPIFlash::_addressCheck(uint32_t _addr, uint32_t size) {
    6830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6832:	000f      	movs	r7, r1
   uint8_t _errorcode = error();
    6834:	2100      	movs	r1, #0
 bool SPIFlash::_addressCheck(uint32_t _addr, uint32_t size) {
    6836:	0005      	movs	r5, r0
    6838:	0016      	movs	r6, r2
   uint8_t _errorcode = error();
    683a:	f7ff fe77 	bl	652c <_ZN8SPIFlash5errorEb>
   if (_errorcode == UNKNOWNCAP || _errorcode == NORESPONSE) {
    683e:	23f7      	movs	r3, #247	; 0xf7
    6840:	4003      	ands	r3, r0
     return false;
    6842:	2000      	movs	r0, #0
   if (_errorcode == UNKNOWNCAP || _errorcode == NORESPONSE) {
    6844:	2b03      	cmp	r3, #3
    6846:	d008      	beq.n	685a <_ZN8SPIFlash13_addressCheckEmm+0x2a>
 	if (!_chip.capacity) {
    6848:	6bec      	ldr	r4, [r5, #60]	; 0x3c
    684a:	4284      	cmp	r4, r0
    684c:	d106      	bne.n	685c <_ZN8SPIFlash13_addressCheckEmm+0x2c>
   return true;
 }

 //Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of this file.
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
   diagnostics.troubleshoot(_code, printoverride);
    684e:	4809      	ldr	r0, [pc, #36]	; (6874 <_ZN8SPIFlash13_addressCheckEmm+0x44>)
    6850:	0022      	movs	r2, r4
    6852:	2101      	movs	r1, #1
    6854:	f002 f9ec 	bl	8c30 <_ZN11Diagnostics12troubleshootEhb>
    6858:	0020      	movs	r0, r4
 }
    685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   if (_submittedAddress + size >= _chip.capacity) {
    685c:	19be      	adds	r6, r7, r6
    685e:	42b4      	cmp	r4, r6
    6860:	d804      	bhi.n	686c <_ZN8SPIFlash13_addressCheckEmm+0x3c>
     _addressOverflow = ((_submittedAddress + size) - _chip.capacity);
    6862:	1b36      	subs	r6, r6, r4
    6864:	67ee      	str	r6, [r5, #124]	; 0x7c
     _currentAddress = _addr;
    6866:	67af      	str	r7, [r5, #120]	; 0x78
     return true;				// Not at end of memory if (address < _chip.capacity)
    6868:	2001      	movs	r0, #1
    686a:	e7f6      	b.n	685a <_ZN8SPIFlash13_addressCheckEmm+0x2a>
     _addressOverflow = false;
    686c:	2300      	movs	r3, #0
    686e:	67eb      	str	r3, [r5, #124]	; 0x7c
    6870:	e7f9      	b.n	6866 <_ZN8SPIFlash13_addressCheckEmm+0x36>
    6872:	46c0      	nop			; (mov r8, r8)
    6874:	20001d44 	.word	0x20001d44

00006878 <_ZN8SPIFlash16_transferAddressEv>:
 bool SPIFlash::_transferAddress(void) {
    6878:	b510      	push	{r4, lr}
   if (address4ByteEnabled) {
    687a:	7fc3      	ldrb	r3, [r0, #31]
 bool SPIFlash::_transferAddress(void) {
    687c:	0004      	movs	r4, r0
   if (address4ByteEnabled) {
    687e:	2b00      	cmp	r3, #0
    6880:	d004      	beq.n	688c <_ZN8SPIFlash16_transferAddressEv+0x14>
     _nextByte(WRITE, Highest(_currentAddress));
    6882:	0003      	movs	r3, r0
    6884:	337b      	adds	r3, #123	; 0x7b
    6886:	7819      	ldrb	r1, [r3, #0]
    6888:	f7ff ffcc 	bl	6824 <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Higher(_currentAddress));
    688c:	0023      	movs	r3, r4
    688e:	337a      	adds	r3, #122	; 0x7a
    6890:	7819      	ldrb	r1, [r3, #0]
    6892:	0020      	movs	r0, r4
    6894:	f7ff ffc6 	bl	6824 <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Hi(_currentAddress));
    6898:	0023      	movs	r3, r4
    689a:	3379      	adds	r3, #121	; 0x79
    689c:	7819      	ldrb	r1, [r3, #0]
    689e:	0020      	movs	r0, r4
    68a0:	f7ff ffc0 	bl	6824 <_ZN8SPIFlash9_nextByteEch.constprop.8>
   _nextByte(WRITE, Lo(_currentAddress));
    68a4:	0023      	movs	r3, r4
    68a6:	3378      	adds	r3, #120	; 0x78
    68a8:	7819      	ldrb	r1, [r3, #0]
    68aa:	0020      	movs	r0, r4
    68ac:	f7ff ffba 	bl	6824 <_ZN8SPIFlash9_nextByteEch.constprop.8>
 }
    68b0:	2001      	movs	r0, #1
    68b2:	bd10      	pop	{r4, pc}

000068b4 <_ZN8SPIFlash12_startSPIBusEv>:
 bool SPIFlash::_startSPIBus(void) {
    68b4:	b510      	push	{r4, lr}
       _spi->beginTransaction(_settings);
    68b6:	6801      	ldr	r1, [r0, #0]
 bool SPIFlash::_startSPIBus(void) {
    68b8:	0004      	movs	r4, r0
       _spi->beginTransaction(_settings);
    68ba:	6842      	ldr	r2, [r0, #4]
    68bc:	68c0      	ldr	r0, [r0, #12]
    68be:	f7fd fffd 	bl	48bc <_ZN8SPIClass16beginTransactionE11SPISettings>
   SPIBusState = true;
    68c2:	2001      	movs	r0, #1
    68c4:	7760      	strb	r0, [r4, #29]
 }
    68c6:	bd10      	pop	{r4, pc}

000068c8 <_ZN8SPIFlash9_beginSPIEh>:
 bool SPIFlash::_beginSPI(uint8_t opcode) {
    68c8:	b570      	push	{r4, r5, r6, lr}
   if (!SPIBusState) {
    68ca:	7f43      	ldrb	r3, [r0, #29]
 bool SPIFlash::_beginSPI(uint8_t opcode) {
    68cc:	0004      	movs	r4, r0
    68ce:	000d      	movs	r5, r1
   if (!SPIBusState) {
    68d0:	2b00      	cmp	r3, #0
    68d2:	d101      	bne.n	68d8 <_ZN8SPIFlash9_beginSPIEh+0x10>
     _startSPIBus();
    68d4:	f7ff ffee 	bl	68b4 <_ZN8SPIFlash12_startSPIBusEv>
   CHIP_SELECT
    68d8:	7c20      	ldrb	r0, [r4, #16]
    68da:	2100      	movs	r1, #0
    68dc:	f7fd fd34 	bl	4348 <digitalWrite>
   switch (opcode) {
    68e0:	2d0b      	cmp	r5, #11
    68e2:	d015      	beq.n	6910 <_ZN8SPIFlash9_beginSPIEh+0x48>
    68e4:	d805      	bhi.n	68f2 <_ZN8SPIFlash9_beginSPIEh+0x2a>
    68e6:	2d02      	cmp	r5, #2
    68e8:	d009      	beq.n	68fe <_ZN8SPIFlash9_beginSPIEh+0x36>
    68ea:	2d03      	cmp	r5, #3
    68ec:	d007      	beq.n	68fe <_ZN8SPIFlash9_beginSPIEh+0x36>
     _nextByte(WRITE, opcode);
    68ee:	0029      	movs	r1, r5
    68f0:	e016      	b.n	6920 <_ZN8SPIFlash9_beginSPIEh+0x58>
   switch (opcode) {
    68f2:	2d52      	cmp	r5, #82	; 0x52
    68f4:	d003      	beq.n	68fe <_ZN8SPIFlash9_beginSPIEh+0x36>
    68f6:	2dd8      	cmp	r5, #216	; 0xd8
    68f8:	d001      	beq.n	68fe <_ZN8SPIFlash9_beginSPIEh+0x36>
    68fa:	2d20      	cmp	r5, #32
    68fc:	d1f7      	bne.n	68ee <_ZN8SPIFlash9_beginSPIEh+0x26>
     _nextByte(WRITE, opcode);
    68fe:	0029      	movs	r1, r5
    6900:	0020      	movs	r0, r4
    6902:	f7ff ff8f 	bl	6824 <_ZN8SPIFlash9_nextByteEch.constprop.8>
     _transferAddress();
    6906:	0020      	movs	r0, r4
    6908:	f7ff ffb6 	bl	6878 <_ZN8SPIFlash16_transferAddressEv>
 }
    690c:	2001      	movs	r0, #1
    690e:	bd70      	pop	{r4, r5, r6, pc}
     _nextByte(WRITE, opcode);
    6910:	0029      	movs	r1, r5
    6912:	0020      	movs	r0, r4
    6914:	f7ff ff86 	bl	6824 <_ZN8SPIFlash9_nextByteEch.constprop.8>
     _transferAddress();
    6918:	0020      	movs	r0, r4
    691a:	f7ff ffad 	bl	6878 <_ZN8SPIFlash16_transferAddressEv>
     _nextByte(WRITE, DUMMYBYTE);
    691e:	21ee      	movs	r1, #238	; 0xee
     _nextByte(WRITE, opcode);
    6920:	0020      	movs	r0, r4
    6922:	f7ff ff7f 	bl	6824 <_ZN8SPIFlash9_nextByteEch.constprop.8>
     break;
    6926:	e7f1      	b.n	690c <_ZN8SPIFlash9_beginSPIEh+0x44>

00006928 <_ZN8SPIFlash15_notPrevWrittenEmm>:
 bool SPIFlash::_notPrevWritten(uint32_t _addr, uint32_t size) {
    6928:	b570      	push	{r4, r5, r6, lr}
   _beginSPI(READDATA);
    692a:	2103      	movs	r1, #3
 bool SPIFlash::_notPrevWritten(uint32_t _addr, uint32_t size) {
    692c:	0004      	movs	r4, r0
    692e:	0016      	movs	r6, r2
   for (uint32_t i = 0; i < size; i++) {
    6930:	2500      	movs	r5, #0
   _beginSPI(READDATA);
    6932:	f7ff ffc9 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
   for (uint32_t i = 0; i < size; i++) {
    6936:	42b5      	cmp	r5, r6
    6938:	d012      	beq.n	6960 <_ZN8SPIFlash15_notPrevWrittenEmm+0x38>
     return xfer(data);
    693a:	2100      	movs	r1, #0
    693c:	68e0      	ldr	r0, [r4, #12]
    693e:	f7fd ffed 	bl	491c <_ZN8SPIClass8transferEh>
     if (_nextByte(READ) != 0xFF) {
    6942:	28ff      	cmp	r0, #255	; 0xff
    6944:	d00a      	beq.n	695c <_ZN8SPIFlash15_notPrevWrittenEmm+0x34>
       CHIP_DESELECT;
    6946:	7c20      	ldrb	r0, [r4, #16]
    6948:	2101      	movs	r1, #1
    694a:	f7fd fcfd 	bl	4348 <digitalWrite>
   diagnostics.troubleshoot(_code, printoverride);
    694e:	4807      	ldr	r0, [pc, #28]	; (696c <_ZN8SPIFlash15_notPrevWrittenEmm+0x44>)
    6950:	2200      	movs	r2, #0
    6952:	2107      	movs	r1, #7
    6954:	f002 f96c 	bl	8c30 <_ZN11Diagnostics12troubleshootEhb>
    6958:	2000      	movs	r0, #0
 }
    695a:	bd70      	pop	{r4, r5, r6, pc}
   for (uint32_t i = 0; i < size; i++) {
    695c:	3501      	adds	r5, #1
    695e:	e7ea      	b.n	6936 <_ZN8SPIFlash15_notPrevWrittenEmm+0xe>
   CHIP_DESELECT
    6960:	7c20      	ldrb	r0, [r4, #16]
    6962:	2101      	movs	r1, #1
    6964:	f7fd fcf0 	bl	4348 <digitalWrite>
   return true;
    6968:	2001      	movs	r0, #1
    696a:	e7f6      	b.n	695a <_ZN8SPIFlash15_notPrevWrittenEmm+0x32>
    696c:	20001d44 	.word	0x20001d44

00006970 <_ZN8SPIFlash9_nextByteEch>:
 uint8_t SPIFlash::_nextByte(char IOType, uint8_t data) {
    6970:	b510      	push	{r4, lr}
     return xfer(data);
    6972:	0011      	movs	r1, r2
    6974:	68c0      	ldr	r0, [r0, #12]
    6976:	f7fd ffd1 	bl	491c <_ZN8SPIClass8transferEh>
 }
    697a:	bd10      	pop	{r4, pc}

0000697c <_ZN8SPIFlash8_nextBufEhPhm>:
 void SPIFlash::_nextBuf(uint8_t opcode, uint8_t *data_buffer, uint32_t size) {
    697c:	b510      	push	{r4, lr}
    697e:	000c      	movs	r4, r1
    6980:	0011      	movs	r1, r2
    6982:	001a      	movs	r2, r3
   switch (opcode) {
    6984:	2c02      	cmp	r4, #2
    6986:	d001      	beq.n	698c <_ZN8SPIFlash8_nextBufEhPhm+0x10>
    6988:	2c03      	cmp	r4, #3
    698a:	d102      	bne.n	6992 <_ZN8SPIFlash8_nextBufEhPhm+0x16>
         _spi->transfer(&data_buffer[0], size);
    698c:	68c0      	ldr	r0, [r0, #12]
    698e:	f7fd ffca 	bl	4926 <_ZN8SPIClass8transferEPvj>
 }
    6992:	bd10      	pop	{r4, pc}

00006994 <_ZN8SPIFlash10_readStat1Ev>:
 uint8_t SPIFlash::_readStat1(void) {
    6994:	b570      	push	{r4, r5, r6, lr}
    6996:	0004      	movs	r4, r0
   _beginSPI(READSTAT1);
    6998:	2105      	movs	r1, #5
    699a:	f7ff ff95 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
     return xfer(data);
    699e:	2100      	movs	r1, #0
    69a0:	68e0      	ldr	r0, [r4, #12]
    69a2:	f7fd ffbb 	bl	491c <_ZN8SPIClass8transferEh>
   stat1 = _nextByte(READ);
    69a6:	1d25      	adds	r5, r4, #4
    69a8:	77e8      	strb	r0, [r5, #31]
   CHIP_DESELECT
    69aa:	7c20      	ldrb	r0, [r4, #16]
    69ac:	2101      	movs	r1, #1
    69ae:	f7fd fccb 	bl	4348 <digitalWrite>
   return stat1;
    69b2:	7fe8      	ldrb	r0, [r5, #31]
 }
    69b4:	bd70      	pop	{r4, r5, r6, pc}

000069b6 <_ZN8SPIFlash10_readStat3Ev>:
 uint8_t SPIFlash::_readStat3(void) {
    69b6:	b570      	push	{r4, r5, r6, lr}
    69b8:	0004      	movs	r4, r0
   _beginSPI(READSTAT3);
    69ba:	2115      	movs	r1, #21
    69bc:	f7ff ff84 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
     return xfer(data);
    69c0:	2100      	movs	r1, #0
    69c2:	68e0      	ldr	r0, [r4, #12]
    69c4:	f7fd ffaa 	bl	491c <_ZN8SPIClass8transferEh>
   stat3 = _nextByte(READ);
    69c8:	1da5      	adds	r5, r4, #6
    69ca:	77e8      	strb	r0, [r5, #31]
   CHIP_DESELECT
    69cc:	7c20      	ldrb	r0, [r4, #16]
    69ce:	2101      	movs	r1, #1
    69d0:	f7fd fcba 	bl	4348 <digitalWrite>
   return stat3;
    69d4:	7fe8      	ldrb	r0, [r5, #31]
 }
    69d6:	bd70      	pop	{r4, r5, r6, pc}

000069d8 <_ZN8SPIFlash22_enable4ByteAddressingEv>:
 bool SPIFlash::_enable4ByteAddressing(void) {
    69d8:	b570      	push	{r4, r5, r6, lr}
    69da:	0006      	movs	r6, r0
     return true;
    69dc:	2401      	movs	r4, #1
   if (_readStat3() & ADS) {
    69de:	f7ff ffea 	bl	69b6 <_ZN8SPIFlash10_readStat3Ev>
    69e2:	4220      	tst	r0, r4
    69e4:	d10e      	bne.n	6a04 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x2c>
   _beginSPI(ADDR4BYTE_EN);
    69e6:	21b7      	movs	r1, #183	; 0xb7
    69e8:	0030      	movs	r0, r6
    69ea:	f7ff ff6d 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    69ee:	7c30      	ldrb	r0, [r6, #16]
    69f0:	0021      	movs	r1, r4
    69f2:	f7fd fca9 	bl	4348 <digitalWrite>
   if (_readStat3() & ADS) {
    69f6:	0030      	movs	r0, r6
    69f8:	f7ff ffdd 	bl	69b6 <_ZN8SPIFlash10_readStat3Ev>
    69fc:	4020      	ands	r0, r4
    69fe:	1e05      	subs	r5, r0, #0
    6a00:	d002      	beq.n	6a08 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x30>
     address4ByteEnabled = true;
    6a02:	77f4      	strb	r4, [r6, #31]
 }
    6a04:	0020      	movs	r0, r4
    6a06:	bd70      	pop	{r4, r5, r6, pc}
   diagnostics.troubleshoot(_code, printoverride);
    6a08:	0002      	movs	r2, r0
    6a0a:	210d      	movs	r1, #13
    6a0c:	4802      	ldr	r0, [pc, #8]	; (6a18 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x40>)
    6a0e:	f002 f90f 	bl	8c30 <_ZN11Diagnostics12troubleshootEhb>
    6a12:	002c      	movs	r4, r5
    6a14:	e7f6      	b.n	6a04 <_ZN8SPIFlash22_enable4ByteAddressingEv+0x2c>
    6a16:	46c0      	nop			; (mov r8, r8)
    6a18:	20001d44 	.word	0x20001d44

00006a1c <_ZN8SPIFlash23_disable4ByteAddressingEv>:
 bool SPIFlash::_disable4ByteAddressing(void) {
    6a1c:	b570      	push	{r4, r5, r6, lr}
    6a1e:	0005      	movs	r5, r0
     return true;
    6a20:	2401      	movs	r4, #1
   if (!(_readStat3() & ADS)) {      // If 4 byte addressing is disabled (default state)
    6a22:	f7ff ffc8 	bl	69b6 <_ZN8SPIFlash10_readStat3Ev>
    6a26:	4220      	tst	r0, r4
    6a28:	d012      	beq.n	6a50 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x34>
   _beginSPI(ADDR4BYTE_DIS);
    6a2a:	21e9      	movs	r1, #233	; 0xe9
    6a2c:	0028      	movs	r0, r5
    6a2e:	f7ff ff4b 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    6a32:	7c28      	ldrb	r0, [r5, #16]
    6a34:	0021      	movs	r1, r4
    6a36:	f7fd fc87 	bl	4348 <digitalWrite>
   if (_readStat3() & ADS) {
    6a3a:	0028      	movs	r0, r5
    6a3c:	f7ff ffbb 	bl	69b6 <_ZN8SPIFlash10_readStat3Ev>
    6a40:	4020      	ands	r0, r4
    6a42:	d007      	beq.n	6a54 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x38>
   diagnostics.troubleshoot(_code, printoverride);
    6a44:	2200      	movs	r2, #0
    6a46:	210e      	movs	r1, #14
    6a48:	4803      	ldr	r0, [pc, #12]	; (6a58 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x3c>)
    6a4a:	f002 f8f1 	bl	8c30 <_ZN11Diagnostics12troubleshootEhb>
    6a4e:	2400      	movs	r4, #0
 }
    6a50:	0020      	movs	r0, r4
    6a52:	bd70      	pop	{r4, r5, r6, pc}
   address4ByteEnabled = false;
    6a54:	77e8      	strb	r0, [r5, #31]
   return true;
    6a56:	e7fb      	b.n	6a50 <_ZN8SPIFlash23_disable4ByteAddressingEv+0x34>
    6a58:	20001d44 	.word	0x20001d44

00006a5c <_ZN8SPIFlash7_endSPIEv>:
 void SPIFlash::_endSPI(void) {
    6a5c:	b510      	push	{r4, lr}
    6a5e:	0004      	movs	r4, r0
   CHIP_DESELECT
    6a60:	2101      	movs	r1, #1
    6a62:	7c00      	ldrb	r0, [r0, #16]
    6a64:	f7fd fc70 	bl	4348 <digitalWrite>
   if (address4ByteEnabled) {          // If the previous operation enabled 4-byte addressing, disable it
    6a68:	7fe3      	ldrb	r3, [r4, #31]
    6a6a:	2b00      	cmp	r3, #0
    6a6c:	d002      	beq.n	6a74 <_ZN8SPIFlash7_endSPIEv+0x18>
     _disable4ByteAddressing();
    6a6e:	0020      	movs	r0, r4
    6a70:	f7ff ffd4 	bl	6a1c <_ZN8SPIFlash23_disable4ByteAddressingEv>
     _spi->endTransaction();
    6a74:	68e0      	ldr	r0, [r4, #12]
    6a76:	f7fd ff3d 	bl	48f4 <_ZN8SPIClass14endTransactionEv>
   SPIBusState = false;
    6a7a:	2300      	movs	r3, #0
    6a7c:	7763      	strb	r3, [r4, #29]
 }
    6a7e:	bd10      	pop	{r4, pc}

00006a80 <_ZN8SPIFlash18_isChipPoweredDownEv>:
 bool SPIFlash::_isChipPoweredDown(void) {
    6a80:	b510      	push	{r4, lr}
   if (chipPoweredDown) {
    6a82:	7f84      	ldrb	r4, [r0, #30]
    6a84:	2c00      	cmp	r4, #0
    6a86:	d004      	beq.n	6a92 <_ZN8SPIFlash18_isChipPoweredDownEv+0x12>
   diagnostics.troubleshoot(_code, printoverride);
    6a88:	2200      	movs	r2, #0
    6a8a:	210f      	movs	r1, #15
    6a8c:	4802      	ldr	r0, [pc, #8]	; (6a98 <_ZN8SPIFlash18_isChipPoweredDownEv+0x18>)
    6a8e:	f002 f8cf 	bl	8c30 <_ZN11Diagnostics12troubleshootEhb>
 }
    6a92:	0020      	movs	r0, r4
    6a94:	bd10      	pop	{r4, pc}
    6a96:	46c0      	nop			; (mov r8, r8)
    6a98:	20001d44 	.word	0x20001d44

00006a9c <_ZN8SPIFlash8_notBusyEm>:
 bool SPIFlash::_notBusy(uint32_t timeout) {
    6a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a9e:	0006      	movs	r6, r0
    6aa0:	000c      	movs	r4, r1
    6aa2:	2320      	movs	r3, #32
    6aa4:	3b01      	subs	r3, #1
    6aa6:	d1fd      	bne.n	6aa4 <_ZN8SPIFlash8_notBusyEm+0x8>
   uint32_t _time = micros();
    6aa8:	f7fb fea4 	bl	27f4 <micros>
     if (!(stat1 & BUSY))
    6aac:	2701      	movs	r7, #1
   uint32_t _time = micros();
    6aae:	0005      	movs	r5, r0
     _readStat1();
    6ab0:	0030      	movs	r0, r6
    6ab2:	f7ff ff6f 	bl	6994 <_ZN8SPIFlash10_readStat1Ev>
     if (!(stat1 & BUSY))
    6ab6:	1d33      	adds	r3, r6, #4
    6ab8:	7fdb      	ldrb	r3, [r3, #31]
    6aba:	423b      	tst	r3, r7
    6abc:	d101      	bne.n	6ac2 <_ZN8SPIFlash8_notBusyEm+0x26>
       return true;
    6abe:	2001      	movs	r0, #1
 }
    6ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   } while ((micros() - _time) < timeout);
    6ac2:	f7fb fe97 	bl	27f4 <micros>
    6ac6:	1b40      	subs	r0, r0, r5
   do {
    6ac8:	42a0      	cmp	r0, r4
    6aca:	d3f1      	bcc.n	6ab0 <_ZN8SPIFlash8_notBusyEm+0x14>
   if (timeout <= (micros() - _time)) {
    6acc:	f7fb fe92 	bl	27f4 <micros>
    6ad0:	1b40      	subs	r0, r0, r5
    6ad2:	4284      	cmp	r4, r0
    6ad4:	d8f3      	bhi.n	6abe <_ZN8SPIFlash8_notBusyEm+0x22>
   diagnostics.troubleshoot(_code, printoverride);
    6ad6:	4803      	ldr	r0, [pc, #12]	; (6ae4 <_ZN8SPIFlash8_notBusyEm+0x48>)
    6ad8:	2200      	movs	r2, #0
    6ada:	2104      	movs	r1, #4
    6adc:	f002 f8a8 	bl	8c30 <_ZN11Diagnostics12troubleshootEhb>
    6ae0:	2000      	movs	r0, #0
    6ae2:	e7ed      	b.n	6ac0 <_ZN8SPIFlash8_notBusyEm+0x24>
    6ae4:	20001d44 	.word	0x20001d44

00006ae8 <_ZN8SPIFlash12_writeEnableEb>:
 bool SPIFlash::_writeEnable(bool _troubleshootEnable) {
    6ae8:	b570      	push	{r4, r5, r6, lr}
    6aea:	0004      	movs	r4, r0
    6aec:	000d      	movs	r5, r1
   _beginSPI(WRITEENABLE);
    6aee:	2106      	movs	r1, #6
    6af0:	f7ff feea 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    6af4:	7c20      	ldrb	r0, [r4, #16]
    6af6:	2101      	movs	r1, #1
    6af8:	f7fd fc26 	bl	4348 <digitalWrite>
   if (!(_readStat1() & WRTEN)) {
    6afc:	0020      	movs	r0, r4
    6afe:	f7ff ff49 	bl	6994 <_ZN8SPIFlash10_readStat1Ev>
    6b02:	2402      	movs	r4, #2
    6b04:	4004      	ands	r4, r0
    6b06:	d109      	bne.n	6b1c <_ZN8SPIFlash12_writeEnableEb+0x34>
     if (_troubleshootEnable) {
    6b08:	2d00      	cmp	r5, #0
    6b0a:	d005      	beq.n	6b18 <_ZN8SPIFlash12_writeEnableEb+0x30>
   diagnostics.troubleshoot(_code, printoverride);
    6b0c:	0022      	movs	r2, r4
    6b0e:	2106      	movs	r1, #6
    6b10:	4803      	ldr	r0, [pc, #12]	; (6b20 <_ZN8SPIFlash12_writeEnableEb+0x38>)
    6b12:	f002 f88d 	bl	8c30 <_ZN11Diagnostics12troubleshootEhb>
    6b16:	0025      	movs	r5, r4
 }
    6b18:	0028      	movs	r0, r5
    6b1a:	bd70      	pop	{r4, r5, r6, pc}
   return true;
    6b1c:	2501      	movs	r5, #1
    6b1e:	e7fb      	b.n	6b18 <_ZN8SPIFlash12_writeEnableEb+0x30>
    6b20:	20001d44 	.word	0x20001d44

00006b24 <_ZN8SPIFlash5_prepEhmm>:
 bool SPIFlash::_prep(uint8_t opcode, uint32_t _addr, uint32_t size) {
    6b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b26:	001e      	movs	r6, r3
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    6b28:	0003      	movs	r3, r0
    6b2a:	3337      	adds	r3, #55	; 0x37
    6b2c:	781b      	ldrb	r3, [r3, #0]
 bool SPIFlash::_prep(uint8_t opcode, uint32_t _addr, uint32_t size) {
    6b2e:	0004      	movs	r4, r0
    6b30:	000f      	movs	r7, r1
    6b32:	0015      	movs	r5, r2
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    6b34:	2bef      	cmp	r3, #239	; 0xef
    6b36:	d014      	beq.n	6b62 <_ZN8SPIFlash5_prepEhmm+0x3e>
   switch (opcode) {
    6b38:	2f02      	cmp	r7, #2
    6b3a:	d01b      	beq.n	6b74 <_ZN8SPIFlash5_prepEhmm+0x50>
    6b3c:	2fef      	cmp	r7, #239	; 0xef
    6b3e:	d037      	beq.n	6bb0 <_ZN8SPIFlash5_prepEhmm+0x8c>
       if (_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notBusy()) {
    6b40:	0020      	movs	r0, r4
    6b42:	f7ff ff9d 	bl	6a80 <_ZN8SPIFlash18_isChipPoweredDownEv>
    6b46:	2800      	cmp	r0, #0
    6b48:	d112      	bne.n	6b70 <_ZN8SPIFlash5_prepEhmm+0x4c>
    6b4a:	0032      	movs	r2, r6
    6b4c:	0029      	movs	r1, r5
    6b4e:	0020      	movs	r0, r4
    6b50:	f7ff fe6e 	bl	6830 <_ZN8SPIFlash13_addressCheckEmm>
    6b54:	2800      	cmp	r0, #0
    6b56:	d00b      	beq.n	6b70 <_ZN8SPIFlash5_prepEhmm+0x4c>
    6b58:	491b      	ldr	r1, [pc, #108]	; (6bc8 <_ZN8SPIFlash5_prepEhmm+0xa4>)
    6b5a:	0020      	movs	r0, r4
    6b5c:	f7ff ff9e 	bl	6a9c <_ZN8SPIFlash8_notBusyEm>
    6b60:	e007      	b.n	6b72 <_ZN8SPIFlash5_prepEhmm+0x4e>
   if (_chip.manufacturerID == WINBOND_MANID && _addr >= MB(16)) {
    6b62:	4b1a      	ldr	r3, [pc, #104]	; (6bcc <_ZN8SPIFlash5_prepEhmm+0xa8>)
    6b64:	429a      	cmp	r2, r3
    6b66:	d9e7      	bls.n	6b38 <_ZN8SPIFlash5_prepEhmm+0x14>
     if (!_enable4ByteAddressing()) {    // If unable to enable 4-byte addressing
    6b68:	f7ff ff36 	bl	69d8 <_ZN8SPIFlash22_enable4ByteAddressingEv>
    6b6c:	2800      	cmp	r0, #0
    6b6e:	d1e3      	bne.n	6b38 <_ZN8SPIFlash5_prepEhmm+0x14>
       return false;
    6b70:	2000      	movs	r0, #0
 }
    6b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       if(_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notPrevWritten(_addr, size) || !_notBusy() || !_writeEnable()) {
    6b74:	0020      	movs	r0, r4
    6b76:	f7ff ff83 	bl	6a80 <_ZN8SPIFlash18_isChipPoweredDownEv>
    6b7a:	2800      	cmp	r0, #0
    6b7c:	d1f8      	bne.n	6b70 <_ZN8SPIFlash5_prepEhmm+0x4c>
    6b7e:	0032      	movs	r2, r6
    6b80:	0029      	movs	r1, r5
    6b82:	0020      	movs	r0, r4
    6b84:	f7ff fe54 	bl	6830 <_ZN8SPIFlash13_addressCheckEmm>
    6b88:	2800      	cmp	r0, #0
    6b8a:	d0f1      	beq.n	6b70 <_ZN8SPIFlash5_prepEhmm+0x4c>
    6b8c:	0032      	movs	r2, r6
    6b8e:	0029      	movs	r1, r5
    6b90:	0020      	movs	r0, r4
    6b92:	f7ff fec9 	bl	6928 <_ZN8SPIFlash15_notPrevWrittenEmm>
     if(_isChipPoweredDown() || !_addressCheck(_addr, size) || !_notBusy() || !_writeEnable()) {
    6b96:	2800      	cmp	r0, #0
    6b98:	d0ea      	beq.n	6b70 <_ZN8SPIFlash5_prepEhmm+0x4c>
    6b9a:	490b      	ldr	r1, [pc, #44]	; (6bc8 <_ZN8SPIFlash5_prepEhmm+0xa4>)
    6b9c:	0020      	movs	r0, r4
    6b9e:	f7ff ff7d 	bl	6a9c <_ZN8SPIFlash8_notBusyEm>
    6ba2:	2800      	cmp	r0, #0
    6ba4:	d0e4      	beq.n	6b70 <_ZN8SPIFlash5_prepEhmm+0x4c>
    6ba6:	2101      	movs	r1, #1
    6ba8:	0020      	movs	r0, r4
    6baa:	f7ff ff9d 	bl	6ae8 <_ZN8SPIFlash12_writeEnableEb>
    6bae:	e7e0      	b.n	6b72 <_ZN8SPIFlash5_prepEhmm+0x4e>
    6bb0:	0020      	movs	r0, r4
    6bb2:	f7ff ff65 	bl	6a80 <_ZN8SPIFlash18_isChipPoweredDownEv>
    6bb6:	2800      	cmp	r0, #0
    6bb8:	d1da      	bne.n	6b70 <_ZN8SPIFlash5_prepEhmm+0x4c>
    6bba:	0032      	movs	r2, r6
    6bbc:	0029      	movs	r1, r5
    6bbe:	0020      	movs	r0, r4
    6bc0:	f7ff fe36 	bl	6830 <_ZN8SPIFlash13_addressCheckEmm>
    6bc4:	e7e7      	b.n	6b96 <_ZN8SPIFlash5_prepEhmm+0x72>
    6bc6:	46c0      	nop			; (mov r8, r8)
    6bc8:	3b9aca00 	.word	0x3b9aca00
    6bcc:	00ffffff 	.word	0x00ffffff

00006bd0 <_ZN8SPIFlash13_writeDisableEv>:
 bool SPIFlash::_writeDisable(void) {
    6bd0:	b510      	push	{r4, lr}
    6bd2:	0004      	movs	r4, r0
 	_beginSPI(WRITEDISABLE);
    6bd4:	2104      	movs	r1, #4
    6bd6:	f7ff fe77 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
   CHIP_DESELECT
    6bda:	7c20      	ldrb	r0, [r4, #16]
    6bdc:	2101      	movs	r1, #1
    6bde:	f7fd fbb3 	bl	4348 <digitalWrite>
 }
    6be2:	2001      	movs	r0, #1
    6be4:	bd10      	pop	{r4, pc}
	...

00006be8 <_ZN8SPIFlash11_getJedecIdEv>:
 bool SPIFlash::_getJedecId(void) {
    6be8:	b570      	push	{r4, r5, r6, lr}
   if(!_notBusy()) {
    6bea:	4917      	ldr	r1, [pc, #92]	; (6c48 <_ZN8SPIFlash11_getJedecIdEv+0x60>)
 bool SPIFlash::_getJedecId(void) {
    6bec:	0004      	movs	r4, r0
   if(!_notBusy()) {
    6bee:	f7ff ff55 	bl	6a9c <_ZN8SPIFlash8_notBusyEm>
    6bf2:	1e05      	subs	r5, r0, #0
    6bf4:	d025      	beq.n	6c42 <_ZN8SPIFlash11_getJedecIdEv+0x5a>
   _beginSPI(JEDECID);
    6bf6:	219f      	movs	r1, #159	; 0x9f
    6bf8:	0020      	movs	r0, r4
    6bfa:	f7ff fe65 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    6bfe:	0026      	movs	r6, r4
     return xfer(data);
    6c00:	2100      	movs	r1, #0
    6c02:	68e0      	ldr	r0, [r4, #12]
    6c04:	f7fd fe8a 	bl	491c <_ZN8SPIClass8transferEh>
 	_chip.manufacturerID = _nextByte(READ);		// manufacturer id
    6c08:	3637      	adds	r6, #55	; 0x37
    6c0a:	7030      	strb	r0, [r6, #0]
     return xfer(data);
    6c0c:	2100      	movs	r1, #0
    6c0e:	68e0      	ldr	r0, [r4, #12]
    6c10:	f7fd fe84 	bl	491c <_ZN8SPIClass8transferEh>
 	_chip.memoryTypeID = _nextByte(READ);		// memory type
    6c14:	0023      	movs	r3, r4
    6c16:	3338      	adds	r3, #56	; 0x38
    6c18:	7018      	strb	r0, [r3, #0]
     return xfer(data);
    6c1a:	2100      	movs	r1, #0
    6c1c:	68e0      	ldr	r0, [r4, #12]
    6c1e:	f7fd fe7d 	bl	491c <_ZN8SPIClass8transferEh>
 	_chip.capacityID = _nextByte(READ);		// capacity
    6c22:	0023      	movs	r3, r4
    6c24:	3339      	adds	r3, #57	; 0x39
    6c26:	7018      	strb	r0, [r3, #0]
   CHIP_DESELECT
    6c28:	7c20      	ldrb	r0, [r4, #16]
    6c2a:	2101      	movs	r1, #1
    6c2c:	f7fd fb8c 	bl	4348 <digitalWrite>
   if (!_chip.manufacturerID) {
    6c30:	7834      	ldrb	r4, [r6, #0]
    6c32:	2c00      	cmp	r4, #0
    6c34:	d105      	bne.n	6c42 <_ZN8SPIFlash11_getJedecIdEv+0x5a>
   diagnostics.troubleshoot(_code, printoverride);
    6c36:	0022      	movs	r2, r4
    6c38:	210b      	movs	r1, #11
    6c3a:	4804      	ldr	r0, [pc, #16]	; (6c4c <_ZN8SPIFlash11_getJedecIdEv+0x64>)
    6c3c:	f001 fff8 	bl	8c30 <_ZN11Diagnostics12troubleshootEhb>
    6c40:	0025      	movs	r5, r4
 }
    6c42:	0028      	movs	r0, r5
    6c44:	bd70      	pop	{r4, r5, r6, pc}
    6c46:	46c0      	nop			; (mov r8, r8)
    6c48:	3b9aca00 	.word	0x3b9aca00
    6c4c:	20001d44 	.word	0x20001d44

00006c50 <_ZN8SPIFlash26_disableGlobalBlockProtectEv>:
   if (_chip.memoryTypeID == SST25) {
    6c50:	0003      	movs	r3, r0
 bool SPIFlash::_disableGlobalBlockProtect(void) {
    6c52:	b570      	push	{r4, r5, r6, lr}
   if (_chip.memoryTypeID == SST25) {
    6c54:	3338      	adds	r3, #56	; 0x38
    6c56:	781b      	ldrb	r3, [r3, #0]
 bool SPIFlash::_disableGlobalBlockProtect(void) {
    6c58:	0004      	movs	r4, r0
   if (_chip.memoryTypeID == SST25) {
    6c5a:	2b25      	cmp	r3, #37	; 0x25
    6c5c:	d11c      	bne.n	6c98 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x48>
     _readStat1();
    6c5e:	f7ff fe99 	bl	6994 <_ZN8SPIFlash10_readStat1Ev>
     uint8_t _tempStat1 = stat1 & 0xC3;
    6c62:	1d23      	adds	r3, r4, #4
    6c64:	7fdd      	ldrb	r5, [r3, #31]
    6c66:	233c      	movs	r3, #60	; 0x3c
     _beginSPI(WRITESTATEN);
    6c68:	2150      	movs	r1, #80	; 0x50
    6c6a:	0020      	movs	r0, r4
     uint8_t _tempStat1 = stat1 & 0xC3;
    6c6c:	439d      	bics	r5, r3
     _beginSPI(WRITESTATEN);
    6c6e:	f7ff fe2b 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    6c72:	7c20      	ldrb	r0, [r4, #16]
    6c74:	2101      	movs	r1, #1
    6c76:	f7fd fb67 	bl	4348 <digitalWrite>
     _beginSPI(WRITESTAT1);
    6c7a:	2101      	movs	r1, #1
    6c7c:	0020      	movs	r0, r4
    6c7e:	f7ff fe23 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
     _nextByte(WRITE, _tempStat1);
    6c82:	0029      	movs	r1, r5
    6c84:	0020      	movs	r0, r4
    6c86:	f7ff fdcd 	bl	6824 <_ZN8SPIFlash9_nextByteEch.constprop.8>
     CHIP_DESELECT
    6c8a:	7c20      	ldrb	r0, [r4, #16]
    6c8c:	2101      	movs	r1, #1
    6c8e:	f7fd fb5b 	bl	4348 <digitalWrite>
   return true;
    6c92:	2501      	movs	r5, #1
 }
    6c94:	0028      	movs	r0, r5
    6c96:	bd70      	pop	{r4, r5, r6, pc}
   return true;
    6c98:	2501      	movs	r5, #1
   else if (_chip.memoryTypeID == SST26) {
    6c9a:	2b26      	cmp	r3, #38	; 0x26
    6c9c:	d1fa      	bne.n	6c94 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
     if(!_notBusy()) {
    6c9e:	490e      	ldr	r1, [pc, #56]	; (6cd8 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x88>)
    6ca0:	f7ff fefc 	bl	6a9c <_ZN8SPIFlash8_notBusyEm>
    6ca4:	1e05      	subs	r5, r0, #0
    6ca6:	d0f5      	beq.n	6c94 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
     _writeEnable();
    6ca8:	2101      	movs	r1, #1
    6caa:	0020      	movs	r0, r4
    6cac:	f7ff ff1c 	bl	6ae8 <_ZN8SPIFlash12_writeEnableEb>
    6cb0:	23a0      	movs	r3, #160	; 0xa0
    6cb2:	3b01      	subs	r3, #1
    6cb4:	d1fd      	bne.n	6cb2 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x62>
     _beginSPI(ULBPR);
    6cb6:	2198      	movs	r1, #152	; 0x98
    6cb8:	0020      	movs	r0, r4
    6cba:	f7ff fe05 	bl	68c8 <_ZN8SPIFlash9_beginSPIEh>
     CHIP_DESELECT
    6cbe:	7c20      	ldrb	r0, [r4, #16]
    6cc0:	2101      	movs	r1, #1
    6cc2:	f7fd fb41 	bl	4348 <digitalWrite>
    6cc6:	23c8      	movs	r3, #200	; 0xc8
    6cc8:	009b      	lsls	r3, r3, #2
    6cca:	3b01      	subs	r3, #1
    6ccc:	d1fd      	bne.n	6cca <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x7a>
     _writeDisable();
    6cce:	0020      	movs	r0, r4
    6cd0:	f7ff ff7e 	bl	6bd0 <_ZN8SPIFlash13_writeDisableEv>
    6cd4:	e7de      	b.n	6c94 <_ZN8SPIFlash26_disableGlobalBlockProtectEv+0x44>
    6cd6:	46c0      	nop			; (mov r8, r8)
    6cd8:	3b9aca00 	.word	0x3b9aca00

00006cdc <_ZN8SPIFlash7_chipIDEm>:
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    6cdc:	0002      	movs	r2, r0
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    6cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   kb4Erase.supported = kb32Erase.supported = kb64Erase.supported = chipErase.supported = true;
    6ce0:	2301      	movs	r3, #1
    6ce2:	3264      	adds	r2, #100	; 0x64
    6ce4:	7013      	strb	r3, [r2, #0]
    6ce6:	3a10      	subs	r2, #16
    6ce8:	7013      	strb	r3, [r2, #0]
    6cea:	3a08      	subs	r2, #8
    6cec:	7013      	strb	r3, [r2, #0]
    6cee:	3a08      	subs	r2, #8
    6cf0:	7013      	strb	r3, [r2, #0]
   kb4Erase.opcode = SECTORERASE;
    6cf2:	0003      	movs	r3, r0
    6cf4:	2220      	movs	r2, #32
    6cf6:	3345      	adds	r3, #69	; 0x45
    6cf8:	701a      	strb	r2, [r3, #0]
   kb32Erase.opcode = BLOCK32ERASE;
    6cfa:	3232      	adds	r2, #50	; 0x32
    6cfc:	721a      	strb	r2, [r3, #8]
   kb64Erase.opcode = BLOCK64ERASE;
    6cfe:	3286      	adds	r2, #134	; 0x86
    6d00:	741a      	strb	r2, [r3, #16]
   kb4Erase.time = BUSY_TIMEOUT;
    6d02:	4b41      	ldr	r3, [pc, #260]	; (6e08 <_ZN8SPIFlash7_chipIDEm+0x12c>)
   kb256Erase.supported = false;
    6d04:	2200      	movs	r2, #0
   kb4Erase.time = BUSY_TIMEOUT;
    6d06:	6483      	str	r3, [r0, #72]	; 0x48
   kb32Erase.time = kb4Erase.time * 8;
    6d08:	4b40      	ldr	r3, [pc, #256]	; (6e0c <_ZN8SPIFlash7_chipIDEm+0x130>)
   chipErase.opcode = CHIPERASE;
    6d0a:	0005      	movs	r5, r0
   kb32Erase.time = kb4Erase.time * 8;
    6d0c:	6503      	str	r3, [r0, #80]	; 0x50
   kb64Erase.time = kb32Erase.time * 4;
    6d0e:	4b40      	ldr	r3, [pc, #256]	; (6e10 <_ZN8SPIFlash7_chipIDEm+0x134>)
   chipErase.opcode = CHIPERASE;
    6d10:	3565      	adds	r5, #101	; 0x65
   kb64Erase.time = kb32Erase.time * 4;
    6d12:	6583      	str	r3, [r0, #88]	; 0x58
   kb256Erase.supported = false;
    6d14:	0003      	movs	r3, r0
    6d16:	335c      	adds	r3, #92	; 0x5c
    6d18:	701a      	strb	r2, [r3, #0]
   chipErase.opcode = CHIPERASE;
    6d1a:	2360      	movs	r3, #96	; 0x60
    6d1c:	702b      	strb	r3, [r5, #0]
   chipErase.time = kb64Erase.time * 100L;
    6d1e:	4b3d      	ldr	r3, [pc, #244]	; (6e14 <_ZN8SPIFlash7_chipIDEm+0x138>)
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    6d20:	0004      	movs	r4, r0
   chipErase.time = kb64Erase.time * 100L;
    6d22:	6683      	str	r3, [r0, #104]	; 0x68
   _pageSize = SPI_PAGESIZE;
    6d24:	0003      	movs	r3, r0
    6d26:	3201      	adds	r2, #1
    6d28:	3372      	adds	r3, #114	; 0x72
    6d2a:	32ff      	adds	r2, #255	; 0xff
    6d2c:	801a      	strh	r2, [r3, #0]
 bool SPIFlash::_chipID(uint32_t flashChipSize) {
    6d2e:	000e      	movs	r6, r1
   _getJedecId();
    6d30:	f7ff ff5a 	bl	6be8 <_ZN8SPIFlash11_getJedecIdEv>
     if (_chip.manufacturerID == _supportedManID[i]) {
    6d34:	0023      	movs	r3, r4
    6d36:	1ca2      	adds	r2, r4, #2
    6d38:	3337      	adds	r3, #55	; 0x37
    6d3a:	7819      	ldrb	r1, [r3, #0]
    6d3c:	32ff      	adds	r2, #255	; 0xff
    6d3e:	33c1      	adds	r3, #193	; 0xc1
    6d40:	7818      	ldrb	r0, [r3, #0]
    6d42:	4288      	cmp	r0, r1
    6d44:	d127      	bne.n	6d96 <_ZN8SPIFlash7_chipIDEm+0xba>
       _chip.supportedMan = true;
    6d46:	0023      	movs	r3, r4
    6d48:	2201      	movs	r2, #1
    6d4a:	3335      	adds	r3, #53	; 0x35
    6d4c:	701a      	strb	r2, [r3, #0]
     if (_chip.memoryTypeID == _altChipEraseReq[i]) {
    6d4e:	0023      	movs	r3, r4
    6d50:	0022      	movs	r2, r4
    6d52:	3338      	adds	r3, #56	; 0x38
    6d54:	32ff      	adds	r2, #255	; 0xff
    6d56:	781b      	ldrb	r3, [r3, #0]
    6d58:	7890      	ldrb	r0, [r2, #2]
    6d5a:	4298      	cmp	r0, r3
    6d5c:	d005      	beq.n	6d6a <_ZN8SPIFlash7_chipIDEm+0x8e>
    6d5e:	78d0      	ldrb	r0, [r2, #3]
    6d60:	4298      	cmp	r0, r3
    6d62:	d002      	beq.n	6d6a <_ZN8SPIFlash7_chipIDEm+0x8e>
    6d64:	7912      	ldrb	r2, [r2, #4]
    6d66:	429a      	cmp	r2, r3
    6d68:	d101      	bne.n	6d6e <_ZN8SPIFlash7_chipIDEm+0x92>
       chipErase.opcode = ALT_CHIPERASE;
    6d6a:	23c7      	movs	r3, #199	; 0xc7
    6d6c:	702b      	strb	r3, [r5, #0]
   if (_chip.supportedMan) {
    6d6e:	0023      	movs	r3, r4
    6d70:	3335      	adds	r3, #53	; 0x35
    6d72:	781d      	ldrb	r5, [r3, #0]
    6d74:	2d00      	cmp	r5, #0
    6d76:	d032      	beq.n	6dde <_ZN8SPIFlash7_chipIDEm+0x102>
    6d78:	0027      	movs	r7, r4
    6d7a:	3739      	adds	r7, #57	; 0x39
     if(_chip.manufacturerID == MACRONIX_MANID)
    6d7c:	29c2      	cmp	r1, #194	; 0xc2
    6d7e:	d111      	bne.n	6da4 <_ZN8SPIFlash7_chipIDEm+0xc8>
       switch(_chip.capacityID)
    6d80:	783b      	ldrb	r3, [r7, #0]
    6d82:	2b13      	cmp	r3, #19
    6d84:	d00b      	beq.n	6d9e <_ZN8SPIFlash7_chipIDEm+0xc2>
    6d86:	2b14      	cmp	r3, #20
    6d88:	d01b      	beq.n	6dc2 <_ZN8SPIFlash7_chipIDEm+0xe6>
   diagnostics.troubleshoot(_code, printoverride);
    6d8a:	2200      	movs	r2, #0
    6d8c:	2102      	movs	r1, #2
    6d8e:	4822      	ldr	r0, [pc, #136]	; (6e18 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    6d90:	f001 ff4e 	bl	8c30 <_ZN11Diagnostics12troubleshootEhb>
    6d94:	e006      	b.n	6da4 <_ZN8SPIFlash7_chipIDEm+0xc8>
    6d96:	3301      	adds	r3, #1
   for (uint8_t i = 0; i < sizeof(_supportedManID); i++) {
    6d98:	4293      	cmp	r3, r2
    6d9a:	d1d1      	bne.n	6d40 <_ZN8SPIFlash7_chipIDEm+0x64>
    6d9c:	e7d7      	b.n	6d4e <_ZN8SPIFlash7_chipIDEm+0x72>
         _chip.capacity = MB(4);
    6d9e:	2380      	movs	r3, #128	; 0x80
    6da0:	03db      	lsls	r3, r3, #15
         _chip.capacity = MB(8);
    6da2:	63e3      	str	r3, [r4, #60]	; 0x3c
       if (_chip.capacityID == _capID[j]) {
    6da4:	2300      	movs	r3, #0
    6da6:	783a      	ldrb	r2, [r7, #0]
    6da8:	0019      	movs	r1, r3
    6daa:	319c      	adds	r1, #156	; 0x9c
    6dac:	5c61      	ldrb	r1, [r4, r1]
    6dae:	4291      	cmp	r1, r2
    6db0:	d10a      	bne.n	6dc8 <_ZN8SPIFlash7_chipIDEm+0xec>
         _chip.capacity = (_memSize[j]);
    6db2:	332c      	adds	r3, #44	; 0x2c
    6db4:	009b      	lsls	r3, r3, #2
    6db6:	591b      	ldr	r3, [r3, r4]
         _chip.supported = true;
    6db8:	3434      	adds	r4, #52	; 0x34
         _chip.capacity = (_memSize[j]);
    6dba:	60a3      	str	r3, [r4, #8]
         _chip.supported = true;
    6dbc:	2301      	movs	r3, #1
       _chip.supported = false;
    6dbe:	7023      	strb	r3, [r4, #0]
       return true;
    6dc0:	e012      	b.n	6de8 <_ZN8SPIFlash7_chipIDEm+0x10c>
         _chip.capacity = MB(8);
    6dc2:	2380      	movs	r3, #128	; 0x80
    6dc4:	041b      	lsls	r3, r3, #16
    6dc6:	e7ec      	b.n	6da2 <_ZN8SPIFlash7_chipIDEm+0xc6>
    6dc8:	3301      	adds	r3, #1
     for (uint8_t j = 0; j < sizeof(_capID); j++) {
    6dca:	2b12      	cmp	r3, #18
    6dcc:	d1ec      	bne.n	6da8 <_ZN8SPIFlash7_chipIDEm+0xcc>
   if (!_chip.capacity) {
    6dce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6dd0:	2b00      	cmp	r3, #0
    6dd2:	d108      	bne.n	6de6 <_ZN8SPIFlash7_chipIDEm+0x10a>
     if (flashChipSize) {
    6dd4:	2e00      	cmp	r6, #0
    6dd6:	d00f      	beq.n	6df8 <_ZN8SPIFlash7_chipIDEm+0x11c>
       _chip.capacity = flashChipSize;
    6dd8:	63e6      	str	r6, [r4, #60]	; 0x3c
       _chip.supported = false;
    6dda:	3434      	adds	r4, #52	; 0x34
    6ddc:	e7ef      	b.n	6dbe <_ZN8SPIFlash7_chipIDEm+0xe2>
     if (_chip.sfdpAvailable) {
    6dde:	3436      	adds	r4, #54	; 0x36
    6de0:	7825      	ldrb	r5, [r4, #0]
    6de2:	2d00      	cmp	r5, #0
    6de4:	d002      	beq.n	6dec <_ZN8SPIFlash7_chipIDEm+0x110>
       return true;
    6de6:	2501      	movs	r5, #1
 }
    6de8:	0028      	movs	r0, r5
    6dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   diagnostics.troubleshoot(_code, printoverride);
    6dec:	002a      	movs	r2, r5
    6dee:	2102      	movs	r1, #2
    6df0:	4809      	ldr	r0, [pc, #36]	; (6e18 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    6df2:	f001 ff1d 	bl	8c30 <_ZN11Diagnostics12troubleshootEhb>
       return false;
    6df6:	e7f7      	b.n	6de8 <_ZN8SPIFlash7_chipIDEm+0x10c>
   diagnostics.troubleshoot(_code, printoverride);
    6df8:	0032      	movs	r2, r6
    6dfa:	2103      	movs	r1, #3
    6dfc:	4806      	ldr	r0, [pc, #24]	; (6e18 <_ZN8SPIFlash7_chipIDEm+0x13c>)
    6dfe:	f001 ff17 	bl	8c30 <_ZN11Diagnostics12troubleshootEhb>
       return false;
    6e02:	0035      	movs	r5, r6
    6e04:	e7f0      	b.n	6de8 <_ZN8SPIFlash7_chipIDEm+0x10c>
    6e06:	46c0      	nop			; (mov r8, r8)
    6e08:	3b9aca00 	.word	0x3b9aca00
    6e0c:	dcd65000 	.word	0xdcd65000
    6e10:	73594000 	.word	0x73594000
    6e14:	0edd0000 	.word	0x0edd0000
    6e18:	20001d44 	.word	0x20001d44

00006e1c <_ZN8SPIFlash13_troubleshootEhb>:
 void SPIFlash::_troubleshoot(uint8_t _code, bool printoverride) {
    6e1c:	b510      	push	{r4, lr}
   diagnostics.troubleshoot(_code, printoverride);
    6e1e:	4802      	ldr	r0, [pc, #8]	; (6e28 <_ZN8SPIFlash13_troubleshootEhb+0xc>)
    6e20:	f001 ff06 	bl	8c30 <_ZN11Diagnostics12troubleshootEhb>
 }
    6e24:	bd10      	pop	{r4, pc}
    6e26:	46c0      	nop			; (mov r8, r8)
    6e28:	20001d44 	.word	0x20001d44

00006e2c <_ZL15cbor_enc_lengthhP8cbor_bufm>:
}

/* Variable length encoder for integer types - UINT/NINT and ARRAY/MAP dimensions */
static int
cbor_enc_length(uint8_t major_type, struct cbor_buf * cbuf, uint32_t val)
{
    6e2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e2e:	4684      	mov	ip, r0
    6e30:	000d      	movs	r5, r1
    6e32:	9201      	str	r2, [sp, #4]
    6e34:	ba16      	rev	r6, r2
        *addnl_info = val;
    6e36:	b2d3      	uxtb	r3, r2
        retbytes = 0;
    6e38:	2400      	movs	r4, #0
    if (val <= CBOR_MJR0_THRESHOLD) {
    6e3a:	2a17      	cmp	r2, #23
    6e3c:	d90a      	bls.n	6e54 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
    } else if (val > CBOR_MJR0_THRESHOLD && val <= UINT8_MAX) {
    6e3e:	0013      	movs	r3, r2
    6e40:	3b18      	subs	r3, #24
    6e42:	2be7      	cmp	r3, #231	; 0xe7
    6e44:	d911      	bls.n	6e6a <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3e>
    } else if (val > UINT8_MAX && val <= UINT16_MAX) {
    6e46:	1e53      	subs	r3, r2, #1
    6e48:	491c      	ldr	r1, [pc, #112]	; (6ebc <_ZL15cbor_enc_lengthhP8cbor_bufm+0x90>)
    6e4a:	3bff      	subs	r3, #255	; 0xff
    6e4c:	428b      	cmp	r3, r1
    6e4e:	d80f      	bhi.n	6e70 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x44>
        *addnl_info = CBOR_ADDL_BYTE_UINT16;
    6e50:	2319      	movs	r3, #25
        retbytes = SIZE_UINT16;
    6e52:	2402      	movs	r4, #2
    int addnlBytes;
    uint8_t additionalInfo;

    addnlBytes = cbor_get_addnl_info(val, &additionalInfo);

    if ((cbuf->next + addnlBytes) > cbuf->tail) {
    6e54:	68a9      	ldr	r1, [r5, #8]
    6e56:	6868      	ldr	r0, [r5, #4]
    6e58:	190f      	adds	r7, r1, r4
    6e5a:	42b8      	cmp	r0, r7
    6e5c:	d20b      	bcs.n	6e76 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x4a>
        cbuf->err = CBOR_NO_MEM;
    6e5e:	2301      	movs	r3, #1
            break;
#endif
        default:
            /* TODO - error handling */
           cbuf->err = CBOR_INV_ADDNL_INFO;
           return CBOR_ERR;
    6e60:	2401      	movs	r4, #1
           cbuf->err = CBOR_INV_ADDNL_INFO;
    6e62:	60eb      	str	r3, [r5, #12]
           return CBOR_ERR;
    6e64:	4264      	negs	r4, r4
        }
        memcpy(cbuf->next, &val, addnlBytes);
        cbuf->next += addnlBytes;
    }
    return CBOR_OK;
}
    6e66:	0020      	movs	r0, r4
    6e68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        *addnl_info = CBOR_ADDL_BYTE_UINT8;
    6e6a:	2318      	movs	r3, #24
        retbytes = SIZE_UINT8;
    6e6c:	2401      	movs	r4, #1
    6e6e:	e7f1      	b.n	6e54 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
        *addnl_info = CBOR_ADDL_BYTE_UINT32;
    6e70:	231a      	movs	r3, #26
        retbytes = SIZE_UINT;
    6e72:	2404      	movs	r4, #4
    6e74:	e7ee      	b.n	6e54 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x28>
    *cbuf->next++ = major_type | additionalInfo;
    6e76:	4660      	mov	r0, ip
    6e78:	1c4f      	adds	r7, r1, #1
    6e7a:	4318      	orrs	r0, r3
    6e7c:	60af      	str	r7, [r5, #8]
    6e7e:	7008      	strb	r0, [r1, #0]
    if (addnlBytes) {
    6e80:	2c00      	cmp	r4, #0
    6e82:	d0f0      	beq.n	6e66 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3a>
        switch(addnlBytes) {
    6e84:	2c02      	cmp	r4, #2
    6e86:	d00e      	beq.n	6ea6 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x7a>
    6e88:	2c04      	cmp	r4, #4
    6e8a:	d015      	beq.n	6eb8 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x8c>
           cbuf->err = CBOR_INV_ADDNL_INFO;
    6e8c:	2308      	movs	r3, #8
        switch(addnlBytes) {
    6e8e:	2c01      	cmp	r4, #1
    6e90:	d1e6      	bne.n	6e60 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x34>
        memcpy(cbuf->next, &val, addnlBytes);
    6e92:	0022      	movs	r2, r4
    6e94:	a901      	add	r1, sp, #4
    6e96:	68a8      	ldr	r0, [r5, #8]
    6e98:	f005 f961 	bl	c15e <memcpy>
        cbuf->next += addnlBytes;
    6e9c:	68ab      	ldr	r3, [r5, #8]
    6e9e:	191c      	adds	r4, r3, r4
    6ea0:	60ac      	str	r4, [r5, #8]
    return CBOR_OK;
    6ea2:	2400      	movs	r4, #0
    6ea4:	e7df      	b.n	6e66 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x3a>
            val = htons(val);
    6ea6:	4906      	ldr	r1, [pc, #24]	; (6ec0 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x94>)
    6ea8:	0213      	lsls	r3, r2, #8
    6eaa:	b292      	uxth	r2, r2
    6eac:	400b      	ands	r3, r1
    6eae:	0a12      	lsrs	r2, r2, #8
    6eb0:	431a      	orrs	r2, r3
    6eb2:	b292      	uxth	r2, r2
    6eb4:	9201      	str	r2, [sp, #4]
            break;
    6eb6:	e7ec      	b.n	6e92 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x66>
            val = htonl(val);
    6eb8:	9601      	str	r6, [sp, #4]
            break;
    6eba:	e7ea      	b.n	6e92 <_ZL15cbor_enc_lengthhP8cbor_bufm+0x66>
    6ebc:	0000feff 	.word	0x0000feff
    6ec0:	00ffff00 	.word	0x00ffff00

00006ec4 <_Z13cbor_enc_initP8cbor_bufPvi>:
{
    6ec4:	b570      	push	{r4, r5, r6, lr}
    6ec6:	0005      	movs	r5, r0
    6ec8:	000c      	movs	r4, r1
    6eca:	0016      	movs	r6, r2
    memset(cbuf, 0, sizeof(struct cbor_buf));
    6ecc:	2100      	movs	r1, #0
    6ece:	2210      	movs	r2, #16
    6ed0:	f005 f960 	bl	c194 <memset>
    cbuf->head = (uint8_t*)buf;
    6ed4:	602c      	str	r4, [r5, #0]
    cbuf->next = (uint8_t*)buf;
    6ed6:	60ac      	str	r4, [r5, #8]
    cbuf->tail = cbuf->head + len;
    6ed8:	19a4      	adds	r4, r4, r6
    6eda:	606c      	str	r4, [r5, #4]
}
    6edc:	bd70      	pop	{r4, r5, r6, pc}

00006ede <_Z16cbor_buf_get_lenP8cbor_buf>:
    return cbuf->next - cbuf->head;
    6ede:	6883      	ldr	r3, [r0, #8]
    6ee0:	6800      	ldr	r0, [r0, #0]
    6ee2:	1a18      	subs	r0, r3, r0
}
    6ee4:	4770      	bx	lr

00006ee6 <_Z12cbor_enc_intP8cbor_bufi>:
 *         Error (negative values)
 */
int
cbor_enc_int(struct cbor_buf *cbuf, int val)
{
    uint8_t major_type = CBOR_TYPE_UINT;
    6ee6:	2300      	movs	r3, #0
{
    6ee8:	b510      	push	{r4, lr}
    6eea:	000a      	movs	r2, r1

    if (val < 0) {
    6eec:	4299      	cmp	r1, r3
    6eee:	da01      	bge.n	6ef4 <_Z12cbor_enc_intP8cbor_bufi+0xe>
        val = -1 - val;
    6ef0:	43ca      	mvns	r2, r1
        major_type = CBOR_TYPE_NINT;
    6ef2:	3320      	adds	r3, #32
    }

    return (cbor_enc_length(major_type, cbuf, val));
    6ef4:	0001      	movs	r1, r0
    6ef6:	0018      	movs	r0, r3
    6ef8:	f7ff ff98 	bl	6e2c <_ZL15cbor_enc_lengthhP8cbor_bufm>
}
    6efc:	bd10      	pop	{r4, pc}

00006efe <_Z13cbor_enc_textP8cbor_bufPKci>:
 * output: status of encode operation.
 */
int
cbor_enc_text(struct cbor_buf *cbuf,
                const char *inp_string, int len)
{
    6efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f00:	0004      	movs	r4, r0
    6f02:	000f      	movs	r7, r1
    int rc = CBOR_OK;
    rc = cbor_enc_length(CBOR_TYPE_TEXT, cbuf, len);
    6f04:	0001      	movs	r1, r0
    6f06:	2060      	movs	r0, #96	; 0x60
{
    6f08:	0015      	movs	r5, r2
    rc = cbor_enc_length(CBOR_TYPE_TEXT, cbuf, len);
    6f0a:	f7ff ff8f 	bl	6e2c <_ZL15cbor_enc_lengthhP8cbor_bufm>
    6f0e:	1e06      	subs	r6, r0, #0

    if (!rc) {
    6f10:	d107      	bne.n	6f22 <_Z13cbor_enc_textP8cbor_bufPKci+0x24>
        if (len > (cbuf->tail - cbuf->next)) {
    6f12:	68a0      	ldr	r0, [r4, #8]
    6f14:	6863      	ldr	r3, [r4, #4]
    6f16:	1a1b      	subs	r3, r3, r0
    6f18:	429d      	cmp	r5, r3
    6f1a:	dd04      	ble.n	6f26 <_Z13cbor_enc_textP8cbor_bufPKci+0x28>
            cbuf->err = CBOR_NO_MEM;
    6f1c:	2301      	movs	r3, #1
            rc = CBOR_ERR;
    6f1e:	3e01      	subs	r6, #1
            cbuf->err = CBOR_NO_MEM;
    6f20:	60e3      	str	r3, [r4, #12]
            memcpy(cbuf->next, inp_string, len);
            cbuf->next += len;
        }
    }
    return rc;
}
    6f22:	0030      	movs	r0, r6
    6f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            memcpy(cbuf->next, inp_string, len);
    6f26:	002a      	movs	r2, r5
    6f28:	0039      	movs	r1, r7
    6f2a:	f005 f918 	bl	c15e <memcpy>
            cbuf->next += len;
    6f2e:	68a3      	ldr	r3, [r4, #8]
    6f30:	195d      	adds	r5, r3, r5
    6f32:	60a5      	str	r5, [r4, #8]
    return rc;
    6f34:	e7f5      	b.n	6f22 <_Z13cbor_enc_textP8cbor_bufPKci+0x24>

00006f36 <_Z12cbor_enc_mapP8cbor_bufi>:
 *        num_elements -> number of elements in the map
 * output: status of encode operation.
 */
int
cbor_enc_map(struct cbor_buf *cbuf, int num_elements)
{
    6f36:	b510      	push	{r4, lr}
    6f38:	000a      	movs	r2, r1
    return(cbor_enc_length(CBOR_TYPE_MAP, cbuf, num_elements));
    6f3a:	0001      	movs	r1, r0
    6f3c:	20a0      	movs	r0, #160	; 0xa0
    6f3e:	f7ff ff75 	bl	6e2c <_ZL15cbor_enc_lengthhP8cbor_bufm>
}
    6f42:	bd10      	pop	{r4, pc}

00006f44 <_ZL8co_uint8PK5optlv>:
    const uint8_t *d = (const uint8_t *) o->ov;
    /* extending to allow parsing 16 bit content format seen on some clients */
    /* rfc7252:  A recipient MUST be prepared to process values with 
    *            leading zero bytes.
    */
    switch (o->ol) {
    6f44:	8842      	ldrh	r2, [r0, #2]
    const uint8_t *d = (const uint8_t *) o->ov;
    6f46:	6843      	ldr	r3, [r0, #4]
    switch (o->ol) {
    6f48:	2a01      	cmp	r2, #1
    6f4a:	d003      	beq.n	6f54 <_ZL8co_uint8PK5optlv+0x10>
    6f4c:	2a02      	cmp	r2, #2
    6f4e:	d003      	beq.n	6f58 <_ZL8co_uint8PK5optlv+0x14>
        case 0:     return 0;
    6f50:	2000      	movs	r0, #0
    6f52:	e000      	b.n	6f56 <_ZL8co_uint8PK5optlv+0x12>
        case 1:     return d[0];
    6f54:	7818      	ldrb	r0, [r3, #0]
        case 2:     return d[1];
        default:    return 0;
    }
}
    6f56:	4770      	bx	lr
        case 2:     return d[1];
    6f58:	7858      	ldrb	r0, [r3, #1]
    6f5a:	e7fc      	b.n	6f56 <_ZL8co_uint8PK5optlv+0x12>

00006f5c <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf>:
    error_t rc;

    ctx->msg = m;   /* save mbuf in context - free later */

    /* parse header */
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    6f5c:	223f      	movs	r2, #63	; 0x3f
{
    6f5e:	b510      	push	{r4, lr}
    ctx->msg = m;   /* save mbuf in context - free later */
    6f60:	6501      	str	r1, [r0, #80]	; 0x50
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    6f62:	790b      	ldrb	r3, [r1, #4]
        rc = ERR_VER_NOT_SUPP;
    6f64:	241d      	movs	r4, #29
    if ((b[0] & 0xC0) != 0x40) {  /* confirm version 1 */
    6f66:	4393      	bics	r3, r2
    6f68:	2b40      	cmp	r3, #64	; 0x40
    6f6a:	d116      	bne.n	6f9a <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf+0x3e>
    uint8_t *b = m->m_data;
    6f6c:	1d0b      	adds	r3, r1, #4
        goto err;
    }
   
    ctx->hdr = b;
    6f6e:	6103      	str	r3, [r0, #16]
    ctx->type = (b[0] >> 4) & 0x3;
    6f70:	790b      	ldrb	r3, [r1, #4]
    ctx->tkl  = b[0] & 0xf;
    6f72:	3a30      	subs	r2, #48	; 0x30
    ctx->type = (b[0] >> 4) & 0x3;
    6f74:	069b      	lsls	r3, r3, #26
    6f76:	0f9b      	lsrs	r3, r3, #30
    6f78:	7003      	strb	r3, [r0, #0]
    ctx->tkl  = b[0] & 0xf;
    6f7a:	790b      	ldrb	r3, [r1, #4]
    6f7c:	401a      	ands	r2, r3
    6f7e:	7042      	strb	r2, [r0, #1]
    ctx->code = b[1];
    6f80:	794b      	ldrb	r3, [r1, #5]
    6f82:	7083      	strb	r3, [r0, #2]
    ctx->mid  = (b[2] << 8) + b[3];
    6f84:	798c      	ldrb	r4, [r1, #6]
    6f86:	79cb      	ldrb	r3, [r1, #7]
    6f88:	0224      	lsls	r4, r4, #8
    6f8a:	191b      	adds	r3, r3, r4
    ctx->plen = 0;  /* Initialise */
    6f8c:	2400      	movs	r4, #0
    ctx->mid  = (b[2] << 8) + b[3];
    6f8e:	8083      	strh	r3, [r0, #4]
    ctx->plen = 0;  /* Initialise */
    6f90:	6404      	str	r4, [r0, #64]	; 0x40
    /* sanity checks 
        token length <= 8
        message length > header + token
    */

    memcpy(ctx->token, b + 4, ctx->tkl);
    6f92:	3108      	adds	r1, #8
    6f94:	3006      	adds	r0, #6
    6f96:	f005 f8e2 	bl	c15e <memcpy>

err:
    return rc;
}
    6f9a:	0020      	movs	r0, r4
    6f9c:	bd10      	pop	{r4, pc}

00006f9e <_Z13co_uint32_h2nPK5optlv.part.1>:
co_uint32_h2n(const struct optlv *o)
    6f9e:	6843      	ldr	r3, [r0, #4]
}
    6fa0:	6818      	ldr	r0, [r3, #0]
    6fa2:	ba00      	rev	r0, r0
    6fa4:	4770      	bx	lr
	...

00006fa8 <_Z12coap_con_addtP18coap_ack_cb_info_t>:
{
    6fa8:	b570      	push	{r4, r5, r6, lr}
    dlog(LOG_DEBUG, "Adding callback for MID: 0x%x\n", mid);
    6faa:	0002      	movs	r2, r0
{
    6fac:	0005      	movs	r5, r0
    6fae:	000c      	movs	r4, r1
    dlog(LOG_DEBUG, "Adding callback for MID: 0x%x\n", mid);
    6fb0:	2007      	movs	r0, #7
    6fb2:	4909      	ldr	r1, [pc, #36]	; (6fd8 <_Z12coap_con_addtP18coap_ack_cb_info_t+0x30>)
    6fb4:	f7fd fd92 	bl	4adc <_Z4dlogiPKcz>
    intrct_cb_q[intrct_cb_q_ind].mid = mid;
    6fb8:	200c      	movs	r0, #12
    6fba:	4908      	ldr	r1, [pc, #32]	; (6fdc <_Z12coap_con_addtP18coap_ack_cb_info_t+0x34>)
    6fbc:	4b08      	ldr	r3, [pc, #32]	; (6fe0 <_Z12coap_con_addtP18coap_ack_cb_info_t+0x38>)
    6fbe:	780a      	ldrb	r2, [r1, #0]
    6fc0:	4350      	muls	r0, r2
    6fc2:	52c5      	strh	r5, [r0, r3]
    intrct_cb_q[intrct_cb_q_ind].cbinfo = *cbi;
    6fc4:	181b      	adds	r3, r3, r0
    6fc6:	3304      	adds	r3, #4
    6fc8:	cc21      	ldmia	r4!, {r0, r5}
    6fca:	c321      	stmia	r3!, {r0, r5}
    intrct_cb_q_ind = (intrct_cb_q_ind + 1) % MID_CB_Q_SZ;
    6fcc:	2303      	movs	r3, #3
    6fce:	3201      	adds	r2, #1
    6fd0:	401a      	ands	r2, r3
}
    6fd2:	2000      	movs	r0, #0
    intrct_cb_q_ind = (intrct_cb_q_ind + 1) % MID_CB_Q_SZ;
    6fd4:	700a      	strb	r2, [r1, #0]
}
    6fd6:	bd70      	pop	{r4, r5, r6, pc}
    6fd8:	000109e7 	.word	0x000109e7
    6fdc:	20001720 	.word	0x20001720
    6fe0:	200016f0 	.word	0x200016f0

00006fe4 <_Z11coap_ack_rxtP4mbuf>:
{
    6fe4:	b570      	push	{r4, r5, r6, lr}
    dlog(LOG_DEBUG, "Looking up callback for MID: 0x%x\n", mid);
    6fe6:	0002      	movs	r2, r0
{
    6fe8:	0005      	movs	r5, r0
    6fea:	000c      	movs	r4, r1
    dlog(LOG_DEBUG, "Looking up callback for MID: 0x%x\n", mid);
    6fec:	2007      	movs	r0, #7
    6fee:	490c      	ldr	r1, [pc, #48]	; (7020 <_Z11coap_ack_rxtP4mbuf+0x3c>)
    6ff0:	f7fd fd74 	bl	4adc <_Z4dlogiPKcz>
    6ff4:	2200      	movs	r2, #0
    6ff6:	210c      	movs	r1, #12
        if (intrct_cb_q[i].mid == mid) {
    6ff8:	4b0a      	ldr	r3, [pc, #40]	; (7024 <_Z11coap_ack_rxtP4mbuf+0x40>)
    for (i = 0; i < MID_CB_Q_SZ; i++) {
    6ffa:	0016      	movs	r6, r2
    6ffc:	2a04      	cmp	r2, #4
    6ffe:	d00d      	beq.n	701c <_Z11coap_ack_rxtP4mbuf+0x38>
        if (intrct_cb_q[i].mid == mid) {
    7000:	0008      	movs	r0, r1
    7002:	3201      	adds	r2, #1
    7004:	4350      	muls	r0, r2
    7006:	380c      	subs	r0, #12
    7008:	5a18      	ldrh	r0, [r3, r0]
    700a:	42a8      	cmp	r0, r5
    700c:	d1f5      	bne.n	6ffa <_Z11coap_ack_rxtP4mbuf+0x16>
            return (intrct_cb_q[i].cbinfo.cb(intrct_cb_q[i].cbinfo.cbctx, m));
    700e:	4371      	muls	r1, r6
    7010:	185b      	adds	r3, r3, r1
    7012:	685a      	ldr	r2, [r3, #4]
    7014:	0021      	movs	r1, r4
    7016:	6898      	ldr	r0, [r3, #8]
    7018:	4790      	blx	r2
}
    701a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_NO_ENTRY;
    701c:	200c      	movs	r0, #12
    701e:	e7fc      	b.n	701a <_Z11coap_ack_rxtP4mbuf+0x36>
    7020:	000109c4 	.word	0x000109c4
    7024:	200016f0 	.word	0x200016f0

00007028 <_Z15coap_opt_strcmpPK5optlvPKc>:
{
    7028:	b570      	push	{r4, r5, r6, lr}
    702a:	0003      	movs	r3, r0
    702c:	000c      	movs	r4, r1
        return 1;
    702e:	2001      	movs	r0, #1
    if (!str) {
    7030:	2900      	cmp	r1, #0
    7032:	d00a      	beq.n	704a <_Z15coap_opt_strcmpPK5optlvPKc+0x22>
    diff = strncmp((char*)opt->ov, str, opt->ol);  /* option is not NUL terminated */
    7034:	885d      	ldrh	r5, [r3, #2]
    7036:	6858      	ldr	r0, [r3, #4]
    7038:	002a      	movs	r2, r5
    703a:	f006 f9de 	bl	d3fa <strncmp>
    if (diff) {
    703e:	2800      	cmp	r0, #0
    7040:	d103      	bne.n	704a <_Z15coap_opt_strcmpPK5optlvPKc+0x22>
        return (opt->ol - strlen(str));
    7042:	0020      	movs	r0, r4
    7044:	f006 f9bd 	bl	d3c2 <strlen>
    7048:	1a28      	subs	r0, r5, r0
}
    704a:	bd70      	pop	{r4, r5, r6, pc}

0000704c <_Z12coap_pathstrPK12coap_msg_ctx>:
{
    704c:	b5f0      	push	{r4, r5, r6, r7, lr}
    void *it = NULL;
    704e:	2400      	movs	r4, #0
    uristr[0] = 0;
    7050:	4d12      	ldr	r5, [pc, #72]	; (709c <_Z12coap_pathstrPK12coap_msg_ctx+0x50>)
{
    7052:	b085      	sub	sp, #20
    7054:	9001      	str	r0, [sp, #4]
    void *it = NULL;
    7056:	9403      	str	r4, [sp, #12]
    uristr[0] = 0;
    7058:	702c      	strb	r4, [r5, #0]
    while ((opt = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_PATH, &it)) != NULL)
    705a:	9801      	ldr	r0, [sp, #4]
    705c:	aa03      	add	r2, sp, #12
    705e:	210b      	movs	r1, #11
    7060:	304c      	adds	r0, #76	; 0x4c
    7062:	f000 fd0b 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7066:	1e06      	subs	r6, r0, #0
    7068:	d012      	beq.n	7090 <_Z12coap_pathstrPK12coap_msg_ctx+0x44>
        if (ul + opt->ol + 1 > (int)sizeof(uristr))
    706a:	8843      	ldrh	r3, [r0, #2]
    706c:	191b      	adds	r3, r3, r4
    706e:	2bff      	cmp	r3, #255	; 0xff
    7070:	dc11      	bgt.n	7096 <_Z12coap_pathstrPK12coap_msg_ctx+0x4a>
        uristr[ul++] = '/';
    7072:	232f      	movs	r3, #47	; 0x2f
    7074:	1c67      	adds	r7, r4, #1
    7076:	552b      	strb	r3, [r5, r4]
        memcpy(uristr + ul, opt->ov, opt->ol);
    7078:	19ec      	adds	r4, r5, r7
    707a:	8842      	ldrh	r2, [r0, #2]
    707c:	6841      	ldr	r1, [r0, #4]
    707e:	0020      	movs	r0, r4
    7080:	f005 f86d 	bl	c15e <memcpy>
        uristr[ul + opt->ol] = 0;
    7084:	2200      	movs	r2, #0
    7086:	8873      	ldrh	r3, [r6, #2]
    7088:	54e2      	strb	r2, [r4, r3]
        ul += opt->ol;
    708a:	8874      	ldrh	r4, [r6, #2]
    708c:	19e4      	adds	r4, r4, r7
    while ((opt = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_PATH, &it)) != NULL)
    708e:	e7e4      	b.n	705a <_Z12coap_pathstrPK12coap_msg_ctx+0xe>
    return uristr;
    7090:	0028      	movs	r0, r5
}
    7092:	b005      	add	sp, #20
    7094:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return NULL;
    7096:	2000      	movs	r0, #0
    7098:	e7fb      	b.n	7092 <_Z12coap_pathstrPK12coap_msg_ctx+0x46>
    709a:	46c0      	nop			; (mov r8, r8)
    709c:	200015ea 	.word	0x200015ea

000070a0 <_ZL12coap_msg_logPK12coap_msg_ctx>:
{
    70a0:	b510      	push	{r4, lr}
    70a2:	b0c0      	sub	sp, #256	; 0x100
    uriqp[0] = '\0';
    70a4:	2300      	movs	r3, #0
    70a6:	466a      	mov	r2, sp
    70a8:	7013      	strb	r3, [r2, #0]
            ctx->type == COAP_T_CONF_VAL ? "CON" : 
    70aa:	7803      	ldrb	r3, [r0, #0]
{
    70ac:	0004      	movs	r4, r0
    dlog(LOG_DEBUG, "REQ/RSP Type: %s", 
    70ae:	4a29      	ldr	r2, [pc, #164]	; (7154 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb4>)
    70b0:	2b00      	cmp	r3, #0
    70b2:	d006      	beq.n	70c2 <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    70b4:	4a28      	ldr	r2, [pc, #160]	; (7158 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb8>)
    70b6:	2b01      	cmp	r3, #1
    70b8:	d003      	beq.n	70c2 <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    70ba:	4a28      	ldr	r2, [pc, #160]	; (715c <_ZL12coap_msg_logPK12coap_msg_ctx+0xbc>)
    70bc:	2b02      	cmp	r3, #2
    70be:	d000      	beq.n	70c2 <_ZL12coap_msg_logPK12coap_msg_ctx+0x22>
    70c0:	4a27      	ldr	r2, [pc, #156]	; (7160 <_ZL12coap_msg_logPK12coap_msg_ctx+0xc0>)
            ctx->type == COAP_T_ACK_VAL ? "ACK" : "RST");
    70c2:	4928      	ldr	r1, [pc, #160]	; (7164 <_ZL12coap_msg_logPK12coap_msg_ctx+0xc4>)
    70c4:	2007      	movs	r0, #7
    70c6:	f7fd fd09 	bl	4adc <_Z4dlogiPKcz>
    if ((ctx->code & COAP_CODE_C_MASK) == COAP_CODE_REQUEST) {
    70ca:	78a3      	ldrb	r3, [r4, #2]
    70cc:	221f      	movs	r2, #31
    70ce:	0019      	movs	r1, r3
    70d0:	4391      	bics	r1, r2
    70d2:	d136      	bne.n	7142 <_ZL12coap_msg_logPK12coap_msg_ctx+0xa2>
        dlog(LOG_DEBUG, "REQ/ACK Code: %s",
    70d4:	4a24      	ldr	r2, [pc, #144]	; (7168 <_ZL12coap_msg_logPK12coap_msg_ctx+0xc8>)
    70d6:	2b01      	cmp	r3, #1
    70d8:	d009      	beq.n	70ee <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_POST ? "POST" :
    70da:	4a24      	ldr	r2, [pc, #144]	; (716c <_ZL12coap_msg_logPK12coap_msg_ctx+0xcc>)
    70dc:	2b02      	cmp	r3, #2
    70de:	d006      	beq.n	70ee <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_PUT ? "PUT" : 
    70e0:	4a23      	ldr	r2, [pc, #140]	; (7170 <_ZL12coap_msg_logPK12coap_msg_ctx+0xd0>)
    70e2:	2b03      	cmp	r3, #3
    70e4:	d003      	beq.n	70ee <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
                (ctx->code & COAP_CODE_DD_MASK) == COAP_CODE_DELETE ? 
    70e6:	4a23      	ldr	r2, [pc, #140]	; (7174 <_ZL12coap_msg_logPK12coap_msg_ctx+0xd4>)
    70e8:	2b04      	cmp	r3, #4
    70ea:	d000      	beq.n	70ee <_ZL12coap_msg_logPK12coap_msg_ctx+0x4e>
    70ec:	4a22      	ldr	r2, [pc, #136]	; (7178 <_ZL12coap_msg_logPK12coap_msg_ctx+0xd8>)
                "DELETE" : "EMPTY");
    70ee:	4923      	ldr	r1, [pc, #140]	; (717c <_ZL12coap_msg_logPK12coap_msg_ctx+0xdc>)
                    "Client Error" : "Server Error");
    70f0:	2007      	movs	r0, #7
    70f2:	f7fd fcf3 	bl	4adc <_Z4dlogiPKcz>
    substr = coap_pathstr(ctx);
    70f6:	0020      	movs	r0, r4
    70f8:	f7ff ffa8 	bl	704c <_Z12coap_pathstrPK12coap_msg_ctx>
    if (substr[0] != '\0') {
    70fc:	7803      	ldrb	r3, [r0, #0]
    substr = coap_pathstr(ctx);
    70fe:	0001      	movs	r1, r0
    if (substr[0] != '\0') {
    7100:	2b00      	cmp	r3, #0
    7102:	d002      	beq.n	710a <_ZL12coap_msg_logPK12coap_msg_ctx+0x6a>
        strcat(uriqp, substr);
    7104:	4668      	mov	r0, sp
    7106:	f006 f93d 	bl	d384 <strcat>
    if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_URI_QUERY, NULL))) {
    710a:	0020      	movs	r0, r4
    710c:	2200      	movs	r2, #0
    710e:	304c      	adds	r0, #76	; 0x4c
    7110:	210f      	movs	r1, #15
    7112:	f000 fcb3 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7116:	1e04      	subs	r4, r0, #0
    7118:	d008      	beq.n	712c <_ZL12coap_msg_logPK12coap_msg_ctx+0x8c>
        strcat(uriqp, "?");
    711a:	4919      	ldr	r1, [pc, #100]	; (7180 <_ZL12coap_msg_logPK12coap_msg_ctx+0xe0>)
    711c:	4668      	mov	r0, sp
    711e:	f006 f931 	bl	d384 <strcat>
        strncat(uriqp, (char *)op->ov, op->ol);
    7122:	8862      	ldrh	r2, [r4, #2]
    7124:	6861      	ldr	r1, [r4, #4]
    7126:	4668      	mov	r0, sp
    7128:	f006 f952 	bl	d3d0 <strncat>
    if (uriqp[0] != '\0') {
    712c:	466b      	mov	r3, sp
    712e:	781b      	ldrb	r3, [r3, #0]
    7130:	2b00      	cmp	r3, #0
    7132:	d004      	beq.n	713e <_ZL12coap_msg_logPK12coap_msg_ctx+0x9e>
        dlog(LOG_INFO, "Uri-Path-Query: %s", uriqp);
    7134:	466a      	mov	r2, sp
    7136:	4913      	ldr	r1, [pc, #76]	; (7184 <_ZL12coap_msg_logPK12coap_msg_ctx+0xe4>)
    7138:	2006      	movs	r0, #6
    713a:	f7fd fccf 	bl	4adc <_Z4dlogiPKcz>
}
    713e:	b040      	add	sp, #256	; 0x100
    7140:	bd10      	pop	{r4, pc}
        dlog(LOG_DEBUG, "RSP Code: %s",
    7142:	4a11      	ldr	r2, [pc, #68]	; (7188 <_ZL12coap_msg_logPK12coap_msg_ctx+0xe8>)
    7144:	2940      	cmp	r1, #64	; 0x40
    7146:	d003      	beq.n	7150 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb0>
    7148:	4a10      	ldr	r2, [pc, #64]	; (718c <_ZL12coap_msg_logPK12coap_msg_ctx+0xec>)
    714a:	2980      	cmp	r1, #128	; 0x80
    714c:	d000      	beq.n	7150 <_ZL12coap_msg_logPK12coap_msg_ctx+0xb0>
    714e:	4a10      	ldr	r2, [pc, #64]	; (7190 <_ZL12coap_msg_logPK12coap_msg_ctx+0xf0>)
                    "Client Error" : "Server Error");
    7150:	4910      	ldr	r1, [pc, #64]	; (7194 <_ZL12coap_msg_logPK12coap_msg_ctx+0xf4>)
    7152:	e7cd      	b.n	70f0 <_ZL12coap_msg_logPK12coap_msg_ctx+0x50>
    7154:	00010ba3 	.word	0x00010ba3
    7158:	00010b9f 	.word	0x00010b9f
    715c:	00010bab 	.word	0x00010bab
    7160:	00010ba7 	.word	0x00010ba7
    7164:	00010beb 	.word	0x00010beb
    7168:	00010bb4 	.word	0x00010bb4
    716c:	00010baf 	.word	0x00010baf
    7170:	00010bb8 	.word	0x00010bb8
    7174:	00010bc2 	.word	0x00010bc2
    7178:	00010bbc 	.word	0x00010bbc
    717c:	00010bfc 	.word	0x00010bfc
    7180:	0001052d 	.word	0x0001052d
    7184:	00010c1a 	.word	0x00010c1a
    7188:	00010bd6 	.word	0x00010bd6
    718c:	00010bde 	.word	0x00010bde
    7190:	00010bc9 	.word	0x00010bc9
    7194:	00010c0d 	.word	0x00010c0d

00007198 <_Z14coap_opt_parseP5optlvPKhi>:
{
    7198:	b570      	push	{r4, r5, r6, lr}
    719a:	260f      	movs	r6, #15
    od = b[0] >> 4;
    719c:	780b      	ldrb	r3, [r1, #0]
    719e:	111d      	asrs	r5, r3, #4
    71a0:	b2ac      	uxth	r4, r5
    71a2:	4033      	ands	r3, r6
    if (od < 13) {
    71a4:	2d0c      	cmp	r5, #12
    71a6:	dd13      	ble.n	71d0 <_Z14coap_opt_parseP5optlvPKhi+0x38>
    else if (od == 13) {
    71a8:	2d0d      	cmp	r5, #13
    71aa:	d106      	bne.n	71ba <_Z14coap_opt_parseP5optlvPKhi+0x22>
        od += b[1];
    71ac:	784c      	ldrb	r4, [r1, #1]
        i = 2;
    71ae:	3d0b      	subs	r5, #11
        od += b[1];
    71b0:	340d      	adds	r4, #13
    if (ol < 13) {
    71b2:	2b0c      	cmp	r3, #12
    71b4:	d80e      	bhi.n	71d4 <_Z14coap_opt_parseP5optlvPKhi+0x3c>
        ol = (b[i] << 8) + b[i+1] + 269;
    71b6:	b29b      	uxth	r3, r3
    71b8:	e011      	b.n	71de <_Z14coap_opt_parseP5optlvPKhi+0x46>
    else if (od == 14) {
    71ba:	2d0e      	cmp	r5, #14
    71bc:	d124      	bne.n	7208 <_Z14coap_opt_parseP5optlvPKhi+0x70>
        od = (b[1] << 8) + b[2] + 269;
    71be:	788c      	ldrb	r4, [r1, #2]
    71c0:	784d      	ldrb	r5, [r1, #1]
    71c2:	340e      	adds	r4, #14
    71c4:	022d      	lsls	r5, r5, #8
    71c6:	34ff      	adds	r4, #255	; 0xff
    71c8:	1964      	adds	r4, r4, r5
    71ca:	b2a4      	uxth	r4, r4
        i = 3;
    71cc:	2503      	movs	r5, #3
    71ce:	e7f0      	b.n	71b2 <_Z14coap_opt_parseP5optlvPKhi+0x1a>
        i = 1;
    71d0:	2501      	movs	r5, #1
    71d2:	e7ee      	b.n	71b2 <_Z14coap_opt_parseP5optlvPKhi+0x1a>
    else if (ol == 13) {
    71d4:	2b0d      	cmp	r3, #13
    71d6:	d10d      	bne.n	71f4 <_Z14coap_opt_parseP5optlvPKhi+0x5c>
        ol += b[i];
    71d8:	5d4b      	ldrb	r3, [r1, r5]
        i++;
    71da:	3501      	adds	r5, #1
        ol += b[i];
    71dc:	330d      	adds	r3, #13
    if (len < i || len < i + ol) {
    71de:	4295      	cmp	r5, r2
    71e0:	dc12      	bgt.n	7208 <_Z14coap_opt_parseP5optlvPKhi+0x70>
    71e2:	195e      	adds	r6, r3, r5
    71e4:	42b2      	cmp	r2, r6
    71e6:	db0f      	blt.n	7208 <_Z14coap_opt_parseP5optlvPKhi+0x70>
    o->ov = b + i;
    71e8:	1949      	adds	r1, r1, r5
    o->ot = od;
    71ea:	8004      	strh	r4, [r0, #0]
    o->ol = ol;
    71ec:	8043      	strh	r3, [r0, #2]
    o->ov = b + i;
    71ee:	6041      	str	r1, [r0, #4]
}
    71f0:	0030      	movs	r0, r6
    71f2:	bd70      	pop	{r4, r5, r6, pc}
    else if (od == 14) {
    71f4:	2c0e      	cmp	r4, #14
    71f6:	d107      	bne.n	7208 <_Z14coap_opt_parseP5optlvPKhi+0x70>
        ol = (b[i] << 8) + b[i+1] + 269;
    71f8:	5d4e      	ldrb	r6, [r1, r5]
    71fa:	194b      	adds	r3, r1, r5
    71fc:	785b      	ldrb	r3, [r3, #1]
    71fe:	0236      	lsls	r6, r6, #8
    7200:	199b      	adds	r3, r3, r6
    7202:	330e      	adds	r3, #14
    7204:	33ff      	adds	r3, #255	; 0xff
    7206:	e7d6      	b.n	71b6 <_Z14coap_opt_parseP5optlvPKhi+0x1e>
    return -1;
    7208:	2601      	movs	r6, #1
    720a:	4276      	negs	r6, r6
    720c:	e7f0      	b.n	71f0 <_Z14coap_opt_parseP5optlvPKhi+0x58>
	...

00007210 <_Z12coap_opt_addPK5optlvPhi>:
{
    7210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7212:	000e      	movs	r6, r1
    if ((o->ot > 255 + 13) || (o->ol > 255 + 13)) {
    7214:	2186      	movs	r1, #134	; 0x86
    7216:	8803      	ldrh	r3, [r0, #0]
{
    7218:	0005      	movs	r5, r0
    if ((o->ot > 255 + 13) || (o->ol > 255 + 13)) {
    721a:	0049      	lsls	r1, r1, #1
    721c:	428b      	cmp	r3, r1
    721e:	dc34      	bgt.n	728a <_Z12coap_opt_addPK5optlvPhi+0x7a>
    7220:	8847      	ldrh	r7, [r0, #2]
    7222:	428f      	cmp	r7, r1
    7224:	dc31      	bgt.n	728a <_Z12coap_opt_addPK5optlvPhi+0x7a>
    7226:	a901      	add	r1, sp, #4
    if (o->ot < 13) {
    7228:	2b0c      	cmp	r3, #12
    722a:	dc12      	bgt.n	7252 <_Z12coap_opt_addPK5optlvPhi+0x42>
        *op++ = o->ot << 4;
    722c:	011b      	lsls	r3, r3, #4
    722e:	700b      	strb	r3, [r1, #0]
    7230:	466b      	mov	r3, sp
    7232:	1d5c      	adds	r4, r3, #5
    if (o->ol < 13) {
    7234:	2f0c      	cmp	r7, #12
    7236:	dc13      	bgt.n	7260 <_Z12coap_opt_addPK5optlvPhi+0x50>
        oh[0] |= o->ol;
    7238:	780b      	ldrb	r3, [r1, #0]
    723a:	433b      	orrs	r3, r7
    723c:	700b      	strb	r3, [r1, #0]
    ohl = op - oh;
    723e:	1a64      	subs	r4, r4, r1
    if (ohl + o->ol > len) {
    7240:	193f      	adds	r7, r7, r4
    7242:	4297      	cmp	r7, r2
    7244:	dd15      	ble.n	7272 <_Z12coap_opt_addPK5optlvPhi+0x62>
        dlog(LOG_ERR, "Insufficient buffer space to add option\n");
    7246:	2003      	movs	r0, #3
    7248:	4911      	ldr	r1, [pc, #68]	; (7290 <_Z12coap_opt_addPK5optlvPhi+0x80>)
    724a:	f7fd fc47 	bl	4adc <_Z4dlogiPKcz>
        return 0;
    724e:	2000      	movs	r0, #0
}
    7250:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        *op++ = o->ot - 13;
    7252:	3b0d      	subs	r3, #13
        *op++ = 13 << 4;
    7254:	20d0      	movs	r0, #208	; 0xd0
        *op++ = o->ot - 13;
    7256:	704b      	strb	r3, [r1, #1]
    7258:	466b      	mov	r3, sp
        *op++ = 13 << 4;
    725a:	7008      	strb	r0, [r1, #0]
        *op++ = o->ot - 13;
    725c:	1d9c      	adds	r4, r3, #6
    725e:	e7e9      	b.n	7234 <_Z12coap_opt_addPK5optlvPhi+0x24>
        oh[0] |= 13;
    7260:	230d      	movs	r3, #13
    7262:	7808      	ldrb	r0, [r1, #0]
    7264:	4303      	orrs	r3, r0
    7266:	700b      	strb	r3, [r1, #0]
        *op++ = o->ol - 13;
    7268:	003b      	movs	r3, r7
    726a:	3b0d      	subs	r3, #13
    726c:	7023      	strb	r3, [r4, #0]
    726e:	3401      	adds	r4, #1
    7270:	e7e5      	b.n	723e <_Z12coap_opt_addPK5optlvPhi+0x2e>
    memcpy(b, oh, ohl);
    7272:	0022      	movs	r2, r4
    7274:	0030      	movs	r0, r6
    7276:	f004 ff72 	bl	c15e <memcpy>
    memmove(b + ohl, o->ov, o->ol);
    727a:	886a      	ldrh	r2, [r5, #2]
    727c:	1930      	adds	r0, r6, r4
    727e:	6869      	ldr	r1, [r5, #4]
    7280:	f004 ff76 	bl	c170 <memmove>
    return (o->ol + ohl);
    7284:	8868      	ldrh	r0, [r5, #2]
    7286:	1900      	adds	r0, r0, r4
    7288:	e7e2      	b.n	7250 <_Z12coap_opt_addPK5optlvPhi+0x40>
        return -1;
    728a:	2001      	movs	r0, #1
    728c:	4240      	negs	r0, r0
    728e:	e7df      	b.n	7250 <_Z12coap_opt_addPK5optlvPhi+0x40>
    7290:	00010a06 	.word	0x00010a06

00007294 <_Z13co_uint32_n2hPK5optlv>:
{
    7294:	b510      	push	{r4, lr}
    assert(o->ol <= sizeof(uint32_t));
    7296:	8842      	ldrh	r2, [r0, #2]
{
    7298:	0003      	movs	r3, r0
    assert(o->ol <= sizeof(uint32_t));
    729a:	2a04      	cmp	r2, #4
    729c:	d906      	bls.n	72ac <_Z13co_uint32_n2hPK5optlv+0x18>
    729e:	2120      	movs	r1, #32
    72a0:	4b14      	ldr	r3, [pc, #80]	; (72f4 <_Z13co_uint32_n2hPK5optlv+0x60>)
    72a2:	4a15      	ldr	r2, [pc, #84]	; (72f8 <_Z13co_uint32_n2hPK5optlv+0x64>)
    72a4:	31ff      	adds	r1, #255	; 0xff
    72a6:	4815      	ldr	r0, [pc, #84]	; (72fc <_Z13co_uint32_n2hPK5optlv+0x68>)
    72a8:	f004 fde2 	bl	be70 <__assert_func>
    switch (o->ol) {
    72ac:	3a01      	subs	r2, #1
    uint32_t b = 0;
    72ae:	2000      	movs	r0, #0
    switch (o->ol) {
    72b0:	2a03      	cmp	r2, #3
    72b2:	d806      	bhi.n	72c2 <_Z13co_uint32_n2hPK5optlv+0x2e>
    72b4:	0010      	movs	r0, r2
    72b6:	f002 f919 	bl	94ec <__gnu_thumb1_case_uqi>
    72ba:	0502      	.short	0x0502
    72bc:	190c      	.short	0x190c
    case 1: b = *(uint8_t *)(o->ov);
    72be:	685b      	ldr	r3, [r3, #4]
    72c0:	7818      	ldrb	r0, [r3, #0]
}
    72c2:	bd10      	pop	{r4, pc}
    case 2: b = ntohs(*(uint16_t *)(o->ov));
    72c4:	685b      	ldr	r3, [r3, #4]
    72c6:	881b      	ldrh	r3, [r3, #0]
    72c8:	0a18      	lsrs	r0, r3, #8
    72ca:	021b      	lsls	r3, r3, #8
    72cc:	4318      	orrs	r0, r3
    72ce:	b280      	uxth	r0, r0
            break;
    72d0:	e7f7      	b.n	72c2 <_Z13co_uint32_n2hPK5optlv+0x2e>
    case 3: b = ntohl(*(uint32_t *)(o->ov) << 8);
    72d2:	685b      	ldr	r3, [r3, #4]
    72d4:	490a      	ldr	r1, [pc, #40]	; (7300 <_Z13co_uint32_n2hPK5optlv+0x6c>)
    72d6:	681b      	ldr	r3, [r3, #0]
    72d8:	0218      	lsls	r0, r3, #8
    72da:	041a      	lsls	r2, r3, #16
    72dc:	400a      	ands	r2, r1
    72de:	0e00      	lsrs	r0, r0, #24
    72e0:	4310      	orrs	r0, r2
    72e2:	22ff      	movs	r2, #255	; 0xff
    72e4:	0212      	lsls	r2, r2, #8
    72e6:	4013      	ands	r3, r2
    72e8:	4318      	orrs	r0, r3
            break;
    72ea:	e7ea      	b.n	72c2 <_Z13co_uint32_n2hPK5optlv+0x2e>
    72ec:	0018      	movs	r0, r3
    72ee:	f7ff fe56 	bl	6f9e <_Z13co_uint32_h2nPK5optlv.part.1>
    72f2:	e7e6      	b.n	72c2 <_Z13co_uint32_n2hPK5optlv+0x2e>
    72f4:	00010a2f 	.word	0x00010a2f
    72f8:	00010c52 	.word	0x00010c52
    72fc:	00010a49 	.word	0x00010a49
    7300:	00ffff00 	.word	0x00ffff00

00007304 <_Z13co_uint32_h2nPK5optlv>:
{
    7304:	b510      	push	{r4, lr}
    assert(o->ol <= sizeof(uint32_t));
    7306:	8842      	ldrh	r2, [r0, #2]
{
    7308:	0003      	movs	r3, r0
    assert(o->ol <= sizeof(uint32_t));
    730a:	2a04      	cmp	r2, #4
    730c:	d906      	bls.n	731c <_Z13co_uint32_h2nPK5optlv+0x18>
    730e:	2136      	movs	r1, #54	; 0x36
    7310:	4b14      	ldr	r3, [pc, #80]	; (7364 <_Z13co_uint32_h2nPK5optlv+0x60>)
    7312:	4a15      	ldr	r2, [pc, #84]	; (7368 <_Z13co_uint32_h2nPK5optlv+0x64>)
    7314:	31ff      	adds	r1, #255	; 0xff
    7316:	4815      	ldr	r0, [pc, #84]	; (736c <_Z13co_uint32_h2nPK5optlv+0x68>)
    7318:	f004 fdaa 	bl	be70 <__assert_func>
    switch (o->ol) {
    731c:	3a01      	subs	r2, #1
    uint32_t b = 0;
    731e:	2000      	movs	r0, #0
    switch (o->ol) {
    7320:	2a03      	cmp	r2, #3
    7322:	d806      	bhi.n	7332 <_Z13co_uint32_h2nPK5optlv+0x2e>
    7324:	0010      	movs	r0, r2
    7326:	f002 f8e1 	bl	94ec <__gnu_thumb1_case_uqi>
    732a:	0502      	.short	0x0502
    732c:	190c      	.short	0x190c
    case 1: b = *(uint8_t *)(o->ov);
    732e:	685b      	ldr	r3, [r3, #4]
    7330:	7818      	ldrb	r0, [r3, #0]
}
    7332:	bd10      	pop	{r4, pc}
    case 2: b = htons(*(uint16_t *)(o->ov));
    7334:	685b      	ldr	r3, [r3, #4]
    7336:	881b      	ldrh	r3, [r3, #0]
    7338:	0a18      	lsrs	r0, r3, #8
    733a:	021b      	lsls	r3, r3, #8
    733c:	4318      	orrs	r0, r3
    733e:	b280      	uxth	r0, r0
            break;
    7340:	e7f7      	b.n	7332 <_Z13co_uint32_h2nPK5optlv+0x2e>
    case 3: b = htonl(*(uint32_t *)(o->ov) << 8);
    7342:	685b      	ldr	r3, [r3, #4]
    7344:	490a      	ldr	r1, [pc, #40]	; (7370 <_Z13co_uint32_h2nPK5optlv+0x6c>)
    7346:	681b      	ldr	r3, [r3, #0]
    7348:	0218      	lsls	r0, r3, #8
    734a:	041a      	lsls	r2, r3, #16
    734c:	400a      	ands	r2, r1
    734e:	0e00      	lsrs	r0, r0, #24
    7350:	4310      	orrs	r0, r2
    7352:	22ff      	movs	r2, #255	; 0xff
    7354:	0212      	lsls	r2, r2, #8
    7356:	4013      	ands	r3, r2
    7358:	4318      	orrs	r0, r3
            break;
    735a:	e7ea      	b.n	7332 <_Z13co_uint32_h2nPK5optlv+0x2e>
    735c:	0018      	movs	r0, r3
    735e:	f7ff fe1e 	bl	6f9e <_Z13co_uint32_h2nPK5optlv.part.1>
    7362:	e7e6      	b.n	7332 <_Z13co_uint32_h2nPK5optlv+0x2e>
    7364:	00010a2f 	.word	0x00010a2f
    7368:	00010c2d 	.word	0x00010c2d
    736c:	00010a49 	.word	0x00010a49
    7370:	00ffff00 	.word	0x00ffff00

00007374 <_Z11get_mid_valv>:
{
    7374:	b510      	push	{r4, lr}
    if (!mid_val) 
    7376:	4c05      	ldr	r4, [pc, #20]	; (738c <_Z11get_mid_valv+0x18>)
    7378:	8823      	ldrh	r3, [r4, #0]
    737a:	2b00      	cmp	r3, #0
    737c:	d102      	bne.n	7384 <_Z11get_mid_valv+0x10>
        uint32_t epoch = get_rtc_epoch();
    737e:	f7fd fb15 	bl	49ac <_Z13get_rtc_epochv>
        mid_val = (uint16_t) ( epoch & 0x0000FFFF );
    7382:	8020      	strh	r0, [r4, #0]
    return mid_val++;
    7384:	8820      	ldrh	r0, [r4, #0]
    7386:	1c43      	adds	r3, r0, #1
    7388:	8023      	strh	r3, [r4, #0]
}
    738a:	bd10      	pop	{r4, pc}
    738c:	200015e8 	.word	0x200015e8

00007390 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh>:
 * @return: 0 on success, nonzero error/special handling code. 
 */
error_t coap_msg_parse(struct coap_msg_ctx *ctx, struct mbuf *m, uint8_t *code)
{
    int i, osize, mdatalen;
    uint8_t *b = m->m_data; /* assuming single buffer */
    7390:	000b      	movs	r3, r1
{
    7392:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t *b = m->m_data; /* assuming single buffer */
    7394:	3304      	adds	r3, #4
{
    7396:	b08b      	sub	sp, #44	; 0x2c
    uint8_t *b = m->m_data; /* assuming single buffer */
    7398:	9305      	str	r3, [sp, #20]
    int len = m->m_pktlen;
    739a:	880b      	ldrh	r3, [r1, #0]
{
    739c:	0006      	movs	r6, r0
    int len = m->m_pktlen;
    739e:	9302      	str	r3, [sp, #8]
    uint16_t ot;
    error_t rc;
    uint32_t obsval;

    /* Default code, indicating everything okay, so far. */
    *code = COAP_RSP_205_CONTENT;
    73a0:	2345      	movs	r3, #69	; 0x45
{
    73a2:	9104      	str	r1, [sp, #16]
    *code = COAP_RSP_205_CONTENT;
    73a4:	7013      	strb	r3, [r2, #0]
{
    73a6:	9203      	str	r2, [sp, #12]

    ddump(LOG_DEBUG, "CoAP REQ decode", b, len);
    73a8:	9b02      	ldr	r3, [sp, #8]
    73aa:	9a05      	ldr	r2, [sp, #20]
    73ac:	4953      	ldr	r1, [pc, #332]	; (74fc <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x16c>)
    73ae:	2007      	movs	r0, #7
    73b0:	f7fd fbb6 	bl	4b20 <_Z5ddumpiPKcPKvi>
    
    if ((rc = coap_hdr_parse(ctx, m)) != ERR_OK) {
    73b4:	9904      	ldr	r1, [sp, #16]
    73b6:	0030      	movs	r0, r6
    73b8:	f7ff fdd0 	bl	6f5c <_ZL14coap_hdr_parseP12coap_msg_ctxP4mbuf>
    73bc:	9001      	str	r0, [sp, #4]
    73be:	2800      	cmp	r0, #0
    73c0:	d13d      	bne.n	743e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        goto err;
    }

    i = 4 + ctx->tkl;

    ctx->final = 1; /* default value, not ongoing observe */
    73c2:	2701      	movs	r7, #1
    i = 4 + ctx->tkl;
    73c4:	7875      	ldrb	r5, [r6, #1]
    ctx->oidx = i;  /* where options will start, or maybe payload marker */

    if (ctx->code == COAP_EMPTY_MESSAGE) {
    73c6:	78b3      	ldrb	r3, [r6, #2]
    i = 4 + ctx->tkl;
    73c8:	3504      	adds	r5, #4
    ctx->final = 1; /* default value, not ongoing observe */
    73ca:	64b7      	str	r7, [r6, #72]	; 0x48
    ctx->oidx = i;  /* where options will start, or maybe payload marker */
    73cc:	61b5      	str	r5, [r6, #24]
    if (ctx->code == COAP_EMPTY_MESSAGE) {
    73ce:	2b00      	cmp	r3, #0
    73d0:	d035      	beq.n	743e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        /* ignore everything else */
        return ERR_OK;
    }

    // Make sure the packet length is not greater than what is allocated by m_get()
	mdatalen = get_mbuf_data_size()-16;
    73d2:	f001 f94b 	bl	866c <_Z18get_mbuf_data_sizev>
    if ( len > mdatalen )
    73d6:	9b02      	ldr	r3, [sp, #8]
	mdatalen = get_mbuf_data_size()-16;
    73d8:	3810      	subs	r0, #16
    if ( len > mdatalen )
    73da:	4283      	cmp	r3, r0
    73dc:	dc32      	bgt.n	7444 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xb4>
    73de:	9c01      	ldr	r4, [sp, #4]
                ctx->final = 0;
            }
            break;
        default:
            /* unhandled critical option */
            if (COAP_OPTION_CRITICAL(ot)) {
    73e0:	9707      	str	r7, [sp, #28]
    while ((osize = coap_opt_parse(&opt, b + i, len - i)) > 0) {
    73e2:	9b05      	ldr	r3, [sp, #20]
    73e4:	a808      	add	r0, sp, #32
    73e6:	195f      	adds	r7, r3, r5
    73e8:	9b02      	ldr	r3, [sp, #8]
    73ea:	0039      	movs	r1, r7
    73ec:	1b5a      	subs	r2, r3, r5
    73ee:	f7ff fed3 	bl	7198 <_Z14coap_opt_parseP5optlvPKhi>
    73f2:	9006      	str	r0, [sp, #24]
    73f4:	2800      	cmp	r0, #0
    73f6:	dd63      	ble.n	74c0 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x130>
        ot += opt.ot;
    73f8:	ab08      	add	r3, sp, #32
    73fa:	881b      	ldrh	r3, [r3, #0]
        dlog(LOG_DEBUG, "option type: %u len: %u", ot, opt.ol);
    73fc:	4940      	ldr	r1, [pc, #256]	; (7500 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x170>)
        ot += opt.ot;
    73fe:	18e4      	adds	r4, r4, r3
    7400:	b2a4      	uxth	r4, r4
        dlog(LOG_DEBUG, "option type: %u len: %u", ot, opt.ol);
    7402:	ab08      	add	r3, sp, #32
    7404:	885b      	ldrh	r3, [r3, #2]
    7406:	0022      	movs	r2, r4
    7408:	2007      	movs	r0, #7
    740a:	f7fd fb67 	bl	4adc <_Z4dlogiPKcz>
        ddump(LOG_DEBUG, "option", opt.ov, opt.ol);
    740e:	ab08      	add	r3, sp, #32
    7410:	885b      	ldrh	r3, [r3, #2]
    7412:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7414:	493b      	ldr	r1, [pc, #236]	; (7504 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x174>)
    7416:	2007      	movs	r0, #7
    7418:	f7fd fb82 	bl	4b20 <_Z5ddumpiPKcPKvi>
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    741c:	0030      	movs	r0, r6
        opt.ot = ot;
    741e:	ab08      	add	r3, sp, #32
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    7420:	0019      	movs	r1, r3
    7422:	304c      	adds	r0, #76	; 0x4c
        opt.ot = ot;
    7424:	801c      	strh	r4, [r3, #0]
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    7426:	f000 fae7 	bl	79f8 <_Z12copt_add_optP5sl_coP5optlv>
    742a:	1e07      	subs	r7, r0, #0
    742c:	d010      	beq.n	7450 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xc0>
            dlog(LOG_ALERT, "Couldn't save option data");
    742e:	4936      	ldr	r1, [pc, #216]	; (7508 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x178>)
    7430:	2001      	movs	r0, #1
    7432:	f7fd fb53 	bl	4adc <_Z4dlogiPKcz>
            *code = COAP_RSP_500_INTERNAL_ERROR;
    7436:	23a0      	movs	r3, #160	; 0xa0
    7438:	9a03      	ldr	r2, [sp, #12]
        if ((rc = copt_add_opt((sl_co*)&(ctx->oh), &opt)) != ERR_OK) {
    743a:	9701      	str	r7, [sp, #4]
            *code = COAP_RSP_500_INTERNAL_ERROR;
    743c:	7013      	strb	r3, [r2, #0]
    m->m_pktlen = len;

    coap_msg_log(ctx);
err:
    return rc;
}
    743e:	9801      	ldr	r0, [sp, #4]
    7440:	b00b      	add	sp, #44	; 0x2c
    7442:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*code = COAP_RSP_413_REQ_TOO_LARGE;
    7444:	238d      	movs	r3, #141	; 0x8d
    7446:	9a03      	ldr	r2, [sp, #12]
    7448:	7013      	strb	r3, [r2, #0]
		return ERR_MSGSIZE;
    744a:	3b83      	subs	r3, #131	; 0x83
                rc = ERR_OP_NOT_SUPP;
    744c:	9301      	str	r3, [sp, #4]
                goto err;
    744e:	e7f6      	b.n	743e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
        i += osize;
    7450:	9b06      	ldr	r3, [sp, #24]
    7452:	18ed      	adds	r5, r5, r3
        switch (ot) {
    7454:	2c0f      	cmp	r4, #15
    7456:	d820      	bhi.n	749a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x10a>
    7458:	2c0e      	cmp	r4, #14
    745a:	d2c2      	bcs.n	73e2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    745c:	2c07      	cmp	r4, #7
    745e:	d0c0      	beq.n	73e2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    7460:	d810      	bhi.n	7484 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xf4>
    7462:	2c03      	cmp	r4, #3
    7464:	d0bd      	beq.n	73e2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    7466:	2c06      	cmp	r4, #6
    7468:	d022      	beq.n	74b0 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x120>
            if (COAP_OPTION_CRITICAL(ot)) {
    746a:	9b07      	ldr	r3, [sp, #28]
    746c:	421c      	tst	r4, r3
    746e:	d0b8      	beq.n	73e2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
                dlog(LOG_ERR, "unhandled critical option %d\n", ot);
    7470:	0022      	movs	r2, r4
    7472:	4926      	ldr	r1, [pc, #152]	; (750c <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x17c>)
    7474:	2003      	movs	r0, #3
    7476:	f7fd fb31 	bl	4adc <_Z4dlogiPKcz>
                *code = COAP_RSP_402_BAD_OPTION;
    747a:	2382      	movs	r3, #130	; 0x82
    747c:	9a03      	ldr	r2, [sp, #12]
    747e:	7013      	strb	r3, [r2, #0]
                rc = ERR_OP_NOT_SUPP;
    7480:	3b81      	subs	r3, #129	; 0x81
    7482:	e7e3      	b.n	744c <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xbc>
        switch (ot) {
    7484:	2c0b      	cmp	r4, #11
    7486:	d0ac      	beq.n	73e2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    7488:	2c0c      	cmp	r4, #12
    748a:	d1ee      	bne.n	746a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
            ctx->cf = co_uint8(&opt)    ;/*FIXME*/
    748c:	a808      	add	r0, sp, #32
    748e:	f7ff fd59 	bl	6f44 <_ZL8co_uint8PK5optlv>
    7492:	0033      	movs	r3, r6
    7494:	333c      	adds	r3, #60	; 0x3c
    7496:	7018      	strb	r0, [r3, #0]
            break;
    7498:	e7a3      	b.n	73e2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
        switch (ot) {
    749a:	2c17      	cmp	r4, #23
    749c:	d0a1      	beq.n	73e2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    749e:	d802      	bhi.n	74a6 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x116>
    74a0:	2c11      	cmp	r4, #17
    74a2:	d0f3      	beq.n	748c <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xfc>
    74a4:	e7e1      	b.n	746a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
    74a6:	2c23      	cmp	r4, #35	; 0x23
    74a8:	d09b      	beq.n	73e2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    74aa:	2c27      	cmp	r4, #39	; 0x27
    74ac:	d1dd      	bne.n	746a <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xda>
    74ae:	e798      	b.n	73e2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
            obsval = co_uint32_n2h(&opt);
    74b0:	a808      	add	r0, sp, #32
    74b2:	f7ff feef 	bl	7294 <_Z13co_uint32_n2hPK5optlv>
            if (obsval == COAP_OBS_REG) {
    74b6:	2800      	cmp	r0, #0
    74b8:	d000      	beq.n	74bc <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x12c>
    74ba:	e792      	b.n	73e2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
                ctx->final = 0;
    74bc:	64b0      	str	r0, [r6, #72]	; 0x48
    74be:	e790      	b.n	73e2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x52>
    if (ot && i != len) {
    74c0:	2c00      	cmp	r4, #0
    74c2:	d00f      	beq.n	74e4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x154>
    74c4:	9b02      	ldr	r3, [sp, #8]
    74c6:	429d      	cmp	r5, r3
    74c8:	d00c      	beq.n	74e4 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x154>
        if (b[i] != 0xFF) {
    74ca:	783b      	ldrb	r3, [r7, #0]
    74cc:	2bff      	cmp	r3, #255	; 0xff
    74ce:	d008      	beq.n	74e2 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x152>
            dlog(LOG_ERR, "missing option separator FF");
    74d0:	490f      	ldr	r1, [pc, #60]	; (7510 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0x180>)
    74d2:	2003      	movs	r0, #3
    74d4:	f7fd fb02 	bl	4adc <_Z4dlogiPKcz>
            *code = COAP_RSP_415_UNSUPPORTED_CFORMAT;
    74d8:	238f      	movs	r3, #143	; 0x8f
    74da:	9a03      	ldr	r2, [sp, #12]
    74dc:	7013      	strb	r3, [r2, #0]
            rc = ERR_BAD_DATA;
    74de:	3b7b      	subs	r3, #123	; 0x7b
    74e0:	e7b4      	b.n	744c <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xbc>
        i++;
    74e2:	3501      	adds	r5, #1
    m->m_pktlen = len;
    74e4:	466a      	mov	r2, sp
    ctx->plen = len - i;
    74e6:	9b02      	ldr	r3, [sp, #8]
    ctx->hdrlen = i;
    74e8:	6175      	str	r5, [r6, #20]
    m->m_pktlen = len;
    74ea:	8912      	ldrh	r2, [r2, #8]
    ctx->plen = len - i;
    74ec:	1b5d      	subs	r5, r3, r5
    m->m_pktlen = len;
    74ee:	9b04      	ldr	r3, [sp, #16]
    ctx->plen = len - i;
    74f0:	6435      	str	r5, [r6, #64]	; 0x40
    coap_msg_log(ctx);
    74f2:	0030      	movs	r0, r6
    m->m_pktlen = len;
    74f4:	801a      	strh	r2, [r3, #0]
    coap_msg_log(ctx);
    74f6:	f7ff fdd3 	bl	70a0 <_ZL12coap_msg_logPK12coap_msg_ctx>
    74fa:	e7a0      	b.n	743e <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh+0xae>
    74fc:	00010a93 	.word	0x00010a93
    7500:	00010aa3 	.word	0x00010aa3
    7504:	00010f06 	.word	0x00010f06
    7508:	00010abb 	.word	0x00010abb
    750c:	00010ad5 	.word	0x00010ad5
    7510:	00010af3 	.word	0x00010af3

00007514 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>:

/* initialize response message context based on request + mbuf */
void       
coap_init_rsp(const struct coap_msg_ctx *req, struct coap_msg_ctx *rsp, 
              struct mbuf *m)
{
    7514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7516:	000c      	movs	r4, r1
    struct optlv *op;
    memset(rsp, 0, sizeof(*rsp));
    copt_init((sl_co*)&(rsp->oh));
    7518:	0026      	movs	r6, r4
{
    751a:	0005      	movs	r5, r0
    memset(rsp, 0, sizeof(*rsp));
    751c:	2100      	movs	r1, #0
{
    751e:	0017      	movs	r7, r2
    memset(rsp, 0, sizeof(*rsp));
    7520:	0020      	movs	r0, r4
    7522:	2254      	movs	r2, #84	; 0x54
    copt_init((sl_co*)&(rsp->oh));
    7524:	364c      	adds	r6, #76	; 0x4c
    memset(rsp, 0, sizeof(*rsp));
    7526:	f004 fe35 	bl	c194 <memset>
    copt_init((sl_co*)&(rsp->oh));
    752a:	0030      	movs	r0, r6
    752c:	f000 fa30 	bl	7990 <_Z9copt_initP5sl_co>
    /*
     * type will be a bit tricker than this. CON->ACK, except if it's empty,
     * then RST. NON->NON. We need to know more about the message before
     * setting the RSP type.
     */
    rsp->type = req->type;
    7530:	782b      	ldrb	r3, [r5, #0]
    rsp->tkl = req->tkl;
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    7532:	1da9      	adds	r1, r5, #6
    rsp->type = req->type;
    7534:	7023      	strb	r3, [r4, #0]
    rsp->tkl = req->tkl;
    7536:	786b      	ldrb	r3, [r5, #1]
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    7538:	2208      	movs	r2, #8
    rsp->tkl = req->tkl;
    753a:	7063      	strb	r3, [r4, #1]
    memcpy(rsp->token, req->token, sizeof(rsp->token));
    753c:	1da0      	adds	r0, r4, #6
    753e:	f004 fe0e 	bl	c15e <memcpy>

    /*
     * TODO OBS: Could replicate behaviour by adding the option. Need to know
     * when to add a value. Maybe this isn't required. Check context of calls.
     */
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    7542:	0028      	movs	r0, r5
    rsp->mid = req->mid;
    7544:	88ab      	ldrh	r3, [r5, #4]
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    7546:	304c      	adds	r0, #76	; 0x4c
    rsp->mid = req->mid;
    7548:	80a3      	strh	r3, [r4, #4]
    rsp->client = req->client;
    754a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    754c:	2200      	movs	r2, #0
    rsp->client = req->client;
    754e:	6463      	str	r3, [r4, #68]	; 0x44
    rsp->final = req->final;
    7550:	6cab      	ldr	r3, [r5, #72]	; 0x48
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    7552:	2106      	movs	r1, #6
    rsp->final = req->final;
    7554:	64a3      	str	r3, [r4, #72]	; 0x48
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL))
    7556:	f000 fa91 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    755a:	2800      	cmp	r0, #0
    755c:	d015      	beq.n	758a <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
               != NULL) {
        uint32_t obsval = co_uint32_n2h(op);
    755e:	f7ff fe99 	bl	7294 <_Z13co_uint32_n2hPK5optlv>
        if (!rsp->final && obsval == COAP_OBS_REG) {
    7562:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7564:	2b00      	cmp	r3, #0
    7566:	d110      	bne.n	758a <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
    7568:	2800      	cmp	r0, #0
    756a:	d10e      	bne.n	758a <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
            /*
             * If this is proxied, then this info isn't used to build the
             * response anyway. The sensor sends the packet. The same applies
             * for local async observe.
             */
            nop.ot = COAP_OPTION_OBSERVE;
    756c:	466a      	mov	r2, sp
            nop.ol = 3;
    756e:	2503      	movs	r5, #3
            nop.ot = COAP_OPTION_OBSERVE;
    7570:	3306      	adds	r3, #6
            if (copt_add_opt((sl_co*)&(rsp->oh), &nop) != ERR_OK) {
    7572:	4669      	mov	r1, sp
    7574:	0030      	movs	r0, r6
            nop.ot = COAP_OPTION_OBSERVE;
    7576:	8013      	strh	r3, [r2, #0]
            nop.ol = 3;
    7578:	8055      	strh	r5, [r2, #2]
            if (copt_add_opt((sl_co*)&(rsp->oh), &nop) != ERR_OK) {
    757a:	f000 fa3d 	bl	79f8 <_Z12copt_add_optP5sl_coP5optlv>
    757e:	2800      	cmp	r0, #0
    7580:	d003      	beq.n	758a <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x76>
                dlog(LOG_ERR, "Couldn't add observe option");
    7582:	4903      	ldr	r1, [pc, #12]	; (7590 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf+0x7c>)
    7584:	0028      	movs	r0, r5
    7586:	f7fd faa9 	bl	4adc <_Z4dlogiPKcz>
            }
        }
    }

    rsp->msg = m;
    758a:	6527      	str	r7, [r4, #80]	; 0x50
}
    758c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    758e:	46c0      	nop			; (mov r8, r8)
    7590:	00010a77 	.word	0x00010a77

00007594 <_Z17coap_msg_responseP12coap_msg_ctx>:
 *
 * @return: Status; 0 - OK.
 */
error_t
coap_msg_response(struct coap_msg_ctx *ctx)
{
    7594:	b5f0      	push	{r4, r5, r6, r7, lr}
    7596:	0006      	movs	r6, r0
    7598:	b08d      	sub	sp, #52	; 0x34

    int idx = 4;
    struct mbuf *n;


    coap_msg_log(ctx);
    759a:	f7ff fd81 	bl	70a0 <_ZL12coap_msg_logPK12coap_msg_ctx>

    b[0] = COAP_VER | COAP_T_VAL2PDU(ctx->type);
    759e:	2340      	movs	r3, #64	; 0x40
    75a0:	7832      	ldrb	r2, [r6, #0]
    75a2:	ad05      	add	r5, sp, #20
    75a4:	0112      	lsls	r2, r2, #4
    75a6:	4313      	orrs	r3, r2
    75a8:	702b      	strb	r3, [r5, #0]
    if (ctx->code == COAP_EMPTY_MESSAGE) {
    75aa:	78b3      	ldrb	r3, [r6, #2]
    75ac:	2b00      	cmp	r3, #0
    75ae:	d11c      	bne.n	75ea <_Z17coap_msg_responseP12coap_msg_ctx+0x56>
    int idx = 4;
    75b0:	2404      	movs	r4, #4
        b[1] = COAP_EMPTY_MESSAGE;
    75b2:	706b      	strb	r3, [r5, #1]
        b[2] = ctx->mid >> 8;
    75b4:	88b3      	ldrh	r3, [r6, #4]
    75b6:	121a      	asrs	r2, r3, #8
    75b8:	70aa      	strb	r2, [r5, #2]
        b[3] = ctx->mid & 0xFF;
    75ba:	70eb      	strb	r3, [r5, #3]
        }
    }
    assert(idx <= COAP_OBS_HDR_SZ);

    /* prepend header to response */
    n = m_prepend(ctx->msg, idx);
    75bc:	0021      	movs	r1, r4
    75be:	6d30      	ldr	r0, [r6, #80]	; 0x50
    75c0:	f001 f8a0 	bl	8704 <_Z9m_prependP4mbufi>
    75c4:	0007      	movs	r7, r0
    if (!n) {
        rc = ERR_NO_MEM;
    75c6:	2003      	movs	r0, #3
    if (!n) {
    75c8:	2f00      	cmp	r7, #0
    75ca:	d04b      	beq.n	7664 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
        goto done;
    }
    ctx->msg = n;   /* A new mbuf may be required */
    75cc:	6537      	str	r7, [r6, #80]	; 0x50
    memcpy(n->m_data, b, idx);
    75ce:	1d3e      	adds	r6, r7, #4
    75d0:	0022      	movs	r2, r4
    75d2:	0029      	movs	r1, r5
    75d4:	0030      	movs	r0, r6
    75d6:	f004 fdc2 	bl	c15e <memcpy>

    ddump(LOG_DEBUG, "Response", n->m_data, n->m_pktlen);
    75da:	2007      	movs	r0, #7
    75dc:	883b      	ldrh	r3, [r7, #0]
    75de:	0032      	movs	r2, r6
    75e0:	4951      	ldr	r1, [pc, #324]	; (7728 <_Z17coap_msg_responseP12coap_msg_ctx+0x194>)
    75e2:	f7fd fa9d 	bl	4b20 <_Z5ddumpiPKcPKvi>
    error_t rc = ERR_OK;
    75e6:	2000      	movs	r0, #0
    75e8:	e03c      	b.n	7664 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
    } else if (COAP_CLASS(ctx->code) >= 2) {
    75ea:	2b3f      	cmp	r3, #63	; 0x3f
    75ec:	d800      	bhi.n	75f0 <_Z17coap_msg_responseP12coap_msg_ctx+0x5c>
    75ee:	e099      	b.n	7724 <_Z17coap_msg_responseP12coap_msg_ctx+0x190>
        b[1] = ctx->code;
    75f0:	706b      	strb	r3, [r5, #1]
        b[2] = ctx->mid >> 8;
    75f2:	88b3      	ldrh	r3, [r6, #4]
    75f4:	121a      	asrs	r2, r3, #8
    75f6:	70aa      	strb	r2, [r5, #2]
        b[3] = ctx->mid & 0xFF;
    75f8:	70eb      	strb	r3, [r5, #3]
        if (ctx->tkl) {
    75fa:	7874      	ldrb	r4, [r6, #1]
    75fc:	2c00      	cmp	r4, #0
    75fe:	d033      	beq.n	7668 <_Z17coap_msg_responseP12coap_msg_ctx+0xd4>
                rc = ERR_INVAL;
    7600:	2004      	movs	r0, #4
            if (ctx->tkl > 8) {
    7602:	2c08      	cmp	r4, #8
    7604:	dc2e      	bgt.n	7664 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
            memcpy(b + idx, ctx->token, ctx->tkl);
    7606:	0022      	movs	r2, r4
    7608:	1db1      	adds	r1, r6, #6
    760a:	a806      	add	r0, sp, #24
    760c:	f004 fda7 	bl	c15e <memcpy>
            b[0] |= ctx->tkl;
    7610:	782b      	ldrb	r3, [r5, #0]
    7612:	4323      	orrs	r3, r4
    7614:	702b      	strb	r3, [r5, #0]
            idx += ctx->tkl;
    7616:	3404      	adds	r4, #4
        if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_OBSERVE, NULL))
    7618:	0033      	movs	r3, r6
    761a:	334c      	adds	r3, #76	; 0x4c
    761c:	2200      	movs	r2, #0
    761e:	2106      	movs	r1, #6
    7620:	0018      	movs	r0, r3
    7622:	9301      	str	r3, [sp, #4]
    7624:	f000 fa2a 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7628:	2800      	cmp	r0, #0
    762a:	d021      	beq.n	7670 <_Z17coap_msg_responseP12coap_msg_ctx+0xdc>
            dopt = *op;  /* copy original but make type the delta */
    762c:	af03      	add	r7, sp, #12
            op->ov = &opt_val;
    762e:	ab02      	add	r3, sp, #8
    7630:	6043      	str	r3, [r0, #4]
            dopt = *op;  /* copy original but make type the delta */
    7632:	003b      	movs	r3, r7
    7634:	c806      	ldmia	r0!, {r1, r2}
    7636:	c306      	stmia	r3!, {r1, r2}
            opt_val = get_obs_val();
    7638:	f000 f8c6 	bl	77c8 <_Z11get_obs_valv>
    763c:	9002      	str	r0, [sp, #8]
            opt_val = co_uint32_h2n(&dopt);
    763e:	0038      	movs	r0, r7
    7640:	f7ff fe60 	bl	7304 <_Z13co_uint32_h2nPK5optlv>
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    7644:	221c      	movs	r2, #28
            dopt.ot = COAP_OPTION_OBSERVE - onum;
    7646:	2306      	movs	r3, #6
            opt_val = co_uint32_h2n(&dopt);
    7648:	9002      	str	r0, [sp, #8]
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    764a:	1b12      	subs	r2, r2, r4
    764c:	1929      	adds	r1, r5, r4
    764e:	0038      	movs	r0, r7
            dopt.ot = COAP_OPTION_OBSERVE - onum;
    7650:	803b      	strh	r3, [r7, #0]
            if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    7652:	f7ff fddd 	bl	7210 <_Z12coap_opt_addPK5optlvPhi>
    7656:	2800      	cmp	r0, #0
    7658:	d108      	bne.n	766c <_Z17coap_msg_responseP12coap_msg_ctx+0xd8>
                dlog(LOG_ERR, "Couldn't add Observe option to msg");
    765a:	4934      	ldr	r1, [pc, #208]	; (772c <_Z17coap_msg_responseP12coap_msg_ctx+0x198>)
    765c:	3003      	adds	r0, #3
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    765e:	f7fd fa3d 	bl	4adc <_Z4dlogiPKcz>
                    rc = ERR_NO_MEM;
    7662:	2003      	movs	r0, #3

done:
    return rc;
}
    7664:	b00d      	add	sp, #52	; 0x34
    7666:	bdf0      	pop	{r4, r5, r6, r7, pc}
    int idx = 4;
    7668:	2404      	movs	r4, #4
    766a:	e7d5      	b.n	7618 <_Z17coap_msg_responseP12coap_msg_ctx+0x84>
            idx += sz;
    766c:	1824      	adds	r4, r4, r0
            onum = COAP_OPTION_OBSERVE;
    766e:	2006      	movs	r0, #6
        if (ctx->plen) 
    7670:	6c33      	ldr	r3, [r6, #64]	; 0x40
    7672:	2b00      	cmp	r3, #0
    7674:	d044      	beq.n	7700 <_Z17coap_msg_responseP12coap_msg_ctx+0x16c>
            dopt.ot = COAP_OPTION_CONTENT_FORMAT - onum;
    7676:	230c      	movs	r3, #12
            if (ctx->cf == 0) {     /* text/plain; */
    7678:	0032      	movs	r2, r6
            dopt.ot = COAP_OPTION_CONTENT_FORMAT - onum;
    767a:	1a18      	subs	r0, r3, r0
    767c:	af03      	add	r7, sp, #12
    767e:	8038      	strh	r0, [r7, #0]
            if (ctx->cf == 0) {     /* text/plain; */
    7680:	323c      	adds	r2, #60	; 0x3c
    7682:	7813      	ldrb	r3, [r2, #0]
    7684:	2b00      	cmp	r3, #0
    7686:	d10f      	bne.n	76a8 <_Z17coap_msg_responseP12coap_msg_ctx+0x114>
                dopt.ov = &opt_val;
    7688:	aa02      	add	r2, sp, #8
    768a:	607a      	str	r2, [r7, #4]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    768c:	221c      	movs	r2, #28
    768e:	1929      	adds	r1, r5, r4
    7690:	1b12      	subs	r2, r2, r4
    7692:	0038      	movs	r0, r7
                dopt.ol = 0;
    7694:	807b      	strh	r3, [r7, #2]
                opt_val = 0;  /* 0 length anyway */
    7696:	9302      	str	r3, [sp, #8]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    7698:	f7ff fdba 	bl	7210 <_Z12coap_opt_addPK5optlvPhi>
                idx += sz;
    769c:	1824      	adds	r4, r4, r0
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    769e:	2800      	cmp	r0, #0
    76a0:	d10e      	bne.n	76c0 <_Z17coap_msg_responseP12coap_msg_ctx+0x12c>
                    dlog(LOG_ERR, "Couldn't add content format option to msg");
    76a2:	4923      	ldr	r1, [pc, #140]	; (7730 <_Z17coap_msg_responseP12coap_msg_ctx+0x19c>)
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    76a4:	2003      	movs	r0, #3
    76a6:	e7da      	b.n	765e <_Z17coap_msg_responseP12coap_msg_ctx+0xca>
                dopt.ov = &(ctx->cf);
    76a8:	607a      	str	r2, [r7, #4]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    76aa:	221c      	movs	r2, #28
                dopt.ol = 1;
    76ac:	2301      	movs	r3, #1
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    76ae:	1b12      	subs	r2, r2, r4
    76b0:	1929      	adds	r1, r5, r4
    76b2:	0038      	movs	r0, r7
                dopt.ol = 1;
    76b4:	807b      	strh	r3, [r7, #2]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) == 0) {
    76b6:	f7ff fdab 	bl	7210 <_Z12coap_opt_addPK5optlvPhi>
    76ba:	2800      	cmp	r0, #0
    76bc:	d0f1      	beq.n	76a2 <_Z17coap_msg_responseP12coap_msg_ctx+0x10e>
                idx += sz;
    76be:	1824      	adds	r4, r4, r0
            if ((op = copt_get_next_opt_type((const sl_co*)&(ctx->oh), COAP_OPTION_MAXAGE, 
    76c0:	2200      	movs	r2, #0
    76c2:	210e      	movs	r1, #14
    76c4:	9801      	ldr	r0, [sp, #4]
    76c6:	f000 f9d9 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    76ca:	2800      	cmp	r0, #0
    76cc:	d01a      	beq.n	7704 <_Z17coap_msg_responseP12coap_msg_ctx+0x170>
				op->ov = &opt_val;
    76ce:	ab02      	add	r3, sp, #8
    76d0:	6043      	str	r3, [r0, #4]
                dopt = *op;  /* copy original but make type the delta */
    76d2:	003b      	movs	r3, r7
    76d4:	c806      	ldmia	r0!, {r1, r2}
    76d6:	c306      	stmia	r3!, {r1, r2}
				opt_val = coap_max_age_in_seconds;
    76d8:	4b16      	ldr	r3, [pc, #88]	; (7734 <_Z17coap_msg_responseP12coap_msg_ctx+0x1a0>)
				opt_val = co_uint32_h2n(&dopt);
    76da:	0038      	movs	r0, r7
				opt_val = coap_max_age_in_seconds;
    76dc:	681b      	ldr	r3, [r3, #0]
    76de:	9302      	str	r3, [sp, #8]
				opt_val = co_uint32_h2n(&dopt);
    76e0:	f7ff fe10 	bl	7304 <_Z13co_uint32_h2nPK5optlv>
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    76e4:	221c      	movs	r2, #28
                dopt.ot = COAP_OPTION_MAXAGE - onum;
    76e6:	2302      	movs	r3, #2
				opt_val = co_uint32_h2n(&dopt);
    76e8:	9002      	str	r0, [sp, #8]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    76ea:	1b12      	subs	r2, r2, r4
    76ec:	1929      	adds	r1, r5, r4
    76ee:	0038      	movs	r0, r7
                dopt.ot = COAP_OPTION_MAXAGE - onum;
    76f0:	803b      	strh	r3, [r7, #0]
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    76f2:	f7ff fd8d 	bl	7210 <_Z12coap_opt_addPK5optlvPhi>
                idx += sz;
    76f6:	1824      	adds	r4, r4, r0
                if ((sz = coap_opt_add(&dopt, &(b[idx]), COAP_OBS_HDR_SZ - idx)) <= 0) {
    76f8:	2800      	cmp	r0, #0
    76fa:	dc03      	bgt.n	7704 <_Z17coap_msg_responseP12coap_msg_ctx+0x170>
                    dlog(LOG_ERR, "Couldn't add Max-Age option to msg");
    76fc:	490e      	ldr	r1, [pc, #56]	; (7738 <_Z17coap_msg_responseP12coap_msg_ctx+0x1a4>)
    76fe:	e7d1      	b.n	76a4 <_Z17coap_msg_responseP12coap_msg_ctx+0x110>
        if (onum && ctx->plen) {
    7700:	2800      	cmp	r0, #0
    7702:	d005      	beq.n	7710 <_Z17coap_msg_responseP12coap_msg_ctx+0x17c>
    7704:	6c33      	ldr	r3, [r6, #64]	; 0x40
    7706:	2b00      	cmp	r3, #0
    7708:	d002      	beq.n	7710 <_Z17coap_msg_responseP12coap_msg_ctx+0x17c>
            b[idx++] = 0xFF;    /* end of options */
    770a:	23ff      	movs	r3, #255	; 0xff
    770c:	552b      	strb	r3, [r5, r4]
    770e:	3401      	adds	r4, #1
    assert(idx <= COAP_OBS_HDR_SZ);
    7710:	2c1c      	cmp	r4, #28
    7712:	dc00      	bgt.n	7716 <_Z17coap_msg_responseP12coap_msg_ctx+0x182>
    7714:	e752      	b.n	75bc <_Z17coap_msg_responseP12coap_msg_ctx+0x28>
    7716:	21f0      	movs	r1, #240	; 0xf0
    7718:	4b08      	ldr	r3, [pc, #32]	; (773c <_Z17coap_msg_responseP12coap_msg_ctx+0x1a8>)
    771a:	4a09      	ldr	r2, [pc, #36]	; (7740 <_Z17coap_msg_responseP12coap_msg_ctx+0x1ac>)
    771c:	0089      	lsls	r1, r1, #2
    771e:	4809      	ldr	r0, [pc, #36]	; (7744 <_Z17coap_msg_responseP12coap_msg_ctx+0x1b0>)
    7720:	f004 fba6 	bl	be70 <__assert_func>
        rc = ERR_INVAL;
    7724:	2004      	movs	r0, #4
    7726:	e79d      	b.n	7664 <_Z17coap_msg_responseP12coap_msg_ctx+0xd0>
    7728:	00010b96 	.word	0x00010b96
    772c:	00010b0f 	.word	0x00010b0f
    7730:	00010b32 	.word	0x00010b32
    7734:	200016ec 	.word	0x200016ec
    7738:	00010b5c 	.word	0x00010b5c
    773c:	00010b7f 	.word	0x00010b7f
    7740:	00010c77 	.word	0x00010c77
    7744:	00010a49 	.word	0x00010a49

00007748 <_Z16coap_set_max_agem>:
 * 
 *
 */ 
void coap_set_max_age( uint32_t max_age )
{
	coap_max_age_in_seconds = max_age;
    7748:	4b01      	ldr	r3, [pc, #4]	; (7750 <_Z16coap_set_max_agem+0x8>)
    774a:	6018      	str	r0, [r3, #0]
	
} // coap_set_max_age
    774c:	4770      	bx	lr
    774e:	46c0      	nop			; (mov r8, r8)
    7750:	200016ec 	.word	0x200016ec

00007754 <_Z14get_obs_by_uriPKcPhS1_PPvS1_>:
 *
 * Returns 0 on success, -1 if not found.
 */
error_t
get_obs_by_uri(const char *uri, uint8_t *tkl, uint8_t *token, void **client, uint8_t *nxt)
{
    7754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7756:	0005      	movs	r5, r0
    7758:	000f      	movs	r7, r1
    775a:	9201      	str	r2, [sp, #4]
    775c:	001e      	movs	r6, r3
    uint8_t i;

    if ((uri == NULL) || (uri[0] == '\0') || (*nxt >= MAX_OBSERVERS)) {
        return ERR_INVAL;
    775e:	2004      	movs	r0, #4
    if ((uri == NULL) || (uri[0] == '\0') || (*nxt >= MAX_OBSERVERS)) {
    7760:	2d00      	cmp	r5, #0
    7762:	d02e      	beq.n	77c2 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    7764:	782b      	ldrb	r3, [r5, #0]
    7766:	2b00      	cmp	r3, #0
    7768:	d02b      	beq.n	77c2 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    776a:	9b08      	ldr	r3, [sp, #32]
    776c:	781c      	ldrb	r4, [r3, #0]
    776e:	2c03      	cmp	r4, #3
    7770:	dc27      	bgt.n	77c2 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    }

    for (i = *nxt; i < MAX_OBSERVERS; i++) {
    7772:	2c03      	cmp	r4, #3
    7774:	dc0c      	bgt.n	7790 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x3c>
        if (!strcmp(uri, obs[i].uri)) {
    7776:	2198      	movs	r1, #152	; 0x98
    7778:	0049      	lsls	r1, r1, #1
    777a:	4361      	muls	r1, r4
    777c:	4b11      	ldr	r3, [pc, #68]	; (77c4 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x70>)
    777e:	0028      	movs	r0, r5
    7780:	1859      	adds	r1, r3, r1
    7782:	f005 fe0c 	bl	d39e <strcmp>
    7786:	2800      	cmp	r0, #0
    7788:	d002      	beq.n	7790 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x3c>
    for (i = *nxt; i < MAX_OBSERVERS; i++) {
    778a:	3401      	adds	r4, #1
    778c:	b2e4      	uxtb	r4, r4
    778e:	e7f0      	b.n	7772 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x1e>
            break;
        }
    }
    if (i == MAX_OBSERVERS) {
        return ERR_NO_ENTRY;
    7790:	200c      	movs	r0, #12
    if (i == MAX_OBSERVERS) {
    7792:	2c04      	cmp	r4, #4
    7794:	d015      	beq.n	77c2 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x6e>
    }

    *tkl = obs[i].tkl;
    7796:	2398      	movs	r3, #152	; 0x98
    7798:	005b      	lsls	r3, r3, #1
    779a:	4363      	muls	r3, r4
    779c:	4909      	ldr	r1, [pc, #36]	; (77c4 <_Z14get_obs_by_uriPKcPhS1_PPvS1_+0x70>)
    memcpy(token, obs[i].token, *tkl);
    779e:	9801      	ldr	r0, [sp, #4]
    *tkl = obs[i].tkl;
    77a0:	18cd      	adds	r5, r1, r3
    77a2:	002a      	movs	r2, r5
    77a4:	32ff      	adds	r2, #255	; 0xff
    77a6:	7852      	ldrb	r2, [r2, #1]
    memcpy(token, obs[i].token, *tkl);
    77a8:	3302      	adds	r3, #2
    77aa:	33ff      	adds	r3, #255	; 0xff
    77ac:	18c9      	adds	r1, r1, r3
    *tkl = obs[i].tkl;
    77ae:	703a      	strb	r2, [r7, #0]
    memcpy(token, obs[i].token, *tkl);
    77b0:	f004 fcd5 	bl	c15e <memcpy>
    *client = obs[i].client;
    *nxt = i + 1;

    return ERR_OK;
    77b4:	2000      	movs	r0, #0
    *client = obs[i].client;
    77b6:	35fc      	adds	r5, #252	; 0xfc
    77b8:	692b      	ldr	r3, [r5, #16]
    *nxt = i + 1;
    77ba:	3401      	adds	r4, #1
    *client = obs[i].client;
    77bc:	6033      	str	r3, [r6, #0]
    *nxt = i + 1;
    77be:	9b08      	ldr	r3, [sp, #32]
    77c0:	701c      	strb	r4, [r3, #0]
}
    77c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    77c4:	20001724 	.word	0x20001724

000077c8 <_Z11get_obs_valv>:
    /*
     * Monotonically increasing observe value.
     */
    static uint32_t obs_val = 2;

    if (obs_val == (1 << 24) - 1) {
    77c8:	4b05      	ldr	r3, [pc, #20]	; (77e0 <_Z11get_obs_valv+0x18>)
    77ca:	4906      	ldr	r1, [pc, #24]	; (77e4 <_Z11get_obs_valv+0x1c>)
    77cc:	681a      	ldr	r2, [r3, #0]
    77ce:	428a      	cmp	r2, r1
    77d0:	d103      	bne.n	77da <_Z11get_obs_valv+0x12>
        obs_val = 2;
    77d2:	2202      	movs	r2, #2
    } else {
        obs_val++;
    77d4:	601a      	str	r2, [r3, #0]
    }

    return obs_val;
    77d6:	6818      	ldr	r0, [r3, #0]
}
    77d8:	4770      	bx	lr
        obs_val++;
    77da:	3201      	adds	r2, #1
    77dc:	e7fa      	b.n	77d4 <_Z11get_obs_valv+0xc>
    77de:	46c0      	nop			; (mov r8, r8)
    77e0:	20000098 	.word	0x20000098
    77e4:	00ffffff 	.word	0x00ffffff

000077e8 <_Z10enable_obsPKcP12coap_msg_ctxPv>:
 * Currently only called from main (net_mgr) task on NIC, so no need for
 * locking.
 */
error_t 
enable_obs(const char *urip, struct coap_msg_ctx *req, void *client)
{
    77e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    77ea:	b085      	sub	sp, #20
    77ec:	9000      	str	r0, [sp, #0]
    77ee:	000e      	movs	r6, r1
    77f0:	9202      	str	r2, [sp, #8]
        add_obs(empty_slot, urip, req, client);
        return ERR_OK;
    }

error:
    return ERR_BAD_DATA;
    77f2:	2314      	movs	r3, #20
    if (urip == NULL)
    77f4:	2800      	cmp	r0, #0
    77f6:	d02f      	beq.n	7858 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    if (strlen(urip) >= MAX_OBS_URI_LEN)
    77f8:	f005 fde3 	bl	d3c2 <strlen>
    return ERR_BAD_DATA;
    77fc:	2314      	movs	r3, #20
    if (strlen(urip) >= MAX_OBS_URI_LEN)
    77fe:	28ff      	cmp	r0, #255	; 0xff
    7800:	d82a      	bhi.n	7858 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    if (req->sid[0] != '\0')
    7802:	7f37      	ldrb	r7, [r6, #28]
    7804:	2f00      	cmp	r7, #0
    7806:	d03f      	beq.n	7888 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xa0>
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    7808:	0037      	movs	r7, r6
    780a:	371c      	adds	r7, #28
    780c:	0038      	movs	r0, r7
    780e:	f005 fdd8 	bl	d3c2 <strlen>
    7812:	0005      	movs	r5, r0
    7814:	4b33      	ldr	r3, [pc, #204]	; (78e4 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xfc>)
    7816:	4a34      	ldr	r2, [pc, #208]	; (78e8 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x100>)
    7818:	1c9c      	adds	r4, r3, #2
    781a:	189b      	adds	r3, r3, r2
    781c:	9301      	str	r3, [sp, #4]
                !memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)))
    781e:	1db3      	adds	r3, r6, #6
    7820:	34ff      	adds	r4, #255	; 0xff
    7822:	9303      	str	r3, [sp, #12]
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    7824:	1ea1      	subs	r1, r4, #2
    7826:	39ff      	subs	r1, #255	; 0xff
    7828:	002a      	movs	r2, r5
    782a:	0038      	movs	r0, r7
    782c:	f005 fde5 	bl	d3fa <strncmp>
    7830:	2800      	cmp	r0, #0
    7832:	d114      	bne.n	785e <_Z10enable_obsPKcP12coap_msg_ctxPv+0x76>
                !memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)))
    7834:	1e63      	subs	r3, r4, #1
    7836:	7871      	ldrb	r1, [r6, #1]
    7838:	781a      	ldrb	r2, [r3, #0]
    783a:	428a      	cmp	r2, r1
    783c:	da00      	bge.n	7840 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x58>
    783e:	000a      	movs	r2, r1
    7840:	0021      	movs	r1, r4
    7842:	9803      	ldr	r0, [sp, #12]
    7844:	f004 fc7c 	bl	c140 <memcmp>
            if (!strncmp(req->sid, obs[i].uri, strlen(req->sid)) && 
    7848:	2800      	cmp	r0, #0
    784a:	d108      	bne.n	785e <_Z10enable_obsPKcP12coap_msg_ctxPv+0x76>
                dlog(LOG_INFO, "Not adding obs entry for %s, sid:token not unique", urip);
    784c:	9a00      	ldr	r2, [sp, #0]
    784e:	4927      	ldr	r1, [pc, #156]	; (78ec <_Z10enable_obsPKcP12coap_msg_ctxPv+0x104>)
            dlog(LOG_INFO, "Not adding obs entry for %s, duplicate.", urip);
    7850:	3006      	adds	r0, #6
    7852:	f7fd f943 	bl	4adc <_Z4dlogiPKcz>
            return ERR_EXISTS;
    7856:	2309      	movs	r3, #9
}
    7858:	0018      	movs	r0, r3
    785a:	b005      	add	sp, #20
    785c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    785e:	3431      	adds	r4, #49	; 0x31
        for (i = 0; i < MAX_OBSERVERS; i++) {
    7860:	9b01      	ldr	r3, [sp, #4]
    7862:	34ff      	adds	r4, #255	; 0xff
    7864:	42a3      	cmp	r3, r4
    7866:	d1dd      	bne.n	7824 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x3c>
    7868:	2404      	movs	r4, #4
    786a:	2700      	movs	r7, #0
        if (!strcmp(urip, obs[i].uri))
    786c:	4d1d      	ldr	r5, [pc, #116]	; (78e4 <_Z10enable_obsPKcP12coap_msg_ctxPv+0xfc>)
    786e:	2398      	movs	r3, #152	; 0x98
    7870:	005b      	lsls	r3, r3, #1
    7872:	437b      	muls	r3, r7
    7874:	9800      	ldr	r0, [sp, #0]
    7876:	18e9      	adds	r1, r5, r3
    7878:	9301      	str	r3, [sp, #4]
    787a:	f005 fd90 	bl	d39e <strcmp>
    787e:	2800      	cmp	r0, #0
    7880:	d104      	bne.n	788c <_Z10enable_obsPKcP12coap_msg_ctxPv+0xa4>
            dlog(LOG_INFO, "Not adding obs entry for %s, duplicate.", urip);
    7882:	9a00      	ldr	r2, [sp, #0]
    7884:	491a      	ldr	r1, [pc, #104]	; (78f0 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x108>)
    7886:	e7e3      	b.n	7850 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x68>
    7888:	2404      	movs	r4, #4
    788a:	e7ef      	b.n	786c <_Z10enable_obsPKcP12coap_msg_ctxPv+0x84>
		else if ((obs[i].uri[0] == '\0') && (empty_slot == MAX_OBSERVERS))
    788c:	9b01      	ldr	r3, [sp, #4]
    788e:	5d5b      	ldrb	r3, [r3, r5]
    7890:	2b00      	cmp	r3, #0
    7892:	d102      	bne.n	789a <_Z10enable_obsPKcP12coap_msg_ctxPv+0xb2>
    7894:	2c04      	cmp	r4, #4
    7896:	d100      	bne.n	789a <_Z10enable_obsPKcP12coap_msg_ctxPv+0xb2>
    7898:	003c      	movs	r4, r7
    for (i = 0; i < MAX_OBSERVERS; i++) {
    789a:	3701      	adds	r7, #1
    789c:	2f04      	cmp	r7, #4
    789e:	d1e6      	bne.n	786e <_Z10enable_obsPKcP12coap_msg_ctxPv+0x86>
    return ERR_BAD_DATA;
    78a0:	2314      	movs	r3, #20
    if (empty_slot < MAX_OBSERVERS)
    78a2:	2c04      	cmp	r4, #4
    78a4:	d0d8      	beq.n	7858 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    obs[slot].tkl = req->tkl;
    78a6:	331d      	adds	r3, #29
    78a8:	33ff      	adds	r3, #255	; 0xff
    78aa:	435c      	muls	r4, r3
    78ac:	192f      	adds	r7, r5, r4
    78ae:	003b      	movs	r3, r7
    78b0:	7872      	ldrb	r2, [r6, #1]
    memcpy(obs[slot].token, req->token, req->tkl);
    78b2:	1ca0      	adds	r0, r4, #2
    obs[slot].tkl = req->tkl;
    78b4:	33ff      	adds	r3, #255	; 0xff
    memcpy(obs[slot].token, req->token, req->tkl);
    78b6:	30ff      	adds	r0, #255	; 0xff
    obs[slot].tkl = req->tkl;
    78b8:	705a      	strb	r2, [r3, #1]
    memcpy(obs[slot].token, req->token, req->tkl);
    78ba:	1db1      	adds	r1, r6, #6
    78bc:	1828      	adds	r0, r5, r0
    78be:	f004 fc4e 	bl	c15e <memcpy>
    strcpy(obs[slot].uri, urip);
    78c2:	9900      	ldr	r1, [sp, #0]
    78c4:	0038      	movs	r0, r7
    78c6:	f005 fd74 	bl	d3b2 <strcpy>
    strcpy(obs[slot].sid, req->sid);
    78ca:	0020      	movs	r0, r4
    78cc:	0031      	movs	r1, r6
    obs[slot].client = client;
    78ce:	9b02      	ldr	r3, [sp, #8]
    strcpy(obs[slot].sid, req->sid);
    78d0:	3011      	adds	r0, #17
    obs[slot].client = client;
    78d2:	37fc      	adds	r7, #252	; 0xfc
    strcpy(obs[slot].sid, req->sid);
    78d4:	30ff      	adds	r0, #255	; 0xff
    obs[slot].client = client;
    78d6:	613b      	str	r3, [r7, #16]
    strcpy(obs[slot].sid, req->sid);
    78d8:	311c      	adds	r1, #28
    78da:	1828      	adds	r0, r5, r0
    78dc:	f005 fd69 	bl	d3b2 <strcpy>
        return ERR_OK;
    78e0:	2300      	movs	r3, #0
    78e2:	e7b9      	b.n	7858 <_Z10enable_obsPKcP12coap_msg_ctxPv+0x70>
    78e4:	20001724 	.word	0x20001724
    78e8:	000005c1 	.word	0x000005c1
    78ec:	00010ca0 	.word	0x00010ca0
    78f0:	00010cd2 	.word	0x00010cd2

000078f4 <_Z11disable_obsPKcP12coap_msg_ctxPPvh>:
 * Currently only called from main (net_mgr) task on NIC, so no need for
 * locking. However, as per enable_obs and client pointer.
 */
error_t 
disable_obs(const char *urip, struct coap_msg_ctx *req, void **client, uint8_t force)
{
    78f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    78f6:	b085      	sub	sp, #20
    78f8:	0007      	movs	r7, r0
    78fa:	9100      	str	r1, [sp, #0]
    78fc:	9201      	str	r2, [sp, #4]
    78fe:	9302      	str	r3, [sp, #8]
    int i;

    if (urip == NULL)
	{
        return ERR_INVAL;
    7900:	2004      	movs	r0, #4
    if (urip == NULL)
    7902:	2f00      	cmp	r7, #0
    7904:	d036      	beq.n	7974 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x80>
    /*
     * Find the uri in the array, and if present, zero the entry.
     */
    for (i = 0; i < MAX_OBSERVERS; i++)
	{
        if (!strcmp(urip, obs[i].uri) && (!memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)) || force))
    7906:	000b      	movs	r3, r1
    if (urip == NULL)
    7908:	2400      	movs	r4, #0
    790a:	4d1f      	ldr	r5, [pc, #124]	; (7988 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x94>)
        if (!strcmp(urip, obs[i].uri) && (!memcmp(req->token, obs[i].token, MAX(req->tkl, obs[i].tkl)) || force))
    790c:	3306      	adds	r3, #6
    790e:	1cae      	adds	r6, r5, #2
    7910:	36ff      	adds	r6, #255	; 0xff
    7912:	9303      	str	r3, [sp, #12]
    7914:	1eb1      	subs	r1, r6, #2
    7916:	39ff      	subs	r1, #255	; 0xff
    7918:	0038      	movs	r0, r7
    791a:	f005 fd40 	bl	d39e <strcmp>
    791e:	2800      	cmp	r0, #0
    7920:	d12a      	bne.n	7978 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x84>
    7922:	9a00      	ldr	r2, [sp, #0]
    7924:	1e73      	subs	r3, r6, #1
    7926:	7851      	ldrb	r1, [r2, #1]
    7928:	781a      	ldrb	r2, [r3, #0]
    792a:	428a      	cmp	r2, r1
    792c:	da00      	bge.n	7930 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x3c>
    792e:	000a      	movs	r2, r1
    7930:	0031      	movs	r1, r6
    7932:	9803      	ldr	r0, [sp, #12]
    7934:	f004 fc04 	bl	c140 <memcmp>
    7938:	2800      	cmp	r0, #0
    793a:	d002      	beq.n	7942 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x4e>
    793c:	9b02      	ldr	r3, [sp, #8]
    793e:	2b00      	cmp	r3, #0
    7940:	d01a      	beq.n	7978 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x84>
		{
            obs[i].uri[0] = '\0';
    7942:	2398      	movs	r3, #152	; 0x98
    7944:	005b      	lsls	r3, r3, #1
    7946:	4363      	muls	r3, r4
    7948:	2400      	movs	r4, #0
    794a:	54ec      	strb	r4, [r5, r3]
            *client = obs[i].client;
    794c:	18ed      	adds	r5, r5, r3
    794e:	002b      	movs	r3, r5
    7950:	33fc      	adds	r3, #252	; 0xfc
    7952:	6919      	ldr	r1, [r3, #16]
    7954:	9a01      	ldr	r2, [sp, #4]
            obs[i].client = NULL;
            memset(obs[i].token, 0, sizeof(obs[i].token));
    7956:	0030      	movs	r0, r6
            *client = obs[i].client;
    7958:	6011      	str	r1, [r2, #0]
            obs[i].sid[0] = '\0';
    795a:	35ff      	adds	r5, #255	; 0xff
            obs[i].client = NULL;
    795c:	611c      	str	r4, [r3, #16]
            memset(obs[i].token, 0, sizeof(obs[i].token));
    795e:	2208      	movs	r2, #8
    7960:	0021      	movs	r1, r4
    7962:	f004 fc17 	bl	c194 <memset>
            dlog(LOG_INFO, "disable_obs: De-registered URI: %s", urip);
    7966:	2006      	movs	r0, #6
            obs[i].sid[0] = '\0';
    7968:	746c      	strb	r4, [r5, #17]
            dlog(LOG_INFO, "disable_obs: De-registered URI: %s", urip);
    796a:	003a      	movs	r2, r7
    796c:	4907      	ldr	r1, [pc, #28]	; (798c <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x98>)
    796e:	f7fd f8b5 	bl	4adc <_Z4dlogiPKcz>
            return ERR_OK;
    7972:	0020      	movs	r0, r4
        }
    }
    return ERR_NO_ENTRY;
}
    7974:	b005      	add	sp, #20
    7976:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7978:	3631      	adds	r6, #49	; 0x31
    for (i = 0; i < MAX_OBSERVERS; i++)
    797a:	3401      	adds	r4, #1
    797c:	36ff      	adds	r6, #255	; 0xff
    797e:	2c04      	cmp	r4, #4
    7980:	d1c8      	bne.n	7914 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x20>
    return ERR_NO_ENTRY;
    7982:	200c      	movs	r0, #12
    7984:	e7f6      	b.n	7974 <_Z11disable_obsPKcP12coap_msg_ctxPPvh+0x80>
    7986:	46c0      	nop			; (mov r8, r8)
    7988:	20001724 	.word	0x20001724
    798c:	00010cfa 	.word	0x00010cfa

00007990 <_Z9copt_initP5sl_co>:
/*
 * Initialse the head.
 */
void
copt_init(struct sl_co *hd)
{
    7990:	b510      	push	{r4, lr}
    assert(hd);
    7992:	2800      	cmp	r0, #0
    7994:	d105      	bne.n	79a2 <_Z9copt_initP5sl_co+0x12>
    7996:	4b04      	ldr	r3, [pc, #16]	; (79a8 <_Z9copt_initP5sl_co+0x18>)
    7998:	4a04      	ldr	r2, [pc, #16]	; (79ac <_Z9copt_initP5sl_co+0x1c>)
    799a:	2180      	movs	r1, #128	; 0x80
    799c:	4804      	ldr	r0, [pc, #16]	; (79b0 <_Z9copt_initP5sl_co+0x20>)
    799e:	f004 fa67 	bl	be70 <__assert_func>

    SLIST_INIT(hd);
    79a2:	2300      	movs	r3, #0
    79a4:	6003      	str	r3, [r0, #0]
}
    79a6:	bd10      	pop	{r4, pc}
    79a8:	00010d4a 	.word	0x00010d4a
    79ac:	00010e24 	.word	0x00010e24
    79b0:	00010d4d 	.word	0x00010d4d

000079b4 <_Z12copt_del_allP5sl_co>:
 *
 * @return: None.
 */
void
copt_del_all(struct sl_co *hd)
{
    79b4:	b570      	push	{r4, r5, r6, lr}
    79b6:	1e04      	subs	r4, r0, #0
    coap_opt *curr, *tmp;

    assert(hd);
    79b8:	d105      	bne.n	79c6 <_Z12copt_del_allP5sl_co+0x12>
    79ba:	4b0c      	ldr	r3, [pc, #48]	; (79ec <_Z12copt_del_allP5sl_co+0x38>)
    79bc:	4a0c      	ldr	r2, [pc, #48]	; (79f0 <_Z12copt_del_allP5sl_co+0x3c>)
    79be:	2192      	movs	r1, #146	; 0x92
    79c0:	480c      	ldr	r0, [pc, #48]	; (79f4 <_Z12copt_del_allP5sl_co+0x40>)
    79c2:	f004 fa55 	bl	be70 <__assert_func>
    SLIST_FOREACH_SAFE(curr, hd, nxt, tmp) {
    79c6:	6800      	ldr	r0, [r0, #0]
    79c8:	2800      	cmp	r0, #0
    79ca:	d00e      	beq.n	79ea <_Z12copt_del_allP5sl_co+0x36>
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    79cc:	6823      	ldr	r3, [r4, #0]
    SLIST_FOREACH_SAFE(curr, hd, nxt, tmp) {
    79ce:	6885      	ldr	r5, [r0, #8]
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    79d0:	4298      	cmp	r0, r3
    79d2:	d105      	bne.n	79e0 <_Z12copt_del_allP5sl_co+0x2c>
    79d4:	6025      	str	r5, [r4, #0]
        free(co);
    79d6:	f004 fb97 	bl	c108 <free>
    79da:	0028      	movs	r0, r5
    79dc:	e7f4      	b.n	79c8 <_Z12copt_del_allP5sl_co+0x14>
    79de:	0013      	movs	r3, r2
        SLIST_REMOVE(hd, curr, coap_opt, nxt);
    79e0:	689a      	ldr	r2, [r3, #8]
    79e2:	4290      	cmp	r0, r2
    79e4:	d1fb      	bne.n	79de <_Z12copt_del_allP5sl_co+0x2a>
    79e6:	609d      	str	r5, [r3, #8]
    79e8:	e7f5      	b.n	79d6 <_Z12copt_del_allP5sl_co+0x22>
        copt_dealloc(curr);
    }

    return;
}
    79ea:	bd70      	pop	{r4, r5, r6, pc}
    79ec:	00010d4a 	.word	0x00010d4a
    79f0:	00010da0 	.word	0x00010da0
    79f4:	00010d4d 	.word	0x00010d4d

000079f8 <_Z12copt_add_optP5sl_coP5optlv>:
 *
 * @return: 0 on sucess.
 */
error_t
copt_add_opt(struct sl_co *hd, struct optlv *opt)
{
    79f8:	b570      	push	{r4, r5, r6, lr}
    79fa:	0006      	movs	r6, r0
    79fc:	000d      	movs	r5, r1
    assert(hd);
    79fe:	2800      	cmp	r0, #0
    7a00:	d105      	bne.n	7a0e <_Z12copt_add_optP5sl_coP5optlv+0x16>
    7a02:	21a9      	movs	r1, #169	; 0xa9
    7a04:	4b19      	ldr	r3, [pc, #100]	; (7a6c <_Z12copt_add_optP5sl_coP5optlv+0x74>)
    7a06:	4a1a      	ldr	r2, [pc, #104]	; (7a70 <_Z12copt_add_optP5sl_coP5optlv+0x78>)
    coap_opt *nco;       /* New coap option */
    coap_opt *o, *po;    /* option iterator, previous option. */
    error_t rc = ERR_OK;

    assert(hd);
    assert(opt);
    7a08:	481a      	ldr	r0, [pc, #104]	; (7a74 <_Z12copt_add_optP5sl_coP5optlv+0x7c>)
    7a0a:	f004 fa31 	bl	be70 <__assert_func>
    7a0e:	2900      	cmp	r1, #0
    7a10:	d103      	bne.n	7a1a <_Z12copt_add_optP5sl_coP5optlv+0x22>
    7a12:	4b19      	ldr	r3, [pc, #100]	; (7a78 <_Z12copt_add_optP5sl_coP5optlv+0x80>)
    7a14:	4a16      	ldr	r2, [pc, #88]	; (7a70 <_Z12copt_add_optP5sl_coP5optlv+0x78>)
    7a16:	21af      	movs	r1, #175	; 0xaf
    7a18:	e7f6      	b.n	7a08 <_Z12copt_add_optP5sl_coP5optlv+0x10>
    if ((co = (coap_opt *)malloc(sizeof(coap_opt))) != NULL) {
    7a1a:	200c      	movs	r0, #12
    7a1c:	f004 fb6a 	bl	c0f4 <malloc>
    7a20:	0004      	movs	r4, r0
    /*
     * Find the node with the correct option value.
     * If present, allocate and append a new object, set object values.
     */
    if ((nco = copt_alloc()) == NULL) {
        rc = ERR_NO_MEM;
    7a22:	2003      	movs	r0, #3
    if ((co = (coap_opt *)malloc(sizeof(coap_opt))) != NULL) {
    7a24:	2c00      	cmp	r4, #0
    7a26:	d012      	beq.n	7a4e <_Z12copt_add_optP5sl_coP5optlv+0x56>
        memset(co, 0, sizeof(coap_opt));
    7a28:	220c      	movs	r2, #12
    7a2a:	2100      	movs	r1, #0
    7a2c:	0020      	movs	r0, r4
    7a2e:	f004 fbb1 	bl	c194 <memset>
        goto done;
    }
    nco->o = *opt;
    7a32:	0023      	movs	r3, r4
    7a34:	002a      	movs	r2, r5
    7a36:	ca03      	ldmia	r2!, {r0, r1}
    7a38:	c303      	stmia	r3!, {r0, r1}

    if (SLIST_EMPTY(hd) || (SLIST_FIRST(hd)->o.ot > opt->ot)) {
    7a3a:	6833      	ldr	r3, [r6, #0]
    7a3c:	2b00      	cmp	r3, #0
    7a3e:	d003      	beq.n	7a48 <_Z12copt_add_optP5sl_coP5optlv+0x50>
    7a40:	882a      	ldrh	r2, [r5, #0]
    7a42:	8819      	ldrh	r1, [r3, #0]
    7a44:	4291      	cmp	r1, r2
    7a46:	dd04      	ble.n	7a52 <_Z12copt_add_optP5sl_coP5optlv+0x5a>
        SLIST_INSERT_HEAD(hd, nco, nxt);
    7a48:	60a3      	str	r3, [r4, #8]
    7a4a:	6034      	str	r4, [r6, #0]
    error_t rc = ERR_OK;
    7a4c:	2000      	movs	r0, #0
     */
    SLIST_INSERT_AFTER(po, nco, nxt);
    
done:
    return rc;
}
    7a4e:	bd70      	pop	{r4, r5, r6, pc}
    7a50:	0003      	movs	r3, r0
        if (SLIST_NEXT(o, nxt) && (SLIST_NEXT(o, nxt)->o.ot > opt->ot)) {
    7a52:	6898      	ldr	r0, [r3, #8]
    7a54:	2800      	cmp	r0, #0
    7a56:	d005      	beq.n	7a64 <_Z12copt_add_optP5sl_coP5optlv+0x6c>
    7a58:	8801      	ldrh	r1, [r0, #0]
    7a5a:	428a      	cmp	r2, r1
    7a5c:	daf8      	bge.n	7a50 <_Z12copt_add_optP5sl_coP5optlv+0x58>
            SLIST_INSERT_AFTER(o, nco, nxt);
    7a5e:	60a0      	str	r0, [r4, #8]
    7a60:	609c      	str	r4, [r3, #8]
    7a62:	e7f3      	b.n	7a4c <_Z12copt_add_optP5sl_coP5optlv+0x54>
    SLIST_INSERT_AFTER(po, nco, nxt);
    7a64:	60a0      	str	r0, [r4, #8]
    7a66:	609c      	str	r4, [r3, #8]
    return rc;
    7a68:	e7f1      	b.n	7a4e <_Z12copt_add_optP5sl_coP5optlv+0x56>
    7a6a:	46c0      	nop			; (mov r8, r8)
    7a6c:	00010d4a 	.word	0x00010d4a
    7a70:	00010d7b 	.word	0x00010d7b
    7a74:	00010d4d 	.word	0x00010d4d
    7a78:	00010d1d 	.word	0x00010d1d

00007a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>:
 *
 * @return: The next option (as optlv) in the list, or NULL if no more.
 */
struct optlv *
copt_get_next_opt_type(const struct sl_co *hd, uint16_t ot, void **it)
{
    7a7c:	b507      	push	{r0, r1, r2, lr}
    struct optlv *opt;
    coap_opt **ppco = (coap_opt **)it;
    coap_opt *pco;

    assert(hd);
    7a7e:	2800      	cmp	r0, #0
    7a80:	d106      	bne.n	7a90 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x14>
    7a82:	2183      	movs	r1, #131	; 0x83
    7a84:	4b0e      	ldr	r3, [pc, #56]	; (7ac0 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x44>)
    7a86:	4a0f      	ldr	r2, [pc, #60]	; (7ac4 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x48>)
    7a88:	0049      	lsls	r1, r1, #1
    7a8a:	480f      	ldr	r0, [pc, #60]	; (7ac8 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x4c>)
    7a8c:	f004 f9f0 	bl	be70 <__assert_func>
    pco = SLIST_FIRST(hd);
    7a90:	6800      	ldr	r0, [r0, #0]
    if (!ppco) {    /* Allow passing in NULL to find any instances */
        ppco = &pco;
    7a92:	ab01      	add	r3, sp, #4
    pco = SLIST_FIRST(hd);
    7a94:	9001      	str	r0, [sp, #4]
    if (!ppco) {    /* Allow passing in NULL to find any instances */
    7a96:	2a00      	cmp	r2, #0
    7a98:	d004      	beq.n	7aa4 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x28>
    } else if (!*ppco) {
    7a9a:	6813      	ldr	r3, [r2, #0]
    7a9c:	2b00      	cmp	r3, #0
    7a9e:	d10a      	bne.n	7ab6 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x3a>
        *ppco = SLIST_FIRST(hd);
    7aa0:	6010      	str	r0, [r2, #0]
    } else {
        *ppco = SLIST_NEXT(*ppco, nxt);
    7aa2:	0013      	movs	r3, r2
    }
    while (*ppco) {
    7aa4:	6818      	ldr	r0, [r3, #0]
    7aa6:	2800      	cmp	r0, #0
    7aa8:	d008      	beq.n	7abc <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x40>
        if ((*ppco)->o.ot == ot) {
    7aaa:	8802      	ldrh	r2, [r0, #0]
    7aac:	428a      	cmp	r2, r1
    7aae:	d005      	beq.n	7abc <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x40>
            break;
        }
        *ppco = SLIST_NEXT(*ppco, nxt);
    7ab0:	6882      	ldr	r2, [r0, #8]
    7ab2:	601a      	str	r2, [r3, #0]
    while (*ppco) {
    7ab4:	e7f6      	b.n	7aa4 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x28>
        *ppco = SLIST_NEXT(*ppco, nxt);
    7ab6:	689b      	ldr	r3, [r3, #8]
    7ab8:	6013      	str	r3, [r2, #0]
    7aba:	e7f2      	b.n	7aa2 <_Z22copt_get_next_opt_typePK5sl_cotPPv+0x26>
        opt = &((*ppco)->o);
    } else {
        opt = NULL;
    }
    return opt;
}
    7abc:	bd0e      	pop	{r1, r2, r3, pc}
    7abe:	46c0      	nop			; (mov r8, r8)
    7ac0:	00010d4a 	.word	0x00010d4a
    7ac4:	00010de6 	.word	0x00010de6
    7ac8:	00010d4d 	.word	0x00010d4d

00007acc <_Z17copt_del_opt_typeP5sl_cot>:
 *
 * @return: 0 if anything deleted.
 */
error_t
copt_del_opt_type(struct sl_co *hd, uint16_t ot)
{
    7acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ace:	0004      	movs	r4, r0
    7ad0:	000f      	movs	r7, r1
    error_t rc = ERR_NO_ENTRY;
    assert(hd);
    7ad2:	2800      	cmp	r0, #0
    7ad4:	d106      	bne.n	7ae4 <_Z17copt_del_opt_typeP5sl_cot+0x18>
    7ad6:	214c      	movs	r1, #76	; 0x4c
    7ad8:	4b12      	ldr	r3, [pc, #72]	; (7b24 <_Z17copt_del_opt_typeP5sl_cot+0x58>)
    7ada:	4a13      	ldr	r2, [pc, #76]	; (7b28 <_Z17copt_del_opt_typeP5sl_cot+0x5c>)
    7adc:	31ff      	adds	r1, #255	; 0xff
    7ade:	4813      	ldr	r0, [pc, #76]	; (7b2c <_Z17copt_del_opt_typeP5sl_cot+0x60>)
    7ae0:	f004 f9c6 	bl	be70 <__assert_func>
    error_t rc = ERR_NO_ENTRY;
    7ae4:	250c      	movs	r5, #12
    coap_opt *o, *tmp;

    SLIST_FOREACH_SAFE(o, hd, nxt, tmp) {
    7ae6:	6800      	ldr	r0, [r0, #0]
    7ae8:	2800      	cmp	r0, #0
    7aea:	d012      	beq.n	7b12 <_Z17copt_del_opt_typeP5sl_cot+0x46>
        if (o->o.ot == ot) {
    7aec:	8803      	ldrh	r3, [r0, #0]
    SLIST_FOREACH_SAFE(o, hd, nxt, tmp) {
    7aee:	6886      	ldr	r6, [r0, #8]
        if (o->o.ot == ot) {
    7af0:	42bb      	cmp	r3, r7
    7af2:	d106      	bne.n	7b02 <_Z17copt_del_opt_typeP5sl_cot+0x36>
            rc = ERR_OK;
            SLIST_REMOVE(hd, o, coap_opt, nxt);
    7af4:	6823      	ldr	r3, [r4, #0]
    7af6:	4298      	cmp	r0, r3
    7af8:	d106      	bne.n	7b08 <_Z17copt_del_opt_typeP5sl_cot+0x3c>
    7afa:	6026      	str	r6, [r4, #0]
        free(co);
    7afc:	f004 fb04 	bl	c108 <free>
            rc = ERR_OK;
    7b00:	2500      	movs	r5, #0
    7b02:	0030      	movs	r0, r6
    7b04:	e7f0      	b.n	7ae8 <_Z17copt_del_opt_typeP5sl_cot+0x1c>
    7b06:	0013      	movs	r3, r2
            SLIST_REMOVE(hd, o, coap_opt, nxt);
    7b08:	689a      	ldr	r2, [r3, #8]
    7b0a:	4290      	cmp	r0, r2
    7b0c:	d1fb      	bne.n	7b06 <_Z17copt_del_opt_typeP5sl_cot+0x3a>
    7b0e:	609e      	str	r6, [r3, #8]
    7b10:	e7f4      	b.n	7afc <_Z17copt_del_opt_typeP5sl_cot+0x30>
            copt_dealloc(o);
        }
    }

    if (rc) {
    7b12:	2d00      	cmp	r5, #0
    7b14:	d004      	beq.n	7b20 <_Z17copt_del_opt_typeP5sl_cot+0x54>
        dlog(LOG_DEBUG, "Didn't find option %d to delete.", ot);
    7b16:	003a      	movs	r2, r7
    7b18:	4905      	ldr	r1, [pc, #20]	; (7b30 <_Z17copt_del_opt_typeP5sl_cot+0x64>)
    7b1a:	2007      	movs	r0, #7
    7b1c:	f7fc ffde 	bl	4adc <_Z4dlogiPKcz>
    }

    return rc;
}
    7b20:	0028      	movs	r0, r5
    7b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b24:	00010d4a 	.word	0x00010d4a
    7b28:	00010dba 	.word	0x00010dba
    7b2c:	00010d4d 	.word	0x00010d4d
    7b30:	00010d29 	.word	0x00010d29

00007b34 <_Z14observe_rx_ackPvP4mbuf>:
 */
error_t observe_rx_ack(void *cbctx, struct mbuf *m)
{
	// Bump the sequence number.
	uint32_t seq_number = *((uint32_t *)cbctx);
	seq_number++;
    7b34:	6803      	ldr	r3, [r0, #0]
    7b36:	3301      	adds	r3, #1
	*((uint32_t *)cbctx) = seq_number;
    7b38:	6003      	str	r3, [r0, #0]
	
	return ERR_OK;
}
    7b3a:	2000      	movs	r0, #0
    7b3c:	4770      	bx	lr
	...

00007b40 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh>:
{
    7b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    7b42:	2434      	movs	r4, #52	; 0x34
{
    7b44:	4684      	mov	ip, r0
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    7b46:	4d11      	ldr	r5, [pc, #68]	; (7b8c <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x4c>)
    7b48:	4e11      	ldr	r6, [pc, #68]	; (7b90 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x50>)
    7b4a:	7828      	ldrb	r0, [r5, #0]
{
    7b4c:	000f      	movs	r7, r1
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    7b4e:	4360      	muls	r0, r4
{
    7b50:	9200      	str	r2, [sp, #0]
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    7b52:	4910      	ldr	r1, [pc, #64]	; (7b94 <_Z17set_observer_sapiPKcPF7error_eP4mbufPhhEmh+0x54>)
    7b54:	4662      	mov	r2, ip
    7b56:	1830      	adds	r0, r6, r0
{
    7b58:	9301      	str	r3, [sp, #4]
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", sensor_type);
    7b5a:	f005 fbf1 	bl	d340 <siprintf>
	observe_info[observe_info_index].pObsFunc = p;
    7b5e:	782b      	ldrb	r3, [r5, #0]
	observe_info[observe_info_index].sensor_id = sensor_id;
    7b60:	466a      	mov	r2, sp
	observe_info[observe_info_index].pObsFunc = p;
    7b62:	435c      	muls	r4, r3
	observe_info[observe_info_index].frequency = frequency;
    7b64:	9b00      	ldr	r3, [sp, #0]
	observe_info[observe_info_index].pObsFunc = p;
    7b66:	1936      	adds	r6, r6, r4
	observe_info[observe_info_index].frequency = frequency;
    7b68:	62b3      	str	r3, [r6, #40]	; 0x28
	observe_info[observe_info_index].sensor_id = sensor_id;
    7b6a:	0033      	movs	r3, r6
    7b6c:	7912      	ldrb	r2, [r2, #4]
    7b6e:	3331      	adds	r3, #49	; 0x31
    7b70:	701a      	strb	r2, [r3, #0]
	observe_info[observe_info_index].obs_flag = 0;
    7b72:	0032      	movs	r2, r6
    7b74:	2300      	movs	r3, #0
    7b76:	3230      	adds	r2, #48	; 0x30
	observe_info[observe_info_index].pObsFunc = p;
    7b78:	6237      	str	r7, [r6, #32]
	observe_info[observe_info_index].ack_seqno = 0;
    7b7a:	62f3      	str	r3, [r6, #44]	; 0x2c
	observe_info[observe_info_index].obs_flag = 0;
    7b7c:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].base_epoch = get_rtc_epoch();
    7b7e:	f7fc ff15 	bl	49ac <_Z13get_rtc_epochv>
    7b82:	6270      	str	r0, [r6, #36]	; 0x24
	return observe_info_index++;
    7b84:	7828      	ldrb	r0, [r5, #0]
    7b86:	1c43      	adds	r3, r0, #1
    7b88:	702b      	strb	r3, [r5, #0]
}
    7b8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7b8c:	20001be4 	.word	0x20001be4
    7b90:	20001be8 	.word	0x20001be8
    7b94:	00010f7f 	.word	0x00010f7f

00007b98 <_Z12set_observerPKcPF7error_eP4mbufPhhE>:
{
    7b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    7b9a:	2534      	movs	r5, #52	; 0x34
    7b9c:	4c0d      	ldr	r4, [pc, #52]	; (7bd4 <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x3c>)
    7b9e:	4e0e      	ldr	r6, [pc, #56]	; (7bd8 <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x40>)
    7ba0:	7823      	ldrb	r3, [r4, #0]
{
    7ba2:	000f      	movs	r7, r1
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    7ba4:	436b      	muls	r3, r5
{
    7ba6:	0002      	movs	r2, r0
	sprintf(observe_info[observe_info_index].obs_uri, "/arduino/%s", uri_rsrc_name);
    7ba8:	490c      	ldr	r1, [pc, #48]	; (7bdc <_Z12set_observerPKcPF7error_eP4mbufPhhE+0x44>)
    7baa:	18f0      	adds	r0, r6, r3
    7bac:	f005 fbc8 	bl	d340 <siprintf>
	observe_info[observe_info_index].frequency = OBSERVATION_FREQUENCY;
    7bb0:	233c      	movs	r3, #60	; 0x3c
	observe_info[observe_info_index].pObsFunc = p;
    7bb2:	7824      	ldrb	r4, [r4, #0]
    7bb4:	436c      	muls	r4, r5
    7bb6:	1934      	adds	r4, r6, r4
	observe_info[observe_info_index].sensor_id = 0;
    7bb8:	0022      	movs	r2, r4
	observe_info[observe_info_index].frequency = OBSERVATION_FREQUENCY;
    7bba:	62a3      	str	r3, [r4, #40]	; 0x28
	observe_info[observe_info_index].sensor_id = 0;
    7bbc:	2300      	movs	r3, #0
    7bbe:	3231      	adds	r2, #49	; 0x31
    7bc0:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].obs_flag = 0;
    7bc2:	3a01      	subs	r2, #1
	observe_info[observe_info_index].pObsFunc = p;
    7bc4:	6227      	str	r7, [r4, #32]
	observe_info[observe_info_index].obs_flag = 0;
    7bc6:	7013      	strb	r3, [r2, #0]
	observe_info[observe_info_index].ack_seqno = 0;
    7bc8:	62e3      	str	r3, [r4, #44]	; 0x2c
	observe_info[observe_info_index].base_epoch = get_rtc_epoch();
    7bca:	f7fc feef 	bl	49ac <_Z13get_rtc_epochv>
    7bce:	6260      	str	r0, [r4, #36]	; 0x24
}
    7bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7bd2:	46c0      	nop			; (mov r8, r8)
    7bd4:	20001be4 	.word	0x20001be4
    7bd8:	20001be8 	.word	0x20001be8
    7bdc:	00010f7f 	.word	0x00010f7f

00007be0 <_Z17coap_obs_reg_sapih>:
{
    7be0:	b510      	push	{r4, lr}
    7be2:	0004      	movs	r4, r0
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    7be4:	f7fc fee2 	bl	49ac <_Z13get_rtc_epochv>
    7be8:	2334      	movs	r3, #52	; 0x34
    7bea:	435c      	muls	r4, r3
    7bec:	4b05      	ldr	r3, [pc, #20]	; (7c04 <_Z17coap_obs_reg_sapih+0x24>)
	observe_info[observer_id].obs_flag = 1;
    7bee:	2101      	movs	r1, #1
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    7bf0:	191b      	adds	r3, r3, r4
	observe_info[observer_id].obs_flag = 1;
    7bf2:	001a      	movs	r2, r3
    7bf4:	3230      	adds	r2, #48	; 0x30
    7bf6:	7011      	strb	r1, [r2, #0]
	observe_info[observer_id].ack_seqno = 10;
    7bf8:	220a      	movs	r2, #10
	observe_info[observer_id].base_epoch = get_rtc_epoch();
    7bfa:	6258      	str	r0, [r3, #36]	; 0x24
	observe_info[observer_id].ack_seqno = 10;
    7bfc:	62da      	str	r2, [r3, #44]	; 0x2c
}
    7bfe:	2000      	movs	r0, #0
    7c00:	bd10      	pop	{r4, pc}
    7c02:	46c0      	nop			; (mov r8, r8)
    7c04:	20001be8 	.word	0x20001be8

00007c08 <_Z19coap_obs_dereg_sapih>:
	observe_info[observer_id].obs_flag = 0;
    7c08:	2134      	movs	r1, #52	; 0x34
    7c0a:	4341      	muls	r1, r0
    7c0c:	4b07      	ldr	r3, [pc, #28]	; (7c2c <_Z19coap_obs_dereg_sapih+0x24>)
{
    7c0e:	b510      	push	{r4, lr}
	observe_info[observer_id].obs_flag = 0;
    7c10:	185b      	adds	r3, r3, r1
    7c12:	0019      	movs	r1, r3
    7c14:	2400      	movs	r4, #0
    7c16:	3130      	adds	r1, #48	; 0x30
{
    7c18:	0002      	movs	r2, r0
	observe_info[observer_id].obs_flag = 0;
    7c1a:	700c      	strb	r4, [r1, #0]
	observe_info[observer_id].base_epoch = 0;
    7c1c:	625c      	str	r4, [r3, #36]	; 0x24
	observe_info[observer_id].ack_seqno = 0;
    7c1e:	62dc      	str	r4, [r3, #44]	; 0x2c
	dlog(LOG_DEBUG, "De-register Observe: %d", observer_id);
    7c20:	4903      	ldr	r1, [pc, #12]	; (7c30 <_Z19coap_obs_dereg_sapih+0x28>)
    7c22:	2007      	movs	r0, #7
    7c24:	f7fc ff5a 	bl	4adc <_Z4dlogiPKcz>
}
    7c28:	0020      	movs	r0, r4
    7c2a:	bd10      	pop	{r4, pc}
    7c2c:	20001be8 	.word	0x20001be8
    7c30:	00010f8b 	.word	0x00010f8b

00007c34 <_Z16coap_observe_rsph>:
 * coap_msg_response() to build a response.
 * Register for callback when ACK received.
 * Set pending_rsp, freeing any existing one first.
 */
error_t coap_observe_rsp(uint8_t observer_id)
{
    7c34:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct coap_msg_ctx rsp;
    coap_ack_cb_info_t 	cbi;			// Callback info
    uint8_t 			len = 0;		// Message length
    7c36:	270a      	movs	r7, #10
{
    7c38:	b09f      	sub	sp, #124	; 0x7c
    uint8_t 			len = 0;		// Message length
    7c3a:	ab02      	add	r3, sp, #8
    uint8_t 			nxt = 0;		// The next observer
    7c3c:	260b      	movs	r6, #11
    uint8_t 			len = 0;		// Message length
    7c3e:	18ff      	adds	r7, r7, r3
    7c40:	2300      	movs	r3, #0
    uint8_t 			nxt = 0;		// The next observer
    7c42:	aa02      	add	r2, sp, #8
    7c44:	18b6      	adds	r6, r6, r2
    uint8_t 			len = 0;		// Message length
    7c46:	703b      	strb	r3, [r7, #0]
    uint8_t 			nxt = 0;		// The next observer
    7c48:	7033      	strb	r3, [r6, #0]
    struct mbuf *		m = NULL;		// Observe response message
    struct optlv 		opt;
    error_t 			rc = ERR_OK;

	// Safety check. If a message is already in progress do nothing.
    if (pending_rsp) 
    7c4a:	4b59      	ldr	r3, [pc, #356]	; (7db0 <_Z16coap_observe_rsph+0x17c>)
{
    7c4c:	0004      	movs	r4, r0
    if (pending_rsp) 
    7c4e:	6819      	ldr	r1, [r3, #0]
    7c50:	2900      	cmp	r1, #0
    7c52:	d007      	beq.n	7c64 <_Z16coap_observe_rsph+0x30>
	{
		dlog(LOG_DEBUG, "coap_observe_rsp: Pending response in progress - skipping new notification");
    7c54:	4957      	ldr	r1, [pc, #348]	; (7db4 <_Z16coap_observe_rsph+0x180>)
    7c56:	2007      	movs	r0, #7
    7c58:	f7fc ff40 	bl	4adc <_Z4dlogiPKcz>
		return ERR_INPROGRESS;
    7c5c:	2410      	movs	r4, #16
error:
    copt_del_all((sl_co*)&(rsp.oh));
    dlog(LOG_DEBUG, "coap_observe_rsp: free response mbuf on error");
    m_free(m);
    return rc;
}
    7c5e:	0020      	movs	r0, r4
    7c60:	b01f      	add	sp, #124	; 0x7c
    7c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rsp, 0, sizeof(rsp));
    7c64:	ad09      	add	r5, sp, #36	; 0x24
    7c66:	2254      	movs	r2, #84	; 0x54
    7c68:	0028      	movs	r0, r5
    7c6a:	f004 fa93 	bl	c194 <memset>
	rc = get_obs_by_uri(observe_info[observer_id].obs_uri, &(rsp.tkl), rsp.token, &(rsp.client), &nxt);
    7c6e:	2222      	movs	r2, #34	; 0x22
    7c70:	2334      	movs	r3, #52	; 0x34
    7c72:	a902      	add	r1, sp, #8
    7c74:	1852      	adds	r2, r2, r1
    7c76:	211d      	movs	r1, #29
    7c78:	4363      	muls	r3, r4
    7c7a:	4c4f      	ldr	r4, [pc, #316]	; (7db8 <_Z16coap_observe_rsph+0x184>)
    7c7c:	a802      	add	r0, sp, #8
    7c7e:	18e4      	adds	r4, r4, r3
    7c80:	9302      	str	r3, [sp, #8]
    7c82:	1809      	adds	r1, r1, r0
    7c84:	9600      	str	r6, [sp, #0]
    7c86:	ab1a      	add	r3, sp, #104	; 0x68
    7c88:	0020      	movs	r0, r4
    7c8a:	f7ff fd63 	bl	7754 <_Z14get_obs_by_uriPKcPhS1_PPvS1_>
    7c8e:	9003      	str	r0, [sp, #12]
    if (rc)
    7c90:	2800      	cmp	r0, #0
    7c92:	d006      	beq.n	7ca2 <_Z16coap_observe_rsph+0x6e>
        dlog(LOG_ERR, "get_obs_by_uri failed: %s", observe_info[observer_id].obs_uri);
    7c94:	0022      	movs	r2, r4
    7c96:	4949      	ldr	r1, [pc, #292]	; (7dbc <_Z16coap_observe_rsph+0x188>)
    7c98:	2003      	movs	r0, #3
    7c9a:	f7fc ff1f 	bl	4adc <_Z4dlogiPKcz>
        return ERR_NO_ENTRY;
    7c9e:	240c      	movs	r4, #12
    7ca0:	e7dd      	b.n	7c5e <_Z16coap_observe_rsph+0x2a>
    copt_init((sl_co*)&(rsp.oh));
    7ca2:	a81c      	add	r0, sp, #112	; 0x70
    7ca4:	f7ff fe74 	bl	7990 <_Z9copt_initP5sl_co>
	m = m_gethdr();
    7ca8:	f000 fce6 	bl	8678 <_Z5m_getv>
    7cac:	1e06      	subs	r6, r0, #0
    if (!m) 
    7cae:	d030      	beq.n	7d12 <_Z16coap_observe_rsph+0xde>
    m_prepend(m, COAP_OBS_HDR_SZ);
    7cb0:	211c      	movs	r1, #28
    7cb2:	f000 fd27 	bl	8704 <_Z9m_prependP4mbufi>
	if (is_sapi == 1)
    7cb6:	4b42      	ldr	r3, [pc, #264]	; (7dc0 <_Z16coap_observe_rsph+0x18c>)
    7cb8:	781a      	ldrb	r2, [r3, #0]
    7cba:	6a23      	ldr	r3, [r4, #32]
    7cbc:	2a01      	cmp	r2, #1
    7cbe:	d12a      	bne.n	7d16 <_Z16coap_observe_rsph+0xe2>
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, observe_info[observer_id].sensor_id);
    7cc0:	3431      	adds	r4, #49	; 0x31
    7cc2:	7822      	ldrb	r2, [r4, #0]
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, 0);
    7cc4:	0039      	movs	r1, r7
    7cc6:	0030      	movs	r0, r6
    7cc8:	4798      	blx	r3
    7cca:	1e04      	subs	r4, r0, #0
    if (rc != ERR_OK) 
    7ccc:	d137      	bne.n	7d3e <_Z16coap_observe_rsph+0x10a>
    m_adj( m, COAP_OBS_HDR_SZ );
    7cce:	211c      	movs	r1, #28
    7cd0:	0030      	movs	r0, r6
    7cd2:	f000 fd3d 	bl	8750 <_Z5m_adjP4mbufi>
    rsp.msg = m;
    7cd6:	652e      	str	r6, [r5, #80]	; 0x50
    rsp.mid = get_mid_val();
    7cd8:	f7ff fb4c 	bl	7374 <_Z11get_mid_valv>
	opt.ol = 3;
    7cdc:	2703      	movs	r7, #3
	opt.ot = COAP_OPTION_OBSERVE;
    7cde:	2306      	movs	r3, #6
    7ce0:	ac07      	add	r4, sp, #28
    rsp.mid = get_mid_val();
    7ce2:	80a8      	strh	r0, [r5, #4]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    7ce4:	0021      	movs	r1, r4
    7ce6:	a81c      	add	r0, sp, #112	; 0x70
	opt.ot = COAP_OPTION_OBSERVE;
    7ce8:	8023      	strh	r3, [r4, #0]
	opt.ol = 3;
    7cea:	8067      	strh	r7, [r4, #2]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    7cec:	f7ff fe84 	bl	79f8 <_Z12copt_add_optP5sl_coP5optlv>
		dlog(LOG_ERR, "Couldn't add Observe option");
    7cf0:	4934      	ldr	r1, [pc, #208]	; (7dc4 <_Z16coap_observe_rsph+0x190>)
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    7cf2:	2800      	cmp	r0, #0
    7cf4:	d10a      	bne.n	7d0c <_Z16coap_observe_rsph+0xd8>
	opt.ot = COAP_OPTION_MAXAGE;
    7cf6:	230e      	movs	r3, #14
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    7cf8:	0021      	movs	r1, r4
	opt.ot = COAP_OPTION_MAXAGE;
    7cfa:	8023      	strh	r3, [r4, #0]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    7cfc:	a81c      	add	r0, sp, #112	; 0x70
	opt.ol = 4;
    7cfe:	3b0a      	subs	r3, #10
    7d00:	8063      	strh	r3, [r4, #2]
	if (copt_add_opt((sl_co*)&(rsp.oh), &opt) != ERR_OK) 
    7d02:	f7ff fe79 	bl	79f8 <_Z12copt_add_optP5sl_coP5optlv>
    7d06:	1e04      	subs	r4, r0, #0
    7d08:	d007      	beq.n	7d1a <_Z16coap_observe_rsph+0xe6>
		dlog(LOG_ERR, "Couldn't add Max-Age option");
    7d0a:	492f      	ldr	r1, [pc, #188]	; (7dc8 <_Z16coap_observe_rsph+0x194>)
    7d0c:	0038      	movs	r0, r7
    7d0e:	f7fc fee5 	bl	4adc <_Z4dlogiPKcz>
		rc = ERR_NO_MEM;
    7d12:	2403      	movs	r4, #3
    7d14:	e013      	b.n	7d3e <_Z16coap_observe_rsph+0x10a>
		rc = (*(observe_info[observer_id].pObsFunc))(m, &len, 0);
    7d16:	9a03      	ldr	r2, [sp, #12]
    7d18:	e7d4      	b.n	7cc4 <_Z16coap_observe_rsph+0x90>
	rsp.plen = m->m_pktlen; /* payload includes type and length */
    7d1a:	8833      	ldrh	r3, [r6, #0]
	rsp.cf = COAP_CF_CSV;
    7d1c:	2202      	movs	r2, #2
	rsp.plen = m->m_pktlen; /* payload includes type and length */
    7d1e:	642b      	str	r3, [r5, #64]	; 0x40
    rsp.code = COAP_RSP_205_CONTENT;
    7d20:	2345      	movs	r3, #69	; 0x45
    7d22:	70ab      	strb	r3, [r5, #2]
	rsp.cf = COAP_CF_CSV;
    7d24:	ab18      	add	r3, sp, #96	; 0x60
    7d26:	701a      	strb	r2, [r3, #0]
    rsp.type = COAP_T_NCONF_VAL; // TODO: CON or NON?
    7d28:	2301      	movs	r3, #1
    if (coap_msg_response(&rsp) != ERR_OK) 
    7d2a:	0028      	movs	r0, r5
    rsp.type = COAP_T_NCONF_VAL; // TODO: CON or NON?
    7d2c:	702b      	strb	r3, [r5, #0]
    if (coap_msg_response(&rsp) != ERR_OK) 
    7d2e:	f7ff fc31 	bl	7594 <_Z17coap_msg_responseP12coap_msg_ctx>
    7d32:	2800      	cmp	r0, #0
    7d34:	d00e      	beq.n	7d54 <_Z16coap_observe_rsph+0x120>
        dlog(LOG_ERR, "coap_observe_rsp: Error creating response");
    7d36:	4925      	ldr	r1, [pc, #148]	; (7dcc <_Z16coap_observe_rsph+0x198>)
    7d38:	0038      	movs	r0, r7
    7d3a:	f7fc fecf 	bl	4adc <_Z4dlogiPKcz>
    copt_del_all((sl_co*)&(rsp.oh));
    7d3e:	a81c      	add	r0, sp, #112	; 0x70
    7d40:	f7ff fe38 	bl	79b4 <_Z12copt_del_allP5sl_co>
    dlog(LOG_DEBUG, "coap_observe_rsp: free response mbuf on error");
    7d44:	4922      	ldr	r1, [pc, #136]	; (7dd0 <_Z16coap_observe_rsph+0x19c>)
    7d46:	2007      	movs	r0, #7
    7d48:	f7fc fec8 	bl	4adc <_Z4dlogiPKcz>
    m_free(m);
    7d4c:	0030      	movs	r0, r6
    7d4e:	f000 fcbd 	bl	86cc <_Z6m_freeP4mbuf>
    return rc;
    7d52:	e784      	b.n	7c5e <_Z16coap_observe_rsph+0x2a>
    cbi.cbctx = (void *) &observe_info[observer_id].ack_seqno;
    7d54:	9c02      	ldr	r4, [sp, #8]
    7d56:	4b18      	ldr	r3, [pc, #96]	; (7db8 <_Z16coap_observe_rsph+0x184>)
    7d58:	342c      	adds	r4, #44	; 0x2c
    7d5a:	191c      	adds	r4, r3, r4
    cbi.cb = observe_rx_ack;
    7d5c:	4b1d      	ldr	r3, [pc, #116]	; (7dd4 <_Z16coap_observe_rsph+0x1a0>)
    cbi.cbctx = (void *) &observe_info[observer_id].ack_seqno;
    7d5e:	9406      	str	r4, [sp, #24]
    cbi.cb = observe_rx_ack;
    7d60:	9305      	str	r3, [sp, #20]
    coap_con_add(rsp.mid, &cbi);
    7d62:	88a8      	ldrh	r0, [r5, #4]
    7d64:	a905      	add	r1, sp, #20
    7d66:	f7ff f91f 	bl	6fa8 <_Z12coap_con_addtP18coap_ack_cb_info_t>
    if (pending_rsp) 
    7d6a:	4b11      	ldr	r3, [pc, #68]	; (7db0 <_Z16coap_observe_rsph+0x17c>)
    7d6c:	6818      	ldr	r0, [r3, #0]
    7d6e:	2800      	cmp	r0, #0
    7d70:	d008      	beq.n	7d84 <_Z16coap_observe_rsph+0x150>
        m_free(pending_rsp);
    7d72:	f000 fcab 	bl	86cc <_Z6m_freeP4mbuf>
		dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    7d76:	2396      	movs	r3, #150	; 0x96
    7d78:	4a17      	ldr	r2, [pc, #92]	; (7dd8 <_Z16coap_observe_rsph+0x1a4>)
    7d7a:	33ff      	adds	r3, #255	; 0xff
    7d7c:	4917      	ldr	r1, [pc, #92]	; (7ddc <_Z16coap_observe_rsph+0x1a8>)
    7d7e:	2007      	movs	r0, #7
    7d80:	f7fc feac 	bl	4adc <_Z4dlogiPKcz>
    pending_rsp = rsp.msg;
    7d84:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    copt_del_all((sl_co*)&(rsp.oh));
    7d86:	a81c      	add	r0, sp, #112	; 0x70
    pending_rsp = rsp.msg;
    7d88:	9302      	str	r3, [sp, #8]
    7d8a:	9a02      	ldr	r2, [sp, #8]
    7d8c:	4b08      	ldr	r3, [pc, #32]	; (7db0 <_Z16coap_observe_rsph+0x17c>)
    return ERR_OK;
    7d8e:	2400      	movs	r4, #0
    pending_rsp = rsp.msg;
    7d90:	601a      	str	r2, [r3, #0]
    copt_del_all((sl_co*)&(rsp.oh));
    7d92:	f7ff fe0f 	bl	79b4 <_Z12copt_del_allP5sl_co>
	digitalWrite(MNIC_WAKEUP_PIN,LOW);
    7d96:	2100      	movs	r1, #0
    7d98:	2009      	movs	r0, #9
    7d9a:	f7fc fad5 	bl	4348 <digitalWrite>
	delay(1);
    7d9e:	2001      	movs	r0, #1
    7da0:	f7fa fd58 	bl	2854 <delay>
	digitalWrite(MNIC_WAKEUP_PIN,HIGH);
    7da4:	2101      	movs	r1, #1
    7da6:	2009      	movs	r0, #9
    7da8:	f7fc face 	bl	4348 <digitalWrite>
    return ERR_OK;
    7dac:	e757      	b.n	7c5e <_Z16coap_observe_rsph+0x2a>
    7dae:	46c0      	nop			; (mov r8, r8)
    7db0:	20001cb8 	.word	0x20001cb8
    7db4:	00010e70 	.word	0x00010e70
    7db8:	20001be8 	.word	0x20001be8
    7dbc:	00010ebb 	.word	0x00010ebb
    7dc0:	20000092 	.word	0x20000092
    7dc4:	00010ed5 	.word	0x00010ed5
    7dc8:	00010ef1 	.word	0x00010ef1
    7dcc:	00010f0d 	.word	0x00010f0d
    7dd0:	00010f51 	.word	0x00010f51
    7dd4:	00007b35 	.word	0x00007b35
    7dd8:	00010fa3 	.word	0x00010fa3
    7ddc:	00010f37 	.word	0x00010f37

00007de0 <_Z10do_observev>:
{
    7de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	time_t  epoch      = get_rtc_epoch();
    7de2:	f7fc fde3 	bl	49ac <_Z13get_rtc_epochv>
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    7de6:	2400      	movs	r4, #0
	time_t  epoch      = get_rtc_epoch();
    7de8:	0005      	movs	r5, r0
		if (observe_info[indx].obs_flag)
    7dea:	2034      	movs	r0, #52	; 0x34
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    7dec:	4b18      	ldr	r3, [pc, #96]	; (7e50 <_Z10do_observev+0x70>)
    7dee:	781f      	ldrb	r7, [r3, #0]
    7df0:	42bc      	cmp	r4, r7
    7df2:	da27      	bge.n	7e44 <_Z10do_observev+0x64>
		if (observe_info[indx].obs_flag)
    7df4:	0003      	movs	r3, r0
    7df6:	4363      	muls	r3, r4
    7df8:	4a16      	ldr	r2, [pc, #88]	; (7e54 <_Z10do_observev+0x74>)
    7dfa:	18d3      	adds	r3, r2, r3
    7dfc:	001a      	movs	r2, r3
    7dfe:	3230      	adds	r2, #48	; 0x30
    7e00:	7812      	ldrb	r2, [r2, #0]
    7e02:	2a00      	cmp	r2, #0
    7e04:	d020      	beq.n	7e48 <_Z10do_observev+0x68>
			if (observe_info[indx].base_epoch == 0)
    7e06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7e08:	2a00      	cmp	r2, #0
    7e0a:	d100      	bne.n	7e0e <_Z10do_observev+0x2e>
				observe_info[indx].base_epoch = epoch;
    7e0c:	625d      	str	r5, [r3, #36]	; 0x24
			if (epoch >= (observe_info[indx].base_epoch+observe_info[indx].frequency))
    7e0e:	0003      	movs	r3, r0
    7e10:	4363      	muls	r3, r4
    7e12:	4a10      	ldr	r2, [pc, #64]	; (7e54 <_Z10do_observev+0x74>)
    7e14:	18d3      	adds	r3, r2, r3
    7e16:	6a99      	ldr	r1, [r3, #40]	; 0x28
    7e18:	001e      	movs	r6, r3
    7e1a:	468c      	mov	ip, r1
    7e1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7e1e:	3624      	adds	r6, #36	; 0x24
    7e20:	4494      	add	ip, r2
    7e22:	45ac      	cmp	ip, r5
    7e24:	d810      	bhi.n	7e48 <_Z10do_observev+0x68>
				dlog(LOG_DEBUG, "do_observe: epoch %x uri %s", observe_info[indx].base_epoch, observe_info[indx].obs_uri);
    7e26:	490c      	ldr	r1, [pc, #48]	; (7e58 <_Z10do_observev+0x78>)
    7e28:	2007      	movs	r0, #7
    7e2a:	f7fc fe57 	bl	4adc <_Z4dlogiPKcz>
				observe_info[indx].base_epoch = epoch;
    7e2e:	6035      	str	r5, [r6, #0]
				coap_observe_rsp(indx);
    7e30:	0020      	movs	r0, r4
    7e32:	f7ff feff 	bl	7c34 <_Z16coap_observe_rsph>
				int freeram = free_ram();
    7e36:	f7fc ff83 	bl	4d40 <_Z8free_ramv>
				dlog(LOG_DEBUG, "do_observe: Free Ram: %d", freeram);
    7e3a:	4908      	ldr	r1, [pc, #32]	; (7e5c <_Z10do_observev+0x7c>)
				int freeram = free_ram();
    7e3c:	0002      	movs	r2, r0
				dlog(LOG_DEBUG, "do_observe: Free Ram: %d", freeram);
    7e3e:	2007      	movs	r0, #7
    7e40:	f7fc fe4c 	bl	4adc <_Z4dlogiPKcz>
} // do_observe
    7e44:	2001      	movs	r0, #1
    7e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (uint8_t indx=0 ; indx < observe_info_index ; indx++)
    7e48:	3401      	adds	r4, #1
    7e4a:	b2e4      	uxtb	r4, r4
    7e4c:	e7d0      	b.n	7df0 <_Z10do_observev+0x10>
    7e4e:	46c0      	nop			; (mov r8, r8)
    7e50:	20001be4 	.word	0x20001be4
    7e54:	20001be8 	.word	0x20001be8
    7e58:	00010e3b 	.word	0x00010e3b
    7e5c:	00010e57 	.word	0x00010e57

00007e60 <_ZL8crsystemP12coap_msg_ctxS0_>:
}


// The "sys" dispatcher.
static error_t crsystem(struct coap_msg_ctx *req, struct coap_msg_ctx *rsp)
{
    7e60:	b5f0      	push	{r4, r5, r6, r7, lr}
    struct optlv *o;
    void *it = NULL;
	
    /* No observes on system */
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    7e62:	0006      	movs	r6, r0
    void *it = NULL;
    7e64:	2200      	movs	r2, #0
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    7e66:	364c      	adds	r6, #76	; 0x4c
{
    7e68:	b087      	sub	sp, #28
    7e6a:	0005      	movs	r5, r0
    7e6c:	000c      	movs	r4, r1
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    7e6e:	0030      	movs	r0, r6
    7e70:	2106      	movs	r1, #6
    void *it = NULL;
    7e72:	9203      	str	r2, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_OBSERVE, NULL)))
    7e74:	f7ff fe02 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7e78:	2800      	cmp	r0, #0
    7e7a:	d004      	beq.n	7e86 <_ZL8crsystemP12coap_msg_ctxS0_+0x26>
	{
        copt_del_opt_type((sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE);
    7e7c:	0020      	movs	r0, r4
    7e7e:	2106      	movs	r1, #6
    7e80:	304c      	adds	r0, #76	; 0x4c
    7e82:	f7ff fe23 	bl	7acc <_Z17copt_del_opt_typeP5sl_cot>
    }
    /* 
     * No URI path beyond /system, except /time and /stats is supported, so
     * reject if present. 
     */
    copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it);
    7e86:	aa03      	add	r2, sp, #12
    7e88:	210b      	movs	r1, #11
    7e8a:	0030      	movs	r0, r6
    7e8c:	f7ff fdf6 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
	
    if ((o = copt_get_next_opt_type((const sl_co*) &(req->oh), COAP_OPTION_URI_PATH, &it)))
    7e90:	aa03      	add	r2, sp, #12
    7e92:	210b      	movs	r1, #11
    7e94:	0030      	movs	r0, r6
    7e96:	f7ff fdf1 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7e9a:	1e07      	subs	r7, r0, #0
    7e9c:	d100      	bne.n	7ea0 <_ZL8crsystemP12coap_msg_ctxS0_+0x40>
    7e9e:	e094      	b.n	7fca <_ZL8crsystemP12coap_msg_ctxS0_+0x16a>
	{
        if (!coap_opt_strcmp(o, S_TIME_URI))
    7ea0:	4981      	ldr	r1, [pc, #516]	; (80a8 <_ZL8crsystemP12coap_msg_ctxS0_+0x248>)
    7ea2:	f7ff f8c1 	bl	7028 <_Z15coap_opt_strcmpPK5optlvPKc>
    7ea6:	9001      	str	r0, [sp, #4]
    7ea8:	2800      	cmp	r0, #0
    7eaa:	d000      	beq.n	7eae <_ZL8crsystemP12coap_msg_ctxS0_+0x4e>
    7eac:	e07e      	b.n	7fac <_ZL8crsystemP12coap_msg_ctxS0_+0x14c>
    7eae:	9b03      	ldr	r3, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)))
    7eb0:	0030      	movs	r0, r6
    7eb2:	aa04      	add	r2, sp, #16
    7eb4:	210b      	movs	r1, #11
    7eb6:	9304      	str	r3, [sp, #16]
    7eb8:	f7ff fde0 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7ebc:	1e06      	subs	r6, r0, #0
    7ebe:	d005      	beq.n	7ecc <_ZL8crsystemP12coap_msg_ctxS0_+0x6c>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    7ec0:	2384      	movs	r3, #132	; 0x84
    7ec2:	70a3      	strb	r3, [r4, #2]
        rsp->plen = 0;
    7ec4:	9b01      	ldr	r3, [sp, #4]
    7ec6:	6423      	str	r3, [r4, #64]	; 0x40
    return ERR_OK;
    7ec8:	2500      	movs	r5, #0
    7eca:	e017      	b.n	7efc <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
    if (req->code == COAP_REQUEST_GET)
    7ecc:	78ab      	ldrb	r3, [r5, #2]
    7ece:	2b01      	cmp	r3, #1
    7ed0:	d124      	bne.n	7f1c <_ZL8crsystemP12coap_msg_ctxS0_+0xbc>
		now = get_rtc_epoch();
    7ed2:	f7fc fd6b 	bl	49ac <_Z13get_rtc_epochv>
    7ed6:	0005      	movs	r5, r0
		dlog(LOG_DEBUG, "Epoch for GET of sys time: %08x", now);
    7ed8:	0002      	movs	r2, r0
    7eda:	4974      	ldr	r1, [pc, #464]	; (80ac <_ZL8crsystemP12coap_msg_ctxS0_+0x24c>)
    7edc:	2007      	movs	r0, #7
    7ede:	f7fc fdfd 	bl	4adc <_Z4dlogiPKcz>
    7ee2:	ba2d      	rev	r5, r5
        d = m_append(rsp->msg, len);
    7ee4:	2104      	movs	r1, #4
    7ee6:	6d20      	ldr	r0, [r4, #80]	; 0x50
        now = htonl(now);
    7ee8:	9505      	str	r5, [sp, #20]
        d = m_append(rsp->msg, len);
    7eea:	f000 fc21 	bl	8730 <_Z8m_appendP4mbufs>
        if (!d)
    7eee:	2800      	cmp	r0, #0
    7ef0:	d107      	bne.n	7f02 <_ZL8crsystemP12coap_msg_ctxS0_+0xa2>
            return ERR_NO_MEM;
    7ef2:	2503      	movs	r5, #3
            coap_stats.no_mbufs++;
    7ef4:	4a6e      	ldr	r2, [pc, #440]	; (80b0 <_ZL8crsystemP12coap_msg_ctxS0_+0x250>)
    7ef6:	6813      	ldr	r3, [r2, #0]
    7ef8:	3301      	adds	r3, #1
    7efa:	6013      	str	r3, [r2, #0]
    }

    rsp->plen = 0;

    return ERR_OK;
}
    7efc:	0028      	movs	r0, r5
    7efe:	b007      	add	sp, #28
    7f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
        memcpy(d, &now, len);
    7f02:	2504      	movs	r5, #4
    7f04:	a905      	add	r1, sp, #20
    7f06:	002a      	movs	r2, r5
    7f08:	f004 f929 	bl	c15e <memcpy>
        rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    7f0c:	0023      	movs	r3, r4
    7f0e:	222a      	movs	r2, #42	; 0x2a
    7f10:	333c      	adds	r3, #60	; 0x3c
        rsp->plen = len;
    7f12:	6425      	str	r5, [r4, #64]	; 0x40
        rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    7f14:	701a      	strb	r2, [r3, #0]
        rsp->code = COAP_RSP_205_CONTENT;
    7f16:	2345      	movs	r3, #69	; 0x45
            rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    7f18:	70a3      	strb	r3, [r4, #2]
    7f1a:	e7d5      	b.n	7ec8 <_ZL8crsystemP12coap_msg_ctxS0_+0x68>
	else if (req->code == COAP_REQUEST_PUT)
    7f1c:	2b03      	cmp	r3, #3
    7f1e:	d141      	bne.n	7fa4 <_ZL8crsystemP12coap_msg_ctxS0_+0x144>
        m_adj(req->msg, req->hdrlen);
    7f20:	6969      	ldr	r1, [r5, #20]
    7f22:	6d28      	ldr	r0, [r5, #80]	; 0x50
    7f24:	f000 fc14 	bl	8750 <_Z5m_adjP4mbufi>
        coap_sys_time_data_t *td = mtod(req->msg, coap_sys_time_data_t *);
    7f28:	6d2f      	ldr	r7, [r5, #80]	; 0x50
        if ((req->msg->m_pktlen == 0) || ((td->tl.u.rdt != crdt_time_abs) && (td->tl.u.rdt != crdt_time_delta)) || 
    7f2a:	883b      	ldrh	r3, [r7, #0]
    7f2c:	2b00      	cmp	r3, #0
    7f2e:	d006      	beq.n	7f3e <_ZL8crsystemP12coap_msg_ctxS0_+0xde>
    7f30:	793b      	ldrb	r3, [r7, #4]
    7f32:	1f9a      	subs	r2, r3, #6
    7f34:	2a01      	cmp	r2, #1
    7f36:	d802      	bhi.n	7f3e <_ZL8crsystemP12coap_msg_ctxS0_+0xde>
    7f38:	797a      	ldrb	r2, [r7, #5]
    7f3a:	2a08      	cmp	r2, #8
    7f3c:	d001      	beq.n	7f42 <_ZL8crsystemP12coap_msg_ctxS0_+0xe2>
            rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    7f3e:	2386      	movs	r3, #134	; 0x86
    7f40:	e7ea      	b.n	7f18 <_ZL8crsystemP12coap_msg_ctxS0_+0xb8>
    return ERR_OK;
    7f42:	0035      	movs	r5, r6
		else if (td->tl.u.rdt == crdt_time_abs)
    7f44:	2b06      	cmp	r3, #6
    7f46:	d1d9      	bne.n	7efc <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
        coap_sys_time_data_t *td = mtod(req->msg, coap_sys_time_data_t *);
    7f48:	1d3a      	adds	r2, r7, #4
			ddump(LOG_DEBUG, "PUT /sys/time Payload", (void *)td, sizeof(coap_sys_time_data_t));
    7f4a:	3304      	adds	r3, #4
    7f4c:	4959      	ldr	r1, [pc, #356]	; (80b4 <_ZL8crsystemP12coap_msg_ctxS0_+0x254>)
    7f4e:	2007      	movs	r0, #7
    7f50:	f7fc fde6 	bl	4b20 <_Z5ddumpiPKcPKvi>
			epoch = (uint32_t) ntohl(td->sec);
    7f54:	21ff      	movs	r1, #255	; 0xff
    7f56:	79fa      	ldrb	r2, [r7, #7]
    7f58:	79bb      	ldrb	r3, [r7, #6]
    7f5a:	0212      	lsls	r2, r2, #8
    7f5c:	431a      	orrs	r2, r3
    7f5e:	7a3b      	ldrb	r3, [r7, #8]
    7f60:	0209      	lsls	r1, r1, #8
    7f62:	041b      	lsls	r3, r3, #16
    7f64:	431a      	orrs	r2, r3
    7f66:	7a7b      	ldrb	r3, [r7, #9]
			dlog(LOG_DEBUG, "Setting RTC to epoch: %08x", epoch);
    7f68:	2007      	movs	r0, #7
			epoch = (uint32_t) ntohl(td->sec);
    7f6a:	061b      	lsls	r3, r3, #24
    7f6c:	4313      	orrs	r3, r2
    7f6e:	061a      	lsls	r2, r3, #24
    7f70:	0e1e      	lsrs	r6, r3, #24
    7f72:	4316      	orrs	r6, r2
    7f74:	0a1a      	lsrs	r2, r3, #8
    7f76:	400a      	ands	r2, r1
    7f78:	4316      	orrs	r6, r2
    7f7a:	22ff      	movs	r2, #255	; 0xff
    7f7c:	021b      	lsls	r3, r3, #8
    7f7e:	0412      	lsls	r2, r2, #16
    7f80:	4013      	ands	r3, r2
    7f82:	431e      	orrs	r6, r3
			dlog(LOG_DEBUG, "Setting RTC to epoch: %08x", epoch);
    7f84:	0032      	movs	r2, r6
    7f86:	494c      	ldr	r1, [pc, #304]	; (80b8 <_ZL8crsystemP12coap_msg_ctxS0_+0x258>)
    7f88:	f7fc fda8 	bl	4adc <_Z4dlogiPKcz>
			rtc.setEpoch(epoch);
    7f8c:	0031      	movs	r1, r6
    7f8e:	484b      	ldr	r0, [pc, #300]	; (80bc <_ZL8crsystemP12coap_msg_ctxS0_+0x25c>)
    7f90:	f7fe f9d6 	bl	6340 <_ZN7RTCZero8setEpochEm>
			print_current_date();
    7f94:	f7fc fd4e 	bl	4a34 <_Z18print_current_datev>
			print_current_time();
    7f98:	f7fc fd10 	bl	49bc <_Z18print_current_timev>
			rsp->code = COAP_RSP_204_CHANGED;
    7f9c:	2344      	movs	r3, #68	; 0x44
    7f9e:	70a3      	strb	r3, [r4, #2]
    rsp->plen = 0;
    7fa0:	6425      	str	r5, [r4, #64]	; 0x40
    return ERR_OK;
    7fa2:	e7ab      	b.n	7efc <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    7fa4:	23a1      	movs	r3, #161	; 0xa1
        rsp->plen = 0;
    7fa6:	6420      	str	r0, [r4, #64]	; 0x40
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    7fa8:	70a3      	strb	r3, [r4, #2]
    7faa:	e78d      	b.n	7ec8 <_ZL8crsystemP12coap_msg_ctxS0_+0x68>
		else if (!coap_opt_strcmp(o, S_STAT_URI))
    7fac:	4944      	ldr	r1, [pc, #272]	; (80c0 <_ZL8crsystemP12coap_msg_ctxS0_+0x260>)
    7fae:	0038      	movs	r0, r7
    7fb0:	f7ff f83a 	bl	7028 <_Z15coap_opt_strcmpPK5optlvPKc>
    7fb4:	2800      	cmp	r0, #0
    7fb6:	d108      	bne.n	7fca <_ZL8crsystemP12coap_msg_ctxS0_+0x16a>
    7fb8:	9b03      	ldr	r3, [sp, #12]
    if ((o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it))) {
    7fba:	aa05      	add	r2, sp, #20
    7fbc:	210b      	movs	r1, #11
    7fbe:	0030      	movs	r0, r6
    7fc0:	9305      	str	r3, [sp, #20]
    7fc2:	f7ff fd5b 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    7fc6:	1e02      	subs	r2, r0, #0
    7fc8:	d001      	beq.n	7fce <_ZL8crsystemP12coap_msg_ctxS0_+0x16e>
            rsp->code = COAP_RSP_404_NOT_FOUND;
    7fca:	2384      	movs	r3, #132	; 0x84
    7fcc:	e04f      	b.n	806e <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL);
    7fce:	0030      	movs	r0, r6
    7fd0:	210f      	movs	r1, #15
    7fd2:	f7ff fd53 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    if (req->code == COAP_REQUEST_GET) {
    7fd6:	78ab      	ldrb	r3, [r5, #2]
    o = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_QUERY, NULL);
    7fd8:	0006      	movs	r6, r0
    if (req->code == COAP_REQUEST_GET) {
    7fda:	2b01      	cmp	r3, #1
    7fdc:	d151      	bne.n	8082 <_ZL8crsystemP12coap_msg_ctxS0_+0x222>
        if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_COAP)) {
    7fde:	4939      	ldr	r1, [pc, #228]	; (80c4 <_ZL8crsystemP12coap_msg_ctxS0_+0x264>)
    7fe0:	f7ff f822 	bl	7028 <_Z15coap_opt_strcmpPK5optlvPKc>
    7fe4:	1e05      	subs	r5, r0, #0
    7fe6:	d13b      	bne.n	8060 <_ZL8crsystemP12coap_msg_ctxS0_+0x200>
    coap_sys_coap_stats_t *d = (coap_sys_coap_stats_t *) m_append(m, sizeof(coap_sys_coap_stats_t));
    7fe8:	2128      	movs	r1, #40	; 0x28
    7fea:	6d20      	ldr	r0, [r4, #80]	; 0x50
    7fec:	f000 fba0 	bl	8730 <_Z8m_appendP4mbufs>
    7ff0:	4b2f      	ldr	r3, [pc, #188]	; (80b0 <_ZL8crsystemP12coap_msg_ctxS0_+0x250>)
    if (!d) {
    7ff2:	2800      	cmp	r0, #0
    7ff4:	d114      	bne.n	8020 <_ZL8crsystemP12coap_msg_ctxS0_+0x1c0>
        coap_stats.no_mbufs++;
    7ff6:	681a      	ldr	r2, [r3, #0]
        return ERR_NO_MEM;
    7ff8:	3503      	adds	r5, #3
        coap_stats.no_mbufs++;
    7ffa:	3201      	adds	r2, #1
    7ffc:	601a      	str	r2, [r3, #0]
        dlog(LOG_DEBUG, "GET (status %d) read %d bytes.", rc, len);
    7ffe:	2328      	movs	r3, #40	; 0x28
    8000:	002a      	movs	r2, r5
    8002:	4931      	ldr	r1, [pc, #196]	; (80c8 <_ZL8crsystemP12coap_msg_ctxS0_+0x268>)
    8004:	2007      	movs	r0, #7
    8006:	f7fc fd69 	bl	4adc <_Z4dlogiPKcz>
        if (!rc) {
    800a:	2d00      	cmp	r5, #0
    800c:	d134      	bne.n	8078 <_ZL8crsystemP12coap_msg_ctxS0_+0x218>
            rsp->plen = len;
    800e:	2328      	movs	r3, #40	; 0x28
    8010:	6423      	str	r3, [r4, #64]	; 0x40
            rsp->cf = COAP_CF_APPLICATION_OCTET_STREAM;
    8012:	0023      	movs	r3, r4
    8014:	222a      	movs	r2, #42	; 0x2a
    8016:	333c      	adds	r3, #60	; 0x3c
    8018:	701a      	strb	r2, [r3, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    801a:	2345      	movs	r3, #69	; 0x45
    801c:	70a3      	strb	r3, [r4, #2]
    801e:	e76d      	b.n	7efc <_ZL8crsystemP12coap_msg_ctxS0_+0x9c>
    d->tl.u.rdt = crdt_stat_coap;
    8020:	2208      	movs	r2, #8
    8022:	7002      	strb	r2, [r0, #0]
    d->tl.l = sizeof(coap_stats);
    8024:	321c      	adds	r2, #28
    8026:	7042      	strb	r2, [r0, #1]
    8028:	681a      	ldr	r2, [r3, #0]
    802a:	ba12      	rev	r2, r2
    d->cs.no_mbufs = htonl(coap_stats.no_mbufs);
    802c:	6042      	str	r2, [r0, #4]
    802e:	685a      	ldr	r2, [r3, #4]
    8030:	ba12      	rev	r2, r2
    d->cs.no_mem = htonl(coap_stats.no_mem);
    8032:	6082      	str	r2, [r0, #8]
    8034:	689a      	ldr	r2, [r3, #8]
    8036:	ba12      	rev	r2, r2
    d->cs.sensors_enabled = htonl(coap_stats.sensors_enabled);
    8038:	60c2      	str	r2, [r0, #12]
    803a:	68da      	ldr	r2, [r3, #12]
    803c:	ba12      	rev	r2, r2
    d->cs.sensors_disabled = htonl(coap_stats.sensors_disabled);
    803e:	6102      	str	r2, [r0, #16]
    8040:	691a      	ldr	r2, [r3, #16]
    8042:	ba12      	rev	r2, r2
    d->cs.err_hdlc_send = htonl(coap_stats.err_hdlc_send);
    8044:	6142      	str	r2, [r0, #20]
    8046:	695a      	ldr	r2, [r3, #20]
    8048:	ba12      	rev	r2, r2
    d->cs.active_obs = htonl(coap_stats.active_obs);
    804a:	6182      	str	r2, [r0, #24]
    804c:	699a      	ldr	r2, [r3, #24]
    804e:	ba12      	rev	r2, r2
    d->cs.rx_success = htonl(coap_stats.rx_success);
    8050:	61c2      	str	r2, [r0, #28]
    8052:	69da      	ldr	r2, [r3, #28]
    8054:	6a1b      	ldr	r3, [r3, #32]
    8056:	ba12      	rev	r2, r2
    8058:	ba1b      	rev	r3, r3
    d->cs.tx_success = htonl(coap_stats.tx_success);
    805a:	6202      	str	r2, [r0, #32]
    d->cs.nretries_exceeded = htonl(coap_stats.nretries_exceeded);
    805c:	6243      	str	r3, [r0, #36]	; 0x24
    805e:	e7ce      	b.n	7ffe <_ZL8crsystemP12coap_msg_ctxS0_+0x19e>
        } else if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_PWR)) {
    8060:	491a      	ldr	r1, [pc, #104]	; (80cc <_ZL8crsystemP12coap_msg_ctxS0_+0x26c>)
    8062:	0030      	movs	r0, r6
    8064:	f7fe ffe0 	bl	7028 <_Z15coap_opt_strcmpPK5optlvPKc>
    8068:	2800      	cmp	r0, #0
    806a:	d003      	beq.n	8074 <_ZL8crsystemP12coap_msg_ctxS0_+0x214>
            rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    806c:	23a1      	movs	r3, #161	; 0xa1
            rsp->code = COAP_RSP_404_NOT_FOUND;
    806e:	70a3      	strb	r3, [r4, #2]
    rsp->plen = 0;
    8070:	2500      	movs	r5, #0
    8072:	e795      	b.n	7fa0 <_ZL8crsystemP12coap_msg_ctxS0_+0x140>
            rc = ERR_INVAL;
    8074:	2504      	movs	r5, #4
    8076:	e7c2      	b.n	7ffe <_ZL8crsystemP12coap_msg_ctxS0_+0x19e>
                rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    8078:	23a0      	movs	r3, #160	; 0xa0
            switch (rc) {
    807a:	2d04      	cmp	r5, #4
    807c:	d1f7      	bne.n	806e <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
                rsp->code = COAP_RSP_406_NOT_ACCEPTABLE;
    807e:	2386      	movs	r3, #134	; 0x86
    8080:	e7f5      	b.n	806e <_ZL8crsystemP12coap_msg_ctxS0_+0x20e>
    } else if (req->code == COAP_REQUEST_PUT) {
    8082:	2b03      	cmp	r3, #3
    8084:	d1f2      	bne.n	806c <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_COAP)) {
    8086:	490f      	ldr	r1, [pc, #60]	; (80c4 <_ZL8crsystemP12coap_msg_ctxS0_+0x264>)
    8088:	f7fe ffce 	bl	7028 <_Z15coap_opt_strcmpPK5optlvPKc>
    808c:	2800      	cmp	r0, #0
    808e:	d0ed      	beq.n	806c <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        } else if (!coap_opt_strcmp(o, S_STAT_URI_Q_MOD_PWR)) {
    8090:	490e      	ldr	r1, [pc, #56]	; (80cc <_ZL8crsystemP12coap_msg_ctxS0_+0x26c>)
    8092:	0030      	movs	r0, r6
    8094:	f7fe ffc8 	bl	7028 <_Z15coap_opt_strcmpPK5optlvPKc>
    8098:	2800      	cmp	r0, #0
    809a:	d1e7      	bne.n	806c <_ZL8crsystemP12coap_msg_ctxS0_+0x20c>
        dlog(LOG_DEBUG, "SET (status %d).", rc);
    809c:	2204      	movs	r2, #4
    809e:	490c      	ldr	r1, [pc, #48]	; (80d0 <_ZL8crsystemP12coap_msg_ctxS0_+0x270>)
    80a0:	3007      	adds	r0, #7
    80a2:	f7fc fd1b 	bl	4adc <_Z4dlogiPKcz>
    80a6:	e7ea      	b.n	807e <_ZL8crsystemP12coap_msg_ctxS0_+0x21e>
    80a8:	0001102f 	.word	0x0001102f
    80ac:	00011034 	.word	0x00011034
    80b0:	20001cf0 	.word	0x20001cf0
    80b4:	00011054 	.word	0x00011054
    80b8:	0001106a 	.word	0x0001106a
    80bc:	20000be4 	.word	0x20000be4
    80c0:	00011085 	.word	0x00011085
    80c4:	0001108b 	.word	0x0001108b
    80c8:	0001109c 	.word	0x0001109c
    80cc:	00011094 	.word	0x00011094
    80d0:	000110bb 	.word	0x000110bb

000080d4 <_ZL11crwellknownP12coap_msg_ctxS0_>:
{
    80d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    80d6:	4b45      	ldr	r3, [pc, #276]	; (81ec <_ZL11crwellknownP12coap_msg_ctxS0_+0x118>)
{
    80d8:	b087      	sub	sp, #28
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    80da:	681b      	ldr	r3, [r3, #0]
{
    80dc:	000d      	movs	r5, r1
    int rs = coap_reg_size; //sizeof(coap_registry) / sizeof (coap_registry[0]);
    80de:	9303      	str	r3, [sp, #12]
    void *it = NULL;
    80e0:	2300      	movs	r3, #0
    80e2:	9305      	str	r3, [sp, #20]
    rsp->code = 0;  /* unknown yet - fill in below */
    80e4:	708b      	strb	r3, [r1, #2]
    if (req->code == COAP_REQUEST_GET) {
    80e6:	7882      	ldrb	r2, [r0, #2]
    80e8:	2a01      	cmp	r2, #1
    80ea:	d000      	beq.n	80ee <_ZL11crwellknownP12coap_msg_ctxS0_+0x1a>
    80ec:	e079      	b.n	81e2 <_ZL11crwellknownP12coap_msg_ctxS0_+0x10e>
        if (!copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)    || 
    80ee:	304c      	adds	r0, #76	; 0x4c
    80f0:	aa05      	add	r2, sp, #20
    80f2:	210b      	movs	r1, #11
    80f4:	0004      	movs	r4, r0
    80f6:	f7ff fcc1 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
            coap_opt_strcmp(op, "core")                                      ||
    80fa:	2800      	cmp	r0, #0
    80fc:	d100      	bne.n	8100 <_ZL11crwellknownP12coap_msg_ctxS0_+0x2c>
    80fe:	e073      	b.n	81e8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
        if (!copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)    || 
    8100:	aa05      	add	r2, sp, #20
    8102:	210b      	movs	r1, #11
    8104:	0020      	movs	r0, r4
    8106:	f7ff fcb9 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    810a:	2800      	cmp	r0, #0
    810c:	d100      	bne.n	8110 <_ZL11crwellknownP12coap_msg_ctxS0_+0x3c>
    810e:	e06b      	b.n	81e8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
            coap_opt_strcmp(op, "core")                                      ||
    8110:	4937      	ldr	r1, [pc, #220]	; (81f0 <_ZL11crwellknownP12coap_msg_ctxS0_+0x11c>)
    8112:	f7fe ff89 	bl	7028 <_Z15coap_opt_strcmpPK5optlvPKc>
                copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)) ||
    8116:	2800      	cmp	r0, #0
    8118:	d166      	bne.n	81e8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
            copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, &it)) {
    811a:	aa05      	add	r2, sp, #20
    811c:	210b      	movs	r1, #11
    811e:	0020      	movs	r0, r4
    8120:	f7ff fcac 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
            coap_opt_strcmp(op, "core")                                      ||
    8124:	2800      	cmp	r0, #0
    8126:	d15f      	bne.n	81e8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x114>
    8128:	2302      	movs	r3, #2
    812a:	4e32      	ldr	r6, [pc, #200]	; (81f4 <_ZL11crwellknownP12coap_msg_ctxS0_+0x120>)
    812c:	9300      	str	r3, [sp, #0]
    812e:	3618      	adds	r6, #24
        for (i = 2; i < rs; i++) {  /* skipping default and well-known */
    8130:	9b00      	ldr	r3, [sp, #0]
    8132:	9a03      	ldr	r2, [sp, #12]
    8134:	4293      	cmp	r3, r2
    8136:	da4a      	bge.n	81ce <_ZL11crwellknownP12coap_msg_ctxS0_+0xfa>
            len = strlen(cr->path) + 4;         /* adding </ > , */
    8138:	6830      	ldr	r0, [r6, #0]
    813a:	f005 f942 	bl	d3c2 <strlen>
    813e:	0004      	movs	r4, r0
            if (cr->link) {
    8140:	68b0      	ldr	r0, [r6, #8]
            len = strlen(cr->path) + 4;         /* adding </ > , */
    8142:	1d23      	adds	r3, r4, #4
            if (cr->link) {
    8144:	2800      	cmp	r0, #0
    8146:	d003      	beq.n	8150 <_ZL11crwellknownP12coap_msg_ctxS0_+0x7c>
                len += strlen(cr->link) + 1;    /* ; */
    8148:	f005 f93b 	bl	d3c2 <strlen>
    814c:	3405      	adds	r4, #5
    814e:	1823      	adds	r3, r4, r0
    8150:	9301      	str	r3, [sp, #4]
            ls = (char*) m_append(rsp->msg, len);
    8152:	466b      	mov	r3, sp
    8154:	6d28      	ldr	r0, [r5, #80]	; 0x50
    8156:	2104      	movs	r1, #4
    8158:	5e59      	ldrsh	r1, [r3, r1]
    815a:	f000 fae9 	bl	8730 <_Z8m_appendP4mbufs>
    815e:	1e04      	subs	r4, r0, #0
            if (!ls) {
    8160:	d107      	bne.n	8172 <_ZL11crwellknownP12coap_msg_ctxS0_+0x9e>
                coap_stats.no_mbufs++;
    8162:	4a25      	ldr	r2, [pc, #148]	; (81f8 <_ZL11crwellknownP12coap_msg_ctxS0_+0x124>)
    8164:	6813      	ldr	r3, [r2, #0]
    8166:	3301      	adds	r3, #1
    8168:	6013      	str	r3, [r2, #0]
                rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    816a:	23a0      	movs	r3, #160	; 0xa0
            rsp->code = COAP_RSP_404_NOT_FOUND;
    816c:	70ab      	strb	r3, [r5, #2]
            return ERR_FAIL;
    816e:	2063      	movs	r0, #99	; 0x63
    8170:	e035      	b.n	81de <_ZL11crwellknownP12coap_msg_ctxS0_+0x10a>
            memcpy(ls, "</", n);
    8172:	2202      	movs	r2, #2
    8174:	4921      	ldr	r1, [pc, #132]	; (81fc <_ZL11crwellknownP12coap_msg_ctxS0_+0x128>)
    8176:	f003 fff2 	bl	c15e <memcpy>
            m = strlen(cr->path);
    817a:	6837      	ldr	r7, [r6, #0]
    817c:	0038      	movs	r0, r7
    817e:	f005 f920 	bl	d3c2 <strlen>
    8182:	9002      	str	r0, [sp, #8]
            memcpy(&(ls[n]), cr->path, m);
    8184:	9a02      	ldr	r2, [sp, #8]
    8186:	1ca0      	adds	r0, r4, #2
    8188:	0039      	movs	r1, r7
    818a:	f003 ffe8 	bl	c15e <memcpy>
            ls[n++] = '>';
    818e:	223e      	movs	r2, #62	; 0x3e
    8190:	9b02      	ldr	r3, [sp, #8]
    8192:	18e3      	adds	r3, r4, r3
    8194:	709a      	strb	r2, [r3, #2]
            if (cr->link) {
    8196:	68b2      	ldr	r2, [r6, #8]
    8198:	2a00      	cmp	r2, #0
    819a:	d00c      	beq.n	81b6 <_ZL11crwellknownP12coap_msg_ctxS0_+0xe2>
                ls[n++] = ';';
    819c:	223b      	movs	r2, #59	; 0x3b
    819e:	70da      	strb	r2, [r3, #3]
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    81a0:	68b7      	ldr	r7, [r6, #8]
    81a2:	0038      	movs	r0, r7
    81a4:	f005 f90d 	bl	d3c2 <strlen>
    81a8:	0002      	movs	r2, r0
                ls[n++] = ';';
    81aa:	9802      	ldr	r0, [sp, #8]
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    81ac:	0039      	movs	r1, r7
                ls[n++] = ';';
    81ae:	3004      	adds	r0, #4
                memcpy(&(ls[n]), cr->link, strlen(cr->link));
    81b0:	1820      	adds	r0, r4, r0
    81b2:	f003 ffd4 	bl	c15e <memcpy>
            ls[len-1] = ',';
    81b6:	9b01      	ldr	r3, [sp, #4]
    81b8:	360c      	adds	r6, #12
    81ba:	18e4      	adds	r4, r4, r3
    81bc:	232c      	movs	r3, #44	; 0x2c
    81be:	3c01      	subs	r4, #1
    81c0:	7023      	strb	r3, [r4, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    81c2:	3319      	adds	r3, #25
    81c4:	70ab      	strb	r3, [r5, #2]
        for (i = 2; i < rs; i++) {  /* skipping default and well-known */
    81c6:	9b00      	ldr	r3, [sp, #0]
    81c8:	3301      	adds	r3, #1
    81ca:	9300      	str	r3, [sp, #0]
    81cc:	e7b0      	b.n	8130 <_ZL11crwellknownP12coap_msg_ctxS0_+0x5c>
        rsp->cf = COAP_CF_APPLICATION_LINK_FORMAT; /* application/link-format */
    81ce:	002b      	movs	r3, r5
    81d0:	2228      	movs	r2, #40	; 0x28
    81d2:	333c      	adds	r3, #60	; 0x3c
    81d4:	701a      	strb	r2, [r3, #0]
        rsp->plen = rsp->msg->m_pktlen;
    81d6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    81d8:	881b      	ldrh	r3, [r3, #0]
    81da:	642b      	str	r3, [r5, #64]	; 0x40
    return ERR_OK;
    81dc:	2000      	movs	r0, #0
}
    81de:	b007      	add	sp, #28
    81e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rsp->code = COAP_RSP_501_NOT_IMPLEMENTED;
    81e2:	22a1      	movs	r2, #161	; 0xa1
    81e4:	708a      	strb	r2, [r1, #2]
    81e6:	e7f9      	b.n	81dc <_ZL11crwellknownP12coap_msg_ctxS0_+0x108>
            rsp->code = COAP_RSP_404_NOT_FOUND;
    81e8:	2384      	movs	r3, #132	; 0x84
    81ea:	e7bf      	b.n	816c <_ZL11crwellknownP12coap_msg_ctxS0_+0x98>
    81ec:	20001cbc 	.word	0x20001cbc
    81f0:	00011027 	.word	0x00011027
    81f4:	20001cc0 	.word	0x20001cc0
    81f8:	20001cf0 	.word	0x20001cf0
    81fc:	0001102c 	.word	0x0001102c

00008200 <_ZL7crtitleP12coap_msg_ctxS0_>:
{
    8200:	b530      	push	{r4, r5, lr}
    if (req->code == COAP_REQUEST_GET)
    8202:	7883      	ldrb	r3, [r0, #2]
{
    8204:	b091      	sub	sp, #68	; 0x44
    8206:	000c      	movs	r4, r1
    if (req->code == COAP_REQUEST_GET)
    8208:	2b01      	cmp	r3, #1
    820a:	d12b      	bne.n	8264 <_ZL7crtitleP12coap_msg_ctxS0_+0x64>
		strcpy(id, COAP_SERVER_VERSION_STRING);
    820c:	4916      	ldr	r1, [pc, #88]	; (8268 <_ZL7crtitleP12coap_msg_ctxS0_+0x68>)
    820e:	4668      	mov	r0, sp
    8210:	f005 f8cf 	bl	d3b2 <strcpy>
		strcat(id, COAP_SERVER_VERSION_NUMBER);
    8214:	4915      	ldr	r1, [pc, #84]	; (826c <_ZL7crtitleP12coap_msg_ctxS0_+0x6c>)
    8216:	4668      	mov	r0, sp
    8218:	f005 f8b4 	bl	d384 <strcat>
        d = (char*) m_append(rsp->msg, strlen(id));
    821c:	4668      	mov	r0, sp
    821e:	f005 f8d0 	bl	d3c2 <strlen>
    8222:	b201      	sxth	r1, r0
    8224:	6d20      	ldr	r0, [r4, #80]	; 0x50
    8226:	f000 fa83 	bl	8730 <_Z8m_appendP4mbufs>
    822a:	1e05      	subs	r5, r0, #0
        if (!d)
    822c:	d108      	bne.n	8240 <_ZL7crtitleP12coap_msg_ctxS0_+0x40>
            coap_stats.no_mbufs++;
    822e:	4a10      	ldr	r2, [pc, #64]	; (8270 <_ZL7crtitleP12coap_msg_ctxS0_+0x70>)
    8230:	6813      	ldr	r3, [r2, #0]
    8232:	3301      	adds	r3, #1
    8234:	6013      	str	r3, [r2, #0]
            rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    8236:	23a0      	movs	r3, #160	; 0xa0
}
    8238:	2000      	movs	r0, #0
        rsp->code = COAP_RSP_403_FORBIDDEN;
    823a:	70a3      	strb	r3, [r4, #2]
}
    823c:	b011      	add	sp, #68	; 0x44
    823e:	bd30      	pop	{r4, r5, pc}
            memcpy(d, id, strlen(id));
    8240:	4668      	mov	r0, sp
    8242:	f005 f8be 	bl	d3c2 <strlen>
    8246:	4669      	mov	r1, sp
    8248:	0002      	movs	r2, r0
    824a:	0028      	movs	r0, r5
    824c:	f003 ff87 	bl	c15e <memcpy>
            rsp->plen = strlen(id);
    8250:	4668      	mov	r0, sp
    8252:	f005 f8b6 	bl	d3c2 <strlen>
            rsp->cf = COAP_CF_TEXT_PLAIN;
    8256:	0023      	movs	r3, r4
    8258:	2200      	movs	r2, #0
    825a:	333c      	adds	r3, #60	; 0x3c
            rsp->plen = strlen(id);
    825c:	6420      	str	r0, [r4, #64]	; 0x40
            rsp->cf = COAP_CF_TEXT_PLAIN;
    825e:	701a      	strb	r2, [r3, #0]
            rsp->code = COAP_RSP_205_CONTENT;
    8260:	2345      	movs	r3, #69	; 0x45
    8262:	e7e9      	b.n	8238 <_ZL7crtitleP12coap_msg_ctxS0_+0x38>
        rsp->code = COAP_RSP_403_FORBIDDEN;
    8264:	2383      	movs	r3, #131	; 0x83
    8266:	e7e7      	b.n	8238 <_ZL7crtitleP12coap_msg_ctxS0_+0x38>
    8268:	00010646 	.word	0x00010646
    826c:	00010664 	.word	0x00010664
    8270:	20001cf0 	.word	0x20001cf0

00008274 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>:
        return ERR_NO_MEM;
    8274:	2303      	movs	r3, #3
{
    8276:	b530      	push	{r4, r5, lr}
    if (coap_reg_size < COAP_MAX_CBR)
    8278:	4c07      	ldr	r4, [pc, #28]	; (8298 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x24>)
    827a:	6825      	ldr	r5, [r4, #0]
    827c:	429d      	cmp	r5, r3
    827e:	dc09      	bgt.n	8294 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x20>
        idx = coap_reg_size++;    
    8280:	1c6b      	adds	r3, r5, #1
    8282:	6023      	str	r3, [r4, #0]
    coap_registry[idx].path = path;
    8284:	240c      	movs	r4, #12
    8286:	436c      	muls	r4, r5
    8288:	4b04      	ldr	r3, [pc, #16]	; (829c <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_+0x28>)
    828a:	50e0      	str	r0, [r4, r3]
    coap_registry[idx].cb = cbfunc;
    828c:	191b      	adds	r3, r3, r4
    828e:	6059      	str	r1, [r3, #4]
    coap_registry[idx].link = corelink;
    8290:	609a      	str	r2, [r3, #8]
    return ERR_OK;
    8292:	2300      	movs	r3, #0
}
    8294:	0018      	movs	r0, r3
    8296:	bd30      	pop	{r4, r5, pc}
    8298:	20001cbc 	.word	0x20001cbc
    829c:	20001cc0 	.word	0x20001cc0

000082a0 <_Z18coap_registry_initv>:
{
    82a0:	b510      	push	{r4, lr}
	coap_reg_size = 0;
    82a2:	2400      	movs	r4, #0
    82a4:	4b0d      	ldr	r3, [pc, #52]	; (82dc <_Z18coap_registry_initv+0x3c>)
    (void)coap_uri_register("", crtitle, "title=\"Info\";ct=0");
    82a6:	4a0e      	ldr	r2, [pc, #56]	; (82e0 <_Z18coap_registry_initv+0x40>)
    82a8:	490e      	ldr	r1, [pc, #56]	; (82e4 <_Z18coap_registry_initv+0x44>)
    82aa:	480f      	ldr	r0, [pc, #60]	; (82e8 <_Z18coap_registry_initv+0x48>)
	coap_reg_size = 0;
    82ac:	601c      	str	r4, [r3, #0]
    (void)coap_uri_register("", crtitle, "title=\"Info\";ct=0");
    82ae:	f7ff ffe1 	bl	8274 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
    (void)coap_uri_register(".well-known", crwellknown, NULL);
    82b2:	0022      	movs	r2, r4
    82b4:	490d      	ldr	r1, [pc, #52]	; (82ec <_Z18coap_registry_initv+0x4c>)
    82b6:	480e      	ldr	r0, [pc, #56]	; (82f0 <_Z18coap_registry_initv+0x50>)
    82b8:	f7ff ffdc 	bl	8274 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
    (void)coap_uri_register(S_URI_SYSTEM, crsystem, CLA_SYSTEM);
    82bc:	4a0d      	ldr	r2, [pc, #52]	; (82f4 <_Z18coap_registry_initv+0x54>)
    82be:	490e      	ldr	r1, [pc, #56]	; (82f8 <_Z18coap_registry_initv+0x58>)
    82c0:	480e      	ldr	r0, [pc, #56]	; (82fc <_Z18coap_registry_initv+0x5c>)
    82c2:	f7ff ffd7 	bl	8274 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
	if (is_sapi == 1)
    82c6:	4b0e      	ldr	r3, [pc, #56]	; (8300 <_Z18coap_registry_initv+0x60>)
    82c8:	4a0e      	ldr	r2, [pc, #56]	; (8304 <_Z18coap_registry_initv+0x64>)
    82ca:	781b      	ldrb	r3, [r3, #0]
    82cc:	480e      	ldr	r0, [pc, #56]	; (8308 <_Z18coap_registry_initv+0x68>)
		(void)coap_uri_register(classifier, crsapi, CLA_ARDUINO);
    82ce:	490f      	ldr	r1, [pc, #60]	; (830c <_Z18coap_registry_initv+0x6c>)
	if (is_sapi == 1)
    82d0:	2b01      	cmp	r3, #1
    82d2:	d000      	beq.n	82d6 <_Z18coap_registry_initv+0x36>
		(void)coap_uri_register(classifier, crarduino, CLA_ARDUINO);
    82d4:	490e      	ldr	r1, [pc, #56]	; (8310 <_Z18coap_registry_initv+0x70>)
    82d6:	f7ff ffcd 	bl	8274 <_Z17coap_uri_registerPKcPF7error_eP12coap_msg_ctxS3_ES0_>
}
    82da:	bd10      	pop	{r4, pc}
    82dc:	20001cbc 	.word	0x20001cbc
    82e0:	00010fb4 	.word	0x00010fb4
    82e4:	00008201 	.word	0x00008201
    82e8:	00010477 	.word	0x00010477
    82ec:	000080d5 	.word	0x000080d5
    82f0:	00010fc6 	.word	0x00010fc6
    82f4:	00010fd2 	.word	0x00010fd2
    82f8:	00007e61 	.word	0x00007e61
    82fc:	00010ff7 	.word	0x00010ff7
    8300:	20000092 	.word	0x20000092
    8304:	00010ffb 	.word	0x00010ffb
    8308:	2000009c 	.word	0x2000009c
    830c:	000051c1 	.word	0x000051c1
    8310:	00005271 	.word	0x00005271

00008314 <_Z15coap_s_uri_procP12coap_msg_ctxS0_>:
{
    8314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, NULL)) == NULL) 
    8316:	2200      	movs	r2, #0
{
    8318:	0006      	movs	r6, r0
    831a:	000c      	movs	r4, r1
    if ((op = copt_get_next_opt_type((const sl_co*)&(req->oh), COAP_OPTION_URI_PATH, NULL)) == NULL) 
    831c:	304c      	adds	r0, #76	; 0x4c
    831e:	210b      	movs	r1, #11
    8320:	f7ff fbac 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    8324:	1e07      	subs	r7, r0, #0
    8326:	d010      	beq.n	834a <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x36>
    8328:	2500      	movs	r5, #0
            if (!coap_opt_strcmp(op, coap_registry[i].path)) 
    832a:	230c      	movs	r3, #12
    832c:	436b      	muls	r3, r5
    832e:	4a1a      	ldr	r2, [pc, #104]	; (8398 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x84>)
    8330:	0038      	movs	r0, r7
    8332:	58d1      	ldr	r1, [r2, r3]
    8334:	f7fe fe78 	bl	7028 <_Z15coap_opt_strcmpPK5optlvPKc>
    8338:	2800      	cmp	r0, #0
    833a:	d007      	beq.n	834c <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x38>
        for (i = 0; i < rs; i++) 
    833c:	3501      	adds	r5, #1
    833e:	2d04      	cmp	r5, #4
    8340:	d1f3      	bne.n	832a <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x16>
        rsp->code = COAP_RSP_404_NOT_FOUND;
    8342:	2384      	movs	r3, #132	; 0x84
    8344:	e00d      	b.n	8362 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x4e>
        rsp->type = COAP_T_NCONF_VAL;
    8346:	2301      	movs	r3, #1
    8348:	e023      	b.n	8392 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x7e>
        i = 0;
    834a:	0005      	movs	r5, r0
    rc = coap_registry[i].cb(req, rsp);
    834c:	230c      	movs	r3, #12
    834e:	435d      	muls	r5, r3
    8350:	4b11      	ldr	r3, [pc, #68]	; (8398 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x84>)
    8352:	0021      	movs	r1, r4
    8354:	195d      	adds	r5, r3, r5
    8356:	686b      	ldr	r3, [r5, #4]
    8358:	0030      	movs	r0, r6
    835a:	4798      	blx	r3
    if (rc != ERR_OK) 
    835c:	2800      	cmp	r0, #0
    835e:	d001      	beq.n	8364 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x50>
        rsp->code = COAP_RSP_500_INTERNAL_ERROR;
    8360:	23a0      	movs	r3, #160	; 0xa0
    8362:	70a3      	strb	r3, [r4, #2]
    op = copt_get_next_opt_type((const sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE, NULL);
    8364:	0025      	movs	r5, r4
    8366:	354c      	adds	r5, #76	; 0x4c
    8368:	2200      	movs	r2, #0
    836a:	2106      	movs	r1, #6
    836c:	0028      	movs	r0, r5
    836e:	f7ff fb85 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    if ((COAP_CLASS(rsp->code) != 2) || (op == NULL)) 
    8372:	78a3      	ldrb	r3, [r4, #2]
    8374:	095b      	lsrs	r3, r3, #5
    8376:	2b02      	cmp	r3, #2
    8378:	d101      	bne.n	837e <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x6a>
    837a:	2800      	cmp	r0, #0
    837c:	d105      	bne.n	838a <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x76>
        (void)copt_del_opt_type((sl_co*)&(rsp->oh), COAP_OPTION_OBSERVE);
    837e:	2106      	movs	r1, #6
    8380:	0028      	movs	r0, r5
    8382:	f7ff fba3 	bl	7acc <_Z17copt_del_opt_typeP5sl_cot>
        rsp->final = 1;
    8386:	2301      	movs	r3, #1
    8388:	64a3      	str	r3, [r4, #72]	; 0x48
    if (req->type == COAP_T_CONF_VAL) 
    838a:	7833      	ldrb	r3, [r6, #0]
    838c:	2b00      	cmp	r3, #0
    838e:	d1da      	bne.n	8346 <_Z15coap_s_uri_procP12coap_msg_ctxS0_+0x32>
        rsp->type = COAP_T_ACK_VAL;
    8390:	3302      	adds	r3, #2
}
    8392:	2000      	movs	r0, #0
        rsp->type = COAP_T_NCONF_VAL;
    8394:	7023      	strb	r3, [r4, #0]
}
    8396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8398:	20001cc0 	.word	0x20001cc0

0000839c <_Z24coap_put_ic_reboot_eventv>:
 *
 * Given that there are HDLC retries, we're not going to attempt CoAP retries.
 * Could be added later if required.
 */
error_t coap_put_ic_reboot_event(void)
{
    839c:	b570      	push	{r4, r5, r6, lr}
	struct mbuf *req;
	uint8_t     *ptr;

	/* Allocate request buffer */
	MGETHDR(req);
    839e:	f000 f96b 	bl	8678 <_Z5m_getv>
    83a2:	1e04      	subs	r4, r0, #0
	if (!req) 
    83a4:	d105      	bne.n	83b2 <_Z24coap_put_ic_reboot_eventv+0x16>
	{
		coap_stats.no_mbufs++;
		return ERR_NO_MEM;
    83a6:	2003      	movs	r0, #3
		coap_stats.no_mbufs++;
    83a8:	4a11      	ldr	r2, [pc, #68]	; (83f0 <_Z24coap_put_ic_reboot_eventv+0x54>)
    83aa:	6813      	ldr	r3, [r2, #0]
    83ac:	3301      	adds	r3, #1
    83ae:	6013      	str	r3, [r2, #0]
	digitalWrite(MNIC_WAKEUP_PIN, LOW);
	delay(1);
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);

	return ERR_OK;
    83b0:	bd70      	pop	{r4, r5, r6, pc}
	ptr = (uint8_t *)m_append(req, sizeof(rbtput));
    83b2:	2114      	movs	r1, #20
    83b4:	f000 f9bc 	bl	8730 <_Z8m_appendP4mbufs>
	memcpy(ptr, rbtput, sizeof(rbtput));
    83b8:	2214      	movs	r2, #20
    83ba:	490e      	ldr	r1, [pc, #56]	; (83f4 <_Z24coap_put_ic_reboot_eventv+0x58>)
    83bc:	f003 fecf 	bl	c15e <memcpy>
	if (pending_rsp)
    83c0:	4d0d      	ldr	r5, [pc, #52]	; (83f8 <_Z24coap_put_ic_reboot_eventv+0x5c>)
    83c2:	6828      	ldr	r0, [r5, #0]
    83c4:	2800      	cmp	r0, #0
    83c6:	d001      	beq.n	83cc <_Z24coap_put_ic_reboot_eventv+0x30>
		m_free(pending_rsp);
    83c8:	f000 f980 	bl	86cc <_Z6m_freeP4mbuf>
	dlog(LOG_DEBUG, "Sending reset event to mnic");
    83cc:	490b      	ldr	r1, [pc, #44]	; (83fc <_Z24coap_put_ic_reboot_eventv+0x60>)
    83ce:	2007      	movs	r0, #7
	pending_rsp = req;
    83d0:	602c      	str	r4, [r5, #0]
	dlog(LOG_DEBUG, "Sending reset event to mnic");
    83d2:	f7fc fb83 	bl	4adc <_Z4dlogiPKcz>
	digitalWrite(MNIC_WAKEUP_PIN, LOW);
    83d6:	2100      	movs	r1, #0
    83d8:	2009      	movs	r0, #9
    83da:	f7fb ffb5 	bl	4348 <digitalWrite>
	delay(1);
    83de:	2001      	movs	r0, #1
    83e0:	f7fa fa38 	bl	2854 <delay>
	digitalWrite(MNIC_WAKEUP_PIN, HIGH);
    83e4:	2009      	movs	r0, #9
    83e6:	2101      	movs	r1, #1
    83e8:	f7fb ffae 	bl	4348 <digitalWrite>
	return ERR_OK;
    83ec:	2000      	movs	r0, #0
    83ee:	e7df      	b.n	83b0 <_Z24coap_put_ic_reboot_eventv+0x14>
    83f0:	20001cf0 	.word	0x20001cf0
    83f4:	000110e8 	.word	0x000110e8
    83f8:	20001cb8 	.word	0x20001cb8
    83fc:	000110cc 	.word	0x000110cc

00008400 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE>:
 */


// CoAP Server initialization
void coap_s_init(HardwareSerial *pSerial, uint32_t max_age, uint32_t uart_timeout_ms, uint32_t max_hdlc_payload_size, const char *uri_rsrc_name, ObsFuncPtr pObsFuncPtr)
{
    8400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8402:	000f      	movs	r7, r1
    8404:	0015      	movs	r5, r2
    8406:	001e      	movs	r6, r3
    8408:	0004      	movs	r4, r0
	int res;
	
	// Initialize CoAP Server registry
	coap_registry_init();
    840a:	f7ff ff49 	bl	82a0 <_Z18coap_registry_initv>

	// Set Max-Age: CoAP Server Response Option 14
	coap_set_max_age(max_age);
    840e:	0038      	movs	r0, r7
    8410:	f7ff f99a 	bl	7748 <_Z16coap_set_max_agem>
	
	// Set the URI used for obtaining token etc in CoAP Observe response msg
	set_observer(uri_rsrc_name, pObsFuncPtr);
    8414:	9907      	ldr	r1, [sp, #28]
    8416:	9806      	ldr	r0, [sp, #24]
    8418:	f7ff fbbe 	bl	7b98 <_Z12set_observerPKcPF7error_eP4mbufPhhE>

	// Open the HDLC connection
	res = hdlcs_open(pSerial, uart_timeout_ms, max_hdlc_payload_size);
    841c:	0032      	movs	r2, r6
    841e:	0029      	movs	r1, r5
    8420:	0020      	movs	r0, r4
    8422:	f000 f9eb 	bl	87fc <_Z10hdlcs_openP14HardwareSerialmm>
	if (res) 
    8426:	2800      	cmp	r0, #0
    8428:	d003      	beq.n	8432 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE+0x32>
	{
		dlog(LOG_ERR, "HDLC initialization failed!");
    842a:	4902      	ldr	r1, [pc, #8]	; (8434 <_Z11coap_s_initP14HardwareSerialmmmPKcPF7error_eP4mbufPhhE+0x34>)
    842c:	2003      	movs	r0, #3
    842e:	f7fc fb55 	bl	4adc <_Z4dlogiPKcz>
	}
	
	// That's all folks!
} // coap_s_init()
    8432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8434:	00011151 	.word	0x00011151

00008438 <_Z11coap_s_procP4mbuf>:
 * Build a response PDU based on the RSP context, and return the mbuf.
 */
mbuf_ptr_t coap_s_proc( mbuf_ptr_t m )
{
    struct coap_msg_ctx cc, rcc;
    void *clt = NULL;   /* Not used on sensor, 1 HDLC connection. */
    8438:	2300      	movs	r3, #0
{
    843a:	b5f0      	push	{r4, r5, r6, r7, lr}
    843c:	b0b1      	sub	sp, #196	; 0xc4
    843e:	9003      	str	r0, [sp, #12]
    void *clt = NULL;   /* Not used on sensor, 1 HDLC connection. */
    8440:	9305      	str	r3, [sp, #20]
    uint8_t code;
    char *pstr;
    
    /* Allocate response buffer */
    struct mbuf *r = NULL;
    r = m_get();
    8442:	f000 f919 	bl	8678 <_Z5m_getv>
    8446:	1e06      	subs	r6, r0, #0
    if (r == NULL)
    8448:	d029      	beq.n	849e <_Z11coap_s_procP4mbuf+0x66>
    {
	    goto done;
    }

    /* Parse incoming message */
    memset(&cc, 0, sizeof(cc));
    844a:	ac06      	add	r4, sp, #24
    844c:	2254      	movs	r2, #84	; 0x54
    844e:	2100      	movs	r1, #0
    8450:	0020      	movs	r0, r4
    8452:	f003 fe9f 	bl	c194 <memset>
    copt_init((sl_co*)&(cc.oh));
    memset(&rcc, 0, sizeof(rcc));
    8456:	ad1b      	add	r5, sp, #108	; 0x6c
    copt_init((sl_co*)&(cc.oh));
    8458:	a819      	add	r0, sp, #100	; 0x64
    845a:	f7ff fa99 	bl	7990 <_Z9copt_initP5sl_co>
    memset(&rcc, 0, sizeof(rcc));
    845e:	2254      	movs	r2, #84	; 0x54
    8460:	2100      	movs	r1, #0
    8462:	0028      	movs	r0, r5
    8464:	f003 fe96 	bl	c194 <memset>
    copt_init((sl_co*)&(rcc.oh));
    8468:	a82e      	add	r0, sp, #184	; 0xb8
    846a:	f7ff fa91 	bl	7990 <_Z9copt_initP5sl_co>
    rc = coap_msg_parse(&cc, m, &code);
    846e:	230b      	movs	r3, #11
    8470:	aa02      	add	r2, sp, #8
    8472:	189b      	adds	r3, r3, r2
    8474:	001a      	movs	r2, r3
    8476:	9903      	ldr	r1, [sp, #12]
    8478:	0020      	movs	r0, r4
    847a:	f7fe ff89 	bl	7390 <_Z14coap_msg_parseP12coap_msg_ctxP4mbufPh>
    847e:	1e07      	subs	r7, r0, #0

    if (rc == ERR_OK)
    8480:	d000      	beq.n	8484 <_Z11coap_s_procP4mbuf+0x4c>
    8482:	e07b      	b.n	857c <_Z11coap_s_procP4mbuf+0x144>
	{
        if (cc.type == COAP_T_ACK_VAL)
    8484:	7823      	ldrb	r3, [r4, #0]
    8486:	2b02      	cmp	r3, #2
    8488:	d11f      	bne.n	84ca <_Z11coap_s_procP4mbuf+0x92>
		{
            /*
             * TODO: Assuming it's not a piggy-backed ACK for now.
             */
            rc = coap_ack_rx(cc.mid, NULL);
    848a:	0039      	movs	r1, r7
    848c:	88a0      	ldrh	r0, [r4, #4]
    848e:	f7fe fda9 	bl	6fe4 <_Z11coap_ack_rxtP4mbuf>
            dlog(LOG_INFO, "ACK for mid: 0x%x received, lookup returned %d", cc.mid, rc);
    8492:	88a2      	ldrh	r2, [r4, #4]
            rc = coap_ack_rx(cc.mid, NULL);
    8494:	0003      	movs	r3, r0
            dlog(LOG_INFO, "ACK for mid: 0x%x received, lookup returned %d", cc.mid, rc);
    8496:	4953      	ldr	r1, [pc, #332]	; (85e4 <_Z11coap_s_procP4mbuf+0x1ac>)
    8498:	2006      	movs	r0, #6
    849a:	f7fc fb1f 	bl	4adc <_Z4dlogiPKcz>
			goto done;
        }
    }

done:
    if (cc.msg)
    849e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    84a0:	9303      	str	r3, [sp, #12]
    84a2:	2b00      	cmp	r3, #0
    84a4:	d008      	beq.n	84b8 <_Z11coap_s_procP4mbuf+0x80>
	{
		dlog(LOG_DEBUG, "coap_s_proc: Free cc mbuf");
    84a6:	4950      	ldr	r1, [pc, #320]	; (85e8 <_Z11coap_s_procP4mbuf+0x1b0>)
    84a8:	2007      	movs	r0, #7
    84aa:	f7fc fb17 	bl	4adc <_Z4dlogiPKcz>
        m_free(cc.msg);
    84ae:	981a      	ldr	r0, [sp, #104]	; 0x68
    84b0:	f000 f90c 	bl	86cc <_Z6m_freeP4mbuf>
        cc.msg = NULL;
    84b4:	2300      	movs	r3, #0
    84b6:	931a      	str	r3, [sp, #104]	; 0x68
    }
    copt_del_all((sl_co*)&(cc.oh));
    84b8:	a819      	add	r0, sp, #100	; 0x64
    84ba:	f7ff fa7b 	bl	79b4 <_Z12copt_del_allP5sl_co>
    copt_del_all((sl_co*)&(rcc.oh));
    84be:	a82e      	add	r0, sp, #184	; 0xb8
    84c0:	f7ff fa78 	bl	79b4 <_Z12copt_del_allP5sl_co>
    return r;
	
}
    84c4:	0030      	movs	r0, r6
    84c6:	b031      	add	sp, #196	; 0xc4
    84c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        coap_init_rsp(&cc, &rcc, r);
    84ca:	0032      	movs	r2, r6
    84cc:	0029      	movs	r1, r5
    84ce:	0020      	movs	r0, r4
    84d0:	f7ff f820 	bl	7514 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>
        if (cc.code == COAP_EMPTY_MESSAGE)
    84d4:	78a3      	ldrb	r3, [r4, #2]
    84d6:	2b00      	cmp	r3, #0
    84d8:	d128      	bne.n	852c <_Z11coap_s_procP4mbuf+0xf4>
            rcc.plen = 0;
    84da:	642b      	str	r3, [r5, #64]	; 0x40
            if (cc.type == COAP_T_CONF_VAL)
    84dc:	7823      	ldrb	r3, [r4, #0]
    84de:	2b00      	cmp	r3, #0
    84e0:	d101      	bne.n	84e6 <_Z11coap_s_procP4mbuf+0xae>
                rcc.type = COAP_T_RESET_VAL;
    84e2:	3303      	adds	r3, #3
    84e4:	702b      	strb	r3, [r5, #0]
        pstr = coap_pathstr(&cc);
    84e6:	0020      	movs	r0, r4
    84e8:	f7fe fdb0 	bl	704c <_Z12coap_pathstrPK12coap_msg_ctx>
        if (!rcc.final && copt_get_next_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE, NULL))
    84ec:	6caa      	ldr	r2, [r5, #72]	; 0x48
        pstr = coap_pathstr(&cc);
    84ee:	0007      	movs	r7, r0
        if (!rcc.final && copt_get_next_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE, NULL))
    84f0:	2a00      	cmp	r2, #0
    84f2:	d105      	bne.n	8500 <_Z11coap_s_procP4mbuf+0xc8>
    84f4:	2106      	movs	r1, #6
    84f6:	a82e      	add	r0, sp, #184	; 0xb8
    84f8:	f7ff fac0 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    84fc:	2800      	cmp	r0, #0
    84fe:	d15f      	bne.n	85c0 <_Z11coap_s_procP4mbuf+0x188>
        } else if ((op = copt_get_next_opt_type((sl_co*)&(cc.oh), COAP_OPTION_OBSERVE, NULL)) && 
    8500:	2200      	movs	r2, #0
    8502:	2106      	movs	r1, #6
    8504:	a819      	add	r0, sp, #100	; 0x64
    8506:	f7ff fab9 	bl	7a7c <_Z22copt_get_next_opt_typePK5sl_cotPPv>
    850a:	2800      	cmp	r0, #0
    850c:	d023      	beq.n	8556 <_Z11coap_s_procP4mbuf+0x11e>
				   (co_uint32_n2h(op) == COAP_OBS_DEREG))
    850e:	f7fe fec1 	bl	7294 <_Z13co_uint32_n2hPK5optlv>
        } else if ((op = copt_get_next_opt_type((sl_co*)&(cc.oh), COAP_OPTION_OBSERVE, NULL)) && 
    8512:	2801      	cmp	r0, #1
    8514:	d11f      	bne.n	8556 <_Z11coap_s_procP4mbuf+0x11e>
            if (disable_obs(pstr, &cc, &clt, 0) == ERR_OK)
    8516:	2300      	movs	r3, #0
    8518:	aa05      	add	r2, sp, #20
    851a:	0021      	movs	r1, r4
    851c:	0038      	movs	r0, r7
    851e:	f7ff f9e9 	bl	78f4 <_Z11disable_obsPKcP12coap_msg_ctxPPvh>
    8522:	2800      	cmp	r0, #0
    8524:	d117      	bne.n	8556 <_Z11coap_s_procP4mbuf+0x11e>
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    8526:	003a      	movs	r2, r7
    8528:	4930      	ldr	r1, [pc, #192]	; (85ec <_Z11coap_s_procP4mbuf+0x1b4>)
    852a:	e058      	b.n	85de <_Z11coap_s_procP4mbuf+0x1a6>
            if (coap_s_uri_proc(&cc, &rcc) != ERR_OK)
    852c:	0029      	movs	r1, r5
    852e:	0020      	movs	r0, r4
    8530:	f7ff fef0 	bl	8314 <_Z15coap_s_uri_procP12coap_msg_ctxS0_>
    8534:	2800      	cmp	r0, #0
    8536:	d0d6      	beq.n	84e6 <_Z11coap_s_procP4mbuf+0xae>
                rcc.code = COAP_RSP_500_INTERNAL_ERROR;
    8538:	23a0      	movs	r3, #160	; 0xa0
                rcc.plen = 0;
    853a:	642f      	str	r7, [r5, #64]	; 0x40
                rcc.code = COAP_RSP_500_INTERNAL_ERROR;
    853c:	70ab      	strb	r3, [r5, #2]
    853e:	e7d2      	b.n	84e6 <_Z11coap_s_procP4mbuf+0xae>
                (void)copt_del_opt_type((sl_co*)&(rcc.oh), COAP_OPTION_OBSERVE);
    8540:	2106      	movs	r1, #6
    8542:	a82e      	add	r0, sp, #184	; 0xb8
    8544:	f7ff fac2 	bl	7acc <_Z17copt_del_opt_typeP5sl_cot>
                rcc.final = 1;
    8548:	2301      	movs	r3, #1
                dlog(LOG_ERR, "Failed to enabled observe for URI: %s", pstr);
    854a:	003a      	movs	r2, r7
    854c:	2003      	movs	r0, #3
    854e:	4928      	ldr	r1, [pc, #160]	; (85f0 <_Z11coap_s_procP4mbuf+0x1b8>)
                rcc.final = 1;
    8550:	64ab      	str	r3, [r5, #72]	; 0x48
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    8552:	f7fc fac3 	bl	4adc <_Z4dlogiPKcz>
        if (coap_msg_response(&rcc) != ERR_OK)
    8556:	a81b      	add	r0, sp, #108	; 0x6c
    8558:	f7ff f81c 	bl	7594 <_Z17coap_msg_responseP12coap_msg_ctx>
    855c:	2800      	cmp	r0, #0
    855e:	d001      	beq.n	8564 <_Z11coap_s_procP4mbuf+0x12c>
				dlog(LOG_DEBUG, "Error msg rsp: freeing mbuf");
    8560:	4924      	ldr	r1, [pc, #144]	; (85f4 <_Z11coap_s_procP4mbuf+0x1bc>)
    8562:	e003      	b.n	856c <_Z11coap_s_procP4mbuf+0x134>
        if(r->m_pktlen == 0)
    8564:	8834      	ldrh	r4, [r6, #0]
	        dlog(LOG_DEBUG, "No rsp: freeing mbuf");
    8566:	4924      	ldr	r1, [pc, #144]	; (85f8 <_Z11coap_s_procP4mbuf+0x1c0>)
        if(r->m_pktlen == 0)
    8568:	2c00      	cmp	r4, #0
    856a:	d198      	bne.n	849e <_Z11coap_s_procP4mbuf+0x66>
				dlog(LOG_DEBUG, "Error msg rsp: freeing mbuf");
    856c:	2007      	movs	r0, #7
    856e:	f7fc fab5 	bl	4adc <_Z4dlogiPKcz>
				m_free(r);
    8572:	0030      	movs	r0, r6
    8574:	f000 f8aa 	bl	86cc <_Z6m_freeP4mbuf>
				r = NULL;
    8578:	2600      	movs	r6, #0
    857a:	e790      	b.n	849e <_Z11coap_s_procP4mbuf+0x66>
			dlog(LOG_DEBUG, "Parse error: freeing mbuf");
    857c:	491f      	ldr	r1, [pc, #124]	; (85fc <_Z11coap_s_procP4mbuf+0x1c4>)
	else if (rc == ERR_VER_NOT_SUPP)
    857e:	281d      	cmp	r0, #29
    8580:	d0f4      	beq.n	856c <_Z11coap_s_procP4mbuf+0x134>
        dlog(LOG_ERR, "Error: rc/h->len: %d/%d, cc.code: %d", rc, m->m_pktlen, cc.code);
    8582:	78a2      	ldrb	r2, [r4, #2]
    8584:	9b03      	ldr	r3, [sp, #12]
    8586:	491e      	ldr	r1, [pc, #120]	; (8600 <_Z11coap_s_procP4mbuf+0x1c8>)
    8588:	881b      	ldrh	r3, [r3, #0]
    858a:	9200      	str	r2, [sp, #0]
    858c:	0002      	movs	r2, r0
    858e:	2003      	movs	r0, #3
    8590:	f7fc faa4 	bl	4adc <_Z4dlogiPKcz>
        coap_init_rsp(&cc, &rcc, r);
    8594:	0032      	movs	r2, r6
    8596:	0029      	movs	r1, r5
    8598:	0020      	movs	r0, r4
    859a:	f7fe ffbb 	bl	7514 <_Z13coap_init_rspPK12coap_msg_ctxPS_P4mbuf>
        if (cc.type == COAP_T_CONF_VAL)
    859e:	7823      	ldrb	r3, [r4, #0]
    85a0:	2b00      	cmp	r3, #0
    85a2:	d10b      	bne.n	85bc <_Z11coap_s_procP4mbuf+0x184>
            rcc.type = COAP_T_ACK_VAL;
    85a4:	3302      	adds	r3, #2
            rcc.type = COAP_T_NCONF_VAL;
    85a6:	702b      	strb	r3, [r5, #0]
        rcc.code = code;
    85a8:	ab02      	add	r3, sp, #8
    85aa:	7adb      	ldrb	r3, [r3, #11]
        if (coap_msg_response(&rcc) != ERR_OK)
    85ac:	0028      	movs	r0, r5
        rcc.code = code;
    85ae:	70ab      	strb	r3, [r5, #2]
        if (coap_msg_response(&rcc) != ERR_OK)
    85b0:	f7fe fff0 	bl	7594 <_Z17coap_msg_responseP12coap_msg_ctx>
    85b4:	2800      	cmp	r0, #0
    85b6:	d100      	bne.n	85ba <_Z11coap_s_procP4mbuf+0x182>
    85b8:	e771      	b.n	849e <_Z11coap_s_procP4mbuf+0x66>
    85ba:	e7d1      	b.n	8560 <_Z11coap_s_procP4mbuf+0x128>
            rcc.type = COAP_T_NCONF_VAL;
    85bc:	2301      	movs	r3, #1
    85be:	e7f2      	b.n	85a6 <_Z11coap_s_procP4mbuf+0x16e>
            (void)disable_obs(pstr, &cc, &clt, 1);
    85c0:	aa05      	add	r2, sp, #20
    85c2:	0021      	movs	r1, r4
    85c4:	2301      	movs	r3, #1
    85c6:	0038      	movs	r0, r7
    85c8:	f7ff f994 	bl	78f4 <_Z11disable_obsPKcP12coap_msg_ctxPPvh>
            if (enable_obs(pstr, &cc, &clt) != ERR_OK)
    85cc:	aa05      	add	r2, sp, #20
    85ce:	0021      	movs	r1, r4
    85d0:	0038      	movs	r0, r7
    85d2:	f7ff f909 	bl	77e8 <_Z10enable_obsPKcP12coap_msg_ctxPv>
    85d6:	2800      	cmp	r0, #0
    85d8:	d1b2      	bne.n	8540 <_Z11coap_s_procP4mbuf+0x108>
                dlog(LOG_DEBUG, "Enabled observe for URI: %s", pstr);
    85da:	003a      	movs	r2, r7
    85dc:	4909      	ldr	r1, [pc, #36]	; (8604 <_Z11coap_s_procP4mbuf+0x1cc>)
                dlog(LOG_DEBUG, "Disabled observe for URI %s", pstr);
    85de:	2007      	movs	r0, #7
    85e0:	e7b7      	b.n	8552 <_Z11coap_s_procP4mbuf+0x11a>
    85e2:	46c0      	nop			; (mov r8, r8)
    85e4:	0001116d 	.word	0x0001116d
    85e8:	0001126a 	.word	0x0001126a
    85ec:	000111de 	.word	0x000111de
    85f0:	0001119c 	.word	0x0001119c
    85f4:	000111fa 	.word	0x000111fa
    85f8:	00011216 	.word	0x00011216
    85fc:	0001122b 	.word	0x0001122b
    8600:	00011245 	.word	0x00011245
    8604:	000111c2 	.word	0x000111c2

00008608 <_Z10coap_s_runv>:


// Run HDLCS and the CoAP Server 
void coap_s_run()
{
    8608:	b570      	push	{r4, r5, r6, lr}
	struct mbuf *appd;
	struct mbuf *arsp;
	
	/* Run the secondary-station HDLC state machine */
	hdlcs_run();
    860a:	f000 f9b9 	bl	8980 <_Z9hdlcs_runv>
	
	/* Serve incoming request, if any */
	appd = hdlcs_read();
    860e:	f000 f93b 	bl	8888 <_Z10hdlcs_readv>
    8612:	1e05      	subs	r5, r0, #0
	if (appd) 
    8614:	d01c      	beq.n	8650 <_Z10coap_s_runv+0x48>
	{
		/* Run the CoAP server */
		arsp = coap_s_proc(appd);
    8616:	f7ff ff0f 	bl	8438 <_Z11coap_s_procP4mbuf>
    861a:	1e04      	subs	r4, r0, #0
		if (arsp) 
    861c:	d00a      	beq.n	8634 <_Z10coap_s_runv+0x2c>
		{
			// Direct send of CoAP response
			hdlcs_write(arsp->data, arsp->len);
    861e:	8801      	ldrh	r1, [r0, #0]
    8620:	3004      	adds	r0, #4
    8622:	f000 f95b 	bl	88dc <_Z11hdlcs_writePKvt>
			
			// Free response mbuf
			dlog(LOG_DEBUG, "coap_s_run: freeing arsp mbuf");
    8626:	2007      	movs	r0, #7
    8628:	490a      	ldr	r1, [pc, #40]	; (8654 <_Z10coap_s_runv+0x4c>)
    862a:	f7fc fa57 	bl	4adc <_Z4dlogiPKcz>
			m_free(arsp);
    862e:	0020      	movs	r0, r4
    8630:	f000 f84c 	bl	86cc <_Z6m_freeP4mbuf>
		}
		// Free request mbuf
		dlog(LOG_DEBUG, "coap_s_run: freeing appd mbuf");
    8634:	4908      	ldr	r1, [pc, #32]	; (8658 <_Z10coap_s_runv+0x50>)
    8636:	2007      	movs	r0, #7
    8638:	f7fc fa50 	bl	4adc <_Z4dlogiPKcz>
		m_free(appd);
    863c:	0028      	movs	r0, r5
    863e:	f000 f845 	bl	86cc <_Z6m_freeP4mbuf>
		
		int freeram = free_ram();
    8642:	f7fc fb7d 	bl	4d40 <_Z8free_ramv>
		dlog(LOG_DEBUG, "coap_s_run: free Ram: %d", freeram);
    8646:	4905      	ldr	r1, [pc, #20]	; (865c <_Z10coap_s_runv+0x54>)
		int freeram = free_ram();
    8648:	0002      	movs	r2, r0
		dlog(LOG_DEBUG, "coap_s_run: free Ram: %d", freeram);
    864a:	2007      	movs	r0, #7
    864c:	f7fc fa46 	bl	4adc <_Z4dlogiPKcz>
	}
} 
    8650:	bd70      	pop	{r4, r5, r6, pc}
    8652:	46c0      	nop			; (mov r8, r8)
    8654:	000110fc 	.word	0x000110fc
    8658:	0001111a 	.word	0x0001111a
    865c:	00011138 	.word	0x00011138

00008660 <_Z18set_mbuf_data_sizei>:
// Set the size of the mbuf data buffer
static int mbuf_data_buf_size = 0;
void set_mbuf_data_size( int buf_size )
{
	// Get the size of the mbuf data buffer
	mbuf_data_buf_size = buf_size;
    8660:	4b01      	ldr	r3, [pc, #4]	; (8668 <_Z18set_mbuf_data_sizei+0x8>)
    8662:	6018      	str	r0, [r3, #0]
	
} // set_mbuf_size
    8664:	4770      	bx	lr
    8666:	46c0      	nop			; (mov r8, r8)
    8668:	20001d14 	.word	0x20001d14

0000866c <_Z18get_mbuf_data_sizev>:

// Get the size of the mbuf data buffer
int get_mbuf_data_size()
{
	// Return the size of the mbuf data buffer
	return mbuf_data_buf_size;
    866c:	4b01      	ldr	r3, [pc, #4]	; (8674 <_Z18get_mbuf_data_sizev+0x8>)
    866e:	6818      	ldr	r0, [r3, #0]
	
} // get_mbuf_size
    8670:	4770      	bx	lr
    8672:	46c0      	nop			; (mov r8, r8)
    8674:	20001d14 	.word	0x20001d14

00008678 <_Z5m_getv>:


struct mbuf * m_get()
{
    8678:	b570      	push	{r4, r5, r6, lr}
    struct mbuf *m;
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    867a:	4d0e      	ldr	r5, [pc, #56]	; (86b4 <_Z5m_getv+0x3c>)
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    867c:	2007      	movs	r0, #7
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    867e:	682b      	ldr	r3, [r5, #0]
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    8680:	490d      	ldr	r1, [pc, #52]	; (86b8 <_Z5m_getv+0x40>)
	int mbuf_size = sizeof(*m) + mbuf_data_buf_size;
    8682:	1d1c      	adds	r4, r3, #4
	dlog(LOG_DEBUG, "Allocate mbuf with size: %d", mbuf_size);
    8684:	0022      	movs	r2, r4
    8686:	f7fc fa29 	bl	4adc <_Z4dlogiPKcz>
    m = (struct mbuf *) malloc(mbuf_size);
    868a:	0020      	movs	r0, r4
    868c:	f003 fd32 	bl	c0f4 <malloc>
    assert(m);
    8690:	2800      	cmp	r0, #0
    8692:	d105      	bne.n	86a0 <_Z5m_getv+0x28>
    8694:	4b09      	ldr	r3, [pc, #36]	; (86bc <_Z5m_getv+0x44>)
    8696:	4a0a      	ldr	r2, [pc, #40]	; (86c0 <_Z5m_getv+0x48>)
    8698:	214a      	movs	r1, #74	; 0x4a
    869a:	480a      	ldr	r0, [pc, #40]	; (86c4 <_Z5m_getv+0x4c>)
    869c:	f003 fbe8 	bl	be70 <__assert_func>
    m->len = 0;
    86a0:	2300      	movs	r3, #0
    m->size = mbuf_data_buf_size;
    malloc_cnt++;
    86a2:	4a09      	ldr	r2, [pc, #36]	; (86c8 <_Z5m_getv+0x50>)
    m->len = 0;
    86a4:	8003      	strh	r3, [r0, #0]
    m->size = mbuf_data_buf_size;
    86a6:	682b      	ldr	r3, [r5, #0]
    86a8:	8043      	strh	r3, [r0, #2]
    malloc_cnt++;
    86aa:	6813      	ldr	r3, [r2, #0]
    86ac:	3301      	adds	r3, #1
    86ae:	6013      	str	r3, [r2, #0]
    return m;
}
    86b0:	bd70      	pop	{r4, r5, r6, pc}
    86b2:	46c0      	nop			; (mov r8, r8)
    86b4:	20001d14 	.word	0x20001d14
    86b8:	00011284 	.word	0x00011284
    86bc:	000112a0 	.word	0x000112a0
    86c0:	000112cd 	.word	0x000112cd
    86c4:	000112a2 	.word	0x000112a2
    86c8:	20001d1c 	.word	0x20001d1c

000086cc <_Z6m_freeP4mbuf>:

void
m_free(struct mbuf *m)
{
    86cc:	b510      	push	{r4, lr}
    free(m);
    86ce:	f003 fd1b 	bl	c108 <free>
    free_cnt++;
    86d2:	4a02      	ldr	r2, [pc, #8]	; (86dc <_Z6m_freeP4mbuf+0x10>)
    86d4:	6813      	ldr	r3, [r2, #0]
    86d6:	3301      	adds	r3, #1
    86d8:	6013      	str	r3, [r2, #0]
}
    86da:	bd10      	pop	{r4, pc}
    86dc:	20001d18 	.word	0x20001d18

000086e0 <_Z5m_dupP4mbuf>:


struct mbuf *
m_dup(struct mbuf *m)
{
    86e0:	b570      	push	{r4, r5, r6, lr}
    86e2:	0005      	movs	r5, r0

    struct mbuf *n = m_get();
    86e4:	f7ff ffc8 	bl	8678 <_Z5m_getv>
    86e8:	1e04      	subs	r4, r0, #0

    if (n) {
    86ea:	d007      	beq.n	86fc <_Z5m_dupP4mbuf+0x1c>
        memcpy(n, m, sizeof(*m) + mbuf_data_buf_size);
    86ec:	4b04      	ldr	r3, [pc, #16]	; (8700 <_Z5m_dupP4mbuf+0x20>)
    86ee:	0029      	movs	r1, r5
    86f0:	681a      	ldr	r2, [r3, #0]
    86f2:	3204      	adds	r2, #4
    86f4:	f003 fd33 	bl	c15e <memcpy>
        n->len = m->len;
    86f8:	882b      	ldrh	r3, [r5, #0]
    86fa:	8023      	strh	r3, [r4, #0]
    }

    return n;

}
    86fc:	0020      	movs	r0, r4
    86fe:	bd70      	pop	{r4, r5, r6, pc}
    8700:	20001d14 	.word	0x20001d14

00008704 <_Z9m_prependP4mbufi>:

struct mbuf *
m_prepend(struct mbuf *m, int len)
{

    if (m->len + len > mbuf_data_buf_size) {
    8704:	4b09      	ldr	r3, [pc, #36]	; (872c <_Z9m_prependP4mbufi+0x28>)
    8706:	8802      	ldrh	r2, [r0, #0]
    8708:	681b      	ldr	r3, [r3, #0]
{
    870a:	b570      	push	{r4, r5, r6, lr}
    870c:	000d      	movs	r5, r1
    if (m->len + len > mbuf_data_buf_size) {
    870e:	1851      	adds	r1, r2, r1
{
    8710:	0004      	movs	r4, r0
    if (m->len + len > mbuf_data_buf_size) {
    8712:	4299      	cmp	r1, r3
    8714:	dc08      	bgt.n	8728 <_Z9m_prependP4mbufi+0x24>
        return NULL;
    }

    /* make space at the top of the buffer */
    memmove(m->data + len, m->data, m->len);
    8716:	1d01      	adds	r1, r0, #4
    8718:	1948      	adds	r0, r1, r5
    871a:	f003 fd29 	bl	c170 <memmove>
    m->len += len;
    871e:	8821      	ldrh	r1, [r4, #0]
    8720:	1949      	adds	r1, r1, r5
    8722:	8021      	strh	r1, [r4, #0]

    return m;
}
    8724:	0020      	movs	r0, r4
    8726:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
    8728:	2400      	movs	r4, #0
    872a:	e7fb      	b.n	8724 <_Z9m_prependP4mbufi+0x20>
    872c:	20001d14 	.word	0x20001d14

00008730 <_Z8m_appendP4mbufs>:

void *
m_append(struct mbuf *m, int16_t len)
{
    void *d;
    if (m->len + len > mbuf_data_buf_size) {
    8730:	4b06      	ldr	r3, [pc, #24]	; (874c <_Z8m_appendP4mbufs+0x1c>)
{
    8732:	b510      	push	{r4, lr}
    if (m->len + len > mbuf_data_buf_size) {
    8734:	8804      	ldrh	r4, [r0, #0]
    8736:	681b      	ldr	r3, [r3, #0]
    8738:	1861      	adds	r1, r4, r1
{
    873a:	0002      	movs	r2, r0
        return NULL;
    873c:	2000      	movs	r0, #0
    if (m->len + len > mbuf_data_buf_size) {
    873e:	4299      	cmp	r1, r3
    8740:	dc02      	bgt.n	8748 <_Z8m_appendP4mbufs+0x18>
    }

    d = m->data + m->len;
    8742:	1d10      	adds	r0, r2, #4
    8744:	1900      	adds	r0, r0, r4
    m->len += len;
    8746:	8011      	strh	r1, [r2, #0]
    
    return d;

}
    8748:	bd10      	pop	{r4, pc}
    874a:	46c0      	nop			; (mov r8, r8)
    874c:	20001d14 	.word	0x20001d14

00008750 <_Z5m_adjP4mbufi>:



void
m_adj(struct mbuf *mp, int req_len)
{
    8750:	b510      	push	{r4, lr}
    if (mp == NULL) {
    8752:	2800      	cmp	r0, #0
    8754:	d011      	beq.n	877a <_Z5m_adjP4mbufi+0x2a>
        return;
    }
    if ((req_len > mp->len) || (-1*(req_len) > mp->len)) {
    8756:	8802      	ldrh	r2, [r0, #0]
    8758:	0013      	movs	r3, r2
    875a:	428a      	cmp	r2, r1
    875c:	db05      	blt.n	876a <_Z5m_adjP4mbufi+0x1a>
    875e:	424c      	negs	r4, r1
    8760:	42a2      	cmp	r2, r4
    8762:	db02      	blt.n	876a <_Z5m_adjP4mbufi+0x1a>
        req_len = mp->len;
    }

    if (req_len >= 0) {
    8764:	2900      	cmp	r1, #0
    8766:	db09      	blt.n	877c <_Z5m_adjP4mbufi+0x2c>
    8768:	000b      	movs	r3, r1
        /* Trim from head. */
        mp->len -= req_len;
    876a:	1ad2      	subs	r2, r2, r3
    876c:	b292      	uxth	r2, r2
        memmove(mp->data, &(mp->data[req_len]), mp->len);
    876e:	1d19      	adds	r1, r3, #4
        mp->len -= req_len;
    8770:	8002      	strh	r2, [r0, #0]
        memmove(mp->data, &(mp->data[req_len]), mp->len);
    8772:	1841      	adds	r1, r0, r1
    8774:	3004      	adds	r0, #4
    8776:	f003 fcfb 	bl	c170 <memmove>
    } else {
        /* Trim from tail. */
        mp->len += req_len;
    }
}
    877a:	bd10      	pop	{r4, pc}
        mp->len += req_len;
    877c:	1852      	adds	r2, r2, r1
    877e:	8002      	strh	r2, [r0, #0]
    8780:	e7fb      	b.n	877a <_Z5m_adjP4mbufi+0x2a>
	...

00008784 <_ZL10hdlcs_snrmv>:
    struct hdlc_snrm_params hsp;

    int hdrlen;


    hss.state = HSS_NORM;
    8784:	2302      	movs	r3, #2
{
    8786:	b530      	push	{r4, r5, lr}
    hss.state = HSS_NORM;
    8788:	4c19      	ldr	r4, [pc, #100]	; (87f0 <_ZL10hdlcs_snrmv+0x6c>)
{
    878a:	b093      	sub	sp, #76	; 0x4c
            
     /* reinit state */
    dlog(LOG_DEBUG, "enter normal mode");
    878c:	4919      	ldr	r1, [pc, #100]	; (87f4 <_ZL10hdlcs_snrmv+0x70>)
    878e:	2007      	movs	r0, #7
    hss.state = HSS_NORM;
    8790:	7323      	strb	r3, [r4, #12]
    dlog(LOG_DEBUG, "enter normal mode");
    8792:	f7fc f9a3 	bl	4adc <_Z4dlogiPKcz>
            
    /* respond with UA */
    hdlc_hdr(0, hdlc_control(HDLC_UA, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    8796:	2101      	movs	r1, #1
    8798:	2006      	movs	r0, #6
    879a:	f000 fb13 	bl	8dc4 <_Z12hdlc_controlhh>
    879e:	ad05      	add	r5, sp, #20
    87a0:	0001      	movs	r1, r0
    87a2:	a804      	add	r0, sp, #16
    87a4:	7ba3      	ldrb	r3, [r4, #14]
    87a6:	7b62      	ldrb	r2, [r4, #13]
    87a8:	9001      	str	r0, [sp, #4]
    87aa:	9500      	str	r5, [sp, #0]
    87ac:	2000      	movs	r0, #0
    87ae:	f000 fb91 	bl	8ed4 <_Z8hdlc_hdrismmPhPi>

    /* should use negotiated values - min() of primary/secondary */    
    hsp.max_info_tx = hss.cfg.max_info_tx;  
    87b2:	6863      	ldr	r3, [r4, #4]
    hsp.max_info_rx = hss.cfg.max_info_rx;
    hsp.window_tx = 1;
    hsp.window_rx = 1;

    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    87b4:	aa03      	add	r2, sp, #12
    hsp.max_info_tx = hss.cfg.max_info_tx;  
    87b6:	9307      	str	r3, [sp, #28]
    hsp.max_info_rx = hss.cfg.max_info_rx;
    87b8:	68a3      	ldr	r3, [r4, #8]
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    87ba:	211a      	movs	r1, #26
    hsp.max_info_rx = hss.cfg.max_info_rx;
    87bc:	9308      	str	r3, [sp, #32]
    hsp.window_tx = 1;
    87be:	2301      	movs	r3, #1
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    87c0:	a80b      	add	r0, sp, #44	; 0x2c
    hsp.window_tx = 1;
    87c2:	9309      	str	r3, [sp, #36]	; 0x24
    hsp.window_rx = 1;
    87c4:	930a      	str	r3, [sp, #40]	; 0x28
    hdlc_fill_snrm_param(param_info, sizeof(param_info), &rsplen, &hsp);
    87c6:	ab07      	add	r3, sp, #28
    87c8:	f000 fc40 	bl	904c <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params>
    rc = hdlc_send_frame(hdr, param_info, rsplen);
    87cc:	9a03      	ldr	r2, [sp, #12]
    87ce:	a90b      	add	r1, sp, #44	; 0x2c
    87d0:	0028      	movs	r0, r5
    87d2:	f000 fc6d 	bl	90b0 <_Z15hdlc_send_framePKhS0_i>

    dlog(LOG_DEBUG, "SNRM-UA response rc %d", rc);
    87d6:	4908      	ldr	r1, [pc, #32]	; (87f8 <_ZL10hdlcs_snrmv+0x74>)
    rc = hdlc_send_frame(hdr, param_info, rsplen);
    87d8:	0002      	movs	r2, r0
    dlog(LOG_DEBUG, "SNRM-UA response rc %d", rc);
    87da:	2007      	movs	r0, #7
    87dc:	f7fc f97e 	bl	4adc <_Z4dlogiPKcz>

    /* Send / Receive sequence numbers are reset to 0 */
    hss.vr = 0;
    87e0:	2000      	movs	r0, #0
    87e2:	7420      	strb	r0, [r4, #16]
    hss.vs = 0;
    87e4:	73e0      	strb	r0, [r4, #15]
    hss.vr_ack = 0;
    87e6:	74a0      	strb	r0, [r4, #18]
    hss.vs_ack = 0;
    87e8:	7460      	strb	r0, [r4, #17]

    return 0;
 
}
    87ea:	b013      	add	sp, #76	; 0x4c
    87ec:	bd30      	pop	{r4, r5, pc}
    87ee:	46c0      	nop			; (mov r8, r8)
    87f0:	20001d24 	.word	0x20001d24
    87f4:	000114d7 	.word	0x000114d7
    87f8:	000114e9 	.word	0x000114e9

000087fc <_Z10hdlcs_openP14HardwareSerialmm>:
{
    87fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if (hss.open) 
    87fe:	4c1c      	ldr	r4, [pc, #112]	; (8870 <_Z10hdlcs_openP14HardwareSerialmm+0x74>)
{
    8800:	9101      	str	r1, [sp, #4]
    if (hss.open) 
    8802:	6826      	ldr	r6, [r4, #0]
{
    8804:	0015      	movs	r5, r2
        return ERR_FAIL;
    8806:	2763      	movs	r7, #99	; 0x63
    if (hss.open) 
    8808:	2e00      	cmp	r6, #0
    880a:	d106      	bne.n	881a <_Z10hdlcs_openP14HardwareSerialmm+0x1e>
	if ( max_info_len > MNIC_MAX_PAYLOAD_SIZE )
    880c:	2aff      	cmp	r2, #255	; 0xff
    880e:	d906      	bls.n	881e <_Z10hdlcs_openP14HardwareSerialmm+0x22>
		dlog( LOG_DEBUG, "The max payload size specified is too large: %d bytes. The maximum allowed is %d bytes ", max_info_len, MNIC_MAX_PAYLOAD_SIZE );
    8810:	23ff      	movs	r3, #255	; 0xff
    8812:	4918      	ldr	r1, [pc, #96]	; (8874 <_Z10hdlcs_openP14HardwareSerialmm+0x78>)
    8814:	2007      	movs	r0, #7
    8816:	f7fc f961 	bl	4adc <_Z4dlogiPKcz>
}
    881a:	0038      	movs	r0, r7
    881c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hss.open = 1;
    881e:	2701      	movs	r7, #1
	hdlc_init( pUART, max_info_len );
    8820:	0011      	movs	r1, r2
    8822:	f000 faab 	bl	8d7c <_Z9hdlc_initP14HardwareSerialm>
	uart_timeout_ms = timeout_ms;
    8826:	4b14      	ldr	r3, [pc, #80]	; (8878 <_Z10hdlcs_openP14HardwareSerialmm+0x7c>)
    8828:	9a01      	ldr	r2, [sp, #4]
    memset(&hss, 0, sizeof(hss));
    882a:	0031      	movs	r1, r6
	uart_timeout_ms = timeout_ms;
    882c:	601a      	str	r2, [r3, #0]
    memset(&hss, 0, sizeof(hss));
    882e:	0020      	movs	r0, r4
    8830:	2220      	movs	r2, #32
    8832:	f003 fcaf 	bl	c194 <memset>
	set_mbuf_data_size(size);
    8836:	0028      	movs	r0, r5
    hss.open = 1;
    8838:	6027      	str	r7, [r4, #0]
    hss.cfg.max_info_tx = max_info_len;
    883a:	6065      	str	r5, [r4, #4]
    hss.cfg.max_info_rx = max_info_len;
    883c:	60a5      	str	r5, [r4, #8]
    hss.state = HSS_DISC;
    883e:	7327      	strb	r7, [r4, #12]
	set_mbuf_data_size(size);
    8840:	f7ff ff0e 	bl	8660 <_Z18set_mbuf_data_sizei>
    hss.recv = m_get();
    8844:	f7ff ff18 	bl	8678 <_Z5m_getv>
    8848:	61a0      	str	r0, [r4, #24]
    assert(hss.recv);
    884a:	2800      	cmp	r0, #0
    884c:	d105      	bne.n	885a <_Z10hdlcs_openP14HardwareSerialmm+0x5e>
    884e:	4b0b      	ldr	r3, [pc, #44]	; (887c <_Z10hdlcs_openP14HardwareSerialmm+0x80>)
    8850:	4a0b      	ldr	r2, [pc, #44]	; (8880 <_Z10hdlcs_openP14HardwareSerialmm+0x84>)
    8852:	2164      	movs	r1, #100	; 0x64
    8854:	480b      	ldr	r0, [pc, #44]	; (8884 <_Z10hdlcs_openP14HardwareSerialmm+0x88>)
    8856:	f003 fb0b 	bl	be70 <__assert_func>
    hss.esrc = hdlc_addr_encode(1);
    885a:	0038      	movs	r0, r7
    885c:	f000 fb24 	bl	8ea8 <_Z16hdlc_addr_encodem>
    8860:	7360      	strb	r0, [r4, #13]
    hss.edst = hdlc_addr_encode(1);
    8862:	0038      	movs	r0, r7
    8864:	f000 fb20 	bl	8ea8 <_Z16hdlc_addr_encodem>
    return ERR_OK;
    8868:	0037      	movs	r7, r6
    hss.edst = hdlc_addr_encode(1);
    886a:	73a0      	strb	r0, [r4, #14]
    return ERR_OK;
    886c:	e7d5      	b.n	881a <_Z10hdlcs_openP14HardwareSerialmm+0x1e>
    886e:	46c0      	nop			; (mov r8, r8)
    8870:	20001d24 	.word	0x20001d24
    8874:	000112db 	.word	0x000112db
    8878:	20001d20 	.word	0x20001d20
    887c:	00011333 	.word	0x00011333
    8880:	0001151d 	.word	0x0001151d
    8884:	0001133c 	.word	0x0001133c

00008888 <_Z10hdlcs_readv>:
{
    8888:	b570      	push	{r4, r5, r6, lr}
    if (hss.r_complete) {
    888a:	4d0f      	ldr	r5, [pc, #60]	; (88c8 <_Z10hdlcs_readv+0x40>)
    888c:	69ec      	ldr	r4, [r5, #28]
    888e:	2c00      	cmp	r4, #0
    8890:	d018      	beq.n	88c4 <_Z10hdlcs_readv+0x3c>
        r = m_dup(hss.recv);
    8892:	69a8      	ldr	r0, [r5, #24]
    8894:	f7ff ff24 	bl	86e0 <_Z5m_dupP4mbuf>
    8898:	1e04      	subs	r4, r0, #0
        assert(r);
    889a:	d106      	bne.n	88aa <_Z10hdlcs_readv+0x22>
    889c:	2197      	movs	r1, #151	; 0x97
    889e:	4b0b      	ldr	r3, [pc, #44]	; (88cc <_Z10hdlcs_readv+0x44>)
    88a0:	4a0b      	ldr	r2, [pc, #44]	; (88d0 <_Z10hdlcs_readv+0x48>)
    88a2:	0049      	lsls	r1, r1, #1
    88a4:	480b      	ldr	r0, [pc, #44]	; (88d4 <_Z10hdlcs_readv+0x4c>)
    88a6:	f003 fae3 	bl	be70 <__assert_func>
        hss.recv->len = 0;
    88aa:	2100      	movs	r1, #0
    88ac:	69a8      	ldr	r0, [r5, #24]
    88ae:	8001      	strh	r1, [r0, #0]
        hss.r_complete = 0;
    88b0:	61e9      	str	r1, [r5, #28]
        memset(hss.recv->data, 0, hss.recv->size);
    88b2:	8842      	ldrh	r2, [r0, #2]
    88b4:	3004      	adds	r0, #4
    88b6:	f003 fc6d 	bl	c194 <memset>
		dlog( LOG_DEBUG, "hdlcs_read() - %x", r );
    88ba:	0022      	movs	r2, r4
    88bc:	4906      	ldr	r1, [pc, #24]	; (88d8 <_Z10hdlcs_readv+0x50>)
    88be:	2007      	movs	r0, #7
    88c0:	f7fc f90c 	bl	4adc <_Z4dlogiPKcz>
} // hdlcs_read()
    88c4:	0020      	movs	r0, r4
    88c6:	bd70      	pop	{r4, r5, r6, pc}
    88c8:	20001d24 	.word	0x20001d24
    88cc:	00010bd4 	.word	0x00010bd4
    88d0:	00011500 	.word	0x00011500
    88d4:	0001133c 	.word	0x0001133c
    88d8:	00011368 	.word	0x00011368

000088dc <_Z11hdlcs_writePKvt>:
{
    88dc:	b570      	push	{r4, r5, r6, lr}
    (void)hdlc_hdr(0, hdlc_control_i(hss.vr, hss.vs, 1),
    88de:	4c0d      	ldr	r4, [pc, #52]	; (8914 <_Z11hdlcs_writePKvt+0x38>)
{
    88e0:	b086      	sub	sp, #24
    88e2:	0005      	movs	r5, r0
    88e4:	000e      	movs	r6, r1
    (void)hdlc_hdr(0, hdlc_control_i(hss.vr, hss.vs, 1),
    88e6:	7c20      	ldrb	r0, [r4, #16]
    88e8:	7be1      	ldrb	r1, [r4, #15]
    88ea:	2201      	movs	r2, #1
    88ec:	f000 fa56 	bl	8d9c <_Z14hdlc_control_ihhh>
    88f0:	7ba3      	ldrb	r3, [r4, #14]
    88f2:	7b62      	ldrb	r2, [r4, #13]
                          hss.esrc, hss.edst, hdr, &hdrlen);
    88f4:	b201      	sxth	r1, r0
    88f6:	ac04      	add	r4, sp, #16
    88f8:	a803      	add	r0, sp, #12
    88fa:	9001      	str	r0, [sp, #4]
    88fc:	9400      	str	r4, [sp, #0]
    88fe:	2000      	movs	r0, #0
    8900:	f000 fae8 	bl	8ed4 <_Z8hdlc_hdrismmPhPi>
    rc = hdlc_send_frame(hdr, (const uint8_t *)data, len);
    8904:	0032      	movs	r2, r6
    8906:	0029      	movs	r1, r5
    8908:	0020      	movs	r0, r4
    890a:	f000 fbd1 	bl	90b0 <_Z15hdlc_send_framePKhS0_i>
}
    890e:	b006      	add	sp, #24
    8910:	bd70      	pop	{r4, r5, r6, pc}
    8912:	46c0      	nop			; (mov r8, r8)
    8914:	20001d24 	.word	0x20001d24

00008918 <_Z8hdlcs_rrv>:



int 
hdlcs_rr(void)
{
    8918:	b530      	push	{r4, r5, lr}
    uint8_t hdr[HDLC_HDR_SIZE];
    int hdrlen;

    if (!pending_rsp) {
    891a:	4d15      	ldr	r5, [pc, #84]	; (8970 <_Z8hdlcs_rrv+0x58>)
{
    891c:	b087      	sub	sp, #28
    if (!pending_rsp) {
    891e:	682c      	ldr	r4, [r5, #0]
    8920:	2c00      	cmp	r4, #0
    8922:	d11a      	bne.n	895a <_Z8hdlcs_rrv+0x42>
        dlog(LOG_DEBUG, "respond to RR with RR");
    8924:	4913      	ldr	r1, [pc, #76]	; (8974 <_Z8hdlcs_rrv+0x5c>)
    8926:	2007      	movs	r0, #7
    8928:	f7fc f8d8 	bl	4adc <_Z4dlogiPKcz>
        hdlc_hdr(0, hdlc_control_rr(hss.vr, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    892c:	4d12      	ldr	r5, [pc, #72]	; (8978 <_Z8hdlcs_rrv+0x60>)
    892e:	2101      	movs	r1, #1
    8930:	7c28      	ldrb	r0, [r5, #16]
    8932:	f000 fa3e 	bl	8db2 <_Z15hdlc_control_rrhh>
    8936:	7b6a      	ldrb	r2, [r5, #13]
    8938:	7bab      	ldrb	r3, [r5, #14]
    893a:	b201      	sxth	r1, r0
    893c:	ad04      	add	r5, sp, #16
    893e:	a803      	add	r0, sp, #12
    8940:	9001      	str	r0, [sp, #4]
    8942:	9500      	str	r5, [sp, #0]
    8944:	0020      	movs	r0, r4
    8946:	f000 fac5 	bl	8ed4 <_Z8hdlc_hdrismmPhPi>
        hdlc_send_frame(hdr, NULL, 0);
    894a:	0022      	movs	r2, r4
    894c:	0021      	movs	r1, r4
    894e:	0028      	movs	r0, r5
    8950:	f000 fbae 	bl	90b0 <_Z15hdlc_send_framePKhS0_i>
        /* CoAP will also send app confirm */
        /* if not (and there is no data), proxy should send RR to confirm */
    }

    return 0;
}
    8954:	2000      	movs	r0, #0
    8956:	b007      	add	sp, #28
    8958:	bd30      	pop	{r4, r5, pc}
        dlog(LOG_DEBUG, "Resending frame");
    895a:	4908      	ldr	r1, [pc, #32]	; (897c <_Z8hdlcs_rrv+0x64>)
    895c:	2007      	movs	r0, #7
    895e:	f7fc f8bd 	bl	4adc <_Z4dlogiPKcz>
        hdlcs_write(pending_rsp->m_data, pending_rsp->m_pktlen);
    8962:	6828      	ldr	r0, [r5, #0]
    8964:	8801      	ldrh	r1, [r0, #0]
    8966:	3004      	adds	r0, #4
    8968:	f7ff ffb8 	bl	88dc <_Z11hdlcs_writePKvt>
    896c:	e7f2      	b.n	8954 <_Z8hdlcs_rrv+0x3c>
    896e:	46c0      	nop			; (mov r8, r8)
    8970:	20001cb8 	.word	0x20001cb8
    8974:	0001137a 	.word	0x0001137a
    8978:	20001d24 	.word	0x20001d24
    897c:	00011390 	.word	0x00011390

00008980 <_Z9hdlcs_runv>:
{
    8980:	b5f0      	push	{r4, r5, r6, r7, lr}
    rc = hdlc_rx( hdr, hss.recv->data, hss.recv->size, uart_timeout_ms );  
    8982:	4c72      	ldr	r4, [pc, #456]	; (8b4c <_Z9hdlcs_runv+0x1cc>)
    8984:	4b72      	ldr	r3, [pc, #456]	; (8b50 <_Z9hdlcs_runv+0x1d0>)
    8986:	69a1      	ldr	r1, [r4, #24]
{
    8988:	b093      	sub	sp, #76	; 0x4c
    rc = hdlc_rx( hdr, hss.recv->data, hss.recv->size, uart_timeout_ms );  
    898a:	884a      	ldrh	r2, [r1, #2]
    898c:	681b      	ldr	r3, [r3, #0]
    898e:	3104      	adds	r1, #4
    8990:	a807      	add	r0, sp, #28
    8992:	f000 fbf7 	bl	9184 <_Z7hdlc_rxPhS_ii>
	if ( rc <= 0 )
    8996:	2800      	cmp	r0, #0
    8998:	dc04      	bgt.n	89a4 <_Z9hdlcs_runv+0x24>
        return 0;
    899a:	2300      	movs	r3, #0
        return 1;
    899c:	9303      	str	r3, [sp, #12]
} // hdlcs_run()
    899e:	9803      	ldr	r0, [sp, #12]
    89a0:	b013      	add	sp, #76	; 0x4c
    89a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rc = hdlc_parse_hdr( &hh, hdr, HDLC_HDR_SIZE );
    89a4:	ae0b      	add	r6, sp, #44	; 0x2c
    89a6:	2207      	movs	r2, #7
    89a8:	a907      	add	r1, sp, #28
    89aa:	0030      	movs	r0, r6
    89ac:	f000 fb04 	bl	8fb8 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi>
	if (rc) 
    89b0:	2800      	cmp	r0, #0
    89b2:	d1f2      	bne.n	899a <_Z9hdlcs_runv+0x1a>
	rc = hdlc_parse_control( hh.control, &hc );
    89b4:	ad05      	add	r5, sp, #20
    89b6:	7c30      	ldrb	r0, [r6, #16]
    89b8:	0029      	movs	r1, r5
    89ba:	f000 fa21 	bl	8e00 <_Z18hdlc_parse_controlhP9hdlc_ctrl>
    89be:	9003      	str	r0, [sp, #12]
    if (rc) 
    89c0:	2800      	cmp	r0, #0
    89c2:	d1ea      	bne.n	899a <_Z9hdlcs_runv+0x1a>
    hss.recv->len = hh.infolen;
    89c4:	8932      	ldrh	r2, [r6, #8]
    89c6:	69a3      	ldr	r3, [r4, #24]
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    89c8:	4962      	ldr	r1, [pc, #392]	; (8b54 <_Z9hdlcs_runv+0x1d4>)
    hss.recv->len = hh.infolen;
    89ca:	801a      	strh	r2, [r3, #0]
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    89cc:	7c32      	ldrb	r2, [r6, #16]
    if (hc.nr == INCM8(hss.vs)) 
    89ce:	2607      	movs	r6, #7
    dlog(LOG_DEBUG, "Process incoming ctrl %02x in state %d", hh.control, hss.state);
    89d0:	7b23      	ldrb	r3, [r4, #12]
    89d2:	2007      	movs	r0, #7
    89d4:	f7fc f882 	bl	4adc <_Z4dlogiPKcz>
    if (hc.nr == INCM8(hss.vs)) 
    89d8:	7be3      	ldrb	r3, [r4, #15]
    89da:	78aa      	ldrb	r2, [r5, #2]
    89dc:	3301      	adds	r3, #1
    89de:	4033      	ands	r3, r6
    89e0:	429a      	cmp	r2, r3
    89e2:	d107      	bne.n	89f4 <_Z9hdlcs_runv+0x74>
        dlog(LOG_DEBUG, "response rxed at primary");
    89e4:	0030      	movs	r0, r6
    89e6:	495c      	ldr	r1, [pc, #368]	; (8b58 <_Z9hdlcs_runv+0x1d8>)
    89e8:	f7fc f878 	bl	4adc <_Z4dlogiPKcz>
        hss.vs = INCM8(hss.vs);
    89ec:	7be0      	ldrb	r0, [r4, #15]
    89ee:	3001      	adds	r0, #1
    89f0:	4030      	ands	r0, r6
    89f2:	73e0      	strb	r0, [r4, #15]
    switch (hss.state) 
    89f4:	7b26      	ldrb	r6, [r4, #12]
    89f6:	2e01      	cmp	r6, #1
    89f8:	d008      	beq.n	8a0c <_Z9hdlcs_runv+0x8c>
    89fa:	2e02      	cmp	r6, #2
    89fc:	d029      	beq.n	8a52 <_Z9hdlcs_runv+0xd2>
		dlog( LOG_DEBUG, "Error - unknown state: %d", hss.state );
    89fe:	0032      	movs	r2, r6
    8a00:	4956      	ldr	r1, [pc, #344]	; (8b5c <_Z9hdlcs_runv+0x1dc>)
    8a02:	2007      	movs	r0, #7
    8a04:	f7fc f86a 	bl	4adc <_Z4dlogiPKcz>
        return 1;
    8a08:	2301      	movs	r3, #1
    8a0a:	e7c7      	b.n	899c <_Z9hdlcs_runv+0x1c>
        if (hc.type == HDLC_SNRM) {
    8a0c:	782b      	ldrb	r3, [r5, #0]
    8a0e:	2b04      	cmp	r3, #4
    8a10:	d107      	bne.n	8a22 <_Z9hdlcs_runv+0xa2>
            rc = hdlcs_snrm();
    8a12:	f7ff feb7 	bl	8784 <_ZL10hdlcs_snrmv>
    dlog( LOG_DEBUG, "hdlcs_run() - %d", rc );
    8a16:	0002      	movs	r2, r0
    8a18:	4951      	ldr	r1, [pc, #324]	; (8b60 <_Z9hdlcs_runv+0x1e0>)
    8a1a:	2007      	movs	r0, #7
    8a1c:	f7fc f85e 	bl	4adc <_Z4dlogiPKcz>
    return 0;
    8a20:	e7bd      	b.n	899e <_Z9hdlcs_runv+0x1e>
{    
    uint8_t hdr[HDLC_HDR_SIZE];
    int hdrlen;

    /* Disconnected Mode response */
    dlog(LOG_WARNING, "request recv'd in disconnected mode");
    8a22:	4950      	ldr	r1, [pc, #320]	; (8b64 <_Z9hdlcs_runv+0x1e4>)
    8a24:	2004      	movs	r0, #4
    8a26:	f7fc f859 	bl	4adc <_Z4dlogiPKcz>
    
    hdlc_hdr(0, hdlc_control(HDLC_DM, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    8a2a:	0031      	movs	r1, r6
    8a2c:	2007      	movs	r0, #7
    8a2e:	f000 f9c9 	bl	8dc4 <_Z12hdlc_controlhh>
    8a32:	7b62      	ldrb	r2, [r4, #13]
    8a34:	7ba3      	ldrb	r3, [r4, #14]
    8a36:	0001      	movs	r1, r0
    8a38:	ac09      	add	r4, sp, #36	; 0x24
    8a3a:	a806      	add	r0, sp, #24
    8a3c:	9001      	str	r0, [sp, #4]
    8a3e:	9400      	str	r4, [sp, #0]
    8a40:	2000      	movs	r0, #0
    8a42:	f000 fa47 	bl	8ed4 <_Z8hdlc_hdrismmPhPi>
    hdlc_send_frame(hdr, NULL, 0);
    8a46:	2200      	movs	r2, #0
    8a48:	0020      	movs	r0, r4
    8a4a:	0011      	movs	r1, r2
    
    /* Frame Reject response */
    dlog(LOG_WARNING, "error - frame rejected");

    hdlc_hdr(0, hdlc_control(HDLC_FRMR, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    hdlc_send_frame(hdr, NULL, 0);
    8a4c:	f000 fb30 	bl	90b0 <_Z15hdlc_send_framePKhS0_i>
    8a50:	e023      	b.n	8a9a <_Z9hdlcs_runv+0x11a>
        if (hc.type == HDLC_SNRM) {
    8a52:	782b      	ldrb	r3, [r5, #0]
    8a54:	2b04      	cmp	r3, #4
    8a56:	d104      	bne.n	8a62 <_Z9hdlcs_runv+0xe2>
            dlog( LOG_DEBUG, "HDLC_SNRM" );
    8a58:	4943      	ldr	r1, [pc, #268]	; (8b68 <_Z9hdlcs_runv+0x1e8>)
    8a5a:	2007      	movs	r0, #7
    8a5c:	f7fc f83e 	bl	4adc <_Z4dlogiPKcz>
    8a60:	e7d7      	b.n	8a12 <_Z9hdlcs_runv+0x92>
        else if (hc.type == HDLC_I) {
    8a62:	2b01      	cmp	r3, #1
    8a64:	d124      	bne.n	8ab0 <_Z9hdlcs_runv+0x130>
            dlog( LOG_DEBUG, "HDLC_I" );
    8a66:	4941      	ldr	r1, [pc, #260]	; (8b6c <_Z9hdlcs_runv+0x1ec>)
    8a68:	2007      	movs	r0, #7
    8a6a:	f7fc f837 	bl	4adc <_Z4dlogiPKcz>
            if (hc.ns != hss.vr) {
    8a6e:	78ea      	ldrb	r2, [r5, #3]
    8a70:	7c23      	ldrb	r3, [r4, #16]
    8a72:	429a      	cmp	r2, r3
    8a74:	d013      	beq.n	8a9e <_Z9hdlcs_runv+0x11e>
                            hc.ns, hss.vr);
    8a76:	493e      	ldr	r1, [pc, #248]	; (8b70 <_Z9hdlcs_runv+0x1f0>)
    8a78:	2003      	movs	r0, #3
    8a7a:	f7fc f82f 	bl	4adc <_Z4dlogiPKcz>
            rc = hdlcs_i(hss.recv);
    8a7e:	69a5      	ldr	r5, [r4, #24]
    ddump(LOG_DEBUG, "Recv I frame", d->data, d->len);
    8a80:	2007      	movs	r0, #7
    8a82:	882b      	ldrh	r3, [r5, #0]
    8a84:	1d2a      	adds	r2, r5, #4
    8a86:	493b      	ldr	r1, [pc, #236]	; (8b74 <_Z9hdlcs_runv+0x1f4>)
    8a88:	f7fc f84a 	bl	4b20 <_Z5ddumpiPKcPKvi>
    if (hss.icb) {
    8a8c:	6960      	ldr	r0, [r4, #20]
    8a8e:	2800      	cmp	r0, #0
    8a90:	d00a      	beq.n	8aa8 <_Z9hdlcs_runv+0x128>
        dlog(LOG_ERR, "data CB not supported");
    8a92:	4939      	ldr	r1, [pc, #228]	; (8b78 <_Z9hdlcs_runv+0x1f8>)
    8a94:	2003      	movs	r0, #3
    8a96:	f7fc f821 	bl	4adc <_Z4dlogiPKcz>
            rc = hdlcs_frmr();
    8a9a:	2000      	movs	r0, #0
    8a9c:	e7bb      	b.n	8a16 <_Z9hdlcs_runv+0x96>
                hss.vr = INCM8(hss.vr);
    8a9e:	2307      	movs	r3, #7
    8aa0:	3201      	adds	r2, #1
    8aa2:	401a      	ands	r2, r3
    8aa4:	7422      	strb	r2, [r4, #16]
    8aa6:	e7ea      	b.n	8a7e <_Z9hdlcs_runv+0xfe>
        hss.r_complete = 1;
    8aa8:	2301      	movs	r3, #1
        hss.recv = d;
    8aaa:	61a5      	str	r5, [r4, #24]
        hss.r_complete = 1;
    8aac:	61e3      	str	r3, [r4, #28]
    8aae:	e7b2      	b.n	8a16 <_Z9hdlcs_runv+0x96>
        else if (hc.type == HDLC_RR) {
    8ab0:	2b02      	cmp	r3, #2
    8ab2:	d10c      	bne.n	8ace <_Z9hdlcs_runv+0x14e>
            dlog( LOG_DEBUG, "HDLC_RR" );
    8ab4:	4931      	ldr	r1, [pc, #196]	; (8b7c <_Z9hdlcs_runv+0x1fc>)
    8ab6:	2007      	movs	r0, #7
    8ab8:	f7fc f810 	bl	4adc <_Z4dlogiPKcz>
            dlog(LOG_DEBUG, "hc.nr: %d, hss.vs: %d", hc.nr, hss.vs);
    8abc:	7be3      	ldrb	r3, [r4, #15]
    8abe:	78aa      	ldrb	r2, [r5, #2]
    8ac0:	492f      	ldr	r1, [pc, #188]	; (8b80 <_Z9hdlcs_runv+0x200>)
    8ac2:	2007      	movs	r0, #7
    8ac4:	f7fc f80a 	bl	4adc <_Z4dlogiPKcz>
            rc = hdlcs_rr();
    8ac8:	f7ff ff26 	bl	8918 <_Z8hdlcs_rrv>
    8acc:	e7a3      	b.n	8a16 <_Z9hdlcs_runv+0x96>
    8ace:	ad09      	add	r5, sp, #36	; 0x24
        else if (hc.type == HDLC_DISC) {
    8ad0:	2b05      	cmp	r3, #5
    8ad2:	d127      	bne.n	8b24 <_Z9hdlcs_runv+0x1a4>
            pending_rsp = NULL;
    8ad4:	2600      	movs	r6, #0
            dlog( LOG_DEBUG, "HDLC_DISC" );
    8ad6:	492b      	ldr	r1, [pc, #172]	; (8b84 <_Z9hdlcs_runv+0x204>)
    8ad8:	2007      	movs	r0, #7
    8ada:	f7fb ffff 	bl	4adc <_Z4dlogiPKcz>
            m_free(pending_rsp);
    8ade:	4f2a      	ldr	r7, [pc, #168]	; (8b88 <_Z9hdlcs_runv+0x208>)
    8ae0:	6838      	ldr	r0, [r7, #0]
    8ae2:	f7ff fdf3 	bl	86cc <_Z6m_freeP4mbuf>
            dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    8ae6:	2302      	movs	r3, #2
            pending_rsp = NULL;
    8ae8:	603e      	str	r6, [r7, #0]
    hss.state = HSS_DISC;
    8aea:	2701      	movs	r7, #1
            dlog(LOG_DEBUG, "%s:%d Cleared pending_rsp", __FUNCTION__, __LINE__);
    8aec:	33ff      	adds	r3, #255	; 0xff
    8aee:	4a27      	ldr	r2, [pc, #156]	; (8b8c <_Z9hdlcs_runv+0x20c>)
    8af0:	4927      	ldr	r1, [pc, #156]	; (8b90 <_Z9hdlcs_runv+0x210>)
    8af2:	2007      	movs	r0, #7
    8af4:	f7fb fff2 	bl	4adc <_Z4dlogiPKcz>
    dlog(LOG_DEBUG, "disconnecting");
    8af8:	4926      	ldr	r1, [pc, #152]	; (8b94 <_Z9hdlcs_runv+0x214>)
    8afa:	2007      	movs	r0, #7
    hss.state = HSS_DISC;
    8afc:	7327      	strb	r7, [r4, #12]
    dlog(LOG_DEBUG, "disconnecting");
    8afe:	f7fb ffed 	bl	4adc <_Z4dlogiPKcz>
    hdlc_hdr(0, hdlc_control(HDLC_UA, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    8b02:	0039      	movs	r1, r7
    8b04:	2006      	movs	r0, #6
    8b06:	f000 f95d 	bl	8dc4 <_Z12hdlc_controlhh>
    8b0a:	0001      	movs	r1, r0
    8b0c:	a806      	add	r0, sp, #24
    8b0e:	7b62      	ldrb	r2, [r4, #13]
    8b10:	7ba3      	ldrb	r3, [r4, #14]
    8b12:	9001      	str	r0, [sp, #4]
    8b14:	9500      	str	r5, [sp, #0]
    8b16:	0030      	movs	r0, r6
    8b18:	f000 f9dc 	bl	8ed4 <_Z8hdlc_hdrismmPhPi>
    rc = hdlc_send_frame(hdr, NULL, 0);
    8b1c:	0032      	movs	r2, r6
    8b1e:	0031      	movs	r1, r6
    hdlc_send_frame(hdr, NULL, 0);
    8b20:	0028      	movs	r0, r5
    8b22:	e793      	b.n	8a4c <_Z9hdlcs_runv+0xcc>
    dlog(LOG_WARNING, "error - frame rejected");
    8b24:	491c      	ldr	r1, [pc, #112]	; (8b98 <_Z9hdlcs_runv+0x218>)
    8b26:	2004      	movs	r0, #4
    8b28:	f7fb ffd8 	bl	4adc <_Z4dlogiPKcz>
    hdlc_hdr(0, hdlc_control(HDLC_FRMR, 1), hss.esrc, hss.edst, hdr, &hdrlen);
    8b2c:	2101      	movs	r1, #1
    8b2e:	2008      	movs	r0, #8
    8b30:	f000 f948 	bl	8dc4 <_Z12hdlc_controlhh>
    8b34:	0001      	movs	r1, r0
    8b36:	a806      	add	r0, sp, #24
    8b38:	7b62      	ldrb	r2, [r4, #13]
    8b3a:	7ba3      	ldrb	r3, [r4, #14]
    8b3c:	9001      	str	r0, [sp, #4]
    8b3e:	9500      	str	r5, [sp, #0]
    8b40:	2000      	movs	r0, #0
    8b42:	f000 f9c7 	bl	8ed4 <_Z8hdlc_hdrismmPhPi>
    hdlc_send_frame(hdr, NULL, 0);
    8b46:	2200      	movs	r2, #0
    8b48:	0011      	movs	r1, r2
    8b4a:	e7e9      	b.n	8b20 <_Z9hdlcs_runv+0x1a0>
    8b4c:	20001d24 	.word	0x20001d24
    8b50:	20001d20 	.word	0x20001d20
    8b54:	000113a0 	.word	0x000113a0
    8b58:	000113c7 	.word	0x000113c7
    8b5c:	000114ac 	.word	0x000114ac
    8b60:	000114c6 	.word	0x000114c6
    8b64:	000113e0 	.word	0x000113e0
    8b68:	00011404 	.word	0x00011404
    8b6c:	0001140e 	.word	0x0001140e
    8b70:	00011415 	.word	0x00011415
    8b74:	0001143c 	.word	0x0001143c
    8b78:	00011449 	.word	0x00011449
    8b7c:	0001145f 	.word	0x0001145f
    8b80:	00011467 	.word	0x00011467
    8b84:	0001147d 	.word	0x0001147d
    8b88:	20001cb8 	.word	0x20001cb8
    8b8c:	00011513 	.word	0x00011513
    8b90:	00010f37 	.word	0x00010f37
    8b94:	00011487 	.word	0x00011487
    8b98:	00011495 	.word	0x00011495

00008b9c <ultoa>:
        {
            return ultoa(value, string, radix);
        }

        extern char* ultoa(unsigned long value, char*string, int radix)
        {
    8b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b9e:	b08d      	sub	sp, #52	; 0x34
    8ba0:	0007      	movs	r7, r0
    8ba2:	1e0e      	subs	r6, r1, #0
    8ba4:	9201      	str	r2, [sp, #4]
            char* tp = tmp;
            long i;
            unsigned long v = value;
            char* sp;

            if (string == NULL)
    8ba6:	d021      	beq.n	8bec <ultoa+0x50>
            {
                return 0;
            }

            if (radix > 36 || radix <= 1)
    8ba8:	0013      	movs	r3, r2
    8baa:	3b02      	subs	r3, #2
    8bac:	ad03      	add	r5, sp, #12
    8bae:	2b22      	cmp	r3, #34	; 0x22
    8bb0:	d910      	bls.n	8bd4 <ultoa+0x38>
                return 0;
    8bb2:	2600      	movs	r6, #0
    8bb4:	e01a      	b.n	8bec <ultoa+0x50>
                return 0;
            }

            while (v || tp == tmp)
            {
                i = v % radix;
    8bb6:	0038      	movs	r0, r7
    8bb8:	9901      	ldr	r1, [sp, #4]
    8bba:	f000 fd27 	bl	960c <__aeabi_uidivmod>
                v = v / radix;
    8bbe:	0038      	movs	r0, r7
                i = v % radix;
    8bc0:	000c      	movs	r4, r1
                v = v / radix;
    8bc2:	9901      	ldr	r1, [sp, #4]
    8bc4:	f000 fc9c 	bl	9500 <__udivsi3>
    8bc8:	0007      	movs	r7, r0
                if (i < 10)
    8bca:	2c09      	cmp	r4, #9
    8bcc:	d811      	bhi.n	8bf2 <ultoa+0x56>
                    *tp++ = i + '0';
    8bce:	3430      	adds	r4, #48	; 0x30
                else
                    *tp++ = i + 'a' - 10;
    8bd0:	702c      	strb	r4, [r5, #0]
    8bd2:	3501      	adds	r5, #1
    8bd4:	002b      	movs	r3, r5
            while (v || tp == tmp)
    8bd6:	2f00      	cmp	r7, #0
    8bd8:	d1ed      	bne.n	8bb6 <ultoa+0x1a>
    8bda:	aa03      	add	r2, sp, #12
    8bdc:	42aa      	cmp	r2, r5
    8bde:	d0ea      	beq.n	8bb6 <ultoa+0x1a>
    8be0:	0032      	movs	r2, r6
            }

            sp = string;


            while (tp > tmp)
    8be2:	a903      	add	r1, sp, #12
    8be4:	428b      	cmp	r3, r1
    8be6:	d806      	bhi.n	8bf6 <ultoa+0x5a>
                *sp++ = *--tp;
            *sp = 0;
    8be8:	2300      	movs	r3, #0
    8bea:	7013      	strb	r3, [r2, #0]

            return string;
        }
    8bec:	0030      	movs	r0, r6
    8bee:	b00d      	add	sp, #52	; 0x34
    8bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    *tp++ = i + 'a' - 10;
    8bf2:	3457      	adds	r4, #87	; 0x57
    8bf4:	e7ec      	b.n	8bd0 <ultoa+0x34>
                *sp++ = *--tp;
    8bf6:	3b01      	subs	r3, #1
    8bf8:	7819      	ldrb	r1, [r3, #0]
    8bfa:	7011      	strb	r1, [r2, #0]
    8bfc:	3201      	adds	r2, #1
    8bfe:	e7f0      	b.n	8be2 <ultoa+0x46>

00008c00 <utoa>:
        {
    8c00:	b510      	push	{r4, lr}
            return ultoa(value, string, radix);
    8c02:	f7ff ffcb 	bl	8b9c <ultoa>
        }
    8c06:	bd10      	pop	{r4, pc}

00008c08 <_ZN11DiagnosticsD1Ev>:
 class Diagnostics {
 public:
   //------------------------------------ Constructor ------------------------------------//

  Diagnostics(void){};
  ~Diagnostics(void){};
    8c08:	4770      	bx	lr
	...

00008c0c <_ZN11Diagnostics17_printSupportLinkEv>:
    Serial.print(F("0"));
  }
  Serial.println(errorcode, HEX);
}

void Diagnostics::_printSupportLink(void) {
    8c0c:	b510      	push	{r4, lr}
  Serial.print(F("If this does not help resolve/clarify this issue, "));
    8c0e:	4c05      	ldr	r4, [pc, #20]	; (8c24 <_ZN11Diagnostics17_printSupportLinkEv+0x18>)
    8c10:	4905      	ldr	r1, [pc, #20]	; (8c28 <_ZN11Diagnostics17_printSupportLinkEv+0x1c>)
    8c12:	0020      	movs	r0, r4
    8c14:	f7f9 fe9e 	bl	2954 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(F("please raise an issue at http://www.github.com/Marzogh/SPIMemory/issues with the details of what your were doing when this error occurred"));
    8c18:	4904      	ldr	r1, [pc, #16]	; (8c2c <_ZN11Diagnostics17_printSupportLinkEv+0x20>)
    8c1a:	0020      	movs	r0, r4
    8c1c:	f7f9 feb6 	bl	298c <_ZN5Print7printlnEPK19__FlashStringHelper>
}
    8c20:	bd10      	pop	{r4, pc}
    8c22:	46c0      	nop			; (mov r8, r8)
    8c24:	2000055c 	.word	0x2000055c
    8c28:	00011a72 	.word	0x00011a72
    8c2c:	00011aa5 	.word	0x00011aa5

00008c30 <_ZN11Diagnostics12troubleshootEhb>:
//Troubleshooting function. Called when #ifdef RUNDIAGNOSTIC is uncommented at the top of SPIMemory.h.
void Diagnostics::troubleshoot(uint8_t _code, bool printoverride) {
    8c30:	b570      	push	{r4, r5, r6, lr}
    8c32:	0006      	movs	r6, r0
    8c34:	000d      	movs	r5, r1
  bool _printoverride;
  errorcode = _code;
    8c36:	7031      	strb	r1, [r6, #0]
  _printErrorCode();
#endif
#if !defined (RUNDIAGNOSTIC)
  _printoverride = printoverride;
#endif
  if (_printoverride) {
    8c38:	2a00      	cmp	r2, #0
    8c3a:	d014      	beq.n	8c66 <_ZN11Diagnostics12troubleshootEhb+0x36>
    8c3c:	4c2e      	ldr	r4, [pc, #184]	; (8cf8 <_ZN11Diagnostics12troubleshootEhb+0xc8>)
  #if defined (ARDUINO_ARCH_AVR)
    _printErrorCode();
  #else
    switch (_code) {
    8c3e:	2914      	cmp	r1, #20
    8c40:	d84c      	bhi.n	8cdc <_ZN11Diagnostics12troubleshootEhb+0xac>
    8c42:	0008      	movs	r0, r1
    8c44:	f000 fc52 	bl	94ec <__gnu_thumb1_case_uqi>
    8c48:	1c1a180b 	.word	0x1c1a180b
    8c4c:	2c26241e 	.word	0x2c26241e
    8c50:	10383632 	.word	0x10383632
    8c54:	3e3c3a34 	.word	0x3e3c3a34
    8c58:	46444240 	.word	0x46444240
    8c5c:	48          	.byte	0x48
    8c5d:	00          	.byte	0x00
      case SUCCESS:
      Serial.println(F("Function executed successfully"));
    8c5e:	4927      	ldr	r1, [pc, #156]	; (8cfc <_ZN11Diagnostics12troubleshootEhb+0xcc>)
      case NORESPONSE:
      Serial.println(F("Check your wiring. Flash chip is non-responsive."));
      break;

      case CALLBEGIN:
      Serial.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
    8c60:	0020      	movs	r0, r4
    8c62:	f7f9 fe93 	bl	298c <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
      _printSupportLink();
    }
  #endif
  }
}
    8c66:	bd70      	pop	{r4, r5, r6, pc}
      Serial.println(F("Check your wiring. Flash chip is non-responsive."));
    8c68:	4925      	ldr	r1, [pc, #148]	; (8d00 <_ZN11Diagnostics12troubleshootEhb+0xd0>)
      Serial.println(F("Unable to identify chip. Are you sure this chip is supported?"));
    8c6a:	0020      	movs	r0, r4
    8c6c:	f7f9 fe8e 	bl	298c <_ZN5Print7printlnEPK19__FlashStringHelper>
      _printSupportLink();
    8c70:	0030      	movs	r0, r6
    8c72:	f7ff ffcb 	bl	8c0c <_ZN11Diagnostics17_printSupportLinkEv>
}
    8c76:	e7f6      	b.n	8c66 <_ZN11Diagnostics12troubleshootEhb+0x36>
      Serial.println(F("*constructor_of_choice*.begin() was not called in void setup()"));
    8c78:	4922      	ldr	r1, [pc, #136]	; (8d04 <_ZN11Diagnostics12troubleshootEhb+0xd4>)
    8c7a:	e7f1      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to identify chip. Are you sure this chip is supported?"));
    8c7c:	4922      	ldr	r1, [pc, #136]	; (8d08 <_ZN11Diagnostics12troubleshootEhb+0xd8>)
    8c7e:	e7f4      	b.n	8c6a <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("Unable to identify capacity. Is this chip officially supported? If not, please define a `CAPACITY` constant and include it in flash.begin(CAPACITY)."));
    8c80:	4922      	ldr	r1, [pc, #136]	; (8d0c <_ZN11Diagnostics12troubleshootEhb+0xdc>)
    8c82:	e7ed      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Chip is busy."));
    8c84:	4922      	ldr	r1, [pc, #136]	; (8d10 <_ZN11Diagnostics12troubleshootEhb+0xe0>)
    8c86:	0020      	movs	r0, r4
    8c88:	f7f9 fe80 	bl	298c <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Make sure all pins have been connected properly"));
    8c8c:	4921      	ldr	r1, [pc, #132]	; (8d14 <_ZN11Diagnostics12troubleshootEhb+0xe4>)
    8c8e:	e7e7      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Page overflow has been disabled and the address called exceeds the memory"));
    8c90:	4921      	ldr	r1, [pc, #132]	; (8d18 <_ZN11Diagnostics12troubleshootEhb+0xe8>)
    8c92:	e7e5      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to Enable Writing to chip."));
    8c94:	4921      	ldr	r1, [pc, #132]	; (8d1c <_ZN11Diagnostics12troubleshootEhb+0xec>)
    8c96:	0020      	movs	r0, r4
    8c98:	f7f9 fe78 	bl	298c <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Please make sure the HOLD & WRITEPROTECT pins are pulled up to VCC"));
    8c9c:	4920      	ldr	r1, [pc, #128]	; (8d20 <_ZN11Diagnostics12troubleshootEhb+0xf0>)
    8c9e:	e7e4      	b.n	8c6a <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("This sector already contains data."));
    8ca0:	4920      	ldr	r1, [pc, #128]	; (8d24 <_ZN11Diagnostics12troubleshootEhb+0xf4>)
    8ca2:	0020      	movs	r0, r4
    8ca4:	f7f9 fe72 	bl	298c <_ZN5Print7printlnEPK19__FlashStringHelper>
      Serial.println(F("Please make sure the sectors being written to are erased."));
    8ca8:	491f      	ldr	r1, [pc, #124]	; (8d28 <_ZN11Diagnostics12troubleshootEhb+0xf8>)
    8caa:	e7d9      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("You are running low on SRAM. Please optimise your program for better RAM usage"));
    8cac:	491f      	ldr	r1, [pc, #124]	; (8d2c <_ZN11Diagnostics12troubleshootEhb+0xfc>)
    8cae:	e7d7      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("This function is not supported by the flash memory hardware."));
    8cb0:	491f      	ldr	r1, [pc, #124]	; (8d30 <_ZN11Diagnostics12troubleshootEhb+0x100>)
    8cb2:	e7d5      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to suspend/resume operation."));
    8cb4:	491f      	ldr	r1, [pc, #124]	; (8d34 <_ZN11Diagnostics12troubleshootEhb+0x104>)
    8cb6:	e7d3      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Write Function has failed errorcheck."));
    8cb8:	491f      	ldr	r1, [pc, #124]	; (8d38 <_ZN11Diagnostics12troubleshootEhb+0x108>)
    8cba:	e7d6      	b.n	8c6a <_ZN11Diagnostics12troubleshootEhb+0x3a>
      Serial.println(F("Unable to enable 4-byte addressing."));
    8cbc:	491f      	ldr	r1, [pc, #124]	; (8d3c <_ZN11Diagnostics12troubleshootEhb+0x10c>)
    8cbe:	e7cf      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to disable 4-byte addressing."));
    8cc0:	491f      	ldr	r1, [pc, #124]	; (8d40 <_ZN11Diagnostics12troubleshootEhb+0x110>)
    8cc2:	e7cd      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("The chip is currently powered down."));
    8cc4:	491f      	ldr	r1, [pc, #124]	; (8d44 <_ZN11Diagnostics12troubleshootEhb+0x114>)
    8cc6:	e7cb      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("The Flash chip does not support SFDP."));
    8cc8:	491f      	ldr	r1, [pc, #124]	; (8d48 <_ZN11Diagnostics12troubleshootEhb+0x118>)
    8cca:	e7c9      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read Erase Parameters from chip. Reverting to library defaults."));
    8ccc:	491f      	ldr	r1, [pc, #124]	; (8d4c <_ZN11Diagnostics12troubleshootEhb+0x11c>)
    8cce:	e7c7      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read erase times from flash memory. Reverting to library defaults."));
    8cd0:	491f      	ldr	r1, [pc, #124]	; (8d50 <_ZN11Diagnostics12troubleshootEhb+0x120>)
    8cd2:	e7c5      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unable to read program times from flash memory. Reverting to library defaults."));
    8cd4:	491f      	ldr	r1, [pc, #124]	; (8d54 <_ZN11Diagnostics12troubleshootEhb+0x124>)
    8cd6:	e7c3      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("No Chip Select pin defined in the custom SPI Array."));
    8cd8:	491f      	ldr	r1, [pc, #124]	; (8d58 <_ZN11Diagnostics12troubleshootEhb+0x128>)
    8cda:	e7c1      	b.n	8c60 <_ZN11Diagnostics12troubleshootEhb+0x30>
      Serial.println(F("Unknown error"));
    8cdc:	491f      	ldr	r1, [pc, #124]	; (8d5c <_ZN11Diagnostics12troubleshootEhb+0x12c>)
    8cde:	0020      	movs	r0, r4
    8ce0:	f7f9 fe54 	bl	298c <_ZN5Print7printlnEPK19__FlashStringHelper>
    if (_code == ERRORCHKFAIL || _code == CANTENWRITE || _code == UNKNOWNCHIP || _code == NORESPONSE) {
    8ce4:	002b      	movs	r3, r5
    8ce6:	3b0a      	subs	r3, #10
    8ce8:	2b01      	cmp	r3, #1
    8cea:	d9c1      	bls.n	8c70 <_ZN11Diagnostics12troubleshootEhb+0x40>
    8cec:	2304      	movs	r3, #4
    8cee:	439d      	bics	r5, r3
    8cf0:	2d02      	cmp	r5, #2
    8cf2:	d0bd      	beq.n	8c70 <_ZN11Diagnostics12troubleshootEhb+0x40>
    8cf4:	e7b7      	b.n	8c66 <_ZN11Diagnostics12troubleshootEhb+0x36>
    8cf6:	46c0      	nop			; (mov r8, r8)
    8cf8:	2000055c 	.word	0x2000055c
    8cfc:	00011535 	.word	0x00011535
    8d00:	00011554 	.word	0x00011554
    8d04:	00011585 	.word	0x00011585
    8d08:	000115c4 	.word	0x000115c4
    8d0c:	00011602 	.word	0x00011602
    8d10:	00011697 	.word	0x00011697
    8d14:	000116a5 	.word	0x000116a5
    8d18:	000116d5 	.word	0x000116d5
    8d1c:	0001171f 	.word	0x0001171f
    8d20:	00011741 	.word	0x00011741
    8d24:	00011784 	.word	0x00011784
    8d28:	000117a7 	.word	0x000117a7
    8d2c:	000117e1 	.word	0x000117e1
    8d30:	00011830 	.word	0x00011830
    8d34:	0001186d 	.word	0x0001186d
    8d38:	00011891 	.word	0x00011891
    8d3c:	000118b7 	.word	0x000118b7
    8d40:	000118db 	.word	0x000118db
    8d44:	00011900 	.word	0x00011900
    8d48:	00011924 	.word	0x00011924
    8d4c:	0001194a 	.word	0x0001194a
    8d50:	00011994 	.word	0x00011994
    8d54:	000119e1 	.word	0x000119e1
    8d58:	00011a30 	.word	0x00011a30
    8d5c:	00011a64 	.word	0x00011a64

00008d60 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv>:

Diagnostics diagnostics; // default instantiation of Diagnostics object
    8d60:	b510      	push	{r4, lr}
    8d62:	4a03      	ldr	r2, [pc, #12]	; (8d70 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x10>)
    8d64:	4903      	ldr	r1, [pc, #12]	; (8d74 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x14>)
    8d66:	4804      	ldr	r0, [pc, #16]	; (8d78 <_GLOBAL__sub_I__ZN11Diagnostics15_printErrorCodeEv+0x18>)
    8d68:	f000 fbb8 	bl	94dc <__aeabi_atexit>
    8d6c:	bd10      	pop	{r4, pc}
    8d6e:	46c0      	nop			; (mov r8, r8)
    8d70:	20000000 	.word	0x20000000
    8d74:	00008c09 	.word	0x00008c09
    8d78:	20001d44 	.word	0x20001d44

00008d7c <_Z9hdlc_initP14HardwareSerialm>:

// Pointer to Serial console and UART
static HardwareSerial * pU;
#define uart (*pU)
void hdlc_init( HardwareSerial * pUART, uint32_t max_info_len )
{
    8d7c:	b510      	push	{r4, lr}
    8d7e:	000c      	movs	r4, r1
	// Set pointer to UART object
	pU = pUART;

	// Set baud rate for the mShield UART
	// NOTE: This baud rate is fixed and cannot be changed
	uart.begin(UART_BAUD_RATE);
    8d80:	2196      	movs	r1, #150	; 0x96
	pU = pUART;
    8d82:	4b04      	ldr	r3, [pc, #16]	; (8d94 <_Z9hdlc_initP14HardwareSerialm+0x18>)
	uart.begin(UART_BAUD_RATE);
    8d84:	0209      	lsls	r1, r1, #8
	pU = pUART;
    8d86:	6018      	str	r0, [r3, #0]
	uart.begin(UART_BAUD_RATE);
    8d88:	6803      	ldr	r3, [r0, #0]
    8d8a:	69db      	ldr	r3, [r3, #28]
    8d8c:	4798      	blx	r3
	
	// Set the max payload size
	max_payload_size = max_info_len;
    8d8e:	4b02      	ldr	r3, [pc, #8]	; (8d98 <_Z9hdlc_initP14HardwareSerialm+0x1c>)
    8d90:	601c      	str	r4, [r3, #0]

} // hdlc_set_serial
    8d92:	bd10      	pop	{r4, pc}
    8d94:	20002150 	.word	0x20002150
    8d98:	2000214c 	.word	0x2000214c

00008d9c <_Z14hdlc_control_ihhh>:


uint8_t
hdlc_control_i(uint8_t nr, uint8_t ns, uint8_t pf)
{
    return ((nr & 0x07) << 5) | ((pf  & 0x01) << 4) | ((ns & 0x07) << 1);
    8d9c:	2310      	movs	r3, #16
    8d9e:	0112      	lsls	r2, r2, #4
    8da0:	401a      	ands	r2, r3
    8da2:	0140      	lsls	r0, r0, #5
    8da4:	4310      	orrs	r0, r2
    8da6:	220e      	movs	r2, #14
    8da8:	0049      	lsls	r1, r1, #1
    8daa:	4011      	ands	r1, r2
    8dac:	4308      	orrs	r0, r1
    8dae:	b2c0      	uxtb	r0, r0
}    
    8db0:	4770      	bx	lr

00008db2 <_Z15hdlc_control_rrhh>:

uint8_t
hdlc_control_rr(uint8_t nr, uint8_t pf)
{
   return ((nr & 0x07) << 5) | ((pf & 0x01) << 4) | 0x01;
    8db2:	2310      	movs	r3, #16
    8db4:	0109      	lsls	r1, r1, #4
    8db6:	4019      	ands	r1, r3
    8db8:	0140      	lsls	r0, r0, #5
    8dba:	4308      	orrs	r0, r1
    8dbc:	2101      	movs	r1, #1
    8dbe:	4308      	orrs	r0, r1
    8dc0:	b2c0      	uxtb	r0, r0
}
    8dc2:	4770      	bx	lr

00008dc4 <_Z12hdlc_controlhh>:
int16_t
hdlc_control(uint8_t type, uint8_t pf)
{
    uint8_t control;
    
    switch (type) {        
    8dc4:	3804      	subs	r0, #4
{
    8dc6:	b500      	push	{lr}
    switch (type) {        
    8dc8:	2805      	cmp	r0, #5
    8dca:	d815      	bhi.n	8df8 <_Z12hdlc_controlhh+0x34>
    8dcc:	f000 fb8e 	bl	94ec <__gnu_thumb1_case_uqi>
    8dd0:	0c0a0312 	.word	0x0c0a0312
    8dd4:	100e      	.short	0x100e
        case HDLC_SNRM: control = 0x83; break;
        case HDLC_DISC: control = 0x43; break;
    8dd6:	2043      	movs	r0, #67	; 0x43
        case HDLC_UI:   control = 0x03; break;
        default:
            return HDLC_FC_INVALID;
    }

    if (pf) {
    8dd8:	2900      	cmp	r1, #0
    8dda:	d001      	beq.n	8de0 <_Z12hdlc_controlhh+0x1c>
        control |= 0x10;
    8ddc:	2310      	movs	r3, #16
    8dde:	4318      	orrs	r0, r3
    }
    return control;
    8de0:	b200      	sxth	r0, r0
}
    8de2:	bd00      	pop	{pc}
        case HDLC_UA:   control = 0x63; break;
    8de4:	2063      	movs	r0, #99	; 0x63
    8de6:	e7f7      	b.n	8dd8 <_Z12hdlc_controlhh+0x14>
        case HDLC_DM:   control = 0x0F; break;
    8de8:	200f      	movs	r0, #15
    8dea:	e7f5      	b.n	8dd8 <_Z12hdlc_controlhh+0x14>
        case HDLC_FRMR: control = 0x87; break;
    8dec:	2087      	movs	r0, #135	; 0x87
    8dee:	e7f3      	b.n	8dd8 <_Z12hdlc_controlhh+0x14>
        case HDLC_UI:   control = 0x03; break;
    8df0:	2003      	movs	r0, #3
    8df2:	e7f1      	b.n	8dd8 <_Z12hdlc_controlhh+0x14>
        case HDLC_SNRM: control = 0x83; break;
    8df4:	2083      	movs	r0, #131	; 0x83
    8df6:	e7ef      	b.n	8dd8 <_Z12hdlc_controlhh+0x14>
            return HDLC_FC_INVALID;
    8df8:	2001      	movs	r0, #1
    8dfa:	4240      	negs	r0, r0
    8dfc:	e7f1      	b.n	8de2 <_Z12hdlc_controlhh+0x1e>
	...

00008e00 <_Z18hdlc_parse_controlhP9hdlc_ctrl>:


int
hdlc_parse_control(uint8_t ctrl, struct hdlc_ctrl *hc) 
                 //  uint8_t *type, uint8_t *pf, uint8_t *nr, uint8_t *ns)
{
    8e00:	b570      	push	{r4, r5, r6, lr}
    8e02:	000d      	movs	r5, r1
    uint8_t c2;
    int rc = 0;

    memset(hc, 0, sizeof (*hc));
    8e04:	2604      	movs	r6, #4
{
    8e06:	0004      	movs	r4, r0
    memset(hc, 0, sizeof (*hc));
    8e08:	0032      	movs	r2, r6
    8e0a:	2100      	movs	r1, #0
    8e0c:	0028      	movs	r0, r5
    8e0e:	f003 f9c1 	bl	c194 <memset>

    if ((ctrl & 1) == 0) {              /* I frame */
    8e12:	2201      	movs	r2, #1
    8e14:	0023      	movs	r3, r4
    8e16:	1121      	asrs	r1, r4, #4
    8e18:	4013      	ands	r3, r2
    8e1a:	d10f      	bne.n	8e3c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x3c>
        hc->type = HDLC_I;
        hc->nr = (ctrl & 0xE0) >> 5;
    8e1c:	0960      	lsrs	r0, r4, #5
        hc->pf = (ctrl & 0x10) >> 4;
        hc->ns = (ctrl & 0x0E) >> 1;
    8e1e:	0724      	lsls	r4, r4, #28
        hc->type = HDLC_I;
    8e20:	702a      	strb	r2, [r5, #0]
        hc->ns = (ctrl & 0x0E) >> 1;
    8e22:	0f64      	lsrs	r4, r4, #29
        hc->pf = (ctrl & 0x10) >> 4;
    8e24:	400a      	ands	r2, r1
        hc->nr = (ctrl & 0xE0) >> 5;
    8e26:	70a8      	strb	r0, [r5, #2]
        hc->pf = (ctrl & 0x10) >> 4;
    8e28:	706a      	strb	r2, [r5, #1]
        hc->ns = (ctrl & 0x0E) >> 1;
    8e2a:	70ec      	strb	r4, [r5, #3]
    int rc = 0;
    8e2c:	2400      	movs	r4, #0
            case 0x03:  hc->type = HDLC_UI;    break;
            default:
                rc = 1;     /* Unknown frame - error */
        }
    }
    dlog(LOG_DEBUG, "frame type: 0x%x", hc->type);
    8e2e:	782a      	ldrb	r2, [r5, #0]
    8e30:	491c      	ldr	r1, [pc, #112]	; (8ea4 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0xa4>)
    8e32:	2007      	movs	r0, #7
    8e34:	f7fb fe52 	bl	4adc <_Z4dlogiPKcz>

    return rc;
}
    8e38:	0020      	movs	r0, r4
    8e3a:	bd70      	pop	{r4, r5, r6, pc}
    8e3c:	230f      	movs	r3, #15
    8e3e:	4023      	ands	r3, r4
    else if ((ctrl & 0x0F) == 1) {      /* RR frame */
    8e40:	2b01      	cmp	r3, #1
    8e42:	d106      	bne.n	8e52 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x52>
        hc->type = HDLC_RR;
    8e44:	2202      	movs	r2, #2
        hc->nr = (ctrl & 0xE0) >> 5;
    8e46:	0964      	lsrs	r4, r4, #5
        hc->pf = (ctrl & 0x10) >> 4;
    8e48:	400b      	ands	r3, r1
        hc->type = HDLC_RR;
    8e4a:	702a      	strb	r2, [r5, #0]
        hc->nr = (ctrl & 0xE0) >> 5;
    8e4c:	70ac      	strb	r4, [r5, #2]
        hc->pf = (ctrl & 0x10) >> 4;
    8e4e:	706b      	strb	r3, [r5, #1]
    8e50:	e7ec      	b.n	8e2c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
    else if ((ctrl & 0x0F) == 5) {      /* RNR frame */
    8e52:	2b05      	cmp	r3, #5
    8e54:	d106      	bne.n	8e64 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x64>
        hc->type = HDLC_RNR;
    8e56:	3b02      	subs	r3, #2
        hc->nr = (ctrl & 0xE0) >> 5;
    8e58:	0964      	lsrs	r4, r4, #5
        hc->pf  = (ctrl & 0x10) >> 4;
    8e5a:	400a      	ands	r2, r1
        hc->type = HDLC_RNR;
    8e5c:	702b      	strb	r3, [r5, #0]
        hc->nr = (ctrl & 0xE0) >> 5;
    8e5e:	70ac      	strb	r4, [r5, #2]
        hc->pf  = (ctrl & 0x10) >> 4;
    8e60:	706a      	strb	r2, [r5, #1]
    8e62:	e7e3      	b.n	8e2c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
        switch (c2) {
    8e64:	2310      	movs	r3, #16
        hc->pf = (ctrl & 0x10) >> 4;
    8e66:	400a      	ands	r2, r1
    8e68:	706a      	strb	r2, [r5, #1]
        switch (c2) {
    8e6a:	439c      	bics	r4, r3
    8e6c:	2c43      	cmp	r4, #67	; 0x43
    8e6e:	d011      	beq.n	8e94 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x94>
    8e70:	d806      	bhi.n	8e80 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x80>
    8e72:	2c03      	cmp	r4, #3
    8e74:	d013      	beq.n	8e9e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x9e>
            case 0x0F:  hc->type = HDLC_DM;    break;
    8e76:	2307      	movs	r3, #7
        switch (c2) {
    8e78:	2c0f      	cmp	r4, #15
    8e7a:	d00c      	beq.n	8e96 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
                rc = 1;     /* Unknown frame - error */
    8e7c:	2401      	movs	r4, #1
    8e7e:	e7d6      	b.n	8e2e <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2e>
        switch (c2) {
    8e80:	2c83      	cmp	r4, #131	; 0x83
    8e82:	d005      	beq.n	8e90 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x90>
    8e84:	2c87      	cmp	r4, #135	; 0x87
    8e86:	d008      	beq.n	8e9a <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x9a>
    8e88:	2c63      	cmp	r4, #99	; 0x63
    8e8a:	d1f7      	bne.n	8e7c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x7c>
            case 0x63:  hc->type = HDLC_UA;    break;
    8e8c:	2306      	movs	r3, #6
    8e8e:	e002      	b.n	8e96 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
            case 0x83:  hc->type = HDLC_SNRM;  break;
    8e90:	702e      	strb	r6, [r5, #0]
    8e92:	e7cb      	b.n	8e2c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
            case 0x43:  hc->type = HDLC_DISC;  break;
    8e94:	2305      	movs	r3, #5
            case 0x03:  hc->type = HDLC_UI;    break;
    8e96:	702b      	strb	r3, [r5, #0]
    8e98:	e7c8      	b.n	8e2c <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x2c>
            case 0x87:  hc->type = HDLC_FRMR;  break;
    8e9a:	2308      	movs	r3, #8
    8e9c:	e7fb      	b.n	8e96 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
            case 0x03:  hc->type = HDLC_UI;    break;
    8e9e:	2309      	movs	r3, #9
    8ea0:	e7f9      	b.n	8e96 <_Z18hdlc_parse_controlhP9hdlc_ctrl+0x96>
    8ea2:	46c0      	nop			; (mov r8, r8)
    8ea4:	00011b92 	.word	0x00011b92

00008ea8 <_Z16hdlc_addr_encodem>:
 * Limited to single byte encoding only
*/
uint8_t
hdlc_addr_encode(uint32_t address)
{    
    return ((address & 0x7F) << 1) | 1;
    8ea8:	0043      	lsls	r3, r0, #1
    8eaa:	2001      	movs	r0, #1
    8eac:	4318      	orrs	r0, r3
    8eae:	b2c0      	uxtb	r0, r0
}
    8eb0:	4770      	bx	lr

00008eb2 <_Z15hdlc_parse_addrPKhiPmPi>:
 *              0 means input was found incomplete
 */

int
hdlc_parse_addr(const uint8_t *buf, int len, uint32_t *eaddr, int *al)
{
    8eb2:	b570      	push	{r4, r5, r6, lr}
    *eaddr = 0;
    8eb4:	2400      	movs	r4, #0
    8eb6:	2501      	movs	r5, #1
{
    8eb8:	0006      	movs	r6, r0
    *eaddr = 0;
    8eba:	6014      	str	r4, [r2, #0]
        goto err;
    }
    
    return 0;
err:
    return 1;
    8ebc:	0028      	movs	r0, r5
    *al = 0;
    8ebe:	601c      	str	r4, [r3, #0]
    if ((len >= 1) &&(buf[0] & 1)) {
    8ec0:	42a1      	cmp	r1, r4
    8ec2:	dd05      	ble.n	8ed0 <_Z15hdlc_parse_addrPKhiPmPi+0x1e>
    8ec4:	7831      	ldrb	r1, [r6, #0]
    8ec6:	4229      	tst	r1, r5
    8ec8:	d002      	beq.n	8ed0 <_Z15hdlc_parse_addrPKhiPmPi+0x1e>
    return 0;
    8eca:	0020      	movs	r0, r4
        memcpy(eaddr, buf, 1);
    8ecc:	7011      	strb	r1, [r2, #0]
        *al = 1;               
    8ece:	601d      	str	r5, [r3, #0]
}
    8ed0:	bd70      	pop	{r4, r5, r6, pc}
	...

00008ed4 <_Z8hdlc_hdrismmPhPi>:
 *
 */
int
hdlc_hdr(int segment, int16_t fcontrol, uint32_t dst, uint32_t src,
    uint8_t *buf, int *hdrlen)
{
    8ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ed6:	9c06      	ldr	r4, [sp, #24]
    8ed8:	001e      	movs	r6, r3
    8eda:	000d      	movs	r5, r1
    8edc:	0017      	movs	r7, r2
    hcs = crc16(crc16_init(), buf, *hdrlen - 2);
    buf_wle16(b, 0, ~hcs);
   
    return 0;
err:
    return 1;
    8ede:	2301      	movs	r3, #1
    if (fcontrol == HDLC_FC_INVALID || dst > 0x7f || src > 0x7f) {
    8ee0:	1c4a      	adds	r2, r1, #1
    8ee2:	d021      	beq.n	8f28 <_Z8hdlc_hdrismmPhPi+0x54>
    8ee4:	2f7f      	cmp	r7, #127	; 0x7f
    8ee6:	d81f      	bhi.n	8f28 <_Z8hdlc_hdrismmPhPi+0x54>
    8ee8:	2e7f      	cmp	r6, #127	; 0x7f
    8eea:	d81d      	bhi.n	8f28 <_Z8hdlc_hdrismmPhPi+0x54>
    *hdrlen = HDLC_HDR_SIZE;   /* incl. two bytes of HCS */ 
    8eec:	2207      	movs	r2, #7
    8eee:	9b07      	ldr	r3, [sp, #28]
    8ef0:	601a      	str	r2, [r3, #0]
    buf_wbe16(buf, 0, 0xA000 | (segment ? 0x0800 : 0) | *hdrlen);
    8ef2:	2800      	cmp	r0, #0
    8ef4:	d11a      	bne.n	8f2c <_Z8hdlc_hdrismmPhPi+0x58>
    8ef6:	4b0e      	ldr	r3, [pc, #56]	; (8f30 <_Z8hdlc_hdrismmPhPi+0x5c>)
    8ef8:	431a      	orrs	r2, r3
    8efa:	b292      	uxth	r2, r2
    8efc:	2100      	movs	r1, #0
    8efe:	0020      	movs	r0, r4
    8f00:	f000 fab3 	bl	946a <_Z9buf_wbe16Pvit>
    *b++ = dst;     //hdlc_addr_encode(dst);
    8f04:	70a7      	strb	r7, [r4, #2]
    *b++ = src;     //hdlc_addr_encode(src);
    8f06:	70e6      	strb	r6, [r4, #3]
    *b++ = fcontrol;
    8f08:	7125      	strb	r5, [r4, #4]
    hcs = crc16(crc16_init(), buf, *hdrlen - 2);
    8f0a:	f000 fac1 	bl	9490 <_Z10crc16_initv>
    8f0e:	9b07      	ldr	r3, [sp, #28]
    8f10:	0021      	movs	r1, r4
    8f12:	681a      	ldr	r2, [r3, #0]
    8f14:	3a02      	subs	r2, #2
    8f16:	f000 fabf 	bl	9498 <_Z5crc16tPKvj>
    buf_wle16(b, 0, ~hcs);
    8f1a:	43c2      	mvns	r2, r0
    8f1c:	2100      	movs	r1, #0
    8f1e:	b292      	uxth	r2, r2
    *b++ = fcontrol;
    8f20:	1d60      	adds	r0, r4, #5
    buf_wle16(b, 0, ~hcs);
    8f22:	f000 faa7 	bl	9474 <_Z9buf_wle16Pvit>
    return 0;
    8f26:	2300      	movs	r3, #0
}
    8f28:	0018      	movs	r0, r3
    8f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    buf_wbe16(buf, 0, 0xA000 | (segment ? 0x0800 : 0) | *hdrlen);
    8f2c:	4b01      	ldr	r3, [pc, #4]	; (8f34 <_Z8hdlc_hdrismmPhPi+0x60>)
    8f2e:	e7e3      	b.n	8ef8 <_Z8hdlc_hdrismmPhPi+0x24>
    8f30:	ffffa000 	.word	0xffffa000
    8f34:	ffffa800 	.word	0xffffa800

00008f38 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_>:
 * at the tail of info
 */
int
hdlc_frm_add_info(const uint8_t *hdr, uint8_t *fhdr, 
    const uint8_t *info, int infolen, uint8_t *fmfcs)
{
    8f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8f3a:	000d      	movs	r5, r1
    int fmt, hdrlen;
    uint16_t hcs, fcs;
    
    fmt = buf_be16(hdr, 0);
    8f3c:	2100      	movs	r1, #0
{
    8f3e:	0007      	movs	r7, r0
    8f40:	9201      	str	r2, [sp, #4]
    8f42:	001e      	movs	r6, r3
    fmt = buf_be16(hdr, 0);
    8f44:	f000 fa8b 	bl	945e <_Z8buf_be16PKvi>
    8f48:	0544      	lsls	r4, r0, #21
    8f4a:	9000      	str	r0, [sp, #0]
    8f4c:	0d64      	lsrs	r4, r4, #21
    hdrlen = fmt & 0x07FF;
    fmt = fmt & 0xF800;

    if (hdrlen > HDLC_HDR_MAX) {
        return 1;
    8f4e:	2001      	movs	r0, #1
    if (hdrlen > HDLC_HDR_MAX) {
    8f50:	2c07      	cmp	r4, #7
    8f52:	d830      	bhi.n	8fb6 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_+0x7e>
    }

    memcpy(fhdr, hdr, hdrlen);
    8f54:	0022      	movs	r2, r4
    8f56:	0039      	movs	r1, r7
    8f58:	0028      	movs	r0, r5
    8f5a:	f003 f900 	bl	c15e <memcpy>
        fcs = crc16(crc16_init(), fhdr, hdrlen);
        fcs = crc16(fcs, info, infolen);
        /* final byte order - ready to be appended to frame */
        buf_wle16(fmfcs, 0, ~fcs);
    }
    return 0;
    8f5e:	2000      	movs	r0, #0
    if (infolen > 0) {           
    8f60:	4286      	cmp	r6, r0
    8f62:	dd28      	ble.n	8fb6 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_+0x7e>
        buf_wbe16(fhdr, 0, fmt | (hdrlen + infolen + 2));
    8f64:	9b00      	ldr	r3, [sp, #0]
    8f66:	1cb2      	adds	r2, r6, #2
    8f68:	0adb      	lsrs	r3, r3, #11
    8f6a:	02db      	lsls	r3, r3, #11
    8f6c:	18a2      	adds	r2, r4, r2
    8f6e:	431a      	orrs	r2, r3
    8f70:	0001      	movs	r1, r0
    8f72:	b292      	uxth	r2, r2
    8f74:	0028      	movs	r0, r5
        hcs = crc16(crc16_init(), fhdr, hdrlen - 2);
    8f76:	1ea7      	subs	r7, r4, #2
        buf_wbe16(fhdr, 0, fmt | (hdrlen + infolen + 2));
    8f78:	f000 fa77 	bl	946a <_Z9buf_wbe16Pvit>
        hcs = crc16(crc16_init(), fhdr, hdrlen - 2);
    8f7c:	f000 fa88 	bl	9490 <_Z10crc16_initv>
    8f80:	003a      	movs	r2, r7
    8f82:	0029      	movs	r1, r5
    8f84:	f000 fa88 	bl	9498 <_Z5crc16tPKvj>
        buf_wle16(fhdr, hdrlen - 2, ~hcs);
    8f88:	43c2      	mvns	r2, r0
    8f8a:	0039      	movs	r1, r7
    8f8c:	b292      	uxth	r2, r2
    8f8e:	0028      	movs	r0, r5
    8f90:	f000 fa70 	bl	9474 <_Z9buf_wle16Pvit>
        fcs = crc16(crc16_init(), fhdr, hdrlen);
    8f94:	f000 fa7c 	bl	9490 <_Z10crc16_initv>
    8f98:	0022      	movs	r2, r4
    8f9a:	0029      	movs	r1, r5
    8f9c:	f000 fa7c 	bl	9498 <_Z5crc16tPKvj>
        fcs = crc16(fcs, info, infolen);
    8fa0:	0032      	movs	r2, r6
    8fa2:	9901      	ldr	r1, [sp, #4]
    8fa4:	f000 fa78 	bl	9498 <_Z5crc16tPKvj>
        buf_wle16(fmfcs, 0, ~fcs);
    8fa8:	43c2      	mvns	r2, r0
    8faa:	2100      	movs	r1, #0
    8fac:	9808      	ldr	r0, [sp, #32]
    8fae:	b292      	uxth	r2, r2
    8fb0:	f000 fa60 	bl	9474 <_Z9buf_wle16Pvit>
    return 0;
    8fb4:	2000      	movs	r0, #0

}
    8fb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00008fb8 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi>:
#define HDLC_PARSE_SHORT    (1)
#define HDLC_PARSE_HDR_ERR  (2)

int
hdlc_parse_hdr(struct hdlc_hdr_fields *hh, const uint8_t *buf, int buflen)
{
    8fb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8fba:	0004      	movs	r4, r0
    8fbc:	000d      	movs	r5, r1
    8fbe:	0016      	movs	r6, r2
    int dlen, slen;
    int rc;

    if (buflen < HDLC_HDR_SIZE) { /* don't bother parsing, need more */
        return HDLC_PARSE_SHORT;
    8fc0:	2001      	movs	r0, #1
    if (buflen < HDLC_HDR_SIZE) { /* don't bother parsing, need more */
    8fc2:	2a06      	cmp	r2, #6
    8fc4:	dd06      	ble.n	8fd4 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>
    }

    /* Confirm type 3 */
    if ((buf[0] & 0xF0) != 0xA0) {
    8fc6:	780b      	ldrb	r3, [r1, #0]
    8fc8:	220f      	movs	r2, #15
    8fca:	0019      	movs	r1, r3
    8fcc:	4391      	bics	r1, r2
    8fce:	29a0      	cmp	r1, #160	; 0xa0
    8fd0:	d001      	beq.n	8fd6 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1e>
        return HDLC_PARSE_HDR_ERR;
    8fd2:	2002      	movs	r0, #2
    return 0;

err:
    return HDLC_PARSE_HDR_ERR;

}
    8fd4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    hh->segment = buf[0] & 0x08;
    8fd6:	2208      	movs	r2, #8
    8fd8:	4013      	ands	r3, r2
    8fda:	60e3      	str	r3, [r4, #12]
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    8fdc:	2100      	movs	r1, #0
    8fde:	0028      	movs	r0, r5
    8fe0:	f000 fa3d 	bl	945e <_Z8buf_be16PKvi>
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    8fe4:	0022      	movs	r2, r4
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    8fe6:	0540      	lsls	r0, r0, #21
    8fe8:	0d40      	lsrs	r0, r0, #21
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    8fea:	3e02      	subs	r6, #2
    hh->framelen = buf_be16(buf, 0) & 0x07FF;
    8fec:	6020      	str	r0, [r4, #0]
    rc = hdlc_parse_addr(buf + 2, buflen- 2, &hh->dst, &dlen);
    8fee:	466b      	mov	r3, sp
    8ff0:	1ca8      	adds	r0, r5, #2
    8ff2:	3214      	adds	r2, #20
    8ff4:	0031      	movs	r1, r6
    8ff6:	f7ff ff5c 	bl	8eb2 <_Z15hdlc_parse_addrPKhiPmPi>
    if (rc || dlen < 1) {
    8ffa:	2800      	cmp	r0, #0
    8ffc:	d1e9      	bne.n	8fd2 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    8ffe:	9800      	ldr	r0, [sp, #0]
    9000:	2800      	cmp	r0, #0
    9002:	dde6      	ble.n	8fd2 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    rc = hdlc_parse_addr(buf + 2 + dlen, buflen - 2 - dlen, &hh->src, &slen);
    9004:	0022      	movs	r2, r4
    9006:	1a31      	subs	r1, r6, r0
    9008:	3002      	adds	r0, #2
    900a:	1828      	adds	r0, r5, r0
    900c:	ab01      	add	r3, sp, #4
    900e:	3218      	adds	r2, #24
    9010:	f7ff ff4f 	bl	8eb2 <_Z15hdlc_parse_addrPKhiPmPi>
    if (rc || slen < 1) {
    9014:	2800      	cmp	r0, #0
    9016:	d1dc      	bne.n	8fd2 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    9018:	9a01      	ldr	r2, [sp, #4]
    901a:	2a00      	cmp	r2, #0
    901c:	ddd9      	ble.n	8fd2 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    hh->hdrlen = 2 + dlen + slen + 1 + 2;
    901e:	9b00      	ldr	r3, [sp, #0]
    if (crc16_validate(buf, hh->hdrlen)) {
    9020:	0028      	movs	r0, r5
    hh->hdrlen = 2 + dlen + slen + 1 + 2;
    9022:	3302      	adds	r3, #2
    9024:	189b      	adds	r3, r3, r2
    9026:	1cd9      	adds	r1, r3, #3
    9028:	6061      	str	r1, [r4, #4]
    hh->control = buf[2 + dlen + slen];
    902a:	5ceb      	ldrb	r3, [r5, r3]
    902c:	7423      	strb	r3, [r4, #16]
    if (crc16_validate(buf, hh->hdrlen)) {
    902e:	f000 fa45 	bl	94bc <_Z14crc16_validatePKvj>
    9032:	2800      	cmp	r0, #0
    9034:	d1cd      	bne.n	8fd2 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1a>
    if (hh->framelen > hh->hdrlen + 2) {
    9036:	6862      	ldr	r2, [r4, #4]
    9038:	6823      	ldr	r3, [r4, #0]
    903a:	1c91      	adds	r1, r2, #2
    903c:	428b      	cmp	r3, r1
    903e:	dd03      	ble.n	9048 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x90>
        hh->infolen = hh->framelen - hh->hdrlen - 2;
    9040:	1a9b      	subs	r3, r3, r2
    9042:	3b02      	subs	r3, #2
    9044:	60a3      	str	r3, [r4, #8]
    9046:	e7c5      	b.n	8fd4 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>
        hh->infolen = 0;
    9048:	60a0      	str	r0, [r4, #8]
    904a:	e7c3      	b.n	8fd4 <_Z14hdlc_parse_hdrP15hdlc_hdr_fieldsPKhi+0x1c>

0000904c <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params>:


/* Fill param negotiation information IEC 62056-46 6.4.4.4.3.2 */
int
hdlc_fill_snrm_param(uint8_t *buf, uint32_t buflen, uint32_t *rsplen,
                     struct hdlc_snrm_params *hsp){
    904c:	b5f0      	push	{r4, r5, r6, r7, lr}
    /* Based on example in IEC doc*/
    uint8_t param_template[] = {0x81, 0x80, 0x14,
                                0x05, 0x02, 0x01, 0x00,
                                0x06, 0x02, 0x01, 0x00,
                                0x07, 0x04, 0x00, 0x00, 0x00, 0x01,
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    904e:	2617      	movs	r6, #23
                     struct hdlc_snrm_params *hsp){
    9050:	b089      	sub	sp, #36	; 0x24
    9052:	9101      	str	r1, [sp, #4]
    9054:	0004      	movs	r4, r0
    9056:	0017      	movs	r7, r2
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    9058:	4914      	ldr	r1, [pc, #80]	; (90ac <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x60>)
    905a:	0032      	movs	r2, r6
    905c:	a802      	add	r0, sp, #8
                     struct hdlc_snrm_params *hsp){
    905e:	001d      	movs	r5, r3
                                0x08, 0x04, 0x00, 0x00, 0x00, 0x01};
    9060:	f003 f87d 	bl	c15e <memcpy>

    if (!buf || buflen < sizeof(param_template)) {
        return 1;
    9064:	2001      	movs	r0, #1
    if (!buf || buflen < sizeof(param_template)) {
    9066:	2c00      	cmp	r4, #0
    9068:	d01d      	beq.n	90a6 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x5a>
    906a:	9b01      	ldr	r3, [sp, #4]
    906c:	2b16      	cmp	r3, #22
    906e:	d91a      	bls.n	90a6 <_Z20hdlc_fill_snrm_paramPhmPmP16hdlc_snrm_params+0x5a>
    }

    memcpy(buf, param_template, sizeof(param_template));
    9070:	0032      	movs	r2, r6
    9072:	a902      	add	r1, sp, #8
    9074:	0020      	movs	r0, r4
    9076:	f003 f872 	bl	c15e <memcpy>

    buf_wbe16(buf, 5, hsp->max_info_tx);
    907a:	882a      	ldrh	r2, [r5, #0]
    907c:	2105      	movs	r1, #5
    907e:	0020      	movs	r0, r4
    9080:	f000 f9f3 	bl	946a <_Z9buf_wbe16Pvit>
    buf_wbe16(buf, 9, hsp->max_info_rx);
    9084:	88aa      	ldrh	r2, [r5, #4]
    9086:	2109      	movs	r1, #9
    9088:	0020      	movs	r0, r4
    908a:	f000 f9ee 	bl	946a <_Z9buf_wbe16Pvit>

    buf_wbe32(buf, 13, hsp->window_tx);
    908e:	68aa      	ldr	r2, [r5, #8]
    9090:	210d      	movs	r1, #13
    9092:	0020      	movs	r0, r4
    9094:	f000 f9f3 	bl	947e <_Z9buf_wbe32Pvim>
    buf_wbe32(buf, 19, hsp->window_rx);
    9098:	0020      	movs	r0, r4
    909a:	68ea      	ldr	r2, [r5, #12]
    909c:	2113      	movs	r1, #19
    909e:	f000 f9ee 	bl	947e <_Z9buf_wbe32Pvim>

    *rsplen = sizeof(param_template);

    return 0;
    90a2:	2000      	movs	r0, #0
    *rsplen = sizeof(param_template);
    90a4:	603e      	str	r6, [r7, #0]
}
    90a6:	b009      	add	sp, #36	; 0x24
    90a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    90aa:	46c0      	nop			; (mov r8, r8)
    90ac:	00011b2f 	.word	0x00011b2f

000090b0 <_Z15hdlc_send_framePKhS0_i>:
 *****************************************************************************
 *****************************************************************************
 */

int hdlc_send_frame( const uint8_t *hdr, const uint8_t *info, int infolen )
{
    90b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    90b2:	0007      	movs	r7, r0
    90b4:	b089      	sub	sp, #36	; 0x24
    90b6:	000e      	movs	r6, r1
    90b8:	0014      	movs	r4, r2
    uint8_t fcs[2];    
    int rc;
    int i;

    /* attach info if present */
    if (info && infolen > 0) {
    90ba:	2900      	cmp	r1, #0
    90bc:	d00b      	beq.n	90d6 <_Z15hdlc_send_framePKhS0_i+0x26>
    90be:	2a00      	cmp	r2, #0
    90c0:	dd09      	ble.n	90d6 <_Z15hdlc_send_framePKhS0_i+0x26>
        if ((rc = hdlc_frm_add_info(hdr, fhdr, info, infolen, fcs))) {
    90c2:	ab05      	add	r3, sp, #20
    90c4:	9300      	str	r3, [sp, #0]
    90c6:	0013      	movs	r3, r2
    90c8:	000a      	movs	r2, r1
    90ca:	a906      	add	r1, sp, #24
    90cc:	f7ff ff34 	bl	8f38 <_Z17hdlc_frm_add_infoPKhPhS0_iS1_>
    90d0:	2800      	cmp	r0, #0
    90d2:	d11a      	bne.n	910a <_Z15hdlc_send_framePKhS0_i+0x5a>
            return -1;
        }
        hdr = fhdr;
    90d4:	af06      	add	r7, sp, #24
    }

	// Log
    log_msg("HDLC send frame", hdr, HDLC_HDR_SIZE, 0);
    90d6:	2207      	movs	r2, #7
    90d8:	0039      	movs	r1, r7
    90da:	2300      	movs	r3, #0
    90dc:	4826      	ldr	r0, [pc, #152]	; (9178 <_Z15hdlc_send_framePKhS0_i+0xc8>)
    90de:	f7fb fd5b 	bl	4b98 <_Z7log_msgPKcPKvii>

	// Send frame delimiter
    uart.write(fs);
    90e2:	4d26      	ldr	r5, [pc, #152]	; (917c <_Z15hdlc_send_framePKhS0_i+0xcc>)
    90e4:	217e      	movs	r1, #126	; 0x7e
    90e6:	6828      	ldr	r0, [r5, #0]
    90e8:	6803      	ldr	r3, [r0, #0]
    90ea:	681b      	ldr	r3, [r3, #0]
    90ec:	4798      	blx	r3

	// Send header
    /* TODO: Is this a problem on Arduino? */
	/* Need to know why the first char is dropped on uart */
	rc = uart.write( hdr, HDLC_HDR_SIZE );
    90ee:	6828      	ldr	r0, [r5, #0]
    90f0:	0039      	movs	r1, r7
    90f2:	6803      	ldr	r3, [r0, #0]
    90f4:	2207      	movs	r2, #7
    90f6:	685b      	ldr	r3, [r3, #4]
    90f8:	4798      	blx	r3
    90fa:	0007      	movs	r7, r0
    if (rc != HDLC_HDR_SIZE) 
    90fc:	2807      	cmp	r0, #7
    90fe:	d007      	beq.n	9110 <_Z15hdlc_send_framePKhS0_i+0x60>
	{
		dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_HDR_SIZE );
    9100:	2207      	movs	r2, #7
    9102:	0010      	movs	r0, r2
    9104:	491e      	ldr	r1, [pc, #120]	; (9180 <_Z15hdlc_send_framePKhS0_i+0xd0>)

		// Write CRC-16
        rc = uart.write(fcs, HDLC_CRC_SIZE);
		if (rc != HDLC_CRC_SIZE) 
		{
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_CRC_SIZE );
    9106:	f7fb fce9 	bl	4adc <_Z4dlogiPKcz>
            return -1;
    910a:	2001      	movs	r0, #1
    910c:	4240      	negs	r0, r0
    910e:	e031      	b.n	9174 <_Z15hdlc_send_framePKhS0_i+0xc4>
    if (info && infolen > 0) 
    9110:	2e00      	cmp	r6, #0
    9112:	d023      	beq.n	915c <_Z15hdlc_send_framePKhS0_i+0xac>
    9114:	2c00      	cmp	r4, #0
    9116:	dd21      	ble.n	915c <_Z15hdlc_send_framePKhS0_i+0xac>
        rc = uart.write(info, infolen);
    9118:	6828      	ldr	r0, [r5, #0]
    911a:	0022      	movs	r2, r4
    911c:	6803      	ldr	r3, [r0, #0]
    911e:	0031      	movs	r1, r6
    9120:	685b      	ldr	r3, [r3, #4]
    9122:	4798      	blx	r3
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", infolen );
    9124:	0022      	movs	r2, r4
		if (rc != infolen) 
    9126:	4284      	cmp	r4, r0
    9128:	d109      	bne.n	913e <_Z15hdlc_send_framePKhS0_i+0x8e>
        rc = uart.write(fcs, HDLC_CRC_SIZE);
    912a:	6828      	ldr	r0, [r5, #0]
    912c:	2202      	movs	r2, #2
    912e:	6803      	ldr	r3, [r0, #0]
    9130:	a905      	add	r1, sp, #20
    9132:	685b      	ldr	r3, [r3, #4]
    9134:	4798      	blx	r3
    9136:	9003      	str	r0, [sp, #12]
		if (rc != HDLC_CRC_SIZE) 
    9138:	2802      	cmp	r0, #2
    913a:	d003      	beq.n	9144 <_Z15hdlc_send_framePKhS0_i+0x94>
			dlog(LOG_DEBUG, "Error: hdlc_send_frame() did not send %d bytes as required\n", HDLC_CRC_SIZE );
    913c:	2202      	movs	r2, #2
    913e:	4910      	ldr	r1, [pc, #64]	; (9180 <_Z15hdlc_send_framePKhS0_i+0xd0>)
    9140:	0038      	movs	r0, r7
    9142:	e7e0      	b.n	9106 <_Z15hdlc_send_framePKhS0_i+0x56>
			return -1;
		}

        log_msg(NULL, info, infolen, 0);    
    9144:	2300      	movs	r3, #0
    9146:	0022      	movs	r2, r4
    9148:	0018      	movs	r0, r3
    914a:	0031      	movs	r1, r6
    914c:	f7fb fd24 	bl	4b98 <_Z7log_msgPKcPKvii>
        log_msg(NULL, fcs, HDLC_CRC_SIZE, 0);            
    9150:	2300      	movs	r3, #0
    9152:	9a03      	ldr	r2, [sp, #12]
    9154:	a905      	add	r1, sp, #20
    9156:	0018      	movs	r0, r3
    9158:	f7fb fd1e 	bl	4b98 <_Z7log_msgPKcPKvii>

    }

    /* closing with FS.  Not shown in log */
    uart.write(fs);
    915c:	6828      	ldr	r0, [r5, #0]
    915e:	217e      	movs	r1, #126	; 0x7e
    9160:	6803      	ldr	r3, [r0, #0]
    9162:	681b      	ldr	r3, [r3, #0]
    9164:	4798      	blx	r3
    log_msg(NULL, NULL, 0, 1);  /* EOL */
    9166:	2200      	movs	r2, #0
    9168:	2301      	movs	r3, #1
    916a:	0010      	movs	r0, r2
    916c:	0011      	movs	r1, r2
    916e:	f7fb fd13 	bl	4b98 <_Z7log_msgPKcPKvii>

    return 0;
    9172:	2000      	movs	r0, #0
}
    9174:	b009      	add	sp, #36	; 0x24
    9176:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9178:	00011b46 	.word	0x00011b46
    917c:	20002150 	.word	0x20002150
    9180:	00011b56 	.word	0x00011b56

00009184 <_Z7hdlc_rxPhS_ii>:
	uint8_t * pPayload;
	uint16_t rx_len = 0;
	uint16_t frame_len = 0;
	struct hdlcux * pHUX = &hctx.hux;

    memset( pHUX, 0x0, sizeof(hctx.hux) );
    9184:	2286      	movs	r2, #134	; 0x86
{
    9186:	b5f0      	push	{r4, r5, r6, r7, lr}
    9188:	b0c5      	sub	sp, #276	; 0x114
    918a:	9002      	str	r0, [sp, #8]
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    918c:	4885      	ldr	r0, [pc, #532]	; (93a4 <_Z7hdlc_rxPhS_ii+0x220>)
    918e:	0052      	lsls	r2, r2, #1
{
    9190:	9103      	str	r1, [sp, #12]
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    9192:	3010      	adds	r0, #16
    9194:	2100      	movs	r1, #0
{
    9196:	001d      	movs	r5, r3
    memset( pHUX, 0x0, sizeof(hctx.hux) );
    9198:	f002 fffc 	bl	c194 <memset>

	// Read UART for maximum 200 ms
	uart.setTimeout(READ_BUF_TIMEOUT);	 
    919c:	21c8      	movs	r1, #200	; 0xc8
    919e:	4c82      	ldr	r4, [pc, #520]	; (93a8 <_Z7hdlc_rxPhS_ii+0x224>)
    91a0:	0049      	lsls	r1, r1, #1
    91a2:	6820      	ldr	r0, [r4, #0]
    91a4:	f000 f947 	bl	9436 <_ZN6Stream10setTimeoutEm>

	// Wait for incoming HDLC frame
	elapsed = 0.0;
	timeout = (float) hdlc_frame_timeout;
    91a8:	0028      	movs	r0, r5
    91aa:	f000 ff29 	bl	a000 <__aeabi_i2f>
	elapsed = 0.0;
    91ae:	2500      	movs	r5, #0
	timeout = (float) hdlc_frame_timeout;
    91b0:	1c06      	adds	r6, r0, #0
	while( elapsed < timeout ) 
    91b2:	1c31      	adds	r1, r6, #0
    91b4:	1c28      	adds	r0, r5, #0
    91b6:	f000 fb69 	bl	988c <__aeabi_fcmplt>
    91ba:	2800      	cmp	r0, #0
    91bc:	d04e      	beq.n	925c <_Z7hdlc_rxPhS_ii+0xd8>
	{
		// Check if there is nothing at the UART
		if (!uart.available())
    91be:	6820      	ldr	r0, [r4, #0]
    91c0:	6803      	ldr	r3, [r0, #0]
    91c2:	691b      	ldr	r3, [r3, #16]
    91c4:	4798      	blx	r3
    91c6:	2800      	cmp	r0, #0
    91c8:	d10f      	bne.n	91ea <_Z7hdlc_rxPhS_ii+0x66>
		{
			// Check if it is time to send Observe response message
			// The function call returns a flag that determines if Observe is turned on
			obs_flag = do_observe();
    91ca:	f7fe fe09 	bl	7de0 <_Z10do_observev>
			
#if defined(ARDUINO_ARCH_SAMD)
			if (obs_flag)
    91ce:	2800      	cmp	r0, #0
    91d0:	d005      	beq.n	91de <_Z7hdlc_rxPhS_ii+0x5a>
			{
				// The reading of the time on SAMD takes about 5.5 ms
				// Adjust the variable accordingly
				elapsed += 5.5;
    91d2:	4976      	ldr	r1, [pc, #472]	; (93ac <_Z7hdlc_rxPhS_ii+0x228>)
				continue;
			}
#endif
			// Sleep for 1 ms
			delay(MS_SLEEP);
			elapsed++;
    91d4:	1c28      	adds	r0, r5, #0
    91d6:	f000 fb81 	bl	98dc <__aeabi_fadd>
    91da:	1c05      	adds	r5, r0, #0
			continue;
    91dc:	e7e9      	b.n	91b2 <_Z7hdlc_rxPhS_ii+0x2e>
			delay(MS_SLEEP);
    91de:	2001      	movs	r0, #1
    91e0:	f7f9 fb38 	bl	2854 <delay>
			elapsed++;
    91e4:	21fe      	movs	r1, #254	; 0xfe
    91e6:	0589      	lsls	r1, r1, #22
    91e8:	e7f4      	b.n	91d4 <_Z7hdlc_rxPhS_ii+0x50>

  double parseDouble(LookaheadMode lookahead = SKIP_ALL, char ignore = NO_IGNORE_CHAR);
  // double version of parseInt

  size_t readBytes( char *buffer, size_t length); // read chars from stream into buffer
  size_t readBytes( uint8_t *buffer, size_t length) { return readBytes((char *)buffer, length); }
    91ea:	2580      	movs	r5, #128	; 0x80
    91ec:	4f70      	ldr	r7, [pc, #448]	; (93b0 <_Z7hdlc_rxPhS_ii+0x22c>)
    91ee:	00ed      	lsls	r5, r5, #3
    91f0:	002a      	movs	r2, r5
    91f2:	0039      	movs	r1, r7
    91f4:	6820      	ldr	r0, [r4, #0]
    91f6:	f000 f920 	bl	943a <_ZN6Stream9readBytesEPcj>
    91fa:	0004      	movs	r4, r0
			
		} // if
		
		// Read the HDLC frame until time-out
		cnt = uart.readBytes( UART_Buf, UART_MAX_BUF_LEN );
		sprintf( buffer, "readBytes() count: %d", cnt );
    91fc:	0002      	movs	r2, r0
    91fe:	496d      	ldr	r1, [pc, #436]	; (93b4 <_Z7hdlc_rxPhS_ii+0x230>)
    9200:	a804      	add	r0, sp, #16
    9202:	f004 f89d 	bl	d340 <siprintf>
		dlog( LOG_INFO, buffer );
    9206:	a904      	add	r1, sp, #16
    9208:	2006      	movs	r0, #6
    920a:	f7fb fc67 	bl	4adc <_Z4dlogiPKcz>
		capture_dump( UART_Buf, cnt );
    920e:	0021      	movs	r1, r4
    9210:	0038      	movs	r0, r7
    9212:	f7fb fd4d 	bl	4cb0 <_Z12capture_dumpPhi>
		
		// Check if we received more bytes than there is space for in the receive buffer
		if ( cnt > UART_MAX_BUF_LEN )
    9216:	42ac      	cmp	r4, r5
    9218:	d90d      	bls.n	9236 <_Z7hdlc_rxPhS_ii+0xb2>
		{
			// This should never happen as the readBytes method above already sets the limit
			dlog( LOG_DEBUG, "The UART receive buffer has overflown!" );
    921a:	4967      	ldr	r1, [pc, #412]	; (93b8 <_Z7hdlc_rxPhS_ii+0x234>)
    921c:	2007      	movs	r0, #7
    921e:	f7fb fc5d 	bl	4adc <_Z4dlogiPKcz>
			sprintf( buffer, "We read %d bytes and the max is %d bytes.", cnt, UART_MAX_BUF_LEN );
    9222:	4966      	ldr	r1, [pc, #408]	; (93bc <_Z7hdlc_rxPhS_ii+0x238>)
    9224:	002b      	movs	r3, r5
    9226:	0022      	movs	r2, r4
    9228:	a804      	add	r0, sp, #16
    922a:	f004 f889 	bl	d340 <siprintf>
			dlog( LOG_DEBUG, buffer );
    922e:	a904      	add	r1, sp, #16
    9230:	2007      	movs	r0, #7
    9232:	f7fb fc53 	bl	4adc <_Z4dlogiPKcz>
			
		} // if

		// Check for HDLC frame delimiters
		hctx.hu_state = HDLC_FRAME_BASE;
    9236:	2300      	movs	r3, #0
    9238:	4e5a      	ldr	r6, [pc, #360]	; (93a4 <_Z7hdlc_rxPhS_ii+0x220>)
    923a:	7033      	strb	r3, [r6, #0]
		if (( UART_Buf[0] != HDLC_FLAG ) || ( UART_Buf[cnt-1] != HDLC_FLAG ))
    923c:	783b      	ldrb	r3, [r7, #0]
    923e:	2b7e      	cmp	r3, #126	; 0x7e
    9240:	d104      	bne.n	924c <_Z7hdlc_rxPhS_ii+0xc8>
    9242:	193b      	adds	r3, r7, r4
    9244:	3b01      	subs	r3, #1
    9246:	781b      	ldrb	r3, [r3, #0]
    9248:	2b7e      	cmp	r3, #126	; 0x7e
    924a:	d009      	beq.n	9260 <_Z7hdlc_rxPhS_ii+0xdc>
		{
            ++hustats.hs_discard;  
    924c:	4a5c      	ldr	r2, [pc, #368]	; (93c0 <_Z7hdlc_rxPhS_ii+0x23c>)
			dlog( LOG_DEBUG, "Missing HDLC flag(s)" );
    924e:	495d      	ldr	r1, [pc, #372]	; (93c4 <_Z7hdlc_rxPhS_ii+0x240>)
            ++hustats.hs_discard;  
    9250:	6b53      	ldr	r3, [r2, #52]	; 0x34
    9252:	3301      	adds	r3, #1
    9254:	6353      	str	r3, [r2, #52]	; 0x34
		rc = hu_hdlc_parse_hdr( pHdr, HDLC_HDR_SIZE, &hctx.hu_pend );
		if (rc) 
		{
			/* header parsing error - need to flush */
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
			dlog( LOG_DEBUG, "Bad hdr - flush" );
    9256:	2007      	movs	r0, #7
    9258:	f7fb fc40 	bl	4adc <_Z4dlogiPKcz>
			return 0;
    925c:	2500      	movs	r5, #0
    925e:	e04b      	b.n	92f8 <_Z7hdlc_rxPhS_ii+0x174>
    if ((hdr[0] & 0xF0) != 0xA0) {  /* only Type 3 is supported */
    9260:	220f      	movs	r2, #15
    9262:	787b      	ldrb	r3, [r7, #1]
    9264:	4393      	bics	r3, r2
    9266:	2ba0      	cmp	r3, #160	; 0xa0
    9268:	d106      	bne.n	9278 <_Z7hdlc_rxPhS_ii+0xf4>
        if (crc16_validate(hdr, hdrlen)) {
    926a:	2107      	movs	r1, #7
    926c:	4856      	ldr	r0, [pc, #344]	; (93c8 <_Z7hdlc_rxPhS_ii+0x244>)
    926e:	f000 f925 	bl	94bc <_Z14crc16_validatePKvj>
    9272:	1e05      	subs	r5, r0, #0
    9274:	d100      	bne.n	9278 <_Z7hdlc_rxPhS_ii+0xf4>
    9276:	e083      	b.n	9380 <_Z7hdlc_rxPhS_ii+0x1fc>
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    9278:	2304      	movs	r3, #4
			dlog( LOG_DEBUG, "Bad hdr - flush" );
    927a:	4954      	ldr	r1, [pc, #336]	; (93cc <_Z7hdlc_rxPhS_ii+0x248>)
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    927c:	7033      	strb	r3, [r6, #0]
    927e:	e7ea      	b.n	9256 <_Z7hdlc_rxPhS_ii+0xd2>
			
		} // if

		/* Header complete - always, working with fixed hdr size */
		/* Payload, if any, starts after the header */
		hctx.hu_state = HDLC_FRAME_HDR;
    9280:	2301      	movs	r3, #1
    9282:	7033      	strb	r3, [r6, #0]
		pHUX->h_infoidx = HDLC_HDR_SIZE;
    9284:	0033      	movs	r3, r6
    9286:	2207      	movs	r2, #7
    9288:	33ff      	adds	r3, #255	; 0xff
    928a:	769a      	strb	r2, [r3, #26]
    frmlen = buf_be16(hdr, 0) & 0x07FF;
    928c:	0029      	movs	r1, r5
    928e:	484e      	ldr	r0, [pc, #312]	; (93c8 <_Z7hdlc_rxPhS_ii+0x244>)
    9290:	f000 f8e5 	bl	945e <_Z8buf_be16PKvi>
    9294:	0540      	lsls	r0, r0, #21
    9296:	0d40      	lsrs	r0, r0, #21
    9298:	9600      	str	r6, [sp, #0]
	if ( frmlen < hdrlen )
    929a:	2806      	cmp	r0, #6
    929c:	d800      	bhi.n	92a0 <_Z7hdlc_rxPhS_ii+0x11c>
    929e:	e078      	b.n	9392 <_Z7hdlc_rxPhS_ii+0x20e>
	paylen = frmlen - hdrlen;
    92a0:	1fc3      	subs	r3, r0, #7
    if ( paylen && ( paylen < 3 ) )
    92a2:	3808      	subs	r0, #8
	paylen = frmlen - hdrlen;
    92a4:	b29b      	uxth	r3, r3
    if ( paylen && ( paylen < 3 ) )
    92a6:	2801      	cmp	r0, #1
    92a8:	d800      	bhi.n	92ac <_Z7hdlc_rxPhS_ii+0x128>
    92aa:	e072      	b.n	9392 <_Z7hdlc_rxPhS_ii+0x20e>
    *infolen = paylen;
    92ac:	0032      	movs	r2, r6
    92ae:	32fe      	adds	r2, #254	; 0xfe
    92b0:	8393      	strh	r3, [r2, #28]
			dlog( LOG_DEBUG, "bad infolen - flush" );
		
		} // if
		
		// Check if the frame length equals the number of received bytes
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    92b2:	9b00      	ldr	r3, [sp, #0]
    92b4:	4a46      	ldr	r2, [pc, #280]	; (93d0 <_Z7hdlc_rxPhS_ii+0x24c>)
    92b6:	33ff      	adds	r3, #255	; 0xff
    92b8:	7e9b      	ldrb	r3, [r3, #26]
    92ba:	8b92      	ldrh	r2, [r2, #28]
		rx_len = cnt - 2;
    92bc:	3c02      	subs	r4, #2
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    92be:	189b      	adds	r3, r3, r2
    92c0:	b29b      	uxth	r3, r3
		rx_len = cnt - 2;
    92c2:	b2a4      	uxth	r4, r4
		frame_len = pHUX->h_infoidx + pHUX->h_infolen;
    92c4:	9301      	str	r3, [sp, #4]
		if ( frame_len != rx_len )
    92c6:	429c      	cmp	r4, r3
    92c8:	d019      	beq.n	92fe <_Z7hdlc_rxPhS_ii+0x17a>
		{
			dlog( LOG_DEBUG, "The frame length doesn't match the number of received bytes" );
    92ca:	4942      	ldr	r1, [pc, #264]	; (93d4 <_Z7hdlc_rxPhS_ii+0x250>)
    92cc:	2007      	movs	r0, #7
    92ce:	f7fb fc05 	bl	4adc <_Z4dlogiPKcz>
			print("frame_len: ");	printnum(frame_len);	println("");
    92d2:	4841      	ldr	r0, [pc, #260]	; (93d8 <_Z7hdlc_rxPhS_ii+0x254>)
    92d4:	f7fb fcaa 	bl	4c2c <_Z5printPKc>
    92d8:	9801      	ldr	r0, [sp, #4]
    92da:	f7fb fcd3 	bl	4c84 <_Z8printnumi>
    92de:	4e3f      	ldr	r6, [pc, #252]	; (93dc <_Z7hdlc_rxPhS_ii+0x258>)
    92e0:	0030      	movs	r0, r6
    92e2:	f7fb fcb9 	bl	4c58 <_Z7printlnPKc>
			print("rx_len:    ");	printnum(rx_len);		println("");
    92e6:	483e      	ldr	r0, [pc, #248]	; (93e0 <_Z7hdlc_rxPhS_ii+0x25c>)
    92e8:	f7fb fca0 	bl	4c2c <_Z5printPKc>
    92ec:	0020      	movs	r0, r4
    92ee:	f7fb fcc9 	bl	4c84 <_Z8printnumi>
    92f2:	0030      	movs	r0, r6
    92f4:	f7fb fcb0 	bl	4c58 <_Z7printlnPKc>
    } // while

	// Time-out
	return 0;
	
} // hdlc_rx()
    92f8:	0028      	movs	r0, r5
    92fa:	b045      	add	sp, #276	; 0x114
    92fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ( crc16_validate( pHdr, frame_len )) 
    92fe:	0021      	movs	r1, r4
    9300:	4831      	ldr	r0, [pc, #196]	; (93c8 <_Z7hdlc_rxPhS_ii+0x244>)
    9302:	f000 f8db 	bl	94bc <_Z14crc16_validatePKvj>
    9306:	2800      	cmp	r0, #0
    9308:	d001      	beq.n	930e <_Z7hdlc_rxPhS_ii+0x18a>
			dlog( LOG_DEBUG, "Discard frame - CRC error" );
    930a:	4936      	ldr	r1, [pc, #216]	; (93e4 <_Z7hdlc_rxPhS_ii+0x260>)
    930c:	e03d      	b.n	938a <_Z7hdlc_rxPhS_ii+0x206>
		memcpy( hdr, pHdr, HDLC_HDR_SIZE );
    930e:	2207      	movs	r2, #7
    9310:	492d      	ldr	r1, [pc, #180]	; (93c8 <_Z7hdlc_rxPhS_ii+0x244>)
    9312:	9802      	ldr	r0, [sp, #8]
    9314:	f002 ff23 	bl	c15e <memcpy>
		if (pHUX->h_infolen) 
    9318:	4b2d      	ldr	r3, [pc, #180]	; (93d0 <_Z7hdlc_rxPhS_ii+0x24c>)
    931a:	8b9c      	ldrh	r4, [r3, #28]
    931c:	2c00      	cmp	r4, #0
    931e:	d02a      	beq.n	9376 <_Z7hdlc_rxPhS_ii+0x1f2>
				dlog( LOG_DEBUG, "Discard frame - bad info len" );
    9320:	4931      	ldr	r1, [pc, #196]	; (93e8 <_Z7hdlc_rxPhS_ii+0x264>)
			if ( pHUX->h_infolen <= HDLC_CRC_SIZE ) 
    9322:	2c02      	cmp	r4, #2
    9324:	dc00      	bgt.n	9328 <_Z7hdlc_rxPhS_ii+0x1a4>
    9326:	e796      	b.n	9256 <_Z7hdlc_rxPhS_ii+0xd2>
			if ( rx_len > max_payload_size )
    9328:	4d30      	ldr	r5, [pc, #192]	; (93ec <_Z7hdlc_rxPhS_ii+0x268>)
			rx_len = pHUX->h_infolen - HDLC_CRC_SIZE;
    932a:	3c02      	subs	r4, #2
			if ( rx_len > max_payload_size )
    932c:	682b      	ldr	r3, [r5, #0]
			rx_len = pHUX->h_infolen - HDLC_CRC_SIZE;
    932e:	b2a4      	uxth	r4, r4
			if ( rx_len > max_payload_size )
    9330:	429c      	cmp	r4, r3
    9332:	d90b      	bls.n	934c <_Z7hdlc_rxPhS_ii+0x1c8>
				dlog( LOG_DEBUG, "The HDLC payload is too large!" );
    9334:	492e      	ldr	r1, [pc, #184]	; (93f0 <_Z7hdlc_rxPhS_ii+0x26c>)
    9336:	2007      	movs	r0, #7
    9338:	f7fb fbd0 	bl	4adc <_Z4dlogiPKcz>
				sprintf( buffer, "We got %d bytes and the max is %d bytes.", rx_len, max_payload_size );
    933c:	492d      	ldr	r1, [pc, #180]	; (93f4 <_Z7hdlc_rxPhS_ii+0x270>)
    933e:	682b      	ldr	r3, [r5, #0]
    9340:	0022      	movs	r2, r4
    9342:	a804      	add	r0, sp, #16
    9344:	f003 fffc 	bl	d340 <siprintf>
				dlog( LOG_DEBUG, buffer );
    9348:	a904      	add	r1, sp, #16
    934a:	e784      	b.n	9256 <_Z7hdlc_rxPhS_ii+0xd2>
			memcpy( info, pPayload, rx_len );
    934c:	0039      	movs	r1, r7
    934e:	0022      	movs	r2, r4
    9350:	3108      	adds	r1, #8
    9352:	9803      	ldr	r0, [sp, #12]
    9354:	f002 ff03 	bl	c15e <memcpy>
			hctx.hu_state = HDLC_FRAME_INFO;
    9358:	2302      	movs	r3, #2
    935a:	9a00      	ldr	r2, [sp, #0]
    935c:	7013      	strb	r3, [r2, #0]
		hframerecv++;
    935e:	4a26      	ldr	r2, [pc, #152]	; (93f8 <_Z7hdlc_rxPhS_ii+0x274>)
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    9360:	1c79      	adds	r1, r7, #1
		hframerecv++;
    9362:	6813      	ldr	r3, [r2, #0]
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    9364:	4825      	ldr	r0, [pc, #148]	; (93fc <_Z7hdlc_rxPhS_ii+0x278>)
		hframerecv++;
    9366:	3301      	adds	r3, #1
    9368:	6013      	str	r3, [r2, #0]
		log_msg( "HDLC recv frame", pHdr, frame_len, 1 );
    936a:	2301      	movs	r3, #1
    936c:	9a01      	ldr	r2, [sp, #4]
    936e:	f7fb fc13 	bl	4b98 <_Z7log_msgPKcPKvii>
		return 1;
    9372:	2501      	movs	r5, #1
    9374:	e7c0      	b.n	92f8 <_Z7hdlc_rxPhS_ii+0x174>
			dlog( LOG_DEBUG, "Zero infolen" );
    9376:	4922      	ldr	r1, [pc, #136]	; (9400 <_Z7hdlc_rxPhS_ii+0x27c>)
    9378:	2007      	movs	r0, #7
    937a:	f7fb fbaf 	bl	4adc <_Z4dlogiPKcz>
    937e:	e7ee      	b.n	935e <_Z7hdlc_rxPhS_ii+0x1da>
		if ( hctx.hu_pend == 2 ) 
    9380:	6873      	ldr	r3, [r6, #4]
    9382:	2b02      	cmp	r3, #2
    9384:	d000      	beq.n	9388 <_Z7hdlc_rxPhS_ii+0x204>
    9386:	e77b      	b.n	9280 <_Z7hdlc_rxPhS_ii+0xfc>
			dlog( LOG_DEBUG, "hctx.hu_pend == 2" );
    9388:	491e      	ldr	r1, [pc, #120]	; (9404 <_Z7hdlc_rxPhS_ii+0x280>)
			dlog( LOG_DEBUG, "Discard frame - CRC error" );
    938a:	2007      	movs	r0, #7
    938c:	f7fb fba6 	bl	4adc <_Z4dlogiPKcz>
			return 0;
    9390:	e7b2      	b.n	92f8 <_Z7hdlc_rxPhS_ii+0x174>
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    9392:	2304      	movs	r3, #4
    9394:	9a00      	ldr	r2, [sp, #0]
			dlog( LOG_DEBUG, "bad infolen - flush" );
    9396:	491c      	ldr	r1, [pc, #112]	; (9408 <_Z7hdlc_rxPhS_ii+0x284>)
    9398:	2007      	movs	r0, #7
			hctx.hu_state = HDLC_FRAME_ERR_FLUSH;
    939a:	7013      	strb	r3, [r2, #0]
			dlog( LOG_DEBUG, "bad infolen - flush" );
    939c:	f7fb fb9e 	bl	4adc <_Z4dlogiPKcz>
    93a0:	e787      	b.n	92b2 <_Z7hdlc_rxPhS_ii+0x12e>
    93a2:	46c0      	nop			; (mov r8, r8)
    93a4:	20002154 	.word	0x20002154
    93a8:	20002150 	.word	0x20002150
    93ac:	40b00000 	.word	0x40b00000
    93b0:	20001d45 	.word	0x20001d45
    93b4:	00011ba3 	.word	0x00011ba3
    93b8:	00011bb9 	.word	0x00011bb9
    93bc:	00011be0 	.word	0x00011be0
    93c0:	20002270 	.word	0x20002270
    93c4:	00011c0a 	.word	0x00011c0a
    93c8:	20001d46 	.word	0x20001d46
    93cc:	00011d21 	.word	0x00011d21
    93d0:	20002252 	.word	0x20002252
    93d4:	00011c31 	.word	0x00011c31
    93d8:	00011c6d 	.word	0x00011c6d
    93dc:	00010477 	.word	0x00010477
    93e0:	00011c79 	.word	0x00011c79
    93e4:	00011c85 	.word	0x00011c85
    93e8:	00011c9f 	.word	0x00011c9f
    93ec:	2000214c 	.word	0x2000214c
    93f0:	00011cbc 	.word	0x00011cbc
    93f4:	00011cdb 	.word	0x00011cdb
    93f8:	20002148 	.word	0x20002148
    93fc:	00011d11 	.word	0x00011d11
    9400:	00011d04 	.word	0x00011d04
    9404:	00011c1f 	.word	0x00011c1f
    9408:	00011d31 	.word	0x00011d31

0000940c <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait

// protected method to read stream with timeout
int Stream::timedRead()
{
    940c:	b510      	push	{r4, lr}
    940e:	0004      	movs	r4, r0
  int c;
  _startMillis = millis();
    9410:	f7f9 f9ea 	bl	27e8 <millis>
    9414:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
    9416:	6823      	ldr	r3, [r4, #0]
    9418:	0020      	movs	r0, r4
    941a:	695b      	ldr	r3, [r3, #20]
    941c:	4798      	blx	r3
    if (c >= 0) return c;
    941e:	2800      	cmp	r0, #0
    9420:	da08      	bge.n	9434 <_ZN6Stream9timedReadEv+0x28>
  } while(millis() - _startMillis < _timeout);
    9422:	f7f9 f9e1 	bl	27e8 <millis>
    9426:	68e3      	ldr	r3, [r4, #12]
    9428:	1ac0      	subs	r0, r0, r3
  do {
    942a:	68a3      	ldr	r3, [r4, #8]
    942c:	4298      	cmp	r0, r3
    942e:	d3f2      	bcc.n	9416 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
    9430:	2001      	movs	r0, #1
    9432:	4240      	negs	r0, r0
}
    9434:	bd10      	pop	{r4, pc}

00009436 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
    9436:	6081      	str	r1, [r0, #8]
}
    9438:	4770      	bx	lr

0000943a <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    943a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    943c:	000e      	movs	r6, r1
    943e:	000c      	movs	r4, r1
    9440:	9001      	str	r0, [sp, #4]
    9442:	188d      	adds	r5, r1, r2
    9444:	1ba7      	subs	r7, r4, r6
  size_t count = 0;
  while (count < length) {
    9446:	42ac      	cmp	r4, r5
    9448:	d007      	beq.n	945a <_ZN6Stream9readBytesEPcj+0x20>
    int c = timedRead();
    944a:	9801      	ldr	r0, [sp, #4]
    944c:	f7ff ffde 	bl	940c <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    9450:	2800      	cmp	r0, #0
    9452:	db02      	blt.n	945a <_ZN6Stream9readBytesEPcj+0x20>
    *buffer++ = (char)c;
    9454:	7020      	strb	r0, [r4, #0]
    9456:	3401      	adds	r4, #1
  while (count < length) {
    9458:	e7f4      	b.n	9444 <_ZN6Stream9readBytesEPcj+0xa>
    count++;
  }
  return count;
}
    945a:	0038      	movs	r0, r7
    945c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000945e <_Z8buf_be16PKvi>:

uint16_t
buf_be16(const void *buf, int idx)
{
    const uint8_t *p = (const uint8_t *) buf;    
    return (p[idx + 1] | p[idx] << 8);
    945e:	1843      	adds	r3, r0, r1
    9460:	5c40      	ldrb	r0, [r0, r1]
    9462:	785b      	ldrb	r3, [r3, #1]
    9464:	0200      	lsls	r0, r0, #8
    9466:	4318      	orrs	r0, r3
}
    9468:	4770      	bx	lr

0000946a <_Z9buf_wbe16Pvit>:
void
buf_wbe16(void *buf, int idx, uint16_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    946a:	1841      	adds	r1, r0, r1
    *p++ = val >> 8;
    946c:	1213      	asrs	r3, r2, #8
    946e:	700b      	strb	r3, [r1, #0]
    *p = val & 0xFF;
    9470:	704a      	strb	r2, [r1, #1]
	
} // buf_wbe16
    9472:	4770      	bx	lr

00009474 <_Z9buf_wle16Pvit>:
void
buf_wle16(void *buf, int idx, uint16_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    9474:	1841      	adds	r1, r0, r1
    *p++ = val & 0xFF;
    9476:	700a      	strb	r2, [r1, #0]
    *p = val >> 8;
    9478:	1212      	asrs	r2, r2, #8
    947a:	704a      	strb	r2, [r1, #1]
}
    947c:	4770      	bx	lr

0000947e <_Z9buf_wbe32Pvim>:
void
buf_wbe32(void *buf, int idx, uint32_t val)
{
    uint8_t *p = (uint8_t *) buf;    

    p += idx;
    947e:	1841      	adds	r1, r0, r1
    *p++ = val >> 24;
    9480:	0e13      	lsrs	r3, r2, #24
    9482:	700b      	strb	r3, [r1, #0]
    *p++ = (val >> 16) & 0xFF;
    9484:	0c13      	lsrs	r3, r2, #16
    9486:	704b      	strb	r3, [r1, #1]
    *p++ = (val >> 8) & 0xFF;
    9488:	0a13      	lsrs	r3, r2, #8
    948a:	708b      	strb	r3, [r1, #2]
    *p = val & 0xFF;
    948c:	70ca      	strb	r2, [r1, #3]
}
    948e:	4770      	bx	lr

00009490 <_Z10crc16_initv>:

uint16_t
crc16_init(void)
{
    return CRC16_INITIAL;
}
    9490:	4800      	ldr	r0, [pc, #0]	; (9494 <_Z10crc16_initv+0x4>)
    9492:	4770      	bx	lr
    9494:	0000ffff 	.word	0x0000ffff

00009498 <_Z5crc16tPKvj>:

uint16_t
crc16(uint16_t crc, const  void *addr_v, unsigned int len)
{
    9498:	b530      	push	{r4, r5, lr}
    const uint8_t *addr = (const uint8_t *)addr_v;
    uint8_t ch;

    while (len--) {
        ch = *addr++;
        crc = (crc >> 8) ^ xmodem_crctable[(crc ^ ch) & 0xFF]; 
    949a:	25ff      	movs	r5, #255	; 0xff
    949c:	4c06      	ldr	r4, [pc, #24]	; (94b8 <_Z5crc16tPKvj+0x20>)
    949e:	188a      	adds	r2, r1, r2
    while (len--) {
    94a0:	4291      	cmp	r1, r2
    94a2:	d008      	beq.n	94b6 <_Z5crc16tPKvj+0x1e>
        crc = (crc >> 8) ^ xmodem_crctable[(crc ^ ch) & 0xFF]; 
    94a4:	780b      	ldrb	r3, [r1, #0]
    94a6:	3101      	adds	r1, #1
    94a8:	4043      	eors	r3, r0
    94aa:	402b      	ands	r3, r5
    94ac:	005b      	lsls	r3, r3, #1
    94ae:	5b1b      	ldrh	r3, [r3, r4]
    94b0:	1200      	asrs	r0, r0, #8
    94b2:	4058      	eors	r0, r3
    while (len--) {
    94b4:	e7f4      	b.n	94a0 <_Z5crc16tPKvj+0x8>

    }
    return crc;
}    
    94b6:	bd30      	pop	{r4, r5, pc}
    94b8:	00011d46 	.word	0x00011d46

000094bc <_Z14crc16_validatePKvj>:
/* len includes the 2 bytes of CRC at the end of the buffer 
 * return 0 for OK, nonzero for error
 */
int
crc16_validate(const void *addr_v, unsigned int len)
{
    94bc:	b510      	push	{r4, lr}
    94be:	000a      	movs	r2, r1
    return (crc16(CRC16_INITIAL, addr_v, len) != CRC16_FINAL);         
    94c0:	0001      	movs	r1, r0
    94c2:	4804      	ldr	r0, [pc, #16]	; (94d4 <_Z14crc16_validatePKvj+0x18>)
    94c4:	f7ff ffe8 	bl	9498 <_Z5crc16tPKvj>
    94c8:	4b03      	ldr	r3, [pc, #12]	; (94d8 <_Z14crc16_validatePKvj+0x1c>)
    94ca:	18c0      	adds	r0, r0, r3
    94cc:	1e43      	subs	r3, r0, #1
    94ce:	4198      	sbcs	r0, r3
}
    94d0:	bd10      	pop	{r4, pc}
    94d2:	46c0      	nop			; (mov r8, r8)
    94d4:	0000ffff 	.word	0x0000ffff
    94d8:	ffff0f48 	.word	0xffff0f48

000094dc <__aeabi_atexit>:
    94dc:	000b      	movs	r3, r1
    94de:	b510      	push	{r4, lr}
    94e0:	0001      	movs	r1, r0
    94e2:	0018      	movs	r0, r3
    94e4:	f002 fce2 	bl	beac <__cxa_atexit>
    94e8:	bd10      	pop	{r4, pc}
	...

000094ec <__gnu_thumb1_case_uqi>:
    94ec:	b402      	push	{r1}
    94ee:	4671      	mov	r1, lr
    94f0:	0849      	lsrs	r1, r1, #1
    94f2:	0049      	lsls	r1, r1, #1
    94f4:	5c09      	ldrb	r1, [r1, r0]
    94f6:	0049      	lsls	r1, r1, #1
    94f8:	448e      	add	lr, r1
    94fa:	bc02      	pop	{r1}
    94fc:	4770      	bx	lr
    94fe:	46c0      	nop			; (mov r8, r8)

00009500 <__udivsi3>:
    9500:	2200      	movs	r2, #0
    9502:	0843      	lsrs	r3, r0, #1
    9504:	428b      	cmp	r3, r1
    9506:	d374      	bcc.n	95f2 <__udivsi3+0xf2>
    9508:	0903      	lsrs	r3, r0, #4
    950a:	428b      	cmp	r3, r1
    950c:	d35f      	bcc.n	95ce <__udivsi3+0xce>
    950e:	0a03      	lsrs	r3, r0, #8
    9510:	428b      	cmp	r3, r1
    9512:	d344      	bcc.n	959e <__udivsi3+0x9e>
    9514:	0b03      	lsrs	r3, r0, #12
    9516:	428b      	cmp	r3, r1
    9518:	d328      	bcc.n	956c <__udivsi3+0x6c>
    951a:	0c03      	lsrs	r3, r0, #16
    951c:	428b      	cmp	r3, r1
    951e:	d30d      	bcc.n	953c <__udivsi3+0x3c>
    9520:	22ff      	movs	r2, #255	; 0xff
    9522:	0209      	lsls	r1, r1, #8
    9524:	ba12      	rev	r2, r2
    9526:	0c03      	lsrs	r3, r0, #16
    9528:	428b      	cmp	r3, r1
    952a:	d302      	bcc.n	9532 <__udivsi3+0x32>
    952c:	1212      	asrs	r2, r2, #8
    952e:	0209      	lsls	r1, r1, #8
    9530:	d065      	beq.n	95fe <__udivsi3+0xfe>
    9532:	0b03      	lsrs	r3, r0, #12
    9534:	428b      	cmp	r3, r1
    9536:	d319      	bcc.n	956c <__udivsi3+0x6c>
    9538:	e000      	b.n	953c <__udivsi3+0x3c>
    953a:	0a09      	lsrs	r1, r1, #8
    953c:	0bc3      	lsrs	r3, r0, #15
    953e:	428b      	cmp	r3, r1
    9540:	d301      	bcc.n	9546 <__udivsi3+0x46>
    9542:	03cb      	lsls	r3, r1, #15
    9544:	1ac0      	subs	r0, r0, r3
    9546:	4152      	adcs	r2, r2
    9548:	0b83      	lsrs	r3, r0, #14
    954a:	428b      	cmp	r3, r1
    954c:	d301      	bcc.n	9552 <__udivsi3+0x52>
    954e:	038b      	lsls	r3, r1, #14
    9550:	1ac0      	subs	r0, r0, r3
    9552:	4152      	adcs	r2, r2
    9554:	0b43      	lsrs	r3, r0, #13
    9556:	428b      	cmp	r3, r1
    9558:	d301      	bcc.n	955e <__udivsi3+0x5e>
    955a:	034b      	lsls	r3, r1, #13
    955c:	1ac0      	subs	r0, r0, r3
    955e:	4152      	adcs	r2, r2
    9560:	0b03      	lsrs	r3, r0, #12
    9562:	428b      	cmp	r3, r1
    9564:	d301      	bcc.n	956a <__udivsi3+0x6a>
    9566:	030b      	lsls	r3, r1, #12
    9568:	1ac0      	subs	r0, r0, r3
    956a:	4152      	adcs	r2, r2
    956c:	0ac3      	lsrs	r3, r0, #11
    956e:	428b      	cmp	r3, r1
    9570:	d301      	bcc.n	9576 <__udivsi3+0x76>
    9572:	02cb      	lsls	r3, r1, #11
    9574:	1ac0      	subs	r0, r0, r3
    9576:	4152      	adcs	r2, r2
    9578:	0a83      	lsrs	r3, r0, #10
    957a:	428b      	cmp	r3, r1
    957c:	d301      	bcc.n	9582 <__udivsi3+0x82>
    957e:	028b      	lsls	r3, r1, #10
    9580:	1ac0      	subs	r0, r0, r3
    9582:	4152      	adcs	r2, r2
    9584:	0a43      	lsrs	r3, r0, #9
    9586:	428b      	cmp	r3, r1
    9588:	d301      	bcc.n	958e <__udivsi3+0x8e>
    958a:	024b      	lsls	r3, r1, #9
    958c:	1ac0      	subs	r0, r0, r3
    958e:	4152      	adcs	r2, r2
    9590:	0a03      	lsrs	r3, r0, #8
    9592:	428b      	cmp	r3, r1
    9594:	d301      	bcc.n	959a <__udivsi3+0x9a>
    9596:	020b      	lsls	r3, r1, #8
    9598:	1ac0      	subs	r0, r0, r3
    959a:	4152      	adcs	r2, r2
    959c:	d2cd      	bcs.n	953a <__udivsi3+0x3a>
    959e:	09c3      	lsrs	r3, r0, #7
    95a0:	428b      	cmp	r3, r1
    95a2:	d301      	bcc.n	95a8 <__udivsi3+0xa8>
    95a4:	01cb      	lsls	r3, r1, #7
    95a6:	1ac0      	subs	r0, r0, r3
    95a8:	4152      	adcs	r2, r2
    95aa:	0983      	lsrs	r3, r0, #6
    95ac:	428b      	cmp	r3, r1
    95ae:	d301      	bcc.n	95b4 <__udivsi3+0xb4>
    95b0:	018b      	lsls	r3, r1, #6
    95b2:	1ac0      	subs	r0, r0, r3
    95b4:	4152      	adcs	r2, r2
    95b6:	0943      	lsrs	r3, r0, #5
    95b8:	428b      	cmp	r3, r1
    95ba:	d301      	bcc.n	95c0 <__udivsi3+0xc0>
    95bc:	014b      	lsls	r3, r1, #5
    95be:	1ac0      	subs	r0, r0, r3
    95c0:	4152      	adcs	r2, r2
    95c2:	0903      	lsrs	r3, r0, #4
    95c4:	428b      	cmp	r3, r1
    95c6:	d301      	bcc.n	95cc <__udivsi3+0xcc>
    95c8:	010b      	lsls	r3, r1, #4
    95ca:	1ac0      	subs	r0, r0, r3
    95cc:	4152      	adcs	r2, r2
    95ce:	08c3      	lsrs	r3, r0, #3
    95d0:	428b      	cmp	r3, r1
    95d2:	d301      	bcc.n	95d8 <__udivsi3+0xd8>
    95d4:	00cb      	lsls	r3, r1, #3
    95d6:	1ac0      	subs	r0, r0, r3
    95d8:	4152      	adcs	r2, r2
    95da:	0883      	lsrs	r3, r0, #2
    95dc:	428b      	cmp	r3, r1
    95de:	d301      	bcc.n	95e4 <__udivsi3+0xe4>
    95e0:	008b      	lsls	r3, r1, #2
    95e2:	1ac0      	subs	r0, r0, r3
    95e4:	4152      	adcs	r2, r2
    95e6:	0843      	lsrs	r3, r0, #1
    95e8:	428b      	cmp	r3, r1
    95ea:	d301      	bcc.n	95f0 <__udivsi3+0xf0>
    95ec:	004b      	lsls	r3, r1, #1
    95ee:	1ac0      	subs	r0, r0, r3
    95f0:	4152      	adcs	r2, r2
    95f2:	1a41      	subs	r1, r0, r1
    95f4:	d200      	bcs.n	95f8 <__udivsi3+0xf8>
    95f6:	4601      	mov	r1, r0
    95f8:	4152      	adcs	r2, r2
    95fa:	4610      	mov	r0, r2
    95fc:	4770      	bx	lr
    95fe:	e7ff      	b.n	9600 <__udivsi3+0x100>
    9600:	b501      	push	{r0, lr}
    9602:	2000      	movs	r0, #0
    9604:	f000 f8f0 	bl	97e8 <__aeabi_idiv0>
    9608:	bd02      	pop	{r1, pc}
    960a:	46c0      	nop			; (mov r8, r8)

0000960c <__aeabi_uidivmod>:
    960c:	2900      	cmp	r1, #0
    960e:	d0f7      	beq.n	9600 <__udivsi3+0x100>
    9610:	e776      	b.n	9500 <__udivsi3>
    9612:	4770      	bx	lr

00009614 <__divsi3>:
    9614:	4603      	mov	r3, r0
    9616:	430b      	orrs	r3, r1
    9618:	d47f      	bmi.n	971a <__divsi3+0x106>
    961a:	2200      	movs	r2, #0
    961c:	0843      	lsrs	r3, r0, #1
    961e:	428b      	cmp	r3, r1
    9620:	d374      	bcc.n	970c <__divsi3+0xf8>
    9622:	0903      	lsrs	r3, r0, #4
    9624:	428b      	cmp	r3, r1
    9626:	d35f      	bcc.n	96e8 <__divsi3+0xd4>
    9628:	0a03      	lsrs	r3, r0, #8
    962a:	428b      	cmp	r3, r1
    962c:	d344      	bcc.n	96b8 <__divsi3+0xa4>
    962e:	0b03      	lsrs	r3, r0, #12
    9630:	428b      	cmp	r3, r1
    9632:	d328      	bcc.n	9686 <__divsi3+0x72>
    9634:	0c03      	lsrs	r3, r0, #16
    9636:	428b      	cmp	r3, r1
    9638:	d30d      	bcc.n	9656 <__divsi3+0x42>
    963a:	22ff      	movs	r2, #255	; 0xff
    963c:	0209      	lsls	r1, r1, #8
    963e:	ba12      	rev	r2, r2
    9640:	0c03      	lsrs	r3, r0, #16
    9642:	428b      	cmp	r3, r1
    9644:	d302      	bcc.n	964c <__divsi3+0x38>
    9646:	1212      	asrs	r2, r2, #8
    9648:	0209      	lsls	r1, r1, #8
    964a:	d065      	beq.n	9718 <__divsi3+0x104>
    964c:	0b03      	lsrs	r3, r0, #12
    964e:	428b      	cmp	r3, r1
    9650:	d319      	bcc.n	9686 <__divsi3+0x72>
    9652:	e000      	b.n	9656 <__divsi3+0x42>
    9654:	0a09      	lsrs	r1, r1, #8
    9656:	0bc3      	lsrs	r3, r0, #15
    9658:	428b      	cmp	r3, r1
    965a:	d301      	bcc.n	9660 <__divsi3+0x4c>
    965c:	03cb      	lsls	r3, r1, #15
    965e:	1ac0      	subs	r0, r0, r3
    9660:	4152      	adcs	r2, r2
    9662:	0b83      	lsrs	r3, r0, #14
    9664:	428b      	cmp	r3, r1
    9666:	d301      	bcc.n	966c <__divsi3+0x58>
    9668:	038b      	lsls	r3, r1, #14
    966a:	1ac0      	subs	r0, r0, r3
    966c:	4152      	adcs	r2, r2
    966e:	0b43      	lsrs	r3, r0, #13
    9670:	428b      	cmp	r3, r1
    9672:	d301      	bcc.n	9678 <__divsi3+0x64>
    9674:	034b      	lsls	r3, r1, #13
    9676:	1ac0      	subs	r0, r0, r3
    9678:	4152      	adcs	r2, r2
    967a:	0b03      	lsrs	r3, r0, #12
    967c:	428b      	cmp	r3, r1
    967e:	d301      	bcc.n	9684 <__divsi3+0x70>
    9680:	030b      	lsls	r3, r1, #12
    9682:	1ac0      	subs	r0, r0, r3
    9684:	4152      	adcs	r2, r2
    9686:	0ac3      	lsrs	r3, r0, #11
    9688:	428b      	cmp	r3, r1
    968a:	d301      	bcc.n	9690 <__divsi3+0x7c>
    968c:	02cb      	lsls	r3, r1, #11
    968e:	1ac0      	subs	r0, r0, r3
    9690:	4152      	adcs	r2, r2
    9692:	0a83      	lsrs	r3, r0, #10
    9694:	428b      	cmp	r3, r1
    9696:	d301      	bcc.n	969c <__divsi3+0x88>
    9698:	028b      	lsls	r3, r1, #10
    969a:	1ac0      	subs	r0, r0, r3
    969c:	4152      	adcs	r2, r2
    969e:	0a43      	lsrs	r3, r0, #9
    96a0:	428b      	cmp	r3, r1
    96a2:	d301      	bcc.n	96a8 <__divsi3+0x94>
    96a4:	024b      	lsls	r3, r1, #9
    96a6:	1ac0      	subs	r0, r0, r3
    96a8:	4152      	adcs	r2, r2
    96aa:	0a03      	lsrs	r3, r0, #8
    96ac:	428b      	cmp	r3, r1
    96ae:	d301      	bcc.n	96b4 <__divsi3+0xa0>
    96b0:	020b      	lsls	r3, r1, #8
    96b2:	1ac0      	subs	r0, r0, r3
    96b4:	4152      	adcs	r2, r2
    96b6:	d2cd      	bcs.n	9654 <__divsi3+0x40>
    96b8:	09c3      	lsrs	r3, r0, #7
    96ba:	428b      	cmp	r3, r1
    96bc:	d301      	bcc.n	96c2 <__divsi3+0xae>
    96be:	01cb      	lsls	r3, r1, #7
    96c0:	1ac0      	subs	r0, r0, r3
    96c2:	4152      	adcs	r2, r2
    96c4:	0983      	lsrs	r3, r0, #6
    96c6:	428b      	cmp	r3, r1
    96c8:	d301      	bcc.n	96ce <__divsi3+0xba>
    96ca:	018b      	lsls	r3, r1, #6
    96cc:	1ac0      	subs	r0, r0, r3
    96ce:	4152      	adcs	r2, r2
    96d0:	0943      	lsrs	r3, r0, #5
    96d2:	428b      	cmp	r3, r1
    96d4:	d301      	bcc.n	96da <__divsi3+0xc6>
    96d6:	014b      	lsls	r3, r1, #5
    96d8:	1ac0      	subs	r0, r0, r3
    96da:	4152      	adcs	r2, r2
    96dc:	0903      	lsrs	r3, r0, #4
    96de:	428b      	cmp	r3, r1
    96e0:	d301      	bcc.n	96e6 <__divsi3+0xd2>
    96e2:	010b      	lsls	r3, r1, #4
    96e4:	1ac0      	subs	r0, r0, r3
    96e6:	4152      	adcs	r2, r2
    96e8:	08c3      	lsrs	r3, r0, #3
    96ea:	428b      	cmp	r3, r1
    96ec:	d301      	bcc.n	96f2 <__divsi3+0xde>
    96ee:	00cb      	lsls	r3, r1, #3
    96f0:	1ac0      	subs	r0, r0, r3
    96f2:	4152      	adcs	r2, r2
    96f4:	0883      	lsrs	r3, r0, #2
    96f6:	428b      	cmp	r3, r1
    96f8:	d301      	bcc.n	96fe <__divsi3+0xea>
    96fa:	008b      	lsls	r3, r1, #2
    96fc:	1ac0      	subs	r0, r0, r3
    96fe:	4152      	adcs	r2, r2
    9700:	0843      	lsrs	r3, r0, #1
    9702:	428b      	cmp	r3, r1
    9704:	d301      	bcc.n	970a <__divsi3+0xf6>
    9706:	004b      	lsls	r3, r1, #1
    9708:	1ac0      	subs	r0, r0, r3
    970a:	4152      	adcs	r2, r2
    970c:	1a41      	subs	r1, r0, r1
    970e:	d200      	bcs.n	9712 <__divsi3+0xfe>
    9710:	4601      	mov	r1, r0
    9712:	4152      	adcs	r2, r2
    9714:	4610      	mov	r0, r2
    9716:	4770      	bx	lr
    9718:	e05d      	b.n	97d6 <__divsi3+0x1c2>
    971a:	0fca      	lsrs	r2, r1, #31
    971c:	d000      	beq.n	9720 <__divsi3+0x10c>
    971e:	4249      	negs	r1, r1
    9720:	1003      	asrs	r3, r0, #32
    9722:	d300      	bcc.n	9726 <__divsi3+0x112>
    9724:	4240      	negs	r0, r0
    9726:	4053      	eors	r3, r2
    9728:	2200      	movs	r2, #0
    972a:	469c      	mov	ip, r3
    972c:	0903      	lsrs	r3, r0, #4
    972e:	428b      	cmp	r3, r1
    9730:	d32d      	bcc.n	978e <__divsi3+0x17a>
    9732:	0a03      	lsrs	r3, r0, #8
    9734:	428b      	cmp	r3, r1
    9736:	d312      	bcc.n	975e <__divsi3+0x14a>
    9738:	22fc      	movs	r2, #252	; 0xfc
    973a:	0189      	lsls	r1, r1, #6
    973c:	ba12      	rev	r2, r2
    973e:	0a03      	lsrs	r3, r0, #8
    9740:	428b      	cmp	r3, r1
    9742:	d30c      	bcc.n	975e <__divsi3+0x14a>
    9744:	0189      	lsls	r1, r1, #6
    9746:	1192      	asrs	r2, r2, #6
    9748:	428b      	cmp	r3, r1
    974a:	d308      	bcc.n	975e <__divsi3+0x14a>
    974c:	0189      	lsls	r1, r1, #6
    974e:	1192      	asrs	r2, r2, #6
    9750:	428b      	cmp	r3, r1
    9752:	d304      	bcc.n	975e <__divsi3+0x14a>
    9754:	0189      	lsls	r1, r1, #6
    9756:	d03a      	beq.n	97ce <__divsi3+0x1ba>
    9758:	1192      	asrs	r2, r2, #6
    975a:	e000      	b.n	975e <__divsi3+0x14a>
    975c:	0989      	lsrs	r1, r1, #6
    975e:	09c3      	lsrs	r3, r0, #7
    9760:	428b      	cmp	r3, r1
    9762:	d301      	bcc.n	9768 <__divsi3+0x154>
    9764:	01cb      	lsls	r3, r1, #7
    9766:	1ac0      	subs	r0, r0, r3
    9768:	4152      	adcs	r2, r2
    976a:	0983      	lsrs	r3, r0, #6
    976c:	428b      	cmp	r3, r1
    976e:	d301      	bcc.n	9774 <__divsi3+0x160>
    9770:	018b      	lsls	r3, r1, #6
    9772:	1ac0      	subs	r0, r0, r3
    9774:	4152      	adcs	r2, r2
    9776:	0943      	lsrs	r3, r0, #5
    9778:	428b      	cmp	r3, r1
    977a:	d301      	bcc.n	9780 <__divsi3+0x16c>
    977c:	014b      	lsls	r3, r1, #5
    977e:	1ac0      	subs	r0, r0, r3
    9780:	4152      	adcs	r2, r2
    9782:	0903      	lsrs	r3, r0, #4
    9784:	428b      	cmp	r3, r1
    9786:	d301      	bcc.n	978c <__divsi3+0x178>
    9788:	010b      	lsls	r3, r1, #4
    978a:	1ac0      	subs	r0, r0, r3
    978c:	4152      	adcs	r2, r2
    978e:	08c3      	lsrs	r3, r0, #3
    9790:	428b      	cmp	r3, r1
    9792:	d301      	bcc.n	9798 <__divsi3+0x184>
    9794:	00cb      	lsls	r3, r1, #3
    9796:	1ac0      	subs	r0, r0, r3
    9798:	4152      	adcs	r2, r2
    979a:	0883      	lsrs	r3, r0, #2
    979c:	428b      	cmp	r3, r1
    979e:	d301      	bcc.n	97a4 <__divsi3+0x190>
    97a0:	008b      	lsls	r3, r1, #2
    97a2:	1ac0      	subs	r0, r0, r3
    97a4:	4152      	adcs	r2, r2
    97a6:	d2d9      	bcs.n	975c <__divsi3+0x148>
    97a8:	0843      	lsrs	r3, r0, #1
    97aa:	428b      	cmp	r3, r1
    97ac:	d301      	bcc.n	97b2 <__divsi3+0x19e>
    97ae:	004b      	lsls	r3, r1, #1
    97b0:	1ac0      	subs	r0, r0, r3
    97b2:	4152      	adcs	r2, r2
    97b4:	1a41      	subs	r1, r0, r1
    97b6:	d200      	bcs.n	97ba <__divsi3+0x1a6>
    97b8:	4601      	mov	r1, r0
    97ba:	4663      	mov	r3, ip
    97bc:	4152      	adcs	r2, r2
    97be:	105b      	asrs	r3, r3, #1
    97c0:	4610      	mov	r0, r2
    97c2:	d301      	bcc.n	97c8 <__divsi3+0x1b4>
    97c4:	4240      	negs	r0, r0
    97c6:	2b00      	cmp	r3, #0
    97c8:	d500      	bpl.n	97cc <__divsi3+0x1b8>
    97ca:	4249      	negs	r1, r1
    97cc:	4770      	bx	lr
    97ce:	4663      	mov	r3, ip
    97d0:	105b      	asrs	r3, r3, #1
    97d2:	d300      	bcc.n	97d6 <__divsi3+0x1c2>
    97d4:	4240      	negs	r0, r0
    97d6:	b501      	push	{r0, lr}
    97d8:	2000      	movs	r0, #0
    97da:	f000 f805 	bl	97e8 <__aeabi_idiv0>
    97de:	bd02      	pop	{r1, pc}

000097e0 <__aeabi_idivmod>:
    97e0:	2900      	cmp	r1, #0
    97e2:	d0f8      	beq.n	97d6 <__divsi3+0x1c2>
    97e4:	e716      	b.n	9614 <__divsi3>
    97e6:	4770      	bx	lr

000097e8 <__aeabi_idiv0>:
    97e8:	4770      	bx	lr
    97ea:	46c0      	nop			; (mov r8, r8)

000097ec <__aeabi_cdrcmple>:
    97ec:	4684      	mov	ip, r0
    97ee:	1c10      	adds	r0, r2, #0
    97f0:	4662      	mov	r2, ip
    97f2:	468c      	mov	ip, r1
    97f4:	1c19      	adds	r1, r3, #0
    97f6:	4663      	mov	r3, ip
    97f8:	e000      	b.n	97fc <__aeabi_cdcmpeq>
    97fa:	46c0      	nop			; (mov r8, r8)

000097fc <__aeabi_cdcmpeq>:
    97fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    97fe:	f001 fb77 	bl	aef0 <__ledf2>
    9802:	2800      	cmp	r0, #0
    9804:	d401      	bmi.n	980a <__aeabi_cdcmpeq+0xe>
    9806:	2100      	movs	r1, #0
    9808:	42c8      	cmn	r0, r1
    980a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0000980c <__aeabi_dcmpeq>:
    980c:	b510      	push	{r4, lr}
    980e:	f001 fad1 	bl	adb4 <__eqdf2>
    9812:	4240      	negs	r0, r0
    9814:	3001      	adds	r0, #1
    9816:	bd10      	pop	{r4, pc}

00009818 <__aeabi_dcmplt>:
    9818:	b510      	push	{r4, lr}
    981a:	f001 fb69 	bl	aef0 <__ledf2>
    981e:	2800      	cmp	r0, #0
    9820:	db01      	blt.n	9826 <__aeabi_dcmplt+0xe>
    9822:	2000      	movs	r0, #0
    9824:	bd10      	pop	{r4, pc}
    9826:	2001      	movs	r0, #1
    9828:	bd10      	pop	{r4, pc}
    982a:	46c0      	nop			; (mov r8, r8)

0000982c <__aeabi_dcmple>:
    982c:	b510      	push	{r4, lr}
    982e:	f001 fb5f 	bl	aef0 <__ledf2>
    9832:	2800      	cmp	r0, #0
    9834:	dd01      	ble.n	983a <__aeabi_dcmple+0xe>
    9836:	2000      	movs	r0, #0
    9838:	bd10      	pop	{r4, pc}
    983a:	2001      	movs	r0, #1
    983c:	bd10      	pop	{r4, pc}
    983e:	46c0      	nop			; (mov r8, r8)

00009840 <__aeabi_dcmpgt>:
    9840:	b510      	push	{r4, lr}
    9842:	f001 faf1 	bl	ae28 <__gedf2>
    9846:	2800      	cmp	r0, #0
    9848:	dc01      	bgt.n	984e <__aeabi_dcmpgt+0xe>
    984a:	2000      	movs	r0, #0
    984c:	bd10      	pop	{r4, pc}
    984e:	2001      	movs	r0, #1
    9850:	bd10      	pop	{r4, pc}
    9852:	46c0      	nop			; (mov r8, r8)

00009854 <__aeabi_dcmpge>:
    9854:	b510      	push	{r4, lr}
    9856:	f001 fae7 	bl	ae28 <__gedf2>
    985a:	2800      	cmp	r0, #0
    985c:	da01      	bge.n	9862 <__aeabi_dcmpge+0xe>
    985e:	2000      	movs	r0, #0
    9860:	bd10      	pop	{r4, pc}
    9862:	2001      	movs	r0, #1
    9864:	bd10      	pop	{r4, pc}
    9866:	46c0      	nop			; (mov r8, r8)

00009868 <__aeabi_cfrcmple>:
    9868:	4684      	mov	ip, r0
    986a:	1c08      	adds	r0, r1, #0
    986c:	4661      	mov	r1, ip
    986e:	e7ff      	b.n	9870 <__aeabi_cfcmpeq>

00009870 <__aeabi_cfcmpeq>:
    9870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9872:	f000 fa2b 	bl	9ccc <__lesf2>
    9876:	2800      	cmp	r0, #0
    9878:	d401      	bmi.n	987e <__aeabi_cfcmpeq+0xe>
    987a:	2100      	movs	r1, #0
    987c:	42c8      	cmn	r0, r1
    987e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00009880 <__aeabi_fcmpeq>:
    9880:	b510      	push	{r4, lr}
    9882:	f000 f9bd 	bl	9c00 <__eqsf2>
    9886:	4240      	negs	r0, r0
    9888:	3001      	adds	r0, #1
    988a:	bd10      	pop	{r4, pc}

0000988c <__aeabi_fcmplt>:
    988c:	b510      	push	{r4, lr}
    988e:	f000 fa1d 	bl	9ccc <__lesf2>
    9892:	2800      	cmp	r0, #0
    9894:	db01      	blt.n	989a <__aeabi_fcmplt+0xe>
    9896:	2000      	movs	r0, #0
    9898:	bd10      	pop	{r4, pc}
    989a:	2001      	movs	r0, #1
    989c:	bd10      	pop	{r4, pc}
    989e:	46c0      	nop			; (mov r8, r8)

000098a0 <__aeabi_fcmple>:
    98a0:	b510      	push	{r4, lr}
    98a2:	f000 fa13 	bl	9ccc <__lesf2>
    98a6:	2800      	cmp	r0, #0
    98a8:	dd01      	ble.n	98ae <__aeabi_fcmple+0xe>
    98aa:	2000      	movs	r0, #0
    98ac:	bd10      	pop	{r4, pc}
    98ae:	2001      	movs	r0, #1
    98b0:	bd10      	pop	{r4, pc}
    98b2:	46c0      	nop			; (mov r8, r8)

000098b4 <__aeabi_fcmpgt>:
    98b4:	b510      	push	{r4, lr}
    98b6:	f000 f9c9 	bl	9c4c <__gesf2>
    98ba:	2800      	cmp	r0, #0
    98bc:	dc01      	bgt.n	98c2 <__aeabi_fcmpgt+0xe>
    98be:	2000      	movs	r0, #0
    98c0:	bd10      	pop	{r4, pc}
    98c2:	2001      	movs	r0, #1
    98c4:	bd10      	pop	{r4, pc}
    98c6:	46c0      	nop			; (mov r8, r8)

000098c8 <__aeabi_fcmpge>:
    98c8:	b510      	push	{r4, lr}
    98ca:	f000 f9bf 	bl	9c4c <__gesf2>
    98ce:	2800      	cmp	r0, #0
    98d0:	da01      	bge.n	98d6 <__aeabi_fcmpge+0xe>
    98d2:	2000      	movs	r0, #0
    98d4:	bd10      	pop	{r4, pc}
    98d6:	2001      	movs	r0, #1
    98d8:	bd10      	pop	{r4, pc}
    98da:	46c0      	nop			; (mov r8, r8)

000098dc <__aeabi_fadd>:
    98dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    98de:	46c6      	mov	lr, r8
    98e0:	024e      	lsls	r6, r1, #9
    98e2:	0247      	lsls	r7, r0, #9
    98e4:	0a76      	lsrs	r6, r6, #9
    98e6:	0a7b      	lsrs	r3, r7, #9
    98e8:	0044      	lsls	r4, r0, #1
    98ea:	0fc5      	lsrs	r5, r0, #31
    98ec:	00f7      	lsls	r7, r6, #3
    98ee:	0048      	lsls	r0, r1, #1
    98f0:	4698      	mov	r8, r3
    98f2:	b500      	push	{lr}
    98f4:	0e24      	lsrs	r4, r4, #24
    98f6:	002a      	movs	r2, r5
    98f8:	00db      	lsls	r3, r3, #3
    98fa:	0e00      	lsrs	r0, r0, #24
    98fc:	0fc9      	lsrs	r1, r1, #31
    98fe:	46bc      	mov	ip, r7
    9900:	428d      	cmp	r5, r1
    9902:	d067      	beq.n	99d4 <__aeabi_fadd+0xf8>
    9904:	1a22      	subs	r2, r4, r0
    9906:	2a00      	cmp	r2, #0
    9908:	dc00      	bgt.n	990c <__aeabi_fadd+0x30>
    990a:	e0a5      	b.n	9a58 <__aeabi_fadd+0x17c>
    990c:	2800      	cmp	r0, #0
    990e:	d13a      	bne.n	9986 <__aeabi_fadd+0xaa>
    9910:	2f00      	cmp	r7, #0
    9912:	d100      	bne.n	9916 <__aeabi_fadd+0x3a>
    9914:	e093      	b.n	9a3e <__aeabi_fadd+0x162>
    9916:	1e51      	subs	r1, r2, #1
    9918:	2900      	cmp	r1, #0
    991a:	d000      	beq.n	991e <__aeabi_fadd+0x42>
    991c:	e0bc      	b.n	9a98 <__aeabi_fadd+0x1bc>
    991e:	2401      	movs	r4, #1
    9920:	1bdb      	subs	r3, r3, r7
    9922:	015a      	lsls	r2, r3, #5
    9924:	d546      	bpl.n	99b4 <__aeabi_fadd+0xd8>
    9926:	019b      	lsls	r3, r3, #6
    9928:	099e      	lsrs	r6, r3, #6
    992a:	0030      	movs	r0, r6
    992c:	f002 fa82 	bl	be34 <__clzsi2>
    9930:	3805      	subs	r0, #5
    9932:	4086      	lsls	r6, r0
    9934:	4284      	cmp	r4, r0
    9936:	dd00      	ble.n	993a <__aeabi_fadd+0x5e>
    9938:	e09d      	b.n	9a76 <__aeabi_fadd+0x19a>
    993a:	1b04      	subs	r4, r0, r4
    993c:	0032      	movs	r2, r6
    993e:	2020      	movs	r0, #32
    9940:	3401      	adds	r4, #1
    9942:	40e2      	lsrs	r2, r4
    9944:	1b04      	subs	r4, r0, r4
    9946:	40a6      	lsls	r6, r4
    9948:	0033      	movs	r3, r6
    994a:	1e5e      	subs	r6, r3, #1
    994c:	41b3      	sbcs	r3, r6
    994e:	2400      	movs	r4, #0
    9950:	4313      	orrs	r3, r2
    9952:	075a      	lsls	r2, r3, #29
    9954:	d004      	beq.n	9960 <__aeabi_fadd+0x84>
    9956:	220f      	movs	r2, #15
    9958:	401a      	ands	r2, r3
    995a:	2a04      	cmp	r2, #4
    995c:	d000      	beq.n	9960 <__aeabi_fadd+0x84>
    995e:	3304      	adds	r3, #4
    9960:	015a      	lsls	r2, r3, #5
    9962:	d529      	bpl.n	99b8 <__aeabi_fadd+0xdc>
    9964:	3401      	adds	r4, #1
    9966:	2cff      	cmp	r4, #255	; 0xff
    9968:	d100      	bne.n	996c <__aeabi_fadd+0x90>
    996a:	e081      	b.n	9a70 <__aeabi_fadd+0x194>
    996c:	002a      	movs	r2, r5
    996e:	019b      	lsls	r3, r3, #6
    9970:	0a5b      	lsrs	r3, r3, #9
    9972:	b2e4      	uxtb	r4, r4
    9974:	025b      	lsls	r3, r3, #9
    9976:	05e4      	lsls	r4, r4, #23
    9978:	0a58      	lsrs	r0, r3, #9
    997a:	07d2      	lsls	r2, r2, #31
    997c:	4320      	orrs	r0, r4
    997e:	4310      	orrs	r0, r2
    9980:	bc04      	pop	{r2}
    9982:	4690      	mov	r8, r2
    9984:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9986:	2cff      	cmp	r4, #255	; 0xff
    9988:	d0e3      	beq.n	9952 <__aeabi_fadd+0x76>
    998a:	2180      	movs	r1, #128	; 0x80
    998c:	0038      	movs	r0, r7
    998e:	04c9      	lsls	r1, r1, #19
    9990:	4308      	orrs	r0, r1
    9992:	4684      	mov	ip, r0
    9994:	2a1b      	cmp	r2, #27
    9996:	dd00      	ble.n	999a <__aeabi_fadd+0xbe>
    9998:	e082      	b.n	9aa0 <__aeabi_fadd+0x1c4>
    999a:	2020      	movs	r0, #32
    999c:	4661      	mov	r1, ip
    999e:	40d1      	lsrs	r1, r2
    99a0:	1a82      	subs	r2, r0, r2
    99a2:	4660      	mov	r0, ip
    99a4:	4090      	lsls	r0, r2
    99a6:	0002      	movs	r2, r0
    99a8:	1e50      	subs	r0, r2, #1
    99aa:	4182      	sbcs	r2, r0
    99ac:	430a      	orrs	r2, r1
    99ae:	1a9b      	subs	r3, r3, r2
    99b0:	015a      	lsls	r2, r3, #5
    99b2:	d4b8      	bmi.n	9926 <__aeabi_fadd+0x4a>
    99b4:	075a      	lsls	r2, r3, #29
    99b6:	d1ce      	bne.n	9956 <__aeabi_fadd+0x7a>
    99b8:	08de      	lsrs	r6, r3, #3
    99ba:	002a      	movs	r2, r5
    99bc:	2cff      	cmp	r4, #255	; 0xff
    99be:	d13a      	bne.n	9a36 <__aeabi_fadd+0x15a>
    99c0:	2e00      	cmp	r6, #0
    99c2:	d100      	bne.n	99c6 <__aeabi_fadd+0xea>
    99c4:	e0ae      	b.n	9b24 <__aeabi_fadd+0x248>
    99c6:	2380      	movs	r3, #128	; 0x80
    99c8:	03db      	lsls	r3, r3, #15
    99ca:	4333      	orrs	r3, r6
    99cc:	025b      	lsls	r3, r3, #9
    99ce:	0a5b      	lsrs	r3, r3, #9
    99d0:	24ff      	movs	r4, #255	; 0xff
    99d2:	e7cf      	b.n	9974 <__aeabi_fadd+0x98>
    99d4:	1a21      	subs	r1, r4, r0
    99d6:	2900      	cmp	r1, #0
    99d8:	dd52      	ble.n	9a80 <__aeabi_fadd+0x1a4>
    99da:	2800      	cmp	r0, #0
    99dc:	d031      	beq.n	9a42 <__aeabi_fadd+0x166>
    99de:	2cff      	cmp	r4, #255	; 0xff
    99e0:	d0b7      	beq.n	9952 <__aeabi_fadd+0x76>
    99e2:	2080      	movs	r0, #128	; 0x80
    99e4:	003e      	movs	r6, r7
    99e6:	04c0      	lsls	r0, r0, #19
    99e8:	4306      	orrs	r6, r0
    99ea:	46b4      	mov	ip, r6
    99ec:	291b      	cmp	r1, #27
    99ee:	dd00      	ble.n	99f2 <__aeabi_fadd+0x116>
    99f0:	e0aa      	b.n	9b48 <__aeabi_fadd+0x26c>
    99f2:	2620      	movs	r6, #32
    99f4:	4660      	mov	r0, ip
    99f6:	40c8      	lsrs	r0, r1
    99f8:	1a71      	subs	r1, r6, r1
    99fa:	4666      	mov	r6, ip
    99fc:	408e      	lsls	r6, r1
    99fe:	0031      	movs	r1, r6
    9a00:	1e4e      	subs	r6, r1, #1
    9a02:	41b1      	sbcs	r1, r6
    9a04:	4301      	orrs	r1, r0
    9a06:	185b      	adds	r3, r3, r1
    9a08:	0159      	lsls	r1, r3, #5
    9a0a:	d5d3      	bpl.n	99b4 <__aeabi_fadd+0xd8>
    9a0c:	3401      	adds	r4, #1
    9a0e:	2cff      	cmp	r4, #255	; 0xff
    9a10:	d100      	bne.n	9a14 <__aeabi_fadd+0x138>
    9a12:	e087      	b.n	9b24 <__aeabi_fadd+0x248>
    9a14:	2201      	movs	r2, #1
    9a16:	4978      	ldr	r1, [pc, #480]	; (9bf8 <__aeabi_fadd+0x31c>)
    9a18:	401a      	ands	r2, r3
    9a1a:	085b      	lsrs	r3, r3, #1
    9a1c:	400b      	ands	r3, r1
    9a1e:	4313      	orrs	r3, r2
    9a20:	e797      	b.n	9952 <__aeabi_fadd+0x76>
    9a22:	2c00      	cmp	r4, #0
    9a24:	d000      	beq.n	9a28 <__aeabi_fadd+0x14c>
    9a26:	e0a7      	b.n	9b78 <__aeabi_fadd+0x29c>
    9a28:	2b00      	cmp	r3, #0
    9a2a:	d000      	beq.n	9a2e <__aeabi_fadd+0x152>
    9a2c:	e0b6      	b.n	9b9c <__aeabi_fadd+0x2c0>
    9a2e:	1e3b      	subs	r3, r7, #0
    9a30:	d162      	bne.n	9af8 <__aeabi_fadd+0x21c>
    9a32:	2600      	movs	r6, #0
    9a34:	2200      	movs	r2, #0
    9a36:	0273      	lsls	r3, r6, #9
    9a38:	0a5b      	lsrs	r3, r3, #9
    9a3a:	b2e4      	uxtb	r4, r4
    9a3c:	e79a      	b.n	9974 <__aeabi_fadd+0x98>
    9a3e:	0014      	movs	r4, r2
    9a40:	e787      	b.n	9952 <__aeabi_fadd+0x76>
    9a42:	2f00      	cmp	r7, #0
    9a44:	d04d      	beq.n	9ae2 <__aeabi_fadd+0x206>
    9a46:	1e48      	subs	r0, r1, #1
    9a48:	2800      	cmp	r0, #0
    9a4a:	d157      	bne.n	9afc <__aeabi_fadd+0x220>
    9a4c:	4463      	add	r3, ip
    9a4e:	2401      	movs	r4, #1
    9a50:	015a      	lsls	r2, r3, #5
    9a52:	d5af      	bpl.n	99b4 <__aeabi_fadd+0xd8>
    9a54:	2402      	movs	r4, #2
    9a56:	e7dd      	b.n	9a14 <__aeabi_fadd+0x138>
    9a58:	2a00      	cmp	r2, #0
    9a5a:	d124      	bne.n	9aa6 <__aeabi_fadd+0x1ca>
    9a5c:	1c62      	adds	r2, r4, #1
    9a5e:	b2d2      	uxtb	r2, r2
    9a60:	2a01      	cmp	r2, #1
    9a62:	ddde      	ble.n	9a22 <__aeabi_fadd+0x146>
    9a64:	1bde      	subs	r6, r3, r7
    9a66:	0172      	lsls	r2, r6, #5
    9a68:	d535      	bpl.n	9ad6 <__aeabi_fadd+0x1fa>
    9a6a:	1afe      	subs	r6, r7, r3
    9a6c:	000d      	movs	r5, r1
    9a6e:	e75c      	b.n	992a <__aeabi_fadd+0x4e>
    9a70:	002a      	movs	r2, r5
    9a72:	2300      	movs	r3, #0
    9a74:	e77e      	b.n	9974 <__aeabi_fadd+0x98>
    9a76:	0033      	movs	r3, r6
    9a78:	4a60      	ldr	r2, [pc, #384]	; (9bfc <__aeabi_fadd+0x320>)
    9a7a:	1a24      	subs	r4, r4, r0
    9a7c:	4013      	ands	r3, r2
    9a7e:	e768      	b.n	9952 <__aeabi_fadd+0x76>
    9a80:	2900      	cmp	r1, #0
    9a82:	d163      	bne.n	9b4c <__aeabi_fadd+0x270>
    9a84:	1c61      	adds	r1, r4, #1
    9a86:	b2c8      	uxtb	r0, r1
    9a88:	2801      	cmp	r0, #1
    9a8a:	dd4e      	ble.n	9b2a <__aeabi_fadd+0x24e>
    9a8c:	29ff      	cmp	r1, #255	; 0xff
    9a8e:	d049      	beq.n	9b24 <__aeabi_fadd+0x248>
    9a90:	4463      	add	r3, ip
    9a92:	085b      	lsrs	r3, r3, #1
    9a94:	000c      	movs	r4, r1
    9a96:	e75c      	b.n	9952 <__aeabi_fadd+0x76>
    9a98:	2aff      	cmp	r2, #255	; 0xff
    9a9a:	d041      	beq.n	9b20 <__aeabi_fadd+0x244>
    9a9c:	000a      	movs	r2, r1
    9a9e:	e779      	b.n	9994 <__aeabi_fadd+0xb8>
    9aa0:	2201      	movs	r2, #1
    9aa2:	1a9b      	subs	r3, r3, r2
    9aa4:	e784      	b.n	99b0 <__aeabi_fadd+0xd4>
    9aa6:	2c00      	cmp	r4, #0
    9aa8:	d01d      	beq.n	9ae6 <__aeabi_fadd+0x20a>
    9aaa:	28ff      	cmp	r0, #255	; 0xff
    9aac:	d022      	beq.n	9af4 <__aeabi_fadd+0x218>
    9aae:	2480      	movs	r4, #128	; 0x80
    9ab0:	04e4      	lsls	r4, r4, #19
    9ab2:	4252      	negs	r2, r2
    9ab4:	4323      	orrs	r3, r4
    9ab6:	2a1b      	cmp	r2, #27
    9ab8:	dd00      	ble.n	9abc <__aeabi_fadd+0x1e0>
    9aba:	e08a      	b.n	9bd2 <__aeabi_fadd+0x2f6>
    9abc:	001c      	movs	r4, r3
    9abe:	2520      	movs	r5, #32
    9ac0:	40d4      	lsrs	r4, r2
    9ac2:	1aaa      	subs	r2, r5, r2
    9ac4:	4093      	lsls	r3, r2
    9ac6:	1e5a      	subs	r2, r3, #1
    9ac8:	4193      	sbcs	r3, r2
    9aca:	4323      	orrs	r3, r4
    9acc:	4662      	mov	r2, ip
    9ace:	0004      	movs	r4, r0
    9ad0:	1ad3      	subs	r3, r2, r3
    9ad2:	000d      	movs	r5, r1
    9ad4:	e725      	b.n	9922 <__aeabi_fadd+0x46>
    9ad6:	2e00      	cmp	r6, #0
    9ad8:	d000      	beq.n	9adc <__aeabi_fadd+0x200>
    9ada:	e726      	b.n	992a <__aeabi_fadd+0x4e>
    9adc:	2200      	movs	r2, #0
    9ade:	2400      	movs	r4, #0
    9ae0:	e7a9      	b.n	9a36 <__aeabi_fadd+0x15a>
    9ae2:	000c      	movs	r4, r1
    9ae4:	e735      	b.n	9952 <__aeabi_fadd+0x76>
    9ae6:	2b00      	cmp	r3, #0
    9ae8:	d04d      	beq.n	9b86 <__aeabi_fadd+0x2aa>
    9aea:	43d2      	mvns	r2, r2
    9aec:	2a00      	cmp	r2, #0
    9aee:	d0ed      	beq.n	9acc <__aeabi_fadd+0x1f0>
    9af0:	28ff      	cmp	r0, #255	; 0xff
    9af2:	d1e0      	bne.n	9ab6 <__aeabi_fadd+0x1da>
    9af4:	4663      	mov	r3, ip
    9af6:	24ff      	movs	r4, #255	; 0xff
    9af8:	000d      	movs	r5, r1
    9afa:	e72a      	b.n	9952 <__aeabi_fadd+0x76>
    9afc:	29ff      	cmp	r1, #255	; 0xff
    9afe:	d00f      	beq.n	9b20 <__aeabi_fadd+0x244>
    9b00:	0001      	movs	r1, r0
    9b02:	e773      	b.n	99ec <__aeabi_fadd+0x110>
    9b04:	2b00      	cmp	r3, #0
    9b06:	d061      	beq.n	9bcc <__aeabi_fadd+0x2f0>
    9b08:	24ff      	movs	r4, #255	; 0xff
    9b0a:	2f00      	cmp	r7, #0
    9b0c:	d100      	bne.n	9b10 <__aeabi_fadd+0x234>
    9b0e:	e720      	b.n	9952 <__aeabi_fadd+0x76>
    9b10:	2280      	movs	r2, #128	; 0x80
    9b12:	4641      	mov	r1, r8
    9b14:	03d2      	lsls	r2, r2, #15
    9b16:	4211      	tst	r1, r2
    9b18:	d002      	beq.n	9b20 <__aeabi_fadd+0x244>
    9b1a:	4216      	tst	r6, r2
    9b1c:	d100      	bne.n	9b20 <__aeabi_fadd+0x244>
    9b1e:	003b      	movs	r3, r7
    9b20:	24ff      	movs	r4, #255	; 0xff
    9b22:	e716      	b.n	9952 <__aeabi_fadd+0x76>
    9b24:	24ff      	movs	r4, #255	; 0xff
    9b26:	2300      	movs	r3, #0
    9b28:	e724      	b.n	9974 <__aeabi_fadd+0x98>
    9b2a:	2c00      	cmp	r4, #0
    9b2c:	d1ea      	bne.n	9b04 <__aeabi_fadd+0x228>
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d058      	beq.n	9be4 <__aeabi_fadd+0x308>
    9b32:	2f00      	cmp	r7, #0
    9b34:	d100      	bne.n	9b38 <__aeabi_fadd+0x25c>
    9b36:	e70c      	b.n	9952 <__aeabi_fadd+0x76>
    9b38:	4463      	add	r3, ip
    9b3a:	015a      	lsls	r2, r3, #5
    9b3c:	d400      	bmi.n	9b40 <__aeabi_fadd+0x264>
    9b3e:	e739      	b.n	99b4 <__aeabi_fadd+0xd8>
    9b40:	4a2e      	ldr	r2, [pc, #184]	; (9bfc <__aeabi_fadd+0x320>)
    9b42:	000c      	movs	r4, r1
    9b44:	4013      	ands	r3, r2
    9b46:	e704      	b.n	9952 <__aeabi_fadd+0x76>
    9b48:	2101      	movs	r1, #1
    9b4a:	e75c      	b.n	9a06 <__aeabi_fadd+0x12a>
    9b4c:	2c00      	cmp	r4, #0
    9b4e:	d11e      	bne.n	9b8e <__aeabi_fadd+0x2b2>
    9b50:	2b00      	cmp	r3, #0
    9b52:	d040      	beq.n	9bd6 <__aeabi_fadd+0x2fa>
    9b54:	43c9      	mvns	r1, r1
    9b56:	2900      	cmp	r1, #0
    9b58:	d00b      	beq.n	9b72 <__aeabi_fadd+0x296>
    9b5a:	28ff      	cmp	r0, #255	; 0xff
    9b5c:	d036      	beq.n	9bcc <__aeabi_fadd+0x2f0>
    9b5e:	291b      	cmp	r1, #27
    9b60:	dc47      	bgt.n	9bf2 <__aeabi_fadd+0x316>
    9b62:	001c      	movs	r4, r3
    9b64:	2620      	movs	r6, #32
    9b66:	40cc      	lsrs	r4, r1
    9b68:	1a71      	subs	r1, r6, r1
    9b6a:	408b      	lsls	r3, r1
    9b6c:	1e59      	subs	r1, r3, #1
    9b6e:	418b      	sbcs	r3, r1
    9b70:	4323      	orrs	r3, r4
    9b72:	4463      	add	r3, ip
    9b74:	0004      	movs	r4, r0
    9b76:	e747      	b.n	9a08 <__aeabi_fadd+0x12c>
    9b78:	2b00      	cmp	r3, #0
    9b7a:	d118      	bne.n	9bae <__aeabi_fadd+0x2d2>
    9b7c:	1e3b      	subs	r3, r7, #0
    9b7e:	d02d      	beq.n	9bdc <__aeabi_fadd+0x300>
    9b80:	000d      	movs	r5, r1
    9b82:	24ff      	movs	r4, #255	; 0xff
    9b84:	e6e5      	b.n	9952 <__aeabi_fadd+0x76>
    9b86:	003b      	movs	r3, r7
    9b88:	0004      	movs	r4, r0
    9b8a:	000d      	movs	r5, r1
    9b8c:	e6e1      	b.n	9952 <__aeabi_fadd+0x76>
    9b8e:	28ff      	cmp	r0, #255	; 0xff
    9b90:	d01c      	beq.n	9bcc <__aeabi_fadd+0x2f0>
    9b92:	2480      	movs	r4, #128	; 0x80
    9b94:	04e4      	lsls	r4, r4, #19
    9b96:	4249      	negs	r1, r1
    9b98:	4323      	orrs	r3, r4
    9b9a:	e7e0      	b.n	9b5e <__aeabi_fadd+0x282>
    9b9c:	2f00      	cmp	r7, #0
    9b9e:	d100      	bne.n	9ba2 <__aeabi_fadd+0x2c6>
    9ba0:	e6d7      	b.n	9952 <__aeabi_fadd+0x76>
    9ba2:	1bde      	subs	r6, r3, r7
    9ba4:	0172      	lsls	r2, r6, #5
    9ba6:	d51f      	bpl.n	9be8 <__aeabi_fadd+0x30c>
    9ba8:	1afb      	subs	r3, r7, r3
    9baa:	000d      	movs	r5, r1
    9bac:	e6d1      	b.n	9952 <__aeabi_fadd+0x76>
    9bae:	24ff      	movs	r4, #255	; 0xff
    9bb0:	2f00      	cmp	r7, #0
    9bb2:	d100      	bne.n	9bb6 <__aeabi_fadd+0x2da>
    9bb4:	e6cd      	b.n	9952 <__aeabi_fadd+0x76>
    9bb6:	2280      	movs	r2, #128	; 0x80
    9bb8:	4640      	mov	r0, r8
    9bba:	03d2      	lsls	r2, r2, #15
    9bbc:	4210      	tst	r0, r2
    9bbe:	d0af      	beq.n	9b20 <__aeabi_fadd+0x244>
    9bc0:	4216      	tst	r6, r2
    9bc2:	d1ad      	bne.n	9b20 <__aeabi_fadd+0x244>
    9bc4:	003b      	movs	r3, r7
    9bc6:	000d      	movs	r5, r1
    9bc8:	24ff      	movs	r4, #255	; 0xff
    9bca:	e6c2      	b.n	9952 <__aeabi_fadd+0x76>
    9bcc:	4663      	mov	r3, ip
    9bce:	24ff      	movs	r4, #255	; 0xff
    9bd0:	e6bf      	b.n	9952 <__aeabi_fadd+0x76>
    9bd2:	2301      	movs	r3, #1
    9bd4:	e77a      	b.n	9acc <__aeabi_fadd+0x1f0>
    9bd6:	003b      	movs	r3, r7
    9bd8:	0004      	movs	r4, r0
    9bda:	e6ba      	b.n	9952 <__aeabi_fadd+0x76>
    9bdc:	2680      	movs	r6, #128	; 0x80
    9bde:	2200      	movs	r2, #0
    9be0:	03f6      	lsls	r6, r6, #15
    9be2:	e6f0      	b.n	99c6 <__aeabi_fadd+0xea>
    9be4:	003b      	movs	r3, r7
    9be6:	e6b4      	b.n	9952 <__aeabi_fadd+0x76>
    9be8:	1e33      	subs	r3, r6, #0
    9bea:	d000      	beq.n	9bee <__aeabi_fadd+0x312>
    9bec:	e6e2      	b.n	99b4 <__aeabi_fadd+0xd8>
    9bee:	2200      	movs	r2, #0
    9bf0:	e721      	b.n	9a36 <__aeabi_fadd+0x15a>
    9bf2:	2301      	movs	r3, #1
    9bf4:	e7bd      	b.n	9b72 <__aeabi_fadd+0x296>
    9bf6:	46c0      	nop			; (mov r8, r8)
    9bf8:	7dffffff 	.word	0x7dffffff
    9bfc:	fbffffff 	.word	0xfbffffff

00009c00 <__eqsf2>:
    9c00:	b570      	push	{r4, r5, r6, lr}
    9c02:	0042      	lsls	r2, r0, #1
    9c04:	0245      	lsls	r5, r0, #9
    9c06:	024e      	lsls	r6, r1, #9
    9c08:	004c      	lsls	r4, r1, #1
    9c0a:	0fc3      	lsrs	r3, r0, #31
    9c0c:	0a6d      	lsrs	r5, r5, #9
    9c0e:	0e12      	lsrs	r2, r2, #24
    9c10:	0a76      	lsrs	r6, r6, #9
    9c12:	0e24      	lsrs	r4, r4, #24
    9c14:	0fc9      	lsrs	r1, r1, #31
    9c16:	2001      	movs	r0, #1
    9c18:	2aff      	cmp	r2, #255	; 0xff
    9c1a:	d006      	beq.n	9c2a <__eqsf2+0x2a>
    9c1c:	2cff      	cmp	r4, #255	; 0xff
    9c1e:	d003      	beq.n	9c28 <__eqsf2+0x28>
    9c20:	42a2      	cmp	r2, r4
    9c22:	d101      	bne.n	9c28 <__eqsf2+0x28>
    9c24:	42b5      	cmp	r5, r6
    9c26:	d006      	beq.n	9c36 <__eqsf2+0x36>
    9c28:	bd70      	pop	{r4, r5, r6, pc}
    9c2a:	2d00      	cmp	r5, #0
    9c2c:	d1fc      	bne.n	9c28 <__eqsf2+0x28>
    9c2e:	2cff      	cmp	r4, #255	; 0xff
    9c30:	d1fa      	bne.n	9c28 <__eqsf2+0x28>
    9c32:	2e00      	cmp	r6, #0
    9c34:	d1f8      	bne.n	9c28 <__eqsf2+0x28>
    9c36:	428b      	cmp	r3, r1
    9c38:	d006      	beq.n	9c48 <__eqsf2+0x48>
    9c3a:	2001      	movs	r0, #1
    9c3c:	2a00      	cmp	r2, #0
    9c3e:	d1f3      	bne.n	9c28 <__eqsf2+0x28>
    9c40:	0028      	movs	r0, r5
    9c42:	1e45      	subs	r5, r0, #1
    9c44:	41a8      	sbcs	r0, r5
    9c46:	e7ef      	b.n	9c28 <__eqsf2+0x28>
    9c48:	2000      	movs	r0, #0
    9c4a:	e7ed      	b.n	9c28 <__eqsf2+0x28>

00009c4c <__gesf2>:
    9c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c4e:	0042      	lsls	r2, r0, #1
    9c50:	0245      	lsls	r5, r0, #9
    9c52:	024c      	lsls	r4, r1, #9
    9c54:	0fc3      	lsrs	r3, r0, #31
    9c56:	0048      	lsls	r0, r1, #1
    9c58:	0a6d      	lsrs	r5, r5, #9
    9c5a:	0e12      	lsrs	r2, r2, #24
    9c5c:	0a64      	lsrs	r4, r4, #9
    9c5e:	0e00      	lsrs	r0, r0, #24
    9c60:	0fc9      	lsrs	r1, r1, #31
    9c62:	2aff      	cmp	r2, #255	; 0xff
    9c64:	d01e      	beq.n	9ca4 <__gesf2+0x58>
    9c66:	28ff      	cmp	r0, #255	; 0xff
    9c68:	d021      	beq.n	9cae <__gesf2+0x62>
    9c6a:	2a00      	cmp	r2, #0
    9c6c:	d10a      	bne.n	9c84 <__gesf2+0x38>
    9c6e:	426e      	negs	r6, r5
    9c70:	416e      	adcs	r6, r5
    9c72:	b2f6      	uxtb	r6, r6
    9c74:	2800      	cmp	r0, #0
    9c76:	d10f      	bne.n	9c98 <__gesf2+0x4c>
    9c78:	2c00      	cmp	r4, #0
    9c7a:	d10d      	bne.n	9c98 <__gesf2+0x4c>
    9c7c:	2000      	movs	r0, #0
    9c7e:	2d00      	cmp	r5, #0
    9c80:	d009      	beq.n	9c96 <__gesf2+0x4a>
    9c82:	e005      	b.n	9c90 <__gesf2+0x44>
    9c84:	2800      	cmp	r0, #0
    9c86:	d101      	bne.n	9c8c <__gesf2+0x40>
    9c88:	2c00      	cmp	r4, #0
    9c8a:	d001      	beq.n	9c90 <__gesf2+0x44>
    9c8c:	428b      	cmp	r3, r1
    9c8e:	d011      	beq.n	9cb4 <__gesf2+0x68>
    9c90:	2101      	movs	r1, #1
    9c92:	4258      	negs	r0, r3
    9c94:	4308      	orrs	r0, r1
    9c96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c98:	2e00      	cmp	r6, #0
    9c9a:	d0f7      	beq.n	9c8c <__gesf2+0x40>
    9c9c:	2001      	movs	r0, #1
    9c9e:	3901      	subs	r1, #1
    9ca0:	4308      	orrs	r0, r1
    9ca2:	e7f8      	b.n	9c96 <__gesf2+0x4a>
    9ca4:	2d00      	cmp	r5, #0
    9ca6:	d0de      	beq.n	9c66 <__gesf2+0x1a>
    9ca8:	2002      	movs	r0, #2
    9caa:	4240      	negs	r0, r0
    9cac:	e7f3      	b.n	9c96 <__gesf2+0x4a>
    9cae:	2c00      	cmp	r4, #0
    9cb0:	d0db      	beq.n	9c6a <__gesf2+0x1e>
    9cb2:	e7f9      	b.n	9ca8 <__gesf2+0x5c>
    9cb4:	4282      	cmp	r2, r0
    9cb6:	dceb      	bgt.n	9c90 <__gesf2+0x44>
    9cb8:	db04      	blt.n	9cc4 <__gesf2+0x78>
    9cba:	42a5      	cmp	r5, r4
    9cbc:	d8e8      	bhi.n	9c90 <__gesf2+0x44>
    9cbe:	2000      	movs	r0, #0
    9cc0:	42a5      	cmp	r5, r4
    9cc2:	d2e8      	bcs.n	9c96 <__gesf2+0x4a>
    9cc4:	2101      	movs	r1, #1
    9cc6:	1e58      	subs	r0, r3, #1
    9cc8:	4308      	orrs	r0, r1
    9cca:	e7e4      	b.n	9c96 <__gesf2+0x4a>

00009ccc <__lesf2>:
    9ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cce:	0042      	lsls	r2, r0, #1
    9cd0:	024d      	lsls	r5, r1, #9
    9cd2:	004c      	lsls	r4, r1, #1
    9cd4:	0246      	lsls	r6, r0, #9
    9cd6:	0a76      	lsrs	r6, r6, #9
    9cd8:	0e12      	lsrs	r2, r2, #24
    9cda:	0fc3      	lsrs	r3, r0, #31
    9cdc:	0a6d      	lsrs	r5, r5, #9
    9cde:	0e24      	lsrs	r4, r4, #24
    9ce0:	0fc9      	lsrs	r1, r1, #31
    9ce2:	2aff      	cmp	r2, #255	; 0xff
    9ce4:	d016      	beq.n	9d14 <__lesf2+0x48>
    9ce6:	2cff      	cmp	r4, #255	; 0xff
    9ce8:	d018      	beq.n	9d1c <__lesf2+0x50>
    9cea:	2a00      	cmp	r2, #0
    9cec:	d10a      	bne.n	9d04 <__lesf2+0x38>
    9cee:	4270      	negs	r0, r6
    9cf0:	4170      	adcs	r0, r6
    9cf2:	b2c0      	uxtb	r0, r0
    9cf4:	2c00      	cmp	r4, #0
    9cf6:	d015      	beq.n	9d24 <__lesf2+0x58>
    9cf8:	2800      	cmp	r0, #0
    9cfa:	d005      	beq.n	9d08 <__lesf2+0x3c>
    9cfc:	2001      	movs	r0, #1
    9cfe:	3901      	subs	r1, #1
    9d00:	4308      	orrs	r0, r1
    9d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d04:	2c00      	cmp	r4, #0
    9d06:	d013      	beq.n	9d30 <__lesf2+0x64>
    9d08:	4299      	cmp	r1, r3
    9d0a:	d014      	beq.n	9d36 <__lesf2+0x6a>
    9d0c:	2001      	movs	r0, #1
    9d0e:	425b      	negs	r3, r3
    9d10:	4318      	orrs	r0, r3
    9d12:	e7f6      	b.n	9d02 <__lesf2+0x36>
    9d14:	2002      	movs	r0, #2
    9d16:	2e00      	cmp	r6, #0
    9d18:	d1f3      	bne.n	9d02 <__lesf2+0x36>
    9d1a:	e7e4      	b.n	9ce6 <__lesf2+0x1a>
    9d1c:	2002      	movs	r0, #2
    9d1e:	2d00      	cmp	r5, #0
    9d20:	d1ef      	bne.n	9d02 <__lesf2+0x36>
    9d22:	e7e2      	b.n	9cea <__lesf2+0x1e>
    9d24:	2d00      	cmp	r5, #0
    9d26:	d1e7      	bne.n	9cf8 <__lesf2+0x2c>
    9d28:	2000      	movs	r0, #0
    9d2a:	2e00      	cmp	r6, #0
    9d2c:	d0e9      	beq.n	9d02 <__lesf2+0x36>
    9d2e:	e7ed      	b.n	9d0c <__lesf2+0x40>
    9d30:	2d00      	cmp	r5, #0
    9d32:	d1e9      	bne.n	9d08 <__lesf2+0x3c>
    9d34:	e7ea      	b.n	9d0c <__lesf2+0x40>
    9d36:	42a2      	cmp	r2, r4
    9d38:	dc06      	bgt.n	9d48 <__lesf2+0x7c>
    9d3a:	dbdf      	blt.n	9cfc <__lesf2+0x30>
    9d3c:	42ae      	cmp	r6, r5
    9d3e:	d803      	bhi.n	9d48 <__lesf2+0x7c>
    9d40:	2000      	movs	r0, #0
    9d42:	42ae      	cmp	r6, r5
    9d44:	d3da      	bcc.n	9cfc <__lesf2+0x30>
    9d46:	e7dc      	b.n	9d02 <__lesf2+0x36>
    9d48:	2001      	movs	r0, #1
    9d4a:	4249      	negs	r1, r1
    9d4c:	4308      	orrs	r0, r1
    9d4e:	e7d8      	b.n	9d02 <__lesf2+0x36>

00009d50 <__aeabi_fmul>:
    9d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d52:	4657      	mov	r7, sl
    9d54:	464e      	mov	r6, r9
    9d56:	4645      	mov	r5, r8
    9d58:	46de      	mov	lr, fp
    9d5a:	b5e0      	push	{r5, r6, r7, lr}
    9d5c:	0247      	lsls	r7, r0, #9
    9d5e:	0046      	lsls	r6, r0, #1
    9d60:	4688      	mov	r8, r1
    9d62:	0a7f      	lsrs	r7, r7, #9
    9d64:	0e36      	lsrs	r6, r6, #24
    9d66:	0fc4      	lsrs	r4, r0, #31
    9d68:	2e00      	cmp	r6, #0
    9d6a:	d047      	beq.n	9dfc <__aeabi_fmul+0xac>
    9d6c:	2eff      	cmp	r6, #255	; 0xff
    9d6e:	d024      	beq.n	9dba <__aeabi_fmul+0x6a>
    9d70:	00fb      	lsls	r3, r7, #3
    9d72:	2780      	movs	r7, #128	; 0x80
    9d74:	04ff      	lsls	r7, r7, #19
    9d76:	431f      	orrs	r7, r3
    9d78:	2300      	movs	r3, #0
    9d7a:	4699      	mov	r9, r3
    9d7c:	469a      	mov	sl, r3
    9d7e:	3e7f      	subs	r6, #127	; 0x7f
    9d80:	4643      	mov	r3, r8
    9d82:	025d      	lsls	r5, r3, #9
    9d84:	0058      	lsls	r0, r3, #1
    9d86:	0fdb      	lsrs	r3, r3, #31
    9d88:	0a6d      	lsrs	r5, r5, #9
    9d8a:	0e00      	lsrs	r0, r0, #24
    9d8c:	4698      	mov	r8, r3
    9d8e:	d043      	beq.n	9e18 <__aeabi_fmul+0xc8>
    9d90:	28ff      	cmp	r0, #255	; 0xff
    9d92:	d03b      	beq.n	9e0c <__aeabi_fmul+0xbc>
    9d94:	00eb      	lsls	r3, r5, #3
    9d96:	2580      	movs	r5, #128	; 0x80
    9d98:	2200      	movs	r2, #0
    9d9a:	04ed      	lsls	r5, r5, #19
    9d9c:	431d      	orrs	r5, r3
    9d9e:	387f      	subs	r0, #127	; 0x7f
    9da0:	1836      	adds	r6, r6, r0
    9da2:	1c73      	adds	r3, r6, #1
    9da4:	4641      	mov	r1, r8
    9da6:	469b      	mov	fp, r3
    9da8:	464b      	mov	r3, r9
    9daa:	4061      	eors	r1, r4
    9dac:	4313      	orrs	r3, r2
    9dae:	2b0f      	cmp	r3, #15
    9db0:	d864      	bhi.n	9e7c <__aeabi_fmul+0x12c>
    9db2:	4875      	ldr	r0, [pc, #468]	; (9f88 <__aeabi_fmul+0x238>)
    9db4:	009b      	lsls	r3, r3, #2
    9db6:	58c3      	ldr	r3, [r0, r3]
    9db8:	469f      	mov	pc, r3
    9dba:	2f00      	cmp	r7, #0
    9dbc:	d142      	bne.n	9e44 <__aeabi_fmul+0xf4>
    9dbe:	2308      	movs	r3, #8
    9dc0:	4699      	mov	r9, r3
    9dc2:	3b06      	subs	r3, #6
    9dc4:	26ff      	movs	r6, #255	; 0xff
    9dc6:	469a      	mov	sl, r3
    9dc8:	e7da      	b.n	9d80 <__aeabi_fmul+0x30>
    9dca:	4641      	mov	r1, r8
    9dcc:	2a02      	cmp	r2, #2
    9dce:	d028      	beq.n	9e22 <__aeabi_fmul+0xd2>
    9dd0:	2a03      	cmp	r2, #3
    9dd2:	d100      	bne.n	9dd6 <__aeabi_fmul+0x86>
    9dd4:	e0ce      	b.n	9f74 <__aeabi_fmul+0x224>
    9dd6:	2a01      	cmp	r2, #1
    9dd8:	d000      	beq.n	9ddc <__aeabi_fmul+0x8c>
    9dda:	e0ac      	b.n	9f36 <__aeabi_fmul+0x1e6>
    9ddc:	4011      	ands	r1, r2
    9dde:	2000      	movs	r0, #0
    9de0:	2200      	movs	r2, #0
    9de2:	b2cc      	uxtb	r4, r1
    9de4:	0240      	lsls	r0, r0, #9
    9de6:	05d2      	lsls	r2, r2, #23
    9de8:	0a40      	lsrs	r0, r0, #9
    9dea:	07e4      	lsls	r4, r4, #31
    9dec:	4310      	orrs	r0, r2
    9dee:	4320      	orrs	r0, r4
    9df0:	bc3c      	pop	{r2, r3, r4, r5}
    9df2:	4690      	mov	r8, r2
    9df4:	4699      	mov	r9, r3
    9df6:	46a2      	mov	sl, r4
    9df8:	46ab      	mov	fp, r5
    9dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9dfc:	2f00      	cmp	r7, #0
    9dfe:	d115      	bne.n	9e2c <__aeabi_fmul+0xdc>
    9e00:	2304      	movs	r3, #4
    9e02:	4699      	mov	r9, r3
    9e04:	3b03      	subs	r3, #3
    9e06:	2600      	movs	r6, #0
    9e08:	469a      	mov	sl, r3
    9e0a:	e7b9      	b.n	9d80 <__aeabi_fmul+0x30>
    9e0c:	20ff      	movs	r0, #255	; 0xff
    9e0e:	2202      	movs	r2, #2
    9e10:	2d00      	cmp	r5, #0
    9e12:	d0c5      	beq.n	9da0 <__aeabi_fmul+0x50>
    9e14:	2203      	movs	r2, #3
    9e16:	e7c3      	b.n	9da0 <__aeabi_fmul+0x50>
    9e18:	2d00      	cmp	r5, #0
    9e1a:	d119      	bne.n	9e50 <__aeabi_fmul+0x100>
    9e1c:	2000      	movs	r0, #0
    9e1e:	2201      	movs	r2, #1
    9e20:	e7be      	b.n	9da0 <__aeabi_fmul+0x50>
    9e22:	2401      	movs	r4, #1
    9e24:	22ff      	movs	r2, #255	; 0xff
    9e26:	400c      	ands	r4, r1
    9e28:	2000      	movs	r0, #0
    9e2a:	e7db      	b.n	9de4 <__aeabi_fmul+0x94>
    9e2c:	0038      	movs	r0, r7
    9e2e:	f002 f801 	bl	be34 <__clzsi2>
    9e32:	2676      	movs	r6, #118	; 0x76
    9e34:	1f43      	subs	r3, r0, #5
    9e36:	409f      	lsls	r7, r3
    9e38:	2300      	movs	r3, #0
    9e3a:	4276      	negs	r6, r6
    9e3c:	1a36      	subs	r6, r6, r0
    9e3e:	4699      	mov	r9, r3
    9e40:	469a      	mov	sl, r3
    9e42:	e79d      	b.n	9d80 <__aeabi_fmul+0x30>
    9e44:	230c      	movs	r3, #12
    9e46:	4699      	mov	r9, r3
    9e48:	3b09      	subs	r3, #9
    9e4a:	26ff      	movs	r6, #255	; 0xff
    9e4c:	469a      	mov	sl, r3
    9e4e:	e797      	b.n	9d80 <__aeabi_fmul+0x30>
    9e50:	0028      	movs	r0, r5
    9e52:	f001 ffef 	bl	be34 <__clzsi2>
    9e56:	1f43      	subs	r3, r0, #5
    9e58:	409d      	lsls	r5, r3
    9e5a:	2376      	movs	r3, #118	; 0x76
    9e5c:	425b      	negs	r3, r3
    9e5e:	1a18      	subs	r0, r3, r0
    9e60:	2200      	movs	r2, #0
    9e62:	e79d      	b.n	9da0 <__aeabi_fmul+0x50>
    9e64:	2080      	movs	r0, #128	; 0x80
    9e66:	2400      	movs	r4, #0
    9e68:	03c0      	lsls	r0, r0, #15
    9e6a:	22ff      	movs	r2, #255	; 0xff
    9e6c:	e7ba      	b.n	9de4 <__aeabi_fmul+0x94>
    9e6e:	003d      	movs	r5, r7
    9e70:	4652      	mov	r2, sl
    9e72:	e7ab      	b.n	9dcc <__aeabi_fmul+0x7c>
    9e74:	003d      	movs	r5, r7
    9e76:	0021      	movs	r1, r4
    9e78:	4652      	mov	r2, sl
    9e7a:	e7a7      	b.n	9dcc <__aeabi_fmul+0x7c>
    9e7c:	0c3b      	lsrs	r3, r7, #16
    9e7e:	469c      	mov	ip, r3
    9e80:	042a      	lsls	r2, r5, #16
    9e82:	0c12      	lsrs	r2, r2, #16
    9e84:	0c2b      	lsrs	r3, r5, #16
    9e86:	0014      	movs	r4, r2
    9e88:	4660      	mov	r0, ip
    9e8a:	4665      	mov	r5, ip
    9e8c:	043f      	lsls	r7, r7, #16
    9e8e:	0c3f      	lsrs	r7, r7, #16
    9e90:	437c      	muls	r4, r7
    9e92:	4342      	muls	r2, r0
    9e94:	435d      	muls	r5, r3
    9e96:	437b      	muls	r3, r7
    9e98:	0c27      	lsrs	r7, r4, #16
    9e9a:	189b      	adds	r3, r3, r2
    9e9c:	18ff      	adds	r7, r7, r3
    9e9e:	42ba      	cmp	r2, r7
    9ea0:	d903      	bls.n	9eaa <__aeabi_fmul+0x15a>
    9ea2:	2380      	movs	r3, #128	; 0x80
    9ea4:	025b      	lsls	r3, r3, #9
    9ea6:	469c      	mov	ip, r3
    9ea8:	4465      	add	r5, ip
    9eaa:	0424      	lsls	r4, r4, #16
    9eac:	043a      	lsls	r2, r7, #16
    9eae:	0c24      	lsrs	r4, r4, #16
    9eb0:	1912      	adds	r2, r2, r4
    9eb2:	0193      	lsls	r3, r2, #6
    9eb4:	1e5c      	subs	r4, r3, #1
    9eb6:	41a3      	sbcs	r3, r4
    9eb8:	0c3f      	lsrs	r7, r7, #16
    9eba:	0e92      	lsrs	r2, r2, #26
    9ebc:	197d      	adds	r5, r7, r5
    9ebe:	431a      	orrs	r2, r3
    9ec0:	01ad      	lsls	r5, r5, #6
    9ec2:	4315      	orrs	r5, r2
    9ec4:	012b      	lsls	r3, r5, #4
    9ec6:	d504      	bpl.n	9ed2 <__aeabi_fmul+0x182>
    9ec8:	2301      	movs	r3, #1
    9eca:	465e      	mov	r6, fp
    9ecc:	086a      	lsrs	r2, r5, #1
    9ece:	401d      	ands	r5, r3
    9ed0:	4315      	orrs	r5, r2
    9ed2:	0032      	movs	r2, r6
    9ed4:	327f      	adds	r2, #127	; 0x7f
    9ed6:	2a00      	cmp	r2, #0
    9ed8:	dd25      	ble.n	9f26 <__aeabi_fmul+0x1d6>
    9eda:	076b      	lsls	r3, r5, #29
    9edc:	d004      	beq.n	9ee8 <__aeabi_fmul+0x198>
    9ede:	230f      	movs	r3, #15
    9ee0:	402b      	ands	r3, r5
    9ee2:	2b04      	cmp	r3, #4
    9ee4:	d000      	beq.n	9ee8 <__aeabi_fmul+0x198>
    9ee6:	3504      	adds	r5, #4
    9ee8:	012b      	lsls	r3, r5, #4
    9eea:	d503      	bpl.n	9ef4 <__aeabi_fmul+0x1a4>
    9eec:	0032      	movs	r2, r6
    9eee:	4b27      	ldr	r3, [pc, #156]	; (9f8c <__aeabi_fmul+0x23c>)
    9ef0:	3280      	adds	r2, #128	; 0x80
    9ef2:	401d      	ands	r5, r3
    9ef4:	2afe      	cmp	r2, #254	; 0xfe
    9ef6:	dc94      	bgt.n	9e22 <__aeabi_fmul+0xd2>
    9ef8:	2401      	movs	r4, #1
    9efa:	01a8      	lsls	r0, r5, #6
    9efc:	0a40      	lsrs	r0, r0, #9
    9efe:	b2d2      	uxtb	r2, r2
    9f00:	400c      	ands	r4, r1
    9f02:	e76f      	b.n	9de4 <__aeabi_fmul+0x94>
    9f04:	2080      	movs	r0, #128	; 0x80
    9f06:	03c0      	lsls	r0, r0, #15
    9f08:	4207      	tst	r7, r0
    9f0a:	d007      	beq.n	9f1c <__aeabi_fmul+0x1cc>
    9f0c:	4205      	tst	r5, r0
    9f0e:	d105      	bne.n	9f1c <__aeabi_fmul+0x1cc>
    9f10:	4328      	orrs	r0, r5
    9f12:	0240      	lsls	r0, r0, #9
    9f14:	0a40      	lsrs	r0, r0, #9
    9f16:	4644      	mov	r4, r8
    9f18:	22ff      	movs	r2, #255	; 0xff
    9f1a:	e763      	b.n	9de4 <__aeabi_fmul+0x94>
    9f1c:	4338      	orrs	r0, r7
    9f1e:	0240      	lsls	r0, r0, #9
    9f20:	0a40      	lsrs	r0, r0, #9
    9f22:	22ff      	movs	r2, #255	; 0xff
    9f24:	e75e      	b.n	9de4 <__aeabi_fmul+0x94>
    9f26:	2401      	movs	r4, #1
    9f28:	1aa3      	subs	r3, r4, r2
    9f2a:	2b1b      	cmp	r3, #27
    9f2c:	dd05      	ble.n	9f3a <__aeabi_fmul+0x1ea>
    9f2e:	400c      	ands	r4, r1
    9f30:	2200      	movs	r2, #0
    9f32:	2000      	movs	r0, #0
    9f34:	e756      	b.n	9de4 <__aeabi_fmul+0x94>
    9f36:	465e      	mov	r6, fp
    9f38:	e7cb      	b.n	9ed2 <__aeabi_fmul+0x182>
    9f3a:	002a      	movs	r2, r5
    9f3c:	2020      	movs	r0, #32
    9f3e:	40da      	lsrs	r2, r3
    9f40:	1ac3      	subs	r3, r0, r3
    9f42:	409d      	lsls	r5, r3
    9f44:	002b      	movs	r3, r5
    9f46:	1e5d      	subs	r5, r3, #1
    9f48:	41ab      	sbcs	r3, r5
    9f4a:	4313      	orrs	r3, r2
    9f4c:	075a      	lsls	r2, r3, #29
    9f4e:	d004      	beq.n	9f5a <__aeabi_fmul+0x20a>
    9f50:	220f      	movs	r2, #15
    9f52:	401a      	ands	r2, r3
    9f54:	2a04      	cmp	r2, #4
    9f56:	d000      	beq.n	9f5a <__aeabi_fmul+0x20a>
    9f58:	3304      	adds	r3, #4
    9f5a:	015a      	lsls	r2, r3, #5
    9f5c:	d504      	bpl.n	9f68 <__aeabi_fmul+0x218>
    9f5e:	2401      	movs	r4, #1
    9f60:	2201      	movs	r2, #1
    9f62:	400c      	ands	r4, r1
    9f64:	2000      	movs	r0, #0
    9f66:	e73d      	b.n	9de4 <__aeabi_fmul+0x94>
    9f68:	2401      	movs	r4, #1
    9f6a:	019b      	lsls	r3, r3, #6
    9f6c:	0a58      	lsrs	r0, r3, #9
    9f6e:	400c      	ands	r4, r1
    9f70:	2200      	movs	r2, #0
    9f72:	e737      	b.n	9de4 <__aeabi_fmul+0x94>
    9f74:	2080      	movs	r0, #128	; 0x80
    9f76:	2401      	movs	r4, #1
    9f78:	03c0      	lsls	r0, r0, #15
    9f7a:	4328      	orrs	r0, r5
    9f7c:	0240      	lsls	r0, r0, #9
    9f7e:	0a40      	lsrs	r0, r0, #9
    9f80:	400c      	ands	r4, r1
    9f82:	22ff      	movs	r2, #255	; 0xff
    9f84:	e72e      	b.n	9de4 <__aeabi_fmul+0x94>
    9f86:	46c0      	nop			; (mov r8, r8)
    9f88:	00011f48 	.word	0x00011f48
    9f8c:	f7ffffff 	.word	0xf7ffffff

00009f90 <__aeabi_fcmpun>:
    9f90:	0242      	lsls	r2, r0, #9
    9f92:	024b      	lsls	r3, r1, #9
    9f94:	0040      	lsls	r0, r0, #1
    9f96:	0049      	lsls	r1, r1, #1
    9f98:	0a52      	lsrs	r2, r2, #9
    9f9a:	0e00      	lsrs	r0, r0, #24
    9f9c:	0a5b      	lsrs	r3, r3, #9
    9f9e:	0e09      	lsrs	r1, r1, #24
    9fa0:	28ff      	cmp	r0, #255	; 0xff
    9fa2:	d003      	beq.n	9fac <__aeabi_fcmpun+0x1c>
    9fa4:	2000      	movs	r0, #0
    9fa6:	29ff      	cmp	r1, #255	; 0xff
    9fa8:	d006      	beq.n	9fb8 <__aeabi_fcmpun+0x28>
    9faa:	4770      	bx	lr
    9fac:	38fe      	subs	r0, #254	; 0xfe
    9fae:	2a00      	cmp	r2, #0
    9fb0:	d1fb      	bne.n	9faa <__aeabi_fcmpun+0x1a>
    9fb2:	2000      	movs	r0, #0
    9fb4:	29ff      	cmp	r1, #255	; 0xff
    9fb6:	d1f8      	bne.n	9faa <__aeabi_fcmpun+0x1a>
    9fb8:	0018      	movs	r0, r3
    9fba:	1e43      	subs	r3, r0, #1
    9fbc:	4198      	sbcs	r0, r3
    9fbe:	e7f4      	b.n	9faa <__aeabi_fcmpun+0x1a>

00009fc0 <__aeabi_f2iz>:
    9fc0:	0241      	lsls	r1, r0, #9
    9fc2:	0043      	lsls	r3, r0, #1
    9fc4:	0fc2      	lsrs	r2, r0, #31
    9fc6:	0a49      	lsrs	r1, r1, #9
    9fc8:	0e1b      	lsrs	r3, r3, #24
    9fca:	2000      	movs	r0, #0
    9fcc:	2b7e      	cmp	r3, #126	; 0x7e
    9fce:	dd0d      	ble.n	9fec <__aeabi_f2iz+0x2c>
    9fd0:	2b9d      	cmp	r3, #157	; 0x9d
    9fd2:	dc0c      	bgt.n	9fee <__aeabi_f2iz+0x2e>
    9fd4:	2080      	movs	r0, #128	; 0x80
    9fd6:	0400      	lsls	r0, r0, #16
    9fd8:	4301      	orrs	r1, r0
    9fda:	2b95      	cmp	r3, #149	; 0x95
    9fdc:	dc0a      	bgt.n	9ff4 <__aeabi_f2iz+0x34>
    9fde:	2096      	movs	r0, #150	; 0x96
    9fe0:	1ac3      	subs	r3, r0, r3
    9fe2:	40d9      	lsrs	r1, r3
    9fe4:	4248      	negs	r0, r1
    9fe6:	2a00      	cmp	r2, #0
    9fe8:	d100      	bne.n	9fec <__aeabi_f2iz+0x2c>
    9fea:	0008      	movs	r0, r1
    9fec:	4770      	bx	lr
    9fee:	4b03      	ldr	r3, [pc, #12]	; (9ffc <__aeabi_f2iz+0x3c>)
    9ff0:	18d0      	adds	r0, r2, r3
    9ff2:	e7fb      	b.n	9fec <__aeabi_f2iz+0x2c>
    9ff4:	3b96      	subs	r3, #150	; 0x96
    9ff6:	4099      	lsls	r1, r3
    9ff8:	e7f4      	b.n	9fe4 <__aeabi_f2iz+0x24>
    9ffa:	46c0      	nop			; (mov r8, r8)
    9ffc:	7fffffff 	.word	0x7fffffff

0000a000 <__aeabi_i2f>:
    a000:	b570      	push	{r4, r5, r6, lr}
    a002:	2800      	cmp	r0, #0
    a004:	d030      	beq.n	a068 <__aeabi_i2f+0x68>
    a006:	17c3      	asrs	r3, r0, #31
    a008:	18c4      	adds	r4, r0, r3
    a00a:	405c      	eors	r4, r3
    a00c:	0fc5      	lsrs	r5, r0, #31
    a00e:	0020      	movs	r0, r4
    a010:	f001 ff10 	bl	be34 <__clzsi2>
    a014:	239e      	movs	r3, #158	; 0x9e
    a016:	1a1b      	subs	r3, r3, r0
    a018:	2b96      	cmp	r3, #150	; 0x96
    a01a:	dc0d      	bgt.n	a038 <__aeabi_i2f+0x38>
    a01c:	2296      	movs	r2, #150	; 0x96
    a01e:	1ad2      	subs	r2, r2, r3
    a020:	4094      	lsls	r4, r2
    a022:	002a      	movs	r2, r5
    a024:	0264      	lsls	r4, r4, #9
    a026:	0a64      	lsrs	r4, r4, #9
    a028:	b2db      	uxtb	r3, r3
    a02a:	0264      	lsls	r4, r4, #9
    a02c:	05db      	lsls	r3, r3, #23
    a02e:	0a60      	lsrs	r0, r4, #9
    a030:	07d2      	lsls	r2, r2, #31
    a032:	4318      	orrs	r0, r3
    a034:	4310      	orrs	r0, r2
    a036:	bd70      	pop	{r4, r5, r6, pc}
    a038:	2b99      	cmp	r3, #153	; 0x99
    a03a:	dc19      	bgt.n	a070 <__aeabi_i2f+0x70>
    a03c:	2299      	movs	r2, #153	; 0x99
    a03e:	1ad2      	subs	r2, r2, r3
    a040:	2a00      	cmp	r2, #0
    a042:	dd29      	ble.n	a098 <__aeabi_i2f+0x98>
    a044:	4094      	lsls	r4, r2
    a046:	0022      	movs	r2, r4
    a048:	4c14      	ldr	r4, [pc, #80]	; (a09c <__aeabi_i2f+0x9c>)
    a04a:	4014      	ands	r4, r2
    a04c:	0751      	lsls	r1, r2, #29
    a04e:	d004      	beq.n	a05a <__aeabi_i2f+0x5a>
    a050:	210f      	movs	r1, #15
    a052:	400a      	ands	r2, r1
    a054:	2a04      	cmp	r2, #4
    a056:	d000      	beq.n	a05a <__aeabi_i2f+0x5a>
    a058:	3404      	adds	r4, #4
    a05a:	0162      	lsls	r2, r4, #5
    a05c:	d413      	bmi.n	a086 <__aeabi_i2f+0x86>
    a05e:	01a4      	lsls	r4, r4, #6
    a060:	0a64      	lsrs	r4, r4, #9
    a062:	b2db      	uxtb	r3, r3
    a064:	002a      	movs	r2, r5
    a066:	e7e0      	b.n	a02a <__aeabi_i2f+0x2a>
    a068:	2200      	movs	r2, #0
    a06a:	2300      	movs	r3, #0
    a06c:	2400      	movs	r4, #0
    a06e:	e7dc      	b.n	a02a <__aeabi_i2f+0x2a>
    a070:	2205      	movs	r2, #5
    a072:	0021      	movs	r1, r4
    a074:	1a12      	subs	r2, r2, r0
    a076:	40d1      	lsrs	r1, r2
    a078:	22b9      	movs	r2, #185	; 0xb9
    a07a:	1ad2      	subs	r2, r2, r3
    a07c:	4094      	lsls	r4, r2
    a07e:	1e62      	subs	r2, r4, #1
    a080:	4194      	sbcs	r4, r2
    a082:	430c      	orrs	r4, r1
    a084:	e7da      	b.n	a03c <__aeabi_i2f+0x3c>
    a086:	4b05      	ldr	r3, [pc, #20]	; (a09c <__aeabi_i2f+0x9c>)
    a088:	002a      	movs	r2, r5
    a08a:	401c      	ands	r4, r3
    a08c:	239f      	movs	r3, #159	; 0x9f
    a08e:	01a4      	lsls	r4, r4, #6
    a090:	1a1b      	subs	r3, r3, r0
    a092:	0a64      	lsrs	r4, r4, #9
    a094:	b2db      	uxtb	r3, r3
    a096:	e7c8      	b.n	a02a <__aeabi_i2f+0x2a>
    a098:	0022      	movs	r2, r4
    a09a:	e7d5      	b.n	a048 <__aeabi_i2f+0x48>
    a09c:	fbffffff 	.word	0xfbffffff

0000a0a0 <__aeabi_ui2f>:
    a0a0:	b510      	push	{r4, lr}
    a0a2:	1e04      	subs	r4, r0, #0
    a0a4:	d027      	beq.n	a0f6 <__aeabi_ui2f+0x56>
    a0a6:	f001 fec5 	bl	be34 <__clzsi2>
    a0aa:	239e      	movs	r3, #158	; 0x9e
    a0ac:	1a1b      	subs	r3, r3, r0
    a0ae:	2b96      	cmp	r3, #150	; 0x96
    a0b0:	dc0a      	bgt.n	a0c8 <__aeabi_ui2f+0x28>
    a0b2:	2296      	movs	r2, #150	; 0x96
    a0b4:	1ad2      	subs	r2, r2, r3
    a0b6:	4094      	lsls	r4, r2
    a0b8:	0264      	lsls	r4, r4, #9
    a0ba:	0a64      	lsrs	r4, r4, #9
    a0bc:	b2db      	uxtb	r3, r3
    a0be:	0264      	lsls	r4, r4, #9
    a0c0:	05db      	lsls	r3, r3, #23
    a0c2:	0a60      	lsrs	r0, r4, #9
    a0c4:	4318      	orrs	r0, r3
    a0c6:	bd10      	pop	{r4, pc}
    a0c8:	2b99      	cmp	r3, #153	; 0x99
    a0ca:	dc17      	bgt.n	a0fc <__aeabi_ui2f+0x5c>
    a0cc:	2299      	movs	r2, #153	; 0x99
    a0ce:	1ad2      	subs	r2, r2, r3
    a0d0:	2a00      	cmp	r2, #0
    a0d2:	dd27      	ble.n	a124 <__aeabi_ui2f+0x84>
    a0d4:	4094      	lsls	r4, r2
    a0d6:	0022      	movs	r2, r4
    a0d8:	4c13      	ldr	r4, [pc, #76]	; (a128 <__aeabi_ui2f+0x88>)
    a0da:	4014      	ands	r4, r2
    a0dc:	0751      	lsls	r1, r2, #29
    a0de:	d004      	beq.n	a0ea <__aeabi_ui2f+0x4a>
    a0e0:	210f      	movs	r1, #15
    a0e2:	400a      	ands	r2, r1
    a0e4:	2a04      	cmp	r2, #4
    a0e6:	d000      	beq.n	a0ea <__aeabi_ui2f+0x4a>
    a0e8:	3404      	adds	r4, #4
    a0ea:	0162      	lsls	r2, r4, #5
    a0ec:	d412      	bmi.n	a114 <__aeabi_ui2f+0x74>
    a0ee:	01a4      	lsls	r4, r4, #6
    a0f0:	0a64      	lsrs	r4, r4, #9
    a0f2:	b2db      	uxtb	r3, r3
    a0f4:	e7e3      	b.n	a0be <__aeabi_ui2f+0x1e>
    a0f6:	2300      	movs	r3, #0
    a0f8:	2400      	movs	r4, #0
    a0fa:	e7e0      	b.n	a0be <__aeabi_ui2f+0x1e>
    a0fc:	22b9      	movs	r2, #185	; 0xb9
    a0fe:	0021      	movs	r1, r4
    a100:	1ad2      	subs	r2, r2, r3
    a102:	4091      	lsls	r1, r2
    a104:	000a      	movs	r2, r1
    a106:	1e51      	subs	r1, r2, #1
    a108:	418a      	sbcs	r2, r1
    a10a:	2105      	movs	r1, #5
    a10c:	1a09      	subs	r1, r1, r0
    a10e:	40cc      	lsrs	r4, r1
    a110:	4314      	orrs	r4, r2
    a112:	e7db      	b.n	a0cc <__aeabi_ui2f+0x2c>
    a114:	4b04      	ldr	r3, [pc, #16]	; (a128 <__aeabi_ui2f+0x88>)
    a116:	401c      	ands	r4, r3
    a118:	239f      	movs	r3, #159	; 0x9f
    a11a:	01a4      	lsls	r4, r4, #6
    a11c:	1a1b      	subs	r3, r3, r0
    a11e:	0a64      	lsrs	r4, r4, #9
    a120:	b2db      	uxtb	r3, r3
    a122:	e7cc      	b.n	a0be <__aeabi_ui2f+0x1e>
    a124:	0022      	movs	r2, r4
    a126:	e7d7      	b.n	a0d8 <__aeabi_ui2f+0x38>
    a128:	fbffffff 	.word	0xfbffffff

0000a12c <__aeabi_dadd>:
    a12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a12e:	4645      	mov	r5, r8
    a130:	46de      	mov	lr, fp
    a132:	4657      	mov	r7, sl
    a134:	464e      	mov	r6, r9
    a136:	030c      	lsls	r4, r1, #12
    a138:	b5e0      	push	{r5, r6, r7, lr}
    a13a:	004e      	lsls	r6, r1, #1
    a13c:	0fc9      	lsrs	r1, r1, #31
    a13e:	4688      	mov	r8, r1
    a140:	000d      	movs	r5, r1
    a142:	0a61      	lsrs	r1, r4, #9
    a144:	0f44      	lsrs	r4, r0, #29
    a146:	430c      	orrs	r4, r1
    a148:	00c7      	lsls	r7, r0, #3
    a14a:	0319      	lsls	r1, r3, #12
    a14c:	0058      	lsls	r0, r3, #1
    a14e:	0fdb      	lsrs	r3, r3, #31
    a150:	469b      	mov	fp, r3
    a152:	0a4b      	lsrs	r3, r1, #9
    a154:	0f51      	lsrs	r1, r2, #29
    a156:	430b      	orrs	r3, r1
    a158:	0d76      	lsrs	r6, r6, #21
    a15a:	0d40      	lsrs	r0, r0, #21
    a15c:	0019      	movs	r1, r3
    a15e:	00d2      	lsls	r2, r2, #3
    a160:	45d8      	cmp	r8, fp
    a162:	d100      	bne.n	a166 <__aeabi_dadd+0x3a>
    a164:	e0ae      	b.n	a2c4 <__aeabi_dadd+0x198>
    a166:	1a35      	subs	r5, r6, r0
    a168:	2d00      	cmp	r5, #0
    a16a:	dc00      	bgt.n	a16e <__aeabi_dadd+0x42>
    a16c:	e0f6      	b.n	a35c <__aeabi_dadd+0x230>
    a16e:	2800      	cmp	r0, #0
    a170:	d10f      	bne.n	a192 <__aeabi_dadd+0x66>
    a172:	4313      	orrs	r3, r2
    a174:	d100      	bne.n	a178 <__aeabi_dadd+0x4c>
    a176:	e0db      	b.n	a330 <__aeabi_dadd+0x204>
    a178:	1e6b      	subs	r3, r5, #1
    a17a:	2b00      	cmp	r3, #0
    a17c:	d000      	beq.n	a180 <__aeabi_dadd+0x54>
    a17e:	e137      	b.n	a3f0 <__aeabi_dadd+0x2c4>
    a180:	1aba      	subs	r2, r7, r2
    a182:	4297      	cmp	r7, r2
    a184:	41bf      	sbcs	r7, r7
    a186:	1a64      	subs	r4, r4, r1
    a188:	427f      	negs	r7, r7
    a18a:	1be4      	subs	r4, r4, r7
    a18c:	2601      	movs	r6, #1
    a18e:	0017      	movs	r7, r2
    a190:	e024      	b.n	a1dc <__aeabi_dadd+0xb0>
    a192:	4bc6      	ldr	r3, [pc, #792]	; (a4ac <__aeabi_dadd+0x380>)
    a194:	429e      	cmp	r6, r3
    a196:	d04d      	beq.n	a234 <__aeabi_dadd+0x108>
    a198:	2380      	movs	r3, #128	; 0x80
    a19a:	041b      	lsls	r3, r3, #16
    a19c:	4319      	orrs	r1, r3
    a19e:	2d38      	cmp	r5, #56	; 0x38
    a1a0:	dd00      	ble.n	a1a4 <__aeabi_dadd+0x78>
    a1a2:	e107      	b.n	a3b4 <__aeabi_dadd+0x288>
    a1a4:	2d1f      	cmp	r5, #31
    a1a6:	dd00      	ble.n	a1aa <__aeabi_dadd+0x7e>
    a1a8:	e138      	b.n	a41c <__aeabi_dadd+0x2f0>
    a1aa:	2020      	movs	r0, #32
    a1ac:	1b43      	subs	r3, r0, r5
    a1ae:	469a      	mov	sl, r3
    a1b0:	000b      	movs	r3, r1
    a1b2:	4650      	mov	r0, sl
    a1b4:	4083      	lsls	r3, r0
    a1b6:	4699      	mov	r9, r3
    a1b8:	0013      	movs	r3, r2
    a1ba:	4648      	mov	r0, r9
    a1bc:	40eb      	lsrs	r3, r5
    a1be:	4318      	orrs	r0, r3
    a1c0:	0003      	movs	r3, r0
    a1c2:	4650      	mov	r0, sl
    a1c4:	4082      	lsls	r2, r0
    a1c6:	1e50      	subs	r0, r2, #1
    a1c8:	4182      	sbcs	r2, r0
    a1ca:	40e9      	lsrs	r1, r5
    a1cc:	431a      	orrs	r2, r3
    a1ce:	1aba      	subs	r2, r7, r2
    a1d0:	1a61      	subs	r1, r4, r1
    a1d2:	4297      	cmp	r7, r2
    a1d4:	41a4      	sbcs	r4, r4
    a1d6:	0017      	movs	r7, r2
    a1d8:	4264      	negs	r4, r4
    a1da:	1b0c      	subs	r4, r1, r4
    a1dc:	0223      	lsls	r3, r4, #8
    a1de:	d562      	bpl.n	a2a6 <__aeabi_dadd+0x17a>
    a1e0:	0264      	lsls	r4, r4, #9
    a1e2:	0a65      	lsrs	r5, r4, #9
    a1e4:	2d00      	cmp	r5, #0
    a1e6:	d100      	bne.n	a1ea <__aeabi_dadd+0xbe>
    a1e8:	e0df      	b.n	a3aa <__aeabi_dadd+0x27e>
    a1ea:	0028      	movs	r0, r5
    a1ec:	f001 fe22 	bl	be34 <__clzsi2>
    a1f0:	0003      	movs	r3, r0
    a1f2:	3b08      	subs	r3, #8
    a1f4:	2b1f      	cmp	r3, #31
    a1f6:	dd00      	ble.n	a1fa <__aeabi_dadd+0xce>
    a1f8:	e0d2      	b.n	a3a0 <__aeabi_dadd+0x274>
    a1fa:	2220      	movs	r2, #32
    a1fc:	003c      	movs	r4, r7
    a1fe:	1ad2      	subs	r2, r2, r3
    a200:	409d      	lsls	r5, r3
    a202:	40d4      	lsrs	r4, r2
    a204:	409f      	lsls	r7, r3
    a206:	4325      	orrs	r5, r4
    a208:	429e      	cmp	r6, r3
    a20a:	dd00      	ble.n	a20e <__aeabi_dadd+0xe2>
    a20c:	e0c4      	b.n	a398 <__aeabi_dadd+0x26c>
    a20e:	1b9e      	subs	r6, r3, r6
    a210:	1c73      	adds	r3, r6, #1
    a212:	2b1f      	cmp	r3, #31
    a214:	dd00      	ble.n	a218 <__aeabi_dadd+0xec>
    a216:	e0f1      	b.n	a3fc <__aeabi_dadd+0x2d0>
    a218:	2220      	movs	r2, #32
    a21a:	0038      	movs	r0, r7
    a21c:	0029      	movs	r1, r5
    a21e:	1ad2      	subs	r2, r2, r3
    a220:	40d8      	lsrs	r0, r3
    a222:	4091      	lsls	r1, r2
    a224:	4097      	lsls	r7, r2
    a226:	002c      	movs	r4, r5
    a228:	4301      	orrs	r1, r0
    a22a:	1e78      	subs	r0, r7, #1
    a22c:	4187      	sbcs	r7, r0
    a22e:	40dc      	lsrs	r4, r3
    a230:	2600      	movs	r6, #0
    a232:	430f      	orrs	r7, r1
    a234:	077b      	lsls	r3, r7, #29
    a236:	d009      	beq.n	a24c <__aeabi_dadd+0x120>
    a238:	230f      	movs	r3, #15
    a23a:	403b      	ands	r3, r7
    a23c:	2b04      	cmp	r3, #4
    a23e:	d005      	beq.n	a24c <__aeabi_dadd+0x120>
    a240:	1d3b      	adds	r3, r7, #4
    a242:	42bb      	cmp	r3, r7
    a244:	41bf      	sbcs	r7, r7
    a246:	427f      	negs	r7, r7
    a248:	19e4      	adds	r4, r4, r7
    a24a:	001f      	movs	r7, r3
    a24c:	0223      	lsls	r3, r4, #8
    a24e:	d52c      	bpl.n	a2aa <__aeabi_dadd+0x17e>
    a250:	4b96      	ldr	r3, [pc, #600]	; (a4ac <__aeabi_dadd+0x380>)
    a252:	3601      	adds	r6, #1
    a254:	429e      	cmp	r6, r3
    a256:	d100      	bne.n	a25a <__aeabi_dadd+0x12e>
    a258:	e09a      	b.n	a390 <__aeabi_dadd+0x264>
    a25a:	4645      	mov	r5, r8
    a25c:	4b94      	ldr	r3, [pc, #592]	; (a4b0 <__aeabi_dadd+0x384>)
    a25e:	08ff      	lsrs	r7, r7, #3
    a260:	401c      	ands	r4, r3
    a262:	0760      	lsls	r0, r4, #29
    a264:	0576      	lsls	r6, r6, #21
    a266:	0264      	lsls	r4, r4, #9
    a268:	4307      	orrs	r7, r0
    a26a:	0b24      	lsrs	r4, r4, #12
    a26c:	0d76      	lsrs	r6, r6, #21
    a26e:	2100      	movs	r1, #0
    a270:	0324      	lsls	r4, r4, #12
    a272:	0b23      	lsrs	r3, r4, #12
    a274:	0d0c      	lsrs	r4, r1, #20
    a276:	4a8f      	ldr	r2, [pc, #572]	; (a4b4 <__aeabi_dadd+0x388>)
    a278:	0524      	lsls	r4, r4, #20
    a27a:	431c      	orrs	r4, r3
    a27c:	4014      	ands	r4, r2
    a27e:	0533      	lsls	r3, r6, #20
    a280:	4323      	orrs	r3, r4
    a282:	005b      	lsls	r3, r3, #1
    a284:	07ed      	lsls	r5, r5, #31
    a286:	085b      	lsrs	r3, r3, #1
    a288:	432b      	orrs	r3, r5
    a28a:	0038      	movs	r0, r7
    a28c:	0019      	movs	r1, r3
    a28e:	bc3c      	pop	{r2, r3, r4, r5}
    a290:	4690      	mov	r8, r2
    a292:	4699      	mov	r9, r3
    a294:	46a2      	mov	sl, r4
    a296:	46ab      	mov	fp, r5
    a298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a29a:	4664      	mov	r4, ip
    a29c:	4304      	orrs	r4, r0
    a29e:	d100      	bne.n	a2a2 <__aeabi_dadd+0x176>
    a2a0:	e211      	b.n	a6c6 <__aeabi_dadd+0x59a>
    a2a2:	0004      	movs	r4, r0
    a2a4:	4667      	mov	r7, ip
    a2a6:	077b      	lsls	r3, r7, #29
    a2a8:	d1c6      	bne.n	a238 <__aeabi_dadd+0x10c>
    a2aa:	4645      	mov	r5, r8
    a2ac:	0760      	lsls	r0, r4, #29
    a2ae:	08ff      	lsrs	r7, r7, #3
    a2b0:	4307      	orrs	r7, r0
    a2b2:	08e4      	lsrs	r4, r4, #3
    a2b4:	4b7d      	ldr	r3, [pc, #500]	; (a4ac <__aeabi_dadd+0x380>)
    a2b6:	429e      	cmp	r6, r3
    a2b8:	d030      	beq.n	a31c <__aeabi_dadd+0x1f0>
    a2ba:	0324      	lsls	r4, r4, #12
    a2bc:	0576      	lsls	r6, r6, #21
    a2be:	0b24      	lsrs	r4, r4, #12
    a2c0:	0d76      	lsrs	r6, r6, #21
    a2c2:	e7d4      	b.n	a26e <__aeabi_dadd+0x142>
    a2c4:	1a33      	subs	r3, r6, r0
    a2c6:	469a      	mov	sl, r3
    a2c8:	2b00      	cmp	r3, #0
    a2ca:	dd78      	ble.n	a3be <__aeabi_dadd+0x292>
    a2cc:	2800      	cmp	r0, #0
    a2ce:	d031      	beq.n	a334 <__aeabi_dadd+0x208>
    a2d0:	4876      	ldr	r0, [pc, #472]	; (a4ac <__aeabi_dadd+0x380>)
    a2d2:	4286      	cmp	r6, r0
    a2d4:	d0ae      	beq.n	a234 <__aeabi_dadd+0x108>
    a2d6:	2080      	movs	r0, #128	; 0x80
    a2d8:	0400      	lsls	r0, r0, #16
    a2da:	4301      	orrs	r1, r0
    a2dc:	4653      	mov	r3, sl
    a2de:	2b38      	cmp	r3, #56	; 0x38
    a2e0:	dc00      	bgt.n	a2e4 <__aeabi_dadd+0x1b8>
    a2e2:	e0e9      	b.n	a4b8 <__aeabi_dadd+0x38c>
    a2e4:	430a      	orrs	r2, r1
    a2e6:	1e51      	subs	r1, r2, #1
    a2e8:	418a      	sbcs	r2, r1
    a2ea:	2100      	movs	r1, #0
    a2ec:	19d2      	adds	r2, r2, r7
    a2ee:	42ba      	cmp	r2, r7
    a2f0:	41bf      	sbcs	r7, r7
    a2f2:	1909      	adds	r1, r1, r4
    a2f4:	427c      	negs	r4, r7
    a2f6:	0017      	movs	r7, r2
    a2f8:	190c      	adds	r4, r1, r4
    a2fa:	0223      	lsls	r3, r4, #8
    a2fc:	d5d3      	bpl.n	a2a6 <__aeabi_dadd+0x17a>
    a2fe:	4b6b      	ldr	r3, [pc, #428]	; (a4ac <__aeabi_dadd+0x380>)
    a300:	3601      	adds	r6, #1
    a302:	429e      	cmp	r6, r3
    a304:	d100      	bne.n	a308 <__aeabi_dadd+0x1dc>
    a306:	e13a      	b.n	a57e <__aeabi_dadd+0x452>
    a308:	2001      	movs	r0, #1
    a30a:	4b69      	ldr	r3, [pc, #420]	; (a4b0 <__aeabi_dadd+0x384>)
    a30c:	401c      	ands	r4, r3
    a30e:	087b      	lsrs	r3, r7, #1
    a310:	4007      	ands	r7, r0
    a312:	431f      	orrs	r7, r3
    a314:	07e0      	lsls	r0, r4, #31
    a316:	4307      	orrs	r7, r0
    a318:	0864      	lsrs	r4, r4, #1
    a31a:	e78b      	b.n	a234 <__aeabi_dadd+0x108>
    a31c:	0023      	movs	r3, r4
    a31e:	433b      	orrs	r3, r7
    a320:	d100      	bne.n	a324 <__aeabi_dadd+0x1f8>
    a322:	e1cb      	b.n	a6bc <__aeabi_dadd+0x590>
    a324:	2280      	movs	r2, #128	; 0x80
    a326:	0312      	lsls	r2, r2, #12
    a328:	4314      	orrs	r4, r2
    a32a:	0324      	lsls	r4, r4, #12
    a32c:	0b24      	lsrs	r4, r4, #12
    a32e:	e79e      	b.n	a26e <__aeabi_dadd+0x142>
    a330:	002e      	movs	r6, r5
    a332:	e77f      	b.n	a234 <__aeabi_dadd+0x108>
    a334:	0008      	movs	r0, r1
    a336:	4310      	orrs	r0, r2
    a338:	d100      	bne.n	a33c <__aeabi_dadd+0x210>
    a33a:	e0b4      	b.n	a4a6 <__aeabi_dadd+0x37a>
    a33c:	1e58      	subs	r0, r3, #1
    a33e:	2800      	cmp	r0, #0
    a340:	d000      	beq.n	a344 <__aeabi_dadd+0x218>
    a342:	e0de      	b.n	a502 <__aeabi_dadd+0x3d6>
    a344:	18ba      	adds	r2, r7, r2
    a346:	42ba      	cmp	r2, r7
    a348:	419b      	sbcs	r3, r3
    a34a:	1864      	adds	r4, r4, r1
    a34c:	425b      	negs	r3, r3
    a34e:	18e4      	adds	r4, r4, r3
    a350:	0017      	movs	r7, r2
    a352:	2601      	movs	r6, #1
    a354:	0223      	lsls	r3, r4, #8
    a356:	d5a6      	bpl.n	a2a6 <__aeabi_dadd+0x17a>
    a358:	2602      	movs	r6, #2
    a35a:	e7d5      	b.n	a308 <__aeabi_dadd+0x1dc>
    a35c:	2d00      	cmp	r5, #0
    a35e:	d16e      	bne.n	a43e <__aeabi_dadd+0x312>
    a360:	1c70      	adds	r0, r6, #1
    a362:	0540      	lsls	r0, r0, #21
    a364:	0d40      	lsrs	r0, r0, #21
    a366:	2801      	cmp	r0, #1
    a368:	dc00      	bgt.n	a36c <__aeabi_dadd+0x240>
    a36a:	e0f9      	b.n	a560 <__aeabi_dadd+0x434>
    a36c:	1ab8      	subs	r0, r7, r2
    a36e:	4684      	mov	ip, r0
    a370:	4287      	cmp	r7, r0
    a372:	4180      	sbcs	r0, r0
    a374:	1ae5      	subs	r5, r4, r3
    a376:	4240      	negs	r0, r0
    a378:	1a2d      	subs	r5, r5, r0
    a37a:	0228      	lsls	r0, r5, #8
    a37c:	d400      	bmi.n	a380 <__aeabi_dadd+0x254>
    a37e:	e089      	b.n	a494 <__aeabi_dadd+0x368>
    a380:	1bd7      	subs	r7, r2, r7
    a382:	42ba      	cmp	r2, r7
    a384:	4192      	sbcs	r2, r2
    a386:	1b1c      	subs	r4, r3, r4
    a388:	4252      	negs	r2, r2
    a38a:	1aa5      	subs	r5, r4, r2
    a38c:	46d8      	mov	r8, fp
    a38e:	e729      	b.n	a1e4 <__aeabi_dadd+0xb8>
    a390:	4645      	mov	r5, r8
    a392:	2400      	movs	r4, #0
    a394:	2700      	movs	r7, #0
    a396:	e76a      	b.n	a26e <__aeabi_dadd+0x142>
    a398:	4c45      	ldr	r4, [pc, #276]	; (a4b0 <__aeabi_dadd+0x384>)
    a39a:	1af6      	subs	r6, r6, r3
    a39c:	402c      	ands	r4, r5
    a39e:	e749      	b.n	a234 <__aeabi_dadd+0x108>
    a3a0:	003d      	movs	r5, r7
    a3a2:	3828      	subs	r0, #40	; 0x28
    a3a4:	4085      	lsls	r5, r0
    a3a6:	2700      	movs	r7, #0
    a3a8:	e72e      	b.n	a208 <__aeabi_dadd+0xdc>
    a3aa:	0038      	movs	r0, r7
    a3ac:	f001 fd42 	bl	be34 <__clzsi2>
    a3b0:	3020      	adds	r0, #32
    a3b2:	e71d      	b.n	a1f0 <__aeabi_dadd+0xc4>
    a3b4:	430a      	orrs	r2, r1
    a3b6:	1e51      	subs	r1, r2, #1
    a3b8:	418a      	sbcs	r2, r1
    a3ba:	2100      	movs	r1, #0
    a3bc:	e707      	b.n	a1ce <__aeabi_dadd+0xa2>
    a3be:	2b00      	cmp	r3, #0
    a3c0:	d000      	beq.n	a3c4 <__aeabi_dadd+0x298>
    a3c2:	e0f3      	b.n	a5ac <__aeabi_dadd+0x480>
    a3c4:	1c70      	adds	r0, r6, #1
    a3c6:	0543      	lsls	r3, r0, #21
    a3c8:	0d5b      	lsrs	r3, r3, #21
    a3ca:	2b01      	cmp	r3, #1
    a3cc:	dc00      	bgt.n	a3d0 <__aeabi_dadd+0x2a4>
    a3ce:	e0ad      	b.n	a52c <__aeabi_dadd+0x400>
    a3d0:	4b36      	ldr	r3, [pc, #216]	; (a4ac <__aeabi_dadd+0x380>)
    a3d2:	4298      	cmp	r0, r3
    a3d4:	d100      	bne.n	a3d8 <__aeabi_dadd+0x2ac>
    a3d6:	e0d1      	b.n	a57c <__aeabi_dadd+0x450>
    a3d8:	18ba      	adds	r2, r7, r2
    a3da:	42ba      	cmp	r2, r7
    a3dc:	41bf      	sbcs	r7, r7
    a3de:	1864      	adds	r4, r4, r1
    a3e0:	427f      	negs	r7, r7
    a3e2:	19e4      	adds	r4, r4, r7
    a3e4:	07e7      	lsls	r7, r4, #31
    a3e6:	0852      	lsrs	r2, r2, #1
    a3e8:	4317      	orrs	r7, r2
    a3ea:	0864      	lsrs	r4, r4, #1
    a3ec:	0006      	movs	r6, r0
    a3ee:	e721      	b.n	a234 <__aeabi_dadd+0x108>
    a3f0:	482e      	ldr	r0, [pc, #184]	; (a4ac <__aeabi_dadd+0x380>)
    a3f2:	4285      	cmp	r5, r0
    a3f4:	d100      	bne.n	a3f8 <__aeabi_dadd+0x2cc>
    a3f6:	e093      	b.n	a520 <__aeabi_dadd+0x3f4>
    a3f8:	001d      	movs	r5, r3
    a3fa:	e6d0      	b.n	a19e <__aeabi_dadd+0x72>
    a3fc:	0029      	movs	r1, r5
    a3fe:	3e1f      	subs	r6, #31
    a400:	40f1      	lsrs	r1, r6
    a402:	2b20      	cmp	r3, #32
    a404:	d100      	bne.n	a408 <__aeabi_dadd+0x2dc>
    a406:	e08d      	b.n	a524 <__aeabi_dadd+0x3f8>
    a408:	2240      	movs	r2, #64	; 0x40
    a40a:	1ad3      	subs	r3, r2, r3
    a40c:	409d      	lsls	r5, r3
    a40e:	432f      	orrs	r7, r5
    a410:	1e7d      	subs	r5, r7, #1
    a412:	41af      	sbcs	r7, r5
    a414:	2400      	movs	r4, #0
    a416:	430f      	orrs	r7, r1
    a418:	2600      	movs	r6, #0
    a41a:	e744      	b.n	a2a6 <__aeabi_dadd+0x17a>
    a41c:	002b      	movs	r3, r5
    a41e:	0008      	movs	r0, r1
    a420:	3b20      	subs	r3, #32
    a422:	40d8      	lsrs	r0, r3
    a424:	0003      	movs	r3, r0
    a426:	2d20      	cmp	r5, #32
    a428:	d100      	bne.n	a42c <__aeabi_dadd+0x300>
    a42a:	e07d      	b.n	a528 <__aeabi_dadd+0x3fc>
    a42c:	2040      	movs	r0, #64	; 0x40
    a42e:	1b45      	subs	r5, r0, r5
    a430:	40a9      	lsls	r1, r5
    a432:	430a      	orrs	r2, r1
    a434:	1e51      	subs	r1, r2, #1
    a436:	418a      	sbcs	r2, r1
    a438:	2100      	movs	r1, #0
    a43a:	431a      	orrs	r2, r3
    a43c:	e6c7      	b.n	a1ce <__aeabi_dadd+0xa2>
    a43e:	2e00      	cmp	r6, #0
    a440:	d050      	beq.n	a4e4 <__aeabi_dadd+0x3b8>
    a442:	4e1a      	ldr	r6, [pc, #104]	; (a4ac <__aeabi_dadd+0x380>)
    a444:	42b0      	cmp	r0, r6
    a446:	d057      	beq.n	a4f8 <__aeabi_dadd+0x3cc>
    a448:	2680      	movs	r6, #128	; 0x80
    a44a:	426b      	negs	r3, r5
    a44c:	4699      	mov	r9, r3
    a44e:	0436      	lsls	r6, r6, #16
    a450:	4334      	orrs	r4, r6
    a452:	464b      	mov	r3, r9
    a454:	2b38      	cmp	r3, #56	; 0x38
    a456:	dd00      	ble.n	a45a <__aeabi_dadd+0x32e>
    a458:	e0d6      	b.n	a608 <__aeabi_dadd+0x4dc>
    a45a:	2b1f      	cmp	r3, #31
    a45c:	dd00      	ble.n	a460 <__aeabi_dadd+0x334>
    a45e:	e135      	b.n	a6cc <__aeabi_dadd+0x5a0>
    a460:	2620      	movs	r6, #32
    a462:	1af5      	subs	r5, r6, r3
    a464:	0026      	movs	r6, r4
    a466:	40ae      	lsls	r6, r5
    a468:	46b2      	mov	sl, r6
    a46a:	003e      	movs	r6, r7
    a46c:	40de      	lsrs	r6, r3
    a46e:	46ac      	mov	ip, r5
    a470:	0035      	movs	r5, r6
    a472:	4656      	mov	r6, sl
    a474:	432e      	orrs	r6, r5
    a476:	4665      	mov	r5, ip
    a478:	40af      	lsls	r7, r5
    a47a:	1e7d      	subs	r5, r7, #1
    a47c:	41af      	sbcs	r7, r5
    a47e:	40dc      	lsrs	r4, r3
    a480:	4337      	orrs	r7, r6
    a482:	1bd7      	subs	r7, r2, r7
    a484:	42ba      	cmp	r2, r7
    a486:	4192      	sbcs	r2, r2
    a488:	1b0c      	subs	r4, r1, r4
    a48a:	4252      	negs	r2, r2
    a48c:	1aa4      	subs	r4, r4, r2
    a48e:	0006      	movs	r6, r0
    a490:	46d8      	mov	r8, fp
    a492:	e6a3      	b.n	a1dc <__aeabi_dadd+0xb0>
    a494:	4664      	mov	r4, ip
    a496:	4667      	mov	r7, ip
    a498:	432c      	orrs	r4, r5
    a49a:	d000      	beq.n	a49e <__aeabi_dadd+0x372>
    a49c:	e6a2      	b.n	a1e4 <__aeabi_dadd+0xb8>
    a49e:	2500      	movs	r5, #0
    a4a0:	2600      	movs	r6, #0
    a4a2:	2700      	movs	r7, #0
    a4a4:	e706      	b.n	a2b4 <__aeabi_dadd+0x188>
    a4a6:	001e      	movs	r6, r3
    a4a8:	e6c4      	b.n	a234 <__aeabi_dadd+0x108>
    a4aa:	46c0      	nop			; (mov r8, r8)
    a4ac:	000007ff 	.word	0x000007ff
    a4b0:	ff7fffff 	.word	0xff7fffff
    a4b4:	800fffff 	.word	0x800fffff
    a4b8:	2b1f      	cmp	r3, #31
    a4ba:	dc63      	bgt.n	a584 <__aeabi_dadd+0x458>
    a4bc:	2020      	movs	r0, #32
    a4be:	1ac3      	subs	r3, r0, r3
    a4c0:	0008      	movs	r0, r1
    a4c2:	4098      	lsls	r0, r3
    a4c4:	469c      	mov	ip, r3
    a4c6:	4683      	mov	fp, r0
    a4c8:	4653      	mov	r3, sl
    a4ca:	0010      	movs	r0, r2
    a4cc:	40d8      	lsrs	r0, r3
    a4ce:	0003      	movs	r3, r0
    a4d0:	4658      	mov	r0, fp
    a4d2:	4318      	orrs	r0, r3
    a4d4:	4663      	mov	r3, ip
    a4d6:	409a      	lsls	r2, r3
    a4d8:	1e53      	subs	r3, r2, #1
    a4da:	419a      	sbcs	r2, r3
    a4dc:	4653      	mov	r3, sl
    a4de:	4302      	orrs	r2, r0
    a4e0:	40d9      	lsrs	r1, r3
    a4e2:	e703      	b.n	a2ec <__aeabi_dadd+0x1c0>
    a4e4:	0026      	movs	r6, r4
    a4e6:	433e      	orrs	r6, r7
    a4e8:	d006      	beq.n	a4f8 <__aeabi_dadd+0x3cc>
    a4ea:	43eb      	mvns	r3, r5
    a4ec:	4699      	mov	r9, r3
    a4ee:	2b00      	cmp	r3, #0
    a4f0:	d0c7      	beq.n	a482 <__aeabi_dadd+0x356>
    a4f2:	4e94      	ldr	r6, [pc, #592]	; (a744 <__aeabi_dadd+0x618>)
    a4f4:	42b0      	cmp	r0, r6
    a4f6:	d1ac      	bne.n	a452 <__aeabi_dadd+0x326>
    a4f8:	000c      	movs	r4, r1
    a4fa:	0017      	movs	r7, r2
    a4fc:	0006      	movs	r6, r0
    a4fe:	46d8      	mov	r8, fp
    a500:	e698      	b.n	a234 <__aeabi_dadd+0x108>
    a502:	4b90      	ldr	r3, [pc, #576]	; (a744 <__aeabi_dadd+0x618>)
    a504:	459a      	cmp	sl, r3
    a506:	d00b      	beq.n	a520 <__aeabi_dadd+0x3f4>
    a508:	4682      	mov	sl, r0
    a50a:	e6e7      	b.n	a2dc <__aeabi_dadd+0x1b0>
    a50c:	2800      	cmp	r0, #0
    a50e:	d000      	beq.n	a512 <__aeabi_dadd+0x3e6>
    a510:	e09e      	b.n	a650 <__aeabi_dadd+0x524>
    a512:	0018      	movs	r0, r3
    a514:	4310      	orrs	r0, r2
    a516:	d100      	bne.n	a51a <__aeabi_dadd+0x3ee>
    a518:	e0e9      	b.n	a6ee <__aeabi_dadd+0x5c2>
    a51a:	001c      	movs	r4, r3
    a51c:	0017      	movs	r7, r2
    a51e:	46d8      	mov	r8, fp
    a520:	4e88      	ldr	r6, [pc, #544]	; (a744 <__aeabi_dadd+0x618>)
    a522:	e687      	b.n	a234 <__aeabi_dadd+0x108>
    a524:	2500      	movs	r5, #0
    a526:	e772      	b.n	a40e <__aeabi_dadd+0x2e2>
    a528:	2100      	movs	r1, #0
    a52a:	e782      	b.n	a432 <__aeabi_dadd+0x306>
    a52c:	0023      	movs	r3, r4
    a52e:	433b      	orrs	r3, r7
    a530:	2e00      	cmp	r6, #0
    a532:	d000      	beq.n	a536 <__aeabi_dadd+0x40a>
    a534:	e0ab      	b.n	a68e <__aeabi_dadd+0x562>
    a536:	2b00      	cmp	r3, #0
    a538:	d100      	bne.n	a53c <__aeabi_dadd+0x410>
    a53a:	e0e7      	b.n	a70c <__aeabi_dadd+0x5e0>
    a53c:	000b      	movs	r3, r1
    a53e:	4313      	orrs	r3, r2
    a540:	d100      	bne.n	a544 <__aeabi_dadd+0x418>
    a542:	e677      	b.n	a234 <__aeabi_dadd+0x108>
    a544:	18ba      	adds	r2, r7, r2
    a546:	42ba      	cmp	r2, r7
    a548:	41bf      	sbcs	r7, r7
    a54a:	1864      	adds	r4, r4, r1
    a54c:	427f      	negs	r7, r7
    a54e:	19e4      	adds	r4, r4, r7
    a550:	0223      	lsls	r3, r4, #8
    a552:	d400      	bmi.n	a556 <__aeabi_dadd+0x42a>
    a554:	e0f2      	b.n	a73c <__aeabi_dadd+0x610>
    a556:	4b7c      	ldr	r3, [pc, #496]	; (a748 <__aeabi_dadd+0x61c>)
    a558:	0017      	movs	r7, r2
    a55a:	401c      	ands	r4, r3
    a55c:	0006      	movs	r6, r0
    a55e:	e669      	b.n	a234 <__aeabi_dadd+0x108>
    a560:	0020      	movs	r0, r4
    a562:	4338      	orrs	r0, r7
    a564:	2e00      	cmp	r6, #0
    a566:	d1d1      	bne.n	a50c <__aeabi_dadd+0x3e0>
    a568:	2800      	cmp	r0, #0
    a56a:	d15b      	bne.n	a624 <__aeabi_dadd+0x4f8>
    a56c:	001c      	movs	r4, r3
    a56e:	4314      	orrs	r4, r2
    a570:	d100      	bne.n	a574 <__aeabi_dadd+0x448>
    a572:	e0a8      	b.n	a6c6 <__aeabi_dadd+0x59a>
    a574:	001c      	movs	r4, r3
    a576:	0017      	movs	r7, r2
    a578:	46d8      	mov	r8, fp
    a57a:	e65b      	b.n	a234 <__aeabi_dadd+0x108>
    a57c:	0006      	movs	r6, r0
    a57e:	2400      	movs	r4, #0
    a580:	2700      	movs	r7, #0
    a582:	e697      	b.n	a2b4 <__aeabi_dadd+0x188>
    a584:	4650      	mov	r0, sl
    a586:	000b      	movs	r3, r1
    a588:	3820      	subs	r0, #32
    a58a:	40c3      	lsrs	r3, r0
    a58c:	4699      	mov	r9, r3
    a58e:	4653      	mov	r3, sl
    a590:	2b20      	cmp	r3, #32
    a592:	d100      	bne.n	a596 <__aeabi_dadd+0x46a>
    a594:	e095      	b.n	a6c2 <__aeabi_dadd+0x596>
    a596:	2340      	movs	r3, #64	; 0x40
    a598:	4650      	mov	r0, sl
    a59a:	1a1b      	subs	r3, r3, r0
    a59c:	4099      	lsls	r1, r3
    a59e:	430a      	orrs	r2, r1
    a5a0:	1e51      	subs	r1, r2, #1
    a5a2:	418a      	sbcs	r2, r1
    a5a4:	464b      	mov	r3, r9
    a5a6:	2100      	movs	r1, #0
    a5a8:	431a      	orrs	r2, r3
    a5aa:	e69f      	b.n	a2ec <__aeabi_dadd+0x1c0>
    a5ac:	2e00      	cmp	r6, #0
    a5ae:	d130      	bne.n	a612 <__aeabi_dadd+0x4e6>
    a5b0:	0026      	movs	r6, r4
    a5b2:	433e      	orrs	r6, r7
    a5b4:	d067      	beq.n	a686 <__aeabi_dadd+0x55a>
    a5b6:	43db      	mvns	r3, r3
    a5b8:	469a      	mov	sl, r3
    a5ba:	2b00      	cmp	r3, #0
    a5bc:	d01c      	beq.n	a5f8 <__aeabi_dadd+0x4cc>
    a5be:	4e61      	ldr	r6, [pc, #388]	; (a744 <__aeabi_dadd+0x618>)
    a5c0:	42b0      	cmp	r0, r6
    a5c2:	d060      	beq.n	a686 <__aeabi_dadd+0x55a>
    a5c4:	4653      	mov	r3, sl
    a5c6:	2b38      	cmp	r3, #56	; 0x38
    a5c8:	dd00      	ble.n	a5cc <__aeabi_dadd+0x4a0>
    a5ca:	e096      	b.n	a6fa <__aeabi_dadd+0x5ce>
    a5cc:	2b1f      	cmp	r3, #31
    a5ce:	dd00      	ble.n	a5d2 <__aeabi_dadd+0x4a6>
    a5d0:	e09f      	b.n	a712 <__aeabi_dadd+0x5e6>
    a5d2:	2620      	movs	r6, #32
    a5d4:	1af3      	subs	r3, r6, r3
    a5d6:	0026      	movs	r6, r4
    a5d8:	409e      	lsls	r6, r3
    a5da:	469c      	mov	ip, r3
    a5dc:	46b3      	mov	fp, r6
    a5de:	4653      	mov	r3, sl
    a5e0:	003e      	movs	r6, r7
    a5e2:	40de      	lsrs	r6, r3
    a5e4:	0033      	movs	r3, r6
    a5e6:	465e      	mov	r6, fp
    a5e8:	431e      	orrs	r6, r3
    a5ea:	4663      	mov	r3, ip
    a5ec:	409f      	lsls	r7, r3
    a5ee:	1e7b      	subs	r3, r7, #1
    a5f0:	419f      	sbcs	r7, r3
    a5f2:	4653      	mov	r3, sl
    a5f4:	40dc      	lsrs	r4, r3
    a5f6:	4337      	orrs	r7, r6
    a5f8:	18bf      	adds	r7, r7, r2
    a5fa:	4297      	cmp	r7, r2
    a5fc:	4192      	sbcs	r2, r2
    a5fe:	1864      	adds	r4, r4, r1
    a600:	4252      	negs	r2, r2
    a602:	18a4      	adds	r4, r4, r2
    a604:	0006      	movs	r6, r0
    a606:	e678      	b.n	a2fa <__aeabi_dadd+0x1ce>
    a608:	4327      	orrs	r7, r4
    a60a:	1e7c      	subs	r4, r7, #1
    a60c:	41a7      	sbcs	r7, r4
    a60e:	2400      	movs	r4, #0
    a610:	e737      	b.n	a482 <__aeabi_dadd+0x356>
    a612:	4e4c      	ldr	r6, [pc, #304]	; (a744 <__aeabi_dadd+0x618>)
    a614:	42b0      	cmp	r0, r6
    a616:	d036      	beq.n	a686 <__aeabi_dadd+0x55a>
    a618:	2680      	movs	r6, #128	; 0x80
    a61a:	425b      	negs	r3, r3
    a61c:	0436      	lsls	r6, r6, #16
    a61e:	469a      	mov	sl, r3
    a620:	4334      	orrs	r4, r6
    a622:	e7cf      	b.n	a5c4 <__aeabi_dadd+0x498>
    a624:	0018      	movs	r0, r3
    a626:	4310      	orrs	r0, r2
    a628:	d100      	bne.n	a62c <__aeabi_dadd+0x500>
    a62a:	e603      	b.n	a234 <__aeabi_dadd+0x108>
    a62c:	1ab8      	subs	r0, r7, r2
    a62e:	4684      	mov	ip, r0
    a630:	4567      	cmp	r7, ip
    a632:	41ad      	sbcs	r5, r5
    a634:	1ae0      	subs	r0, r4, r3
    a636:	426d      	negs	r5, r5
    a638:	1b40      	subs	r0, r0, r5
    a63a:	0205      	lsls	r5, r0, #8
    a63c:	d400      	bmi.n	a640 <__aeabi_dadd+0x514>
    a63e:	e62c      	b.n	a29a <__aeabi_dadd+0x16e>
    a640:	1bd7      	subs	r7, r2, r7
    a642:	42ba      	cmp	r2, r7
    a644:	4192      	sbcs	r2, r2
    a646:	1b1c      	subs	r4, r3, r4
    a648:	4252      	negs	r2, r2
    a64a:	1aa4      	subs	r4, r4, r2
    a64c:	46d8      	mov	r8, fp
    a64e:	e5f1      	b.n	a234 <__aeabi_dadd+0x108>
    a650:	0018      	movs	r0, r3
    a652:	4310      	orrs	r0, r2
    a654:	d100      	bne.n	a658 <__aeabi_dadd+0x52c>
    a656:	e763      	b.n	a520 <__aeabi_dadd+0x3f4>
    a658:	08f8      	lsrs	r0, r7, #3
    a65a:	0767      	lsls	r7, r4, #29
    a65c:	4307      	orrs	r7, r0
    a65e:	2080      	movs	r0, #128	; 0x80
    a660:	08e4      	lsrs	r4, r4, #3
    a662:	0300      	lsls	r0, r0, #12
    a664:	4204      	tst	r4, r0
    a666:	d008      	beq.n	a67a <__aeabi_dadd+0x54e>
    a668:	08dd      	lsrs	r5, r3, #3
    a66a:	4205      	tst	r5, r0
    a66c:	d105      	bne.n	a67a <__aeabi_dadd+0x54e>
    a66e:	08d2      	lsrs	r2, r2, #3
    a670:	0759      	lsls	r1, r3, #29
    a672:	4311      	orrs	r1, r2
    a674:	000f      	movs	r7, r1
    a676:	002c      	movs	r4, r5
    a678:	46d8      	mov	r8, fp
    a67a:	0f7b      	lsrs	r3, r7, #29
    a67c:	00e4      	lsls	r4, r4, #3
    a67e:	431c      	orrs	r4, r3
    a680:	00ff      	lsls	r7, r7, #3
    a682:	4e30      	ldr	r6, [pc, #192]	; (a744 <__aeabi_dadd+0x618>)
    a684:	e5d6      	b.n	a234 <__aeabi_dadd+0x108>
    a686:	000c      	movs	r4, r1
    a688:	0017      	movs	r7, r2
    a68a:	0006      	movs	r6, r0
    a68c:	e5d2      	b.n	a234 <__aeabi_dadd+0x108>
    a68e:	2b00      	cmp	r3, #0
    a690:	d038      	beq.n	a704 <__aeabi_dadd+0x5d8>
    a692:	000b      	movs	r3, r1
    a694:	4313      	orrs	r3, r2
    a696:	d100      	bne.n	a69a <__aeabi_dadd+0x56e>
    a698:	e742      	b.n	a520 <__aeabi_dadd+0x3f4>
    a69a:	08f8      	lsrs	r0, r7, #3
    a69c:	0767      	lsls	r7, r4, #29
    a69e:	4307      	orrs	r7, r0
    a6a0:	2080      	movs	r0, #128	; 0x80
    a6a2:	08e4      	lsrs	r4, r4, #3
    a6a4:	0300      	lsls	r0, r0, #12
    a6a6:	4204      	tst	r4, r0
    a6a8:	d0e7      	beq.n	a67a <__aeabi_dadd+0x54e>
    a6aa:	08cb      	lsrs	r3, r1, #3
    a6ac:	4203      	tst	r3, r0
    a6ae:	d1e4      	bne.n	a67a <__aeabi_dadd+0x54e>
    a6b0:	08d2      	lsrs	r2, r2, #3
    a6b2:	0749      	lsls	r1, r1, #29
    a6b4:	4311      	orrs	r1, r2
    a6b6:	000f      	movs	r7, r1
    a6b8:	001c      	movs	r4, r3
    a6ba:	e7de      	b.n	a67a <__aeabi_dadd+0x54e>
    a6bc:	2700      	movs	r7, #0
    a6be:	2400      	movs	r4, #0
    a6c0:	e5d5      	b.n	a26e <__aeabi_dadd+0x142>
    a6c2:	2100      	movs	r1, #0
    a6c4:	e76b      	b.n	a59e <__aeabi_dadd+0x472>
    a6c6:	2500      	movs	r5, #0
    a6c8:	2700      	movs	r7, #0
    a6ca:	e5f3      	b.n	a2b4 <__aeabi_dadd+0x188>
    a6cc:	464e      	mov	r6, r9
    a6ce:	0025      	movs	r5, r4
    a6d0:	3e20      	subs	r6, #32
    a6d2:	40f5      	lsrs	r5, r6
    a6d4:	464b      	mov	r3, r9
    a6d6:	002e      	movs	r6, r5
    a6d8:	2b20      	cmp	r3, #32
    a6da:	d02d      	beq.n	a738 <__aeabi_dadd+0x60c>
    a6dc:	2540      	movs	r5, #64	; 0x40
    a6de:	1aed      	subs	r5, r5, r3
    a6e0:	40ac      	lsls	r4, r5
    a6e2:	4327      	orrs	r7, r4
    a6e4:	1e7c      	subs	r4, r7, #1
    a6e6:	41a7      	sbcs	r7, r4
    a6e8:	2400      	movs	r4, #0
    a6ea:	4337      	orrs	r7, r6
    a6ec:	e6c9      	b.n	a482 <__aeabi_dadd+0x356>
    a6ee:	2480      	movs	r4, #128	; 0x80
    a6f0:	2500      	movs	r5, #0
    a6f2:	0324      	lsls	r4, r4, #12
    a6f4:	4e13      	ldr	r6, [pc, #76]	; (a744 <__aeabi_dadd+0x618>)
    a6f6:	2700      	movs	r7, #0
    a6f8:	e5dc      	b.n	a2b4 <__aeabi_dadd+0x188>
    a6fa:	4327      	orrs	r7, r4
    a6fc:	1e7c      	subs	r4, r7, #1
    a6fe:	41a7      	sbcs	r7, r4
    a700:	2400      	movs	r4, #0
    a702:	e779      	b.n	a5f8 <__aeabi_dadd+0x4cc>
    a704:	000c      	movs	r4, r1
    a706:	0017      	movs	r7, r2
    a708:	4e0e      	ldr	r6, [pc, #56]	; (a744 <__aeabi_dadd+0x618>)
    a70a:	e593      	b.n	a234 <__aeabi_dadd+0x108>
    a70c:	000c      	movs	r4, r1
    a70e:	0017      	movs	r7, r2
    a710:	e590      	b.n	a234 <__aeabi_dadd+0x108>
    a712:	4656      	mov	r6, sl
    a714:	0023      	movs	r3, r4
    a716:	3e20      	subs	r6, #32
    a718:	40f3      	lsrs	r3, r6
    a71a:	4699      	mov	r9, r3
    a71c:	4653      	mov	r3, sl
    a71e:	2b20      	cmp	r3, #32
    a720:	d00e      	beq.n	a740 <__aeabi_dadd+0x614>
    a722:	2340      	movs	r3, #64	; 0x40
    a724:	4656      	mov	r6, sl
    a726:	1b9b      	subs	r3, r3, r6
    a728:	409c      	lsls	r4, r3
    a72a:	4327      	orrs	r7, r4
    a72c:	1e7c      	subs	r4, r7, #1
    a72e:	41a7      	sbcs	r7, r4
    a730:	464b      	mov	r3, r9
    a732:	2400      	movs	r4, #0
    a734:	431f      	orrs	r7, r3
    a736:	e75f      	b.n	a5f8 <__aeabi_dadd+0x4cc>
    a738:	2400      	movs	r4, #0
    a73a:	e7d2      	b.n	a6e2 <__aeabi_dadd+0x5b6>
    a73c:	0017      	movs	r7, r2
    a73e:	e5b2      	b.n	a2a6 <__aeabi_dadd+0x17a>
    a740:	2400      	movs	r4, #0
    a742:	e7f2      	b.n	a72a <__aeabi_dadd+0x5fe>
    a744:	000007ff 	.word	0x000007ff
    a748:	ff7fffff 	.word	0xff7fffff

0000a74c <__aeabi_ddiv>:
    a74c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a74e:	4657      	mov	r7, sl
    a750:	4645      	mov	r5, r8
    a752:	46de      	mov	lr, fp
    a754:	464e      	mov	r6, r9
    a756:	b5e0      	push	{r5, r6, r7, lr}
    a758:	004c      	lsls	r4, r1, #1
    a75a:	030e      	lsls	r6, r1, #12
    a75c:	b087      	sub	sp, #28
    a75e:	4683      	mov	fp, r0
    a760:	4692      	mov	sl, r2
    a762:	001d      	movs	r5, r3
    a764:	4680      	mov	r8, r0
    a766:	0b36      	lsrs	r6, r6, #12
    a768:	0d64      	lsrs	r4, r4, #21
    a76a:	0fcf      	lsrs	r7, r1, #31
    a76c:	2c00      	cmp	r4, #0
    a76e:	d04f      	beq.n	a810 <__aeabi_ddiv+0xc4>
    a770:	4b6f      	ldr	r3, [pc, #444]	; (a930 <__aeabi_ddiv+0x1e4>)
    a772:	429c      	cmp	r4, r3
    a774:	d035      	beq.n	a7e2 <__aeabi_ddiv+0x96>
    a776:	2380      	movs	r3, #128	; 0x80
    a778:	0f42      	lsrs	r2, r0, #29
    a77a:	041b      	lsls	r3, r3, #16
    a77c:	00f6      	lsls	r6, r6, #3
    a77e:	4313      	orrs	r3, r2
    a780:	4333      	orrs	r3, r6
    a782:	4699      	mov	r9, r3
    a784:	00c3      	lsls	r3, r0, #3
    a786:	4698      	mov	r8, r3
    a788:	4b6a      	ldr	r3, [pc, #424]	; (a934 <__aeabi_ddiv+0x1e8>)
    a78a:	2600      	movs	r6, #0
    a78c:	469c      	mov	ip, r3
    a78e:	2300      	movs	r3, #0
    a790:	4464      	add	r4, ip
    a792:	9303      	str	r3, [sp, #12]
    a794:	032b      	lsls	r3, r5, #12
    a796:	0b1b      	lsrs	r3, r3, #12
    a798:	469b      	mov	fp, r3
    a79a:	006b      	lsls	r3, r5, #1
    a79c:	0fed      	lsrs	r5, r5, #31
    a79e:	4650      	mov	r0, sl
    a7a0:	0d5b      	lsrs	r3, r3, #21
    a7a2:	9501      	str	r5, [sp, #4]
    a7a4:	d05e      	beq.n	a864 <__aeabi_ddiv+0x118>
    a7a6:	4a62      	ldr	r2, [pc, #392]	; (a930 <__aeabi_ddiv+0x1e4>)
    a7a8:	4293      	cmp	r3, r2
    a7aa:	d053      	beq.n	a854 <__aeabi_ddiv+0x108>
    a7ac:	465a      	mov	r2, fp
    a7ae:	00d1      	lsls	r1, r2, #3
    a7b0:	2280      	movs	r2, #128	; 0x80
    a7b2:	0f40      	lsrs	r0, r0, #29
    a7b4:	0412      	lsls	r2, r2, #16
    a7b6:	4302      	orrs	r2, r0
    a7b8:	430a      	orrs	r2, r1
    a7ba:	4693      	mov	fp, r2
    a7bc:	4652      	mov	r2, sl
    a7be:	00d1      	lsls	r1, r2, #3
    a7c0:	4a5c      	ldr	r2, [pc, #368]	; (a934 <__aeabi_ddiv+0x1e8>)
    a7c2:	4694      	mov	ip, r2
    a7c4:	2200      	movs	r2, #0
    a7c6:	4463      	add	r3, ip
    a7c8:	0038      	movs	r0, r7
    a7ca:	4068      	eors	r0, r5
    a7cc:	4684      	mov	ip, r0
    a7ce:	9002      	str	r0, [sp, #8]
    a7d0:	1ae4      	subs	r4, r4, r3
    a7d2:	4316      	orrs	r6, r2
    a7d4:	2e0f      	cmp	r6, #15
    a7d6:	d900      	bls.n	a7da <__aeabi_ddiv+0x8e>
    a7d8:	e0b4      	b.n	a944 <__aeabi_ddiv+0x1f8>
    a7da:	4b57      	ldr	r3, [pc, #348]	; (a938 <__aeabi_ddiv+0x1ec>)
    a7dc:	00b6      	lsls	r6, r6, #2
    a7de:	599b      	ldr	r3, [r3, r6]
    a7e0:	469f      	mov	pc, r3
    a7e2:	0003      	movs	r3, r0
    a7e4:	4333      	orrs	r3, r6
    a7e6:	4699      	mov	r9, r3
    a7e8:	d16c      	bne.n	a8c4 <__aeabi_ddiv+0x178>
    a7ea:	2300      	movs	r3, #0
    a7ec:	4698      	mov	r8, r3
    a7ee:	3302      	adds	r3, #2
    a7f0:	2608      	movs	r6, #8
    a7f2:	9303      	str	r3, [sp, #12]
    a7f4:	e7ce      	b.n	a794 <__aeabi_ddiv+0x48>
    a7f6:	46cb      	mov	fp, r9
    a7f8:	4641      	mov	r1, r8
    a7fa:	9a03      	ldr	r2, [sp, #12]
    a7fc:	9701      	str	r7, [sp, #4]
    a7fe:	2a02      	cmp	r2, #2
    a800:	d165      	bne.n	a8ce <__aeabi_ddiv+0x182>
    a802:	9b01      	ldr	r3, [sp, #4]
    a804:	4c4a      	ldr	r4, [pc, #296]	; (a930 <__aeabi_ddiv+0x1e4>)
    a806:	469c      	mov	ip, r3
    a808:	2300      	movs	r3, #0
    a80a:	2200      	movs	r2, #0
    a80c:	4698      	mov	r8, r3
    a80e:	e06b      	b.n	a8e8 <__aeabi_ddiv+0x19c>
    a810:	0003      	movs	r3, r0
    a812:	4333      	orrs	r3, r6
    a814:	4699      	mov	r9, r3
    a816:	d04e      	beq.n	a8b6 <__aeabi_ddiv+0x16a>
    a818:	2e00      	cmp	r6, #0
    a81a:	d100      	bne.n	a81e <__aeabi_ddiv+0xd2>
    a81c:	e1bc      	b.n	ab98 <__aeabi_ddiv+0x44c>
    a81e:	0030      	movs	r0, r6
    a820:	f001 fb08 	bl	be34 <__clzsi2>
    a824:	0003      	movs	r3, r0
    a826:	3b0b      	subs	r3, #11
    a828:	2b1c      	cmp	r3, #28
    a82a:	dd00      	ble.n	a82e <__aeabi_ddiv+0xe2>
    a82c:	e1ac      	b.n	ab88 <__aeabi_ddiv+0x43c>
    a82e:	221d      	movs	r2, #29
    a830:	1ad3      	subs	r3, r2, r3
    a832:	465a      	mov	r2, fp
    a834:	0001      	movs	r1, r0
    a836:	40da      	lsrs	r2, r3
    a838:	3908      	subs	r1, #8
    a83a:	408e      	lsls	r6, r1
    a83c:	0013      	movs	r3, r2
    a83e:	4333      	orrs	r3, r6
    a840:	4699      	mov	r9, r3
    a842:	465b      	mov	r3, fp
    a844:	408b      	lsls	r3, r1
    a846:	4698      	mov	r8, r3
    a848:	2300      	movs	r3, #0
    a84a:	4c3c      	ldr	r4, [pc, #240]	; (a93c <__aeabi_ddiv+0x1f0>)
    a84c:	2600      	movs	r6, #0
    a84e:	1a24      	subs	r4, r4, r0
    a850:	9303      	str	r3, [sp, #12]
    a852:	e79f      	b.n	a794 <__aeabi_ddiv+0x48>
    a854:	4651      	mov	r1, sl
    a856:	465a      	mov	r2, fp
    a858:	4311      	orrs	r1, r2
    a85a:	d129      	bne.n	a8b0 <__aeabi_ddiv+0x164>
    a85c:	2200      	movs	r2, #0
    a85e:	4693      	mov	fp, r2
    a860:	3202      	adds	r2, #2
    a862:	e7b1      	b.n	a7c8 <__aeabi_ddiv+0x7c>
    a864:	4659      	mov	r1, fp
    a866:	4301      	orrs	r1, r0
    a868:	d01e      	beq.n	a8a8 <__aeabi_ddiv+0x15c>
    a86a:	465b      	mov	r3, fp
    a86c:	2b00      	cmp	r3, #0
    a86e:	d100      	bne.n	a872 <__aeabi_ddiv+0x126>
    a870:	e19e      	b.n	abb0 <__aeabi_ddiv+0x464>
    a872:	4658      	mov	r0, fp
    a874:	f001 fade 	bl	be34 <__clzsi2>
    a878:	0003      	movs	r3, r0
    a87a:	3b0b      	subs	r3, #11
    a87c:	2b1c      	cmp	r3, #28
    a87e:	dd00      	ble.n	a882 <__aeabi_ddiv+0x136>
    a880:	e18f      	b.n	aba2 <__aeabi_ddiv+0x456>
    a882:	0002      	movs	r2, r0
    a884:	4659      	mov	r1, fp
    a886:	3a08      	subs	r2, #8
    a888:	4091      	lsls	r1, r2
    a88a:	468b      	mov	fp, r1
    a88c:	211d      	movs	r1, #29
    a88e:	1acb      	subs	r3, r1, r3
    a890:	4651      	mov	r1, sl
    a892:	40d9      	lsrs	r1, r3
    a894:	000b      	movs	r3, r1
    a896:	4659      	mov	r1, fp
    a898:	430b      	orrs	r3, r1
    a89a:	4651      	mov	r1, sl
    a89c:	469b      	mov	fp, r3
    a89e:	4091      	lsls	r1, r2
    a8a0:	4b26      	ldr	r3, [pc, #152]	; (a93c <__aeabi_ddiv+0x1f0>)
    a8a2:	2200      	movs	r2, #0
    a8a4:	1a1b      	subs	r3, r3, r0
    a8a6:	e78f      	b.n	a7c8 <__aeabi_ddiv+0x7c>
    a8a8:	2300      	movs	r3, #0
    a8aa:	2201      	movs	r2, #1
    a8ac:	469b      	mov	fp, r3
    a8ae:	e78b      	b.n	a7c8 <__aeabi_ddiv+0x7c>
    a8b0:	4651      	mov	r1, sl
    a8b2:	2203      	movs	r2, #3
    a8b4:	e788      	b.n	a7c8 <__aeabi_ddiv+0x7c>
    a8b6:	2300      	movs	r3, #0
    a8b8:	4698      	mov	r8, r3
    a8ba:	3301      	adds	r3, #1
    a8bc:	2604      	movs	r6, #4
    a8be:	2400      	movs	r4, #0
    a8c0:	9303      	str	r3, [sp, #12]
    a8c2:	e767      	b.n	a794 <__aeabi_ddiv+0x48>
    a8c4:	2303      	movs	r3, #3
    a8c6:	46b1      	mov	r9, r6
    a8c8:	9303      	str	r3, [sp, #12]
    a8ca:	260c      	movs	r6, #12
    a8cc:	e762      	b.n	a794 <__aeabi_ddiv+0x48>
    a8ce:	2a03      	cmp	r2, #3
    a8d0:	d100      	bne.n	a8d4 <__aeabi_ddiv+0x188>
    a8d2:	e25c      	b.n	ad8e <__aeabi_ddiv+0x642>
    a8d4:	9b01      	ldr	r3, [sp, #4]
    a8d6:	2a01      	cmp	r2, #1
    a8d8:	d000      	beq.n	a8dc <__aeabi_ddiv+0x190>
    a8da:	e1e4      	b.n	aca6 <__aeabi_ddiv+0x55a>
    a8dc:	4013      	ands	r3, r2
    a8de:	469c      	mov	ip, r3
    a8e0:	2300      	movs	r3, #0
    a8e2:	2400      	movs	r4, #0
    a8e4:	2200      	movs	r2, #0
    a8e6:	4698      	mov	r8, r3
    a8e8:	2100      	movs	r1, #0
    a8ea:	0312      	lsls	r2, r2, #12
    a8ec:	0b13      	lsrs	r3, r2, #12
    a8ee:	0d0a      	lsrs	r2, r1, #20
    a8f0:	0512      	lsls	r2, r2, #20
    a8f2:	431a      	orrs	r2, r3
    a8f4:	0523      	lsls	r3, r4, #20
    a8f6:	4c12      	ldr	r4, [pc, #72]	; (a940 <__aeabi_ddiv+0x1f4>)
    a8f8:	4640      	mov	r0, r8
    a8fa:	4022      	ands	r2, r4
    a8fc:	4313      	orrs	r3, r2
    a8fe:	4662      	mov	r2, ip
    a900:	005b      	lsls	r3, r3, #1
    a902:	07d2      	lsls	r2, r2, #31
    a904:	085b      	lsrs	r3, r3, #1
    a906:	4313      	orrs	r3, r2
    a908:	0019      	movs	r1, r3
    a90a:	b007      	add	sp, #28
    a90c:	bc3c      	pop	{r2, r3, r4, r5}
    a90e:	4690      	mov	r8, r2
    a910:	4699      	mov	r9, r3
    a912:	46a2      	mov	sl, r4
    a914:	46ab      	mov	fp, r5
    a916:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a918:	2300      	movs	r3, #0
    a91a:	2280      	movs	r2, #128	; 0x80
    a91c:	469c      	mov	ip, r3
    a91e:	0312      	lsls	r2, r2, #12
    a920:	4698      	mov	r8, r3
    a922:	4c03      	ldr	r4, [pc, #12]	; (a930 <__aeabi_ddiv+0x1e4>)
    a924:	e7e0      	b.n	a8e8 <__aeabi_ddiv+0x19c>
    a926:	2300      	movs	r3, #0
    a928:	4c01      	ldr	r4, [pc, #4]	; (a930 <__aeabi_ddiv+0x1e4>)
    a92a:	2200      	movs	r2, #0
    a92c:	4698      	mov	r8, r3
    a92e:	e7db      	b.n	a8e8 <__aeabi_ddiv+0x19c>
    a930:	000007ff 	.word	0x000007ff
    a934:	fffffc01 	.word	0xfffffc01
    a938:	00011f88 	.word	0x00011f88
    a93c:	fffffc0d 	.word	0xfffffc0d
    a940:	800fffff 	.word	0x800fffff
    a944:	45d9      	cmp	r9, fp
    a946:	d900      	bls.n	a94a <__aeabi_ddiv+0x1fe>
    a948:	e139      	b.n	abbe <__aeabi_ddiv+0x472>
    a94a:	d100      	bne.n	a94e <__aeabi_ddiv+0x202>
    a94c:	e134      	b.n	abb8 <__aeabi_ddiv+0x46c>
    a94e:	2300      	movs	r3, #0
    a950:	4646      	mov	r6, r8
    a952:	464d      	mov	r5, r9
    a954:	469a      	mov	sl, r3
    a956:	3c01      	subs	r4, #1
    a958:	465b      	mov	r3, fp
    a95a:	0e0a      	lsrs	r2, r1, #24
    a95c:	021b      	lsls	r3, r3, #8
    a95e:	431a      	orrs	r2, r3
    a960:	020b      	lsls	r3, r1, #8
    a962:	0c17      	lsrs	r7, r2, #16
    a964:	9303      	str	r3, [sp, #12]
    a966:	0413      	lsls	r3, r2, #16
    a968:	0c1b      	lsrs	r3, r3, #16
    a96a:	0039      	movs	r1, r7
    a96c:	0028      	movs	r0, r5
    a96e:	4690      	mov	r8, r2
    a970:	9301      	str	r3, [sp, #4]
    a972:	f7fe fdc5 	bl	9500 <__udivsi3>
    a976:	0002      	movs	r2, r0
    a978:	9b01      	ldr	r3, [sp, #4]
    a97a:	4683      	mov	fp, r0
    a97c:	435a      	muls	r2, r3
    a97e:	0028      	movs	r0, r5
    a980:	0039      	movs	r1, r7
    a982:	4691      	mov	r9, r2
    a984:	f7fe fe42 	bl	960c <__aeabi_uidivmod>
    a988:	0c35      	lsrs	r5, r6, #16
    a98a:	0409      	lsls	r1, r1, #16
    a98c:	430d      	orrs	r5, r1
    a98e:	45a9      	cmp	r9, r5
    a990:	d90d      	bls.n	a9ae <__aeabi_ddiv+0x262>
    a992:	465b      	mov	r3, fp
    a994:	4445      	add	r5, r8
    a996:	3b01      	subs	r3, #1
    a998:	45a8      	cmp	r8, r5
    a99a:	d900      	bls.n	a99e <__aeabi_ddiv+0x252>
    a99c:	e13a      	b.n	ac14 <__aeabi_ddiv+0x4c8>
    a99e:	45a9      	cmp	r9, r5
    a9a0:	d800      	bhi.n	a9a4 <__aeabi_ddiv+0x258>
    a9a2:	e137      	b.n	ac14 <__aeabi_ddiv+0x4c8>
    a9a4:	2302      	movs	r3, #2
    a9a6:	425b      	negs	r3, r3
    a9a8:	469c      	mov	ip, r3
    a9aa:	4445      	add	r5, r8
    a9ac:	44e3      	add	fp, ip
    a9ae:	464b      	mov	r3, r9
    a9b0:	1aeb      	subs	r3, r5, r3
    a9b2:	0039      	movs	r1, r7
    a9b4:	0018      	movs	r0, r3
    a9b6:	9304      	str	r3, [sp, #16]
    a9b8:	f7fe fda2 	bl	9500 <__udivsi3>
    a9bc:	9b01      	ldr	r3, [sp, #4]
    a9be:	0005      	movs	r5, r0
    a9c0:	4343      	muls	r3, r0
    a9c2:	0039      	movs	r1, r7
    a9c4:	9804      	ldr	r0, [sp, #16]
    a9c6:	4699      	mov	r9, r3
    a9c8:	f7fe fe20 	bl	960c <__aeabi_uidivmod>
    a9cc:	0433      	lsls	r3, r6, #16
    a9ce:	0409      	lsls	r1, r1, #16
    a9d0:	0c1b      	lsrs	r3, r3, #16
    a9d2:	430b      	orrs	r3, r1
    a9d4:	4599      	cmp	r9, r3
    a9d6:	d909      	bls.n	a9ec <__aeabi_ddiv+0x2a0>
    a9d8:	4443      	add	r3, r8
    a9da:	1e6a      	subs	r2, r5, #1
    a9dc:	4598      	cmp	r8, r3
    a9de:	d900      	bls.n	a9e2 <__aeabi_ddiv+0x296>
    a9e0:	e11a      	b.n	ac18 <__aeabi_ddiv+0x4cc>
    a9e2:	4599      	cmp	r9, r3
    a9e4:	d800      	bhi.n	a9e8 <__aeabi_ddiv+0x29c>
    a9e6:	e117      	b.n	ac18 <__aeabi_ddiv+0x4cc>
    a9e8:	3d02      	subs	r5, #2
    a9ea:	4443      	add	r3, r8
    a9ec:	464a      	mov	r2, r9
    a9ee:	1a9b      	subs	r3, r3, r2
    a9f0:	465a      	mov	r2, fp
    a9f2:	0412      	lsls	r2, r2, #16
    a9f4:	432a      	orrs	r2, r5
    a9f6:	9903      	ldr	r1, [sp, #12]
    a9f8:	4693      	mov	fp, r2
    a9fa:	0c10      	lsrs	r0, r2, #16
    a9fc:	0c0a      	lsrs	r2, r1, #16
    a9fe:	4691      	mov	r9, r2
    aa00:	0409      	lsls	r1, r1, #16
    aa02:	465a      	mov	r2, fp
    aa04:	0c09      	lsrs	r1, r1, #16
    aa06:	464e      	mov	r6, r9
    aa08:	000d      	movs	r5, r1
    aa0a:	0412      	lsls	r2, r2, #16
    aa0c:	0c12      	lsrs	r2, r2, #16
    aa0e:	4345      	muls	r5, r0
    aa10:	9105      	str	r1, [sp, #20]
    aa12:	4351      	muls	r1, r2
    aa14:	4372      	muls	r2, r6
    aa16:	4370      	muls	r0, r6
    aa18:	1952      	adds	r2, r2, r5
    aa1a:	0c0e      	lsrs	r6, r1, #16
    aa1c:	18b2      	adds	r2, r6, r2
    aa1e:	4295      	cmp	r5, r2
    aa20:	d903      	bls.n	aa2a <__aeabi_ddiv+0x2de>
    aa22:	2580      	movs	r5, #128	; 0x80
    aa24:	026d      	lsls	r5, r5, #9
    aa26:	46ac      	mov	ip, r5
    aa28:	4460      	add	r0, ip
    aa2a:	0c15      	lsrs	r5, r2, #16
    aa2c:	0409      	lsls	r1, r1, #16
    aa2e:	0412      	lsls	r2, r2, #16
    aa30:	0c09      	lsrs	r1, r1, #16
    aa32:	1828      	adds	r0, r5, r0
    aa34:	1852      	adds	r2, r2, r1
    aa36:	4283      	cmp	r3, r0
    aa38:	d200      	bcs.n	aa3c <__aeabi_ddiv+0x2f0>
    aa3a:	e0ce      	b.n	abda <__aeabi_ddiv+0x48e>
    aa3c:	d100      	bne.n	aa40 <__aeabi_ddiv+0x2f4>
    aa3e:	e0c8      	b.n	abd2 <__aeabi_ddiv+0x486>
    aa40:	1a1d      	subs	r5, r3, r0
    aa42:	4653      	mov	r3, sl
    aa44:	1a9e      	subs	r6, r3, r2
    aa46:	45b2      	cmp	sl, r6
    aa48:	4192      	sbcs	r2, r2
    aa4a:	4252      	negs	r2, r2
    aa4c:	1aab      	subs	r3, r5, r2
    aa4e:	469a      	mov	sl, r3
    aa50:	4598      	cmp	r8, r3
    aa52:	d100      	bne.n	aa56 <__aeabi_ddiv+0x30a>
    aa54:	e117      	b.n	ac86 <__aeabi_ddiv+0x53a>
    aa56:	0039      	movs	r1, r7
    aa58:	0018      	movs	r0, r3
    aa5a:	f7fe fd51 	bl	9500 <__udivsi3>
    aa5e:	9b01      	ldr	r3, [sp, #4]
    aa60:	0005      	movs	r5, r0
    aa62:	4343      	muls	r3, r0
    aa64:	0039      	movs	r1, r7
    aa66:	4650      	mov	r0, sl
    aa68:	9304      	str	r3, [sp, #16]
    aa6a:	f7fe fdcf 	bl	960c <__aeabi_uidivmod>
    aa6e:	9804      	ldr	r0, [sp, #16]
    aa70:	040b      	lsls	r3, r1, #16
    aa72:	0c31      	lsrs	r1, r6, #16
    aa74:	4319      	orrs	r1, r3
    aa76:	4288      	cmp	r0, r1
    aa78:	d909      	bls.n	aa8e <__aeabi_ddiv+0x342>
    aa7a:	4441      	add	r1, r8
    aa7c:	1e6b      	subs	r3, r5, #1
    aa7e:	4588      	cmp	r8, r1
    aa80:	d900      	bls.n	aa84 <__aeabi_ddiv+0x338>
    aa82:	e107      	b.n	ac94 <__aeabi_ddiv+0x548>
    aa84:	4288      	cmp	r0, r1
    aa86:	d800      	bhi.n	aa8a <__aeabi_ddiv+0x33e>
    aa88:	e104      	b.n	ac94 <__aeabi_ddiv+0x548>
    aa8a:	3d02      	subs	r5, #2
    aa8c:	4441      	add	r1, r8
    aa8e:	9b04      	ldr	r3, [sp, #16]
    aa90:	1acb      	subs	r3, r1, r3
    aa92:	0018      	movs	r0, r3
    aa94:	0039      	movs	r1, r7
    aa96:	9304      	str	r3, [sp, #16]
    aa98:	f7fe fd32 	bl	9500 <__udivsi3>
    aa9c:	9b01      	ldr	r3, [sp, #4]
    aa9e:	4682      	mov	sl, r0
    aaa0:	4343      	muls	r3, r0
    aaa2:	0039      	movs	r1, r7
    aaa4:	9804      	ldr	r0, [sp, #16]
    aaa6:	9301      	str	r3, [sp, #4]
    aaa8:	f7fe fdb0 	bl	960c <__aeabi_uidivmod>
    aaac:	9801      	ldr	r0, [sp, #4]
    aaae:	040b      	lsls	r3, r1, #16
    aab0:	0431      	lsls	r1, r6, #16
    aab2:	0c09      	lsrs	r1, r1, #16
    aab4:	4319      	orrs	r1, r3
    aab6:	4288      	cmp	r0, r1
    aab8:	d90d      	bls.n	aad6 <__aeabi_ddiv+0x38a>
    aaba:	4653      	mov	r3, sl
    aabc:	4441      	add	r1, r8
    aabe:	3b01      	subs	r3, #1
    aac0:	4588      	cmp	r8, r1
    aac2:	d900      	bls.n	aac6 <__aeabi_ddiv+0x37a>
    aac4:	e0e8      	b.n	ac98 <__aeabi_ddiv+0x54c>
    aac6:	4288      	cmp	r0, r1
    aac8:	d800      	bhi.n	aacc <__aeabi_ddiv+0x380>
    aaca:	e0e5      	b.n	ac98 <__aeabi_ddiv+0x54c>
    aacc:	2302      	movs	r3, #2
    aace:	425b      	negs	r3, r3
    aad0:	469c      	mov	ip, r3
    aad2:	4441      	add	r1, r8
    aad4:	44e2      	add	sl, ip
    aad6:	9b01      	ldr	r3, [sp, #4]
    aad8:	042d      	lsls	r5, r5, #16
    aada:	1ace      	subs	r6, r1, r3
    aadc:	4651      	mov	r1, sl
    aade:	4329      	orrs	r1, r5
    aae0:	9d05      	ldr	r5, [sp, #20]
    aae2:	464f      	mov	r7, r9
    aae4:	002a      	movs	r2, r5
    aae6:	040b      	lsls	r3, r1, #16
    aae8:	0c08      	lsrs	r0, r1, #16
    aaea:	0c1b      	lsrs	r3, r3, #16
    aaec:	435a      	muls	r2, r3
    aaee:	4345      	muls	r5, r0
    aaf0:	437b      	muls	r3, r7
    aaf2:	4378      	muls	r0, r7
    aaf4:	195b      	adds	r3, r3, r5
    aaf6:	0c17      	lsrs	r7, r2, #16
    aaf8:	18fb      	adds	r3, r7, r3
    aafa:	429d      	cmp	r5, r3
    aafc:	d903      	bls.n	ab06 <__aeabi_ddiv+0x3ba>
    aafe:	2580      	movs	r5, #128	; 0x80
    ab00:	026d      	lsls	r5, r5, #9
    ab02:	46ac      	mov	ip, r5
    ab04:	4460      	add	r0, ip
    ab06:	0c1d      	lsrs	r5, r3, #16
    ab08:	0412      	lsls	r2, r2, #16
    ab0a:	041b      	lsls	r3, r3, #16
    ab0c:	0c12      	lsrs	r2, r2, #16
    ab0e:	1828      	adds	r0, r5, r0
    ab10:	189b      	adds	r3, r3, r2
    ab12:	4286      	cmp	r6, r0
    ab14:	d200      	bcs.n	ab18 <__aeabi_ddiv+0x3cc>
    ab16:	e093      	b.n	ac40 <__aeabi_ddiv+0x4f4>
    ab18:	d100      	bne.n	ab1c <__aeabi_ddiv+0x3d0>
    ab1a:	e08e      	b.n	ac3a <__aeabi_ddiv+0x4ee>
    ab1c:	2301      	movs	r3, #1
    ab1e:	4319      	orrs	r1, r3
    ab20:	4ba0      	ldr	r3, [pc, #640]	; (ada4 <__aeabi_ddiv+0x658>)
    ab22:	18e3      	adds	r3, r4, r3
    ab24:	2b00      	cmp	r3, #0
    ab26:	dc00      	bgt.n	ab2a <__aeabi_ddiv+0x3de>
    ab28:	e099      	b.n	ac5e <__aeabi_ddiv+0x512>
    ab2a:	074a      	lsls	r2, r1, #29
    ab2c:	d000      	beq.n	ab30 <__aeabi_ddiv+0x3e4>
    ab2e:	e09e      	b.n	ac6e <__aeabi_ddiv+0x522>
    ab30:	465a      	mov	r2, fp
    ab32:	01d2      	lsls	r2, r2, #7
    ab34:	d506      	bpl.n	ab44 <__aeabi_ddiv+0x3f8>
    ab36:	465a      	mov	r2, fp
    ab38:	4b9b      	ldr	r3, [pc, #620]	; (ada8 <__aeabi_ddiv+0x65c>)
    ab3a:	401a      	ands	r2, r3
    ab3c:	2380      	movs	r3, #128	; 0x80
    ab3e:	4693      	mov	fp, r2
    ab40:	00db      	lsls	r3, r3, #3
    ab42:	18e3      	adds	r3, r4, r3
    ab44:	4a99      	ldr	r2, [pc, #612]	; (adac <__aeabi_ddiv+0x660>)
    ab46:	4293      	cmp	r3, r2
    ab48:	dd68      	ble.n	ac1c <__aeabi_ddiv+0x4d0>
    ab4a:	2301      	movs	r3, #1
    ab4c:	9a02      	ldr	r2, [sp, #8]
    ab4e:	4c98      	ldr	r4, [pc, #608]	; (adb0 <__aeabi_ddiv+0x664>)
    ab50:	401a      	ands	r2, r3
    ab52:	2300      	movs	r3, #0
    ab54:	4694      	mov	ip, r2
    ab56:	4698      	mov	r8, r3
    ab58:	2200      	movs	r2, #0
    ab5a:	e6c5      	b.n	a8e8 <__aeabi_ddiv+0x19c>
    ab5c:	2280      	movs	r2, #128	; 0x80
    ab5e:	464b      	mov	r3, r9
    ab60:	0312      	lsls	r2, r2, #12
    ab62:	4213      	tst	r3, r2
    ab64:	d00a      	beq.n	ab7c <__aeabi_ddiv+0x430>
    ab66:	465b      	mov	r3, fp
    ab68:	4213      	tst	r3, r2
    ab6a:	d106      	bne.n	ab7a <__aeabi_ddiv+0x42e>
    ab6c:	431a      	orrs	r2, r3
    ab6e:	0312      	lsls	r2, r2, #12
    ab70:	0b12      	lsrs	r2, r2, #12
    ab72:	46ac      	mov	ip, r5
    ab74:	4688      	mov	r8, r1
    ab76:	4c8e      	ldr	r4, [pc, #568]	; (adb0 <__aeabi_ddiv+0x664>)
    ab78:	e6b6      	b.n	a8e8 <__aeabi_ddiv+0x19c>
    ab7a:	464b      	mov	r3, r9
    ab7c:	431a      	orrs	r2, r3
    ab7e:	0312      	lsls	r2, r2, #12
    ab80:	0b12      	lsrs	r2, r2, #12
    ab82:	46bc      	mov	ip, r7
    ab84:	4c8a      	ldr	r4, [pc, #552]	; (adb0 <__aeabi_ddiv+0x664>)
    ab86:	e6af      	b.n	a8e8 <__aeabi_ddiv+0x19c>
    ab88:	0003      	movs	r3, r0
    ab8a:	465a      	mov	r2, fp
    ab8c:	3b28      	subs	r3, #40	; 0x28
    ab8e:	409a      	lsls	r2, r3
    ab90:	2300      	movs	r3, #0
    ab92:	4691      	mov	r9, r2
    ab94:	4698      	mov	r8, r3
    ab96:	e657      	b.n	a848 <__aeabi_ddiv+0xfc>
    ab98:	4658      	mov	r0, fp
    ab9a:	f001 f94b 	bl	be34 <__clzsi2>
    ab9e:	3020      	adds	r0, #32
    aba0:	e640      	b.n	a824 <__aeabi_ddiv+0xd8>
    aba2:	0003      	movs	r3, r0
    aba4:	4652      	mov	r2, sl
    aba6:	3b28      	subs	r3, #40	; 0x28
    aba8:	409a      	lsls	r2, r3
    abaa:	2100      	movs	r1, #0
    abac:	4693      	mov	fp, r2
    abae:	e677      	b.n	a8a0 <__aeabi_ddiv+0x154>
    abb0:	f001 f940 	bl	be34 <__clzsi2>
    abb4:	3020      	adds	r0, #32
    abb6:	e65f      	b.n	a878 <__aeabi_ddiv+0x12c>
    abb8:	4588      	cmp	r8, r1
    abba:	d200      	bcs.n	abbe <__aeabi_ddiv+0x472>
    abbc:	e6c7      	b.n	a94e <__aeabi_ddiv+0x202>
    abbe:	464b      	mov	r3, r9
    abc0:	07de      	lsls	r6, r3, #31
    abc2:	085d      	lsrs	r5, r3, #1
    abc4:	4643      	mov	r3, r8
    abc6:	085b      	lsrs	r3, r3, #1
    abc8:	431e      	orrs	r6, r3
    abca:	4643      	mov	r3, r8
    abcc:	07db      	lsls	r3, r3, #31
    abce:	469a      	mov	sl, r3
    abd0:	e6c2      	b.n	a958 <__aeabi_ddiv+0x20c>
    abd2:	2500      	movs	r5, #0
    abd4:	4592      	cmp	sl, r2
    abd6:	d300      	bcc.n	abda <__aeabi_ddiv+0x48e>
    abd8:	e733      	b.n	aa42 <__aeabi_ddiv+0x2f6>
    abda:	9e03      	ldr	r6, [sp, #12]
    abdc:	4659      	mov	r1, fp
    abde:	46b4      	mov	ip, r6
    abe0:	44e2      	add	sl, ip
    abe2:	45b2      	cmp	sl, r6
    abe4:	41ad      	sbcs	r5, r5
    abe6:	426d      	negs	r5, r5
    abe8:	4445      	add	r5, r8
    abea:	18eb      	adds	r3, r5, r3
    abec:	3901      	subs	r1, #1
    abee:	4598      	cmp	r8, r3
    abf0:	d207      	bcs.n	ac02 <__aeabi_ddiv+0x4b6>
    abf2:	4298      	cmp	r0, r3
    abf4:	d900      	bls.n	abf8 <__aeabi_ddiv+0x4ac>
    abf6:	e07f      	b.n	acf8 <__aeabi_ddiv+0x5ac>
    abf8:	d100      	bne.n	abfc <__aeabi_ddiv+0x4b0>
    abfa:	e0bc      	b.n	ad76 <__aeabi_ddiv+0x62a>
    abfc:	1a1d      	subs	r5, r3, r0
    abfe:	468b      	mov	fp, r1
    ac00:	e71f      	b.n	aa42 <__aeabi_ddiv+0x2f6>
    ac02:	4598      	cmp	r8, r3
    ac04:	d1fa      	bne.n	abfc <__aeabi_ddiv+0x4b0>
    ac06:	9d03      	ldr	r5, [sp, #12]
    ac08:	4555      	cmp	r5, sl
    ac0a:	d9f2      	bls.n	abf2 <__aeabi_ddiv+0x4a6>
    ac0c:	4643      	mov	r3, r8
    ac0e:	468b      	mov	fp, r1
    ac10:	1a1d      	subs	r5, r3, r0
    ac12:	e716      	b.n	aa42 <__aeabi_ddiv+0x2f6>
    ac14:	469b      	mov	fp, r3
    ac16:	e6ca      	b.n	a9ae <__aeabi_ddiv+0x262>
    ac18:	0015      	movs	r5, r2
    ac1a:	e6e7      	b.n	a9ec <__aeabi_ddiv+0x2a0>
    ac1c:	465a      	mov	r2, fp
    ac1e:	08c9      	lsrs	r1, r1, #3
    ac20:	0752      	lsls	r2, r2, #29
    ac22:	430a      	orrs	r2, r1
    ac24:	055b      	lsls	r3, r3, #21
    ac26:	4690      	mov	r8, r2
    ac28:	0d5c      	lsrs	r4, r3, #21
    ac2a:	465a      	mov	r2, fp
    ac2c:	2301      	movs	r3, #1
    ac2e:	9902      	ldr	r1, [sp, #8]
    ac30:	0252      	lsls	r2, r2, #9
    ac32:	4019      	ands	r1, r3
    ac34:	0b12      	lsrs	r2, r2, #12
    ac36:	468c      	mov	ip, r1
    ac38:	e656      	b.n	a8e8 <__aeabi_ddiv+0x19c>
    ac3a:	2b00      	cmp	r3, #0
    ac3c:	d100      	bne.n	ac40 <__aeabi_ddiv+0x4f4>
    ac3e:	e76f      	b.n	ab20 <__aeabi_ddiv+0x3d4>
    ac40:	4446      	add	r6, r8
    ac42:	1e4a      	subs	r2, r1, #1
    ac44:	45b0      	cmp	r8, r6
    ac46:	d929      	bls.n	ac9c <__aeabi_ddiv+0x550>
    ac48:	0011      	movs	r1, r2
    ac4a:	4286      	cmp	r6, r0
    ac4c:	d000      	beq.n	ac50 <__aeabi_ddiv+0x504>
    ac4e:	e765      	b.n	ab1c <__aeabi_ddiv+0x3d0>
    ac50:	9a03      	ldr	r2, [sp, #12]
    ac52:	4293      	cmp	r3, r2
    ac54:	d000      	beq.n	ac58 <__aeabi_ddiv+0x50c>
    ac56:	e761      	b.n	ab1c <__aeabi_ddiv+0x3d0>
    ac58:	e762      	b.n	ab20 <__aeabi_ddiv+0x3d4>
    ac5a:	2101      	movs	r1, #1
    ac5c:	4249      	negs	r1, r1
    ac5e:	2001      	movs	r0, #1
    ac60:	1ac2      	subs	r2, r0, r3
    ac62:	2a38      	cmp	r2, #56	; 0x38
    ac64:	dd21      	ble.n	acaa <__aeabi_ddiv+0x55e>
    ac66:	9b02      	ldr	r3, [sp, #8]
    ac68:	4003      	ands	r3, r0
    ac6a:	469c      	mov	ip, r3
    ac6c:	e638      	b.n	a8e0 <__aeabi_ddiv+0x194>
    ac6e:	220f      	movs	r2, #15
    ac70:	400a      	ands	r2, r1
    ac72:	2a04      	cmp	r2, #4
    ac74:	d100      	bne.n	ac78 <__aeabi_ddiv+0x52c>
    ac76:	e75b      	b.n	ab30 <__aeabi_ddiv+0x3e4>
    ac78:	000a      	movs	r2, r1
    ac7a:	1d11      	adds	r1, r2, #4
    ac7c:	4291      	cmp	r1, r2
    ac7e:	4192      	sbcs	r2, r2
    ac80:	4252      	negs	r2, r2
    ac82:	4493      	add	fp, r2
    ac84:	e754      	b.n	ab30 <__aeabi_ddiv+0x3e4>
    ac86:	4b47      	ldr	r3, [pc, #284]	; (ada4 <__aeabi_ddiv+0x658>)
    ac88:	18e3      	adds	r3, r4, r3
    ac8a:	2b00      	cmp	r3, #0
    ac8c:	dde5      	ble.n	ac5a <__aeabi_ddiv+0x50e>
    ac8e:	2201      	movs	r2, #1
    ac90:	4252      	negs	r2, r2
    ac92:	e7f2      	b.n	ac7a <__aeabi_ddiv+0x52e>
    ac94:	001d      	movs	r5, r3
    ac96:	e6fa      	b.n	aa8e <__aeabi_ddiv+0x342>
    ac98:	469a      	mov	sl, r3
    ac9a:	e71c      	b.n	aad6 <__aeabi_ddiv+0x38a>
    ac9c:	42b0      	cmp	r0, r6
    ac9e:	d839      	bhi.n	ad14 <__aeabi_ddiv+0x5c8>
    aca0:	d06e      	beq.n	ad80 <__aeabi_ddiv+0x634>
    aca2:	0011      	movs	r1, r2
    aca4:	e73a      	b.n	ab1c <__aeabi_ddiv+0x3d0>
    aca6:	9302      	str	r3, [sp, #8]
    aca8:	e73a      	b.n	ab20 <__aeabi_ddiv+0x3d4>
    acaa:	2a1f      	cmp	r2, #31
    acac:	dc3c      	bgt.n	ad28 <__aeabi_ddiv+0x5dc>
    acae:	2320      	movs	r3, #32
    acb0:	1a9b      	subs	r3, r3, r2
    acb2:	000c      	movs	r4, r1
    acb4:	4658      	mov	r0, fp
    acb6:	4099      	lsls	r1, r3
    acb8:	4098      	lsls	r0, r3
    acba:	1e4b      	subs	r3, r1, #1
    acbc:	4199      	sbcs	r1, r3
    acbe:	465b      	mov	r3, fp
    acc0:	40d4      	lsrs	r4, r2
    acc2:	40d3      	lsrs	r3, r2
    acc4:	4320      	orrs	r0, r4
    acc6:	4308      	orrs	r0, r1
    acc8:	001a      	movs	r2, r3
    acca:	0743      	lsls	r3, r0, #29
    accc:	d009      	beq.n	ace2 <__aeabi_ddiv+0x596>
    acce:	230f      	movs	r3, #15
    acd0:	4003      	ands	r3, r0
    acd2:	2b04      	cmp	r3, #4
    acd4:	d005      	beq.n	ace2 <__aeabi_ddiv+0x596>
    acd6:	0001      	movs	r1, r0
    acd8:	1d08      	adds	r0, r1, #4
    acda:	4288      	cmp	r0, r1
    acdc:	419b      	sbcs	r3, r3
    acde:	425b      	negs	r3, r3
    ace0:	18d2      	adds	r2, r2, r3
    ace2:	0213      	lsls	r3, r2, #8
    ace4:	d53a      	bpl.n	ad5c <__aeabi_ddiv+0x610>
    ace6:	2301      	movs	r3, #1
    ace8:	9a02      	ldr	r2, [sp, #8]
    acea:	2401      	movs	r4, #1
    acec:	401a      	ands	r2, r3
    acee:	2300      	movs	r3, #0
    acf0:	4694      	mov	ip, r2
    acf2:	4698      	mov	r8, r3
    acf4:	2200      	movs	r2, #0
    acf6:	e5f7      	b.n	a8e8 <__aeabi_ddiv+0x19c>
    acf8:	2102      	movs	r1, #2
    acfa:	4249      	negs	r1, r1
    acfc:	468c      	mov	ip, r1
    acfe:	9d03      	ldr	r5, [sp, #12]
    ad00:	44e3      	add	fp, ip
    ad02:	46ac      	mov	ip, r5
    ad04:	44e2      	add	sl, ip
    ad06:	45aa      	cmp	sl, r5
    ad08:	41ad      	sbcs	r5, r5
    ad0a:	426d      	negs	r5, r5
    ad0c:	4445      	add	r5, r8
    ad0e:	18ed      	adds	r5, r5, r3
    ad10:	1a2d      	subs	r5, r5, r0
    ad12:	e696      	b.n	aa42 <__aeabi_ddiv+0x2f6>
    ad14:	1e8a      	subs	r2, r1, #2
    ad16:	9903      	ldr	r1, [sp, #12]
    ad18:	004d      	lsls	r5, r1, #1
    ad1a:	428d      	cmp	r5, r1
    ad1c:	4189      	sbcs	r1, r1
    ad1e:	4249      	negs	r1, r1
    ad20:	4441      	add	r1, r8
    ad22:	1876      	adds	r6, r6, r1
    ad24:	9503      	str	r5, [sp, #12]
    ad26:	e78f      	b.n	ac48 <__aeabi_ddiv+0x4fc>
    ad28:	201f      	movs	r0, #31
    ad2a:	4240      	negs	r0, r0
    ad2c:	1ac3      	subs	r3, r0, r3
    ad2e:	4658      	mov	r0, fp
    ad30:	40d8      	lsrs	r0, r3
    ad32:	0003      	movs	r3, r0
    ad34:	2a20      	cmp	r2, #32
    ad36:	d028      	beq.n	ad8a <__aeabi_ddiv+0x63e>
    ad38:	2040      	movs	r0, #64	; 0x40
    ad3a:	465d      	mov	r5, fp
    ad3c:	1a82      	subs	r2, r0, r2
    ad3e:	4095      	lsls	r5, r2
    ad40:	4329      	orrs	r1, r5
    ad42:	1e4a      	subs	r2, r1, #1
    ad44:	4191      	sbcs	r1, r2
    ad46:	4319      	orrs	r1, r3
    ad48:	2307      	movs	r3, #7
    ad4a:	2200      	movs	r2, #0
    ad4c:	400b      	ands	r3, r1
    ad4e:	d009      	beq.n	ad64 <__aeabi_ddiv+0x618>
    ad50:	230f      	movs	r3, #15
    ad52:	2200      	movs	r2, #0
    ad54:	400b      	ands	r3, r1
    ad56:	0008      	movs	r0, r1
    ad58:	2b04      	cmp	r3, #4
    ad5a:	d1bd      	bne.n	acd8 <__aeabi_ddiv+0x58c>
    ad5c:	0001      	movs	r1, r0
    ad5e:	0753      	lsls	r3, r2, #29
    ad60:	0252      	lsls	r2, r2, #9
    ad62:	0b12      	lsrs	r2, r2, #12
    ad64:	08c9      	lsrs	r1, r1, #3
    ad66:	4319      	orrs	r1, r3
    ad68:	2301      	movs	r3, #1
    ad6a:	4688      	mov	r8, r1
    ad6c:	9902      	ldr	r1, [sp, #8]
    ad6e:	2400      	movs	r4, #0
    ad70:	4019      	ands	r1, r3
    ad72:	468c      	mov	ip, r1
    ad74:	e5b8      	b.n	a8e8 <__aeabi_ddiv+0x19c>
    ad76:	4552      	cmp	r2, sl
    ad78:	d8be      	bhi.n	acf8 <__aeabi_ddiv+0x5ac>
    ad7a:	468b      	mov	fp, r1
    ad7c:	2500      	movs	r5, #0
    ad7e:	e660      	b.n	aa42 <__aeabi_ddiv+0x2f6>
    ad80:	9d03      	ldr	r5, [sp, #12]
    ad82:	429d      	cmp	r5, r3
    ad84:	d3c6      	bcc.n	ad14 <__aeabi_ddiv+0x5c8>
    ad86:	0011      	movs	r1, r2
    ad88:	e762      	b.n	ac50 <__aeabi_ddiv+0x504>
    ad8a:	2500      	movs	r5, #0
    ad8c:	e7d8      	b.n	ad40 <__aeabi_ddiv+0x5f4>
    ad8e:	2280      	movs	r2, #128	; 0x80
    ad90:	465b      	mov	r3, fp
    ad92:	0312      	lsls	r2, r2, #12
    ad94:	431a      	orrs	r2, r3
    ad96:	9b01      	ldr	r3, [sp, #4]
    ad98:	0312      	lsls	r2, r2, #12
    ad9a:	0b12      	lsrs	r2, r2, #12
    ad9c:	469c      	mov	ip, r3
    ad9e:	4688      	mov	r8, r1
    ada0:	4c03      	ldr	r4, [pc, #12]	; (adb0 <__aeabi_ddiv+0x664>)
    ada2:	e5a1      	b.n	a8e8 <__aeabi_ddiv+0x19c>
    ada4:	000003ff 	.word	0x000003ff
    ada8:	feffffff 	.word	0xfeffffff
    adac:	000007fe 	.word	0x000007fe
    adb0:	000007ff 	.word	0x000007ff

0000adb4 <__eqdf2>:
    adb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    adb6:	464f      	mov	r7, r9
    adb8:	4646      	mov	r6, r8
    adba:	46d6      	mov	lr, sl
    adbc:	005c      	lsls	r4, r3, #1
    adbe:	b5c0      	push	{r6, r7, lr}
    adc0:	031f      	lsls	r7, r3, #12
    adc2:	0fdb      	lsrs	r3, r3, #31
    adc4:	469a      	mov	sl, r3
    adc6:	4b17      	ldr	r3, [pc, #92]	; (ae24 <__eqdf2+0x70>)
    adc8:	030e      	lsls	r6, r1, #12
    adca:	004d      	lsls	r5, r1, #1
    adcc:	4684      	mov	ip, r0
    adce:	4680      	mov	r8, r0
    add0:	0b36      	lsrs	r6, r6, #12
    add2:	0d6d      	lsrs	r5, r5, #21
    add4:	0fc9      	lsrs	r1, r1, #31
    add6:	4691      	mov	r9, r2
    add8:	0b3f      	lsrs	r7, r7, #12
    adda:	0d64      	lsrs	r4, r4, #21
    addc:	2001      	movs	r0, #1
    adde:	429d      	cmp	r5, r3
    ade0:	d008      	beq.n	adf4 <__eqdf2+0x40>
    ade2:	429c      	cmp	r4, r3
    ade4:	d001      	beq.n	adea <__eqdf2+0x36>
    ade6:	42a5      	cmp	r5, r4
    ade8:	d00b      	beq.n	ae02 <__eqdf2+0x4e>
    adea:	bc1c      	pop	{r2, r3, r4}
    adec:	4690      	mov	r8, r2
    adee:	4699      	mov	r9, r3
    adf0:	46a2      	mov	sl, r4
    adf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    adf4:	4663      	mov	r3, ip
    adf6:	4333      	orrs	r3, r6
    adf8:	d1f7      	bne.n	adea <__eqdf2+0x36>
    adfa:	42ac      	cmp	r4, r5
    adfc:	d1f5      	bne.n	adea <__eqdf2+0x36>
    adfe:	433a      	orrs	r2, r7
    ae00:	d1f3      	bne.n	adea <__eqdf2+0x36>
    ae02:	2001      	movs	r0, #1
    ae04:	42be      	cmp	r6, r7
    ae06:	d1f0      	bne.n	adea <__eqdf2+0x36>
    ae08:	45c8      	cmp	r8, r9
    ae0a:	d1ee      	bne.n	adea <__eqdf2+0x36>
    ae0c:	4551      	cmp	r1, sl
    ae0e:	d007      	beq.n	ae20 <__eqdf2+0x6c>
    ae10:	2d00      	cmp	r5, #0
    ae12:	d1ea      	bne.n	adea <__eqdf2+0x36>
    ae14:	4663      	mov	r3, ip
    ae16:	431e      	orrs	r6, r3
    ae18:	0030      	movs	r0, r6
    ae1a:	1e46      	subs	r6, r0, #1
    ae1c:	41b0      	sbcs	r0, r6
    ae1e:	e7e4      	b.n	adea <__eqdf2+0x36>
    ae20:	2000      	movs	r0, #0
    ae22:	e7e2      	b.n	adea <__eqdf2+0x36>
    ae24:	000007ff 	.word	0x000007ff

0000ae28 <__gedf2>:
    ae28:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae2a:	4645      	mov	r5, r8
    ae2c:	46de      	mov	lr, fp
    ae2e:	4657      	mov	r7, sl
    ae30:	464e      	mov	r6, r9
    ae32:	b5e0      	push	{r5, r6, r7, lr}
    ae34:	031f      	lsls	r7, r3, #12
    ae36:	0b3d      	lsrs	r5, r7, #12
    ae38:	4f2c      	ldr	r7, [pc, #176]	; (aeec <__gedf2+0xc4>)
    ae3a:	030e      	lsls	r6, r1, #12
    ae3c:	004c      	lsls	r4, r1, #1
    ae3e:	46ab      	mov	fp, r5
    ae40:	005d      	lsls	r5, r3, #1
    ae42:	4684      	mov	ip, r0
    ae44:	0b36      	lsrs	r6, r6, #12
    ae46:	0d64      	lsrs	r4, r4, #21
    ae48:	0fc9      	lsrs	r1, r1, #31
    ae4a:	4690      	mov	r8, r2
    ae4c:	0d6d      	lsrs	r5, r5, #21
    ae4e:	0fdb      	lsrs	r3, r3, #31
    ae50:	42bc      	cmp	r4, r7
    ae52:	d02a      	beq.n	aeaa <__gedf2+0x82>
    ae54:	4f25      	ldr	r7, [pc, #148]	; (aeec <__gedf2+0xc4>)
    ae56:	42bd      	cmp	r5, r7
    ae58:	d02d      	beq.n	aeb6 <__gedf2+0x8e>
    ae5a:	2c00      	cmp	r4, #0
    ae5c:	d10f      	bne.n	ae7e <__gedf2+0x56>
    ae5e:	4330      	orrs	r0, r6
    ae60:	0007      	movs	r7, r0
    ae62:	4681      	mov	r9, r0
    ae64:	4278      	negs	r0, r7
    ae66:	4178      	adcs	r0, r7
    ae68:	b2c0      	uxtb	r0, r0
    ae6a:	2d00      	cmp	r5, #0
    ae6c:	d117      	bne.n	ae9e <__gedf2+0x76>
    ae6e:	465f      	mov	r7, fp
    ae70:	433a      	orrs	r2, r7
    ae72:	d114      	bne.n	ae9e <__gedf2+0x76>
    ae74:	464b      	mov	r3, r9
    ae76:	2000      	movs	r0, #0
    ae78:	2b00      	cmp	r3, #0
    ae7a:	d00a      	beq.n	ae92 <__gedf2+0x6a>
    ae7c:	e006      	b.n	ae8c <__gedf2+0x64>
    ae7e:	2d00      	cmp	r5, #0
    ae80:	d102      	bne.n	ae88 <__gedf2+0x60>
    ae82:	4658      	mov	r0, fp
    ae84:	4302      	orrs	r2, r0
    ae86:	d001      	beq.n	ae8c <__gedf2+0x64>
    ae88:	4299      	cmp	r1, r3
    ae8a:	d018      	beq.n	aebe <__gedf2+0x96>
    ae8c:	4248      	negs	r0, r1
    ae8e:	2101      	movs	r1, #1
    ae90:	4308      	orrs	r0, r1
    ae92:	bc3c      	pop	{r2, r3, r4, r5}
    ae94:	4690      	mov	r8, r2
    ae96:	4699      	mov	r9, r3
    ae98:	46a2      	mov	sl, r4
    ae9a:	46ab      	mov	fp, r5
    ae9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ae9e:	2800      	cmp	r0, #0
    aea0:	d0f2      	beq.n	ae88 <__gedf2+0x60>
    aea2:	2001      	movs	r0, #1
    aea4:	3b01      	subs	r3, #1
    aea6:	4318      	orrs	r0, r3
    aea8:	e7f3      	b.n	ae92 <__gedf2+0x6a>
    aeaa:	0037      	movs	r7, r6
    aeac:	4307      	orrs	r7, r0
    aeae:	d0d1      	beq.n	ae54 <__gedf2+0x2c>
    aeb0:	2002      	movs	r0, #2
    aeb2:	4240      	negs	r0, r0
    aeb4:	e7ed      	b.n	ae92 <__gedf2+0x6a>
    aeb6:	465f      	mov	r7, fp
    aeb8:	4317      	orrs	r7, r2
    aeba:	d0ce      	beq.n	ae5a <__gedf2+0x32>
    aebc:	e7f8      	b.n	aeb0 <__gedf2+0x88>
    aebe:	42ac      	cmp	r4, r5
    aec0:	dce4      	bgt.n	ae8c <__gedf2+0x64>
    aec2:	da03      	bge.n	aecc <__gedf2+0xa4>
    aec4:	1e48      	subs	r0, r1, #1
    aec6:	2101      	movs	r1, #1
    aec8:	4308      	orrs	r0, r1
    aeca:	e7e2      	b.n	ae92 <__gedf2+0x6a>
    aecc:	455e      	cmp	r6, fp
    aece:	d8dd      	bhi.n	ae8c <__gedf2+0x64>
    aed0:	d006      	beq.n	aee0 <__gedf2+0xb8>
    aed2:	2000      	movs	r0, #0
    aed4:	455e      	cmp	r6, fp
    aed6:	d2dc      	bcs.n	ae92 <__gedf2+0x6a>
    aed8:	2301      	movs	r3, #1
    aeda:	1e48      	subs	r0, r1, #1
    aedc:	4318      	orrs	r0, r3
    aede:	e7d8      	b.n	ae92 <__gedf2+0x6a>
    aee0:	45c4      	cmp	ip, r8
    aee2:	d8d3      	bhi.n	ae8c <__gedf2+0x64>
    aee4:	2000      	movs	r0, #0
    aee6:	45c4      	cmp	ip, r8
    aee8:	d3f6      	bcc.n	aed8 <__gedf2+0xb0>
    aeea:	e7d2      	b.n	ae92 <__gedf2+0x6a>
    aeec:	000007ff 	.word	0x000007ff

0000aef0 <__ledf2>:
    aef0:	b5f0      	push	{r4, r5, r6, r7, lr}
    aef2:	464e      	mov	r6, r9
    aef4:	4645      	mov	r5, r8
    aef6:	46de      	mov	lr, fp
    aef8:	4657      	mov	r7, sl
    aefa:	005c      	lsls	r4, r3, #1
    aefc:	b5e0      	push	{r5, r6, r7, lr}
    aefe:	031f      	lsls	r7, r3, #12
    af00:	0fdb      	lsrs	r3, r3, #31
    af02:	4699      	mov	r9, r3
    af04:	4b2a      	ldr	r3, [pc, #168]	; (afb0 <__ledf2+0xc0>)
    af06:	030e      	lsls	r6, r1, #12
    af08:	004d      	lsls	r5, r1, #1
    af0a:	0fc9      	lsrs	r1, r1, #31
    af0c:	4684      	mov	ip, r0
    af0e:	0b36      	lsrs	r6, r6, #12
    af10:	0d6d      	lsrs	r5, r5, #21
    af12:	468b      	mov	fp, r1
    af14:	4690      	mov	r8, r2
    af16:	0b3f      	lsrs	r7, r7, #12
    af18:	0d64      	lsrs	r4, r4, #21
    af1a:	429d      	cmp	r5, r3
    af1c:	d020      	beq.n	af60 <__ledf2+0x70>
    af1e:	4b24      	ldr	r3, [pc, #144]	; (afb0 <__ledf2+0xc0>)
    af20:	429c      	cmp	r4, r3
    af22:	d022      	beq.n	af6a <__ledf2+0x7a>
    af24:	2d00      	cmp	r5, #0
    af26:	d112      	bne.n	af4e <__ledf2+0x5e>
    af28:	4330      	orrs	r0, r6
    af2a:	4243      	negs	r3, r0
    af2c:	4143      	adcs	r3, r0
    af2e:	b2db      	uxtb	r3, r3
    af30:	2c00      	cmp	r4, #0
    af32:	d01f      	beq.n	af74 <__ledf2+0x84>
    af34:	2b00      	cmp	r3, #0
    af36:	d00c      	beq.n	af52 <__ledf2+0x62>
    af38:	464b      	mov	r3, r9
    af3a:	2001      	movs	r0, #1
    af3c:	3b01      	subs	r3, #1
    af3e:	4303      	orrs	r3, r0
    af40:	0018      	movs	r0, r3
    af42:	bc3c      	pop	{r2, r3, r4, r5}
    af44:	4690      	mov	r8, r2
    af46:	4699      	mov	r9, r3
    af48:	46a2      	mov	sl, r4
    af4a:	46ab      	mov	fp, r5
    af4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af4e:	2c00      	cmp	r4, #0
    af50:	d016      	beq.n	af80 <__ledf2+0x90>
    af52:	45cb      	cmp	fp, r9
    af54:	d017      	beq.n	af86 <__ledf2+0x96>
    af56:	465b      	mov	r3, fp
    af58:	4259      	negs	r1, r3
    af5a:	2301      	movs	r3, #1
    af5c:	430b      	orrs	r3, r1
    af5e:	e7ef      	b.n	af40 <__ledf2+0x50>
    af60:	0031      	movs	r1, r6
    af62:	2302      	movs	r3, #2
    af64:	4301      	orrs	r1, r0
    af66:	d1eb      	bne.n	af40 <__ledf2+0x50>
    af68:	e7d9      	b.n	af1e <__ledf2+0x2e>
    af6a:	0039      	movs	r1, r7
    af6c:	2302      	movs	r3, #2
    af6e:	4311      	orrs	r1, r2
    af70:	d1e6      	bne.n	af40 <__ledf2+0x50>
    af72:	e7d7      	b.n	af24 <__ledf2+0x34>
    af74:	433a      	orrs	r2, r7
    af76:	d1dd      	bne.n	af34 <__ledf2+0x44>
    af78:	2300      	movs	r3, #0
    af7a:	2800      	cmp	r0, #0
    af7c:	d0e0      	beq.n	af40 <__ledf2+0x50>
    af7e:	e7ea      	b.n	af56 <__ledf2+0x66>
    af80:	433a      	orrs	r2, r7
    af82:	d1e6      	bne.n	af52 <__ledf2+0x62>
    af84:	e7e7      	b.n	af56 <__ledf2+0x66>
    af86:	42a5      	cmp	r5, r4
    af88:	dce5      	bgt.n	af56 <__ledf2+0x66>
    af8a:	db05      	blt.n	af98 <__ledf2+0xa8>
    af8c:	42be      	cmp	r6, r7
    af8e:	d8e2      	bhi.n	af56 <__ledf2+0x66>
    af90:	d007      	beq.n	afa2 <__ledf2+0xb2>
    af92:	2300      	movs	r3, #0
    af94:	42be      	cmp	r6, r7
    af96:	d2d3      	bcs.n	af40 <__ledf2+0x50>
    af98:	4659      	mov	r1, fp
    af9a:	2301      	movs	r3, #1
    af9c:	3901      	subs	r1, #1
    af9e:	430b      	orrs	r3, r1
    afa0:	e7ce      	b.n	af40 <__ledf2+0x50>
    afa2:	45c4      	cmp	ip, r8
    afa4:	d8d7      	bhi.n	af56 <__ledf2+0x66>
    afa6:	2300      	movs	r3, #0
    afa8:	45c4      	cmp	ip, r8
    afaa:	d3f5      	bcc.n	af98 <__ledf2+0xa8>
    afac:	e7c8      	b.n	af40 <__ledf2+0x50>
    afae:	46c0      	nop			; (mov r8, r8)
    afb0:	000007ff 	.word	0x000007ff

0000afb4 <__aeabi_dmul>:
    afb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    afb6:	4657      	mov	r7, sl
    afb8:	4645      	mov	r5, r8
    afba:	46de      	mov	lr, fp
    afbc:	464e      	mov	r6, r9
    afbe:	b5e0      	push	{r5, r6, r7, lr}
    afc0:	030c      	lsls	r4, r1, #12
    afc2:	4698      	mov	r8, r3
    afc4:	004e      	lsls	r6, r1, #1
    afc6:	0b23      	lsrs	r3, r4, #12
    afc8:	b087      	sub	sp, #28
    afca:	0007      	movs	r7, r0
    afcc:	4692      	mov	sl, r2
    afce:	469b      	mov	fp, r3
    afd0:	0d76      	lsrs	r6, r6, #21
    afd2:	0fcd      	lsrs	r5, r1, #31
    afd4:	2e00      	cmp	r6, #0
    afd6:	d06b      	beq.n	b0b0 <__aeabi_dmul+0xfc>
    afd8:	4b6d      	ldr	r3, [pc, #436]	; (b190 <__aeabi_dmul+0x1dc>)
    afda:	429e      	cmp	r6, r3
    afdc:	d035      	beq.n	b04a <__aeabi_dmul+0x96>
    afde:	2480      	movs	r4, #128	; 0x80
    afe0:	465b      	mov	r3, fp
    afe2:	0f42      	lsrs	r2, r0, #29
    afe4:	0424      	lsls	r4, r4, #16
    afe6:	00db      	lsls	r3, r3, #3
    afe8:	4314      	orrs	r4, r2
    afea:	431c      	orrs	r4, r3
    afec:	00c3      	lsls	r3, r0, #3
    afee:	4699      	mov	r9, r3
    aff0:	4b68      	ldr	r3, [pc, #416]	; (b194 <__aeabi_dmul+0x1e0>)
    aff2:	46a3      	mov	fp, r4
    aff4:	469c      	mov	ip, r3
    aff6:	2300      	movs	r3, #0
    aff8:	2700      	movs	r7, #0
    affa:	4466      	add	r6, ip
    affc:	9302      	str	r3, [sp, #8]
    affe:	4643      	mov	r3, r8
    b000:	031c      	lsls	r4, r3, #12
    b002:	005a      	lsls	r2, r3, #1
    b004:	0fdb      	lsrs	r3, r3, #31
    b006:	4650      	mov	r0, sl
    b008:	0b24      	lsrs	r4, r4, #12
    b00a:	0d52      	lsrs	r2, r2, #21
    b00c:	4698      	mov	r8, r3
    b00e:	d100      	bne.n	b012 <__aeabi_dmul+0x5e>
    b010:	e076      	b.n	b100 <__aeabi_dmul+0x14c>
    b012:	4b5f      	ldr	r3, [pc, #380]	; (b190 <__aeabi_dmul+0x1dc>)
    b014:	429a      	cmp	r2, r3
    b016:	d06d      	beq.n	b0f4 <__aeabi_dmul+0x140>
    b018:	2380      	movs	r3, #128	; 0x80
    b01a:	0f41      	lsrs	r1, r0, #29
    b01c:	041b      	lsls	r3, r3, #16
    b01e:	430b      	orrs	r3, r1
    b020:	495c      	ldr	r1, [pc, #368]	; (b194 <__aeabi_dmul+0x1e0>)
    b022:	00e4      	lsls	r4, r4, #3
    b024:	468c      	mov	ip, r1
    b026:	431c      	orrs	r4, r3
    b028:	00c3      	lsls	r3, r0, #3
    b02a:	2000      	movs	r0, #0
    b02c:	4462      	add	r2, ip
    b02e:	4641      	mov	r1, r8
    b030:	18b6      	adds	r6, r6, r2
    b032:	4069      	eors	r1, r5
    b034:	1c72      	adds	r2, r6, #1
    b036:	9101      	str	r1, [sp, #4]
    b038:	4694      	mov	ip, r2
    b03a:	4307      	orrs	r7, r0
    b03c:	2f0f      	cmp	r7, #15
    b03e:	d900      	bls.n	b042 <__aeabi_dmul+0x8e>
    b040:	e0b0      	b.n	b1a4 <__aeabi_dmul+0x1f0>
    b042:	4a55      	ldr	r2, [pc, #340]	; (b198 <__aeabi_dmul+0x1e4>)
    b044:	00bf      	lsls	r7, r7, #2
    b046:	59d2      	ldr	r2, [r2, r7]
    b048:	4697      	mov	pc, r2
    b04a:	465b      	mov	r3, fp
    b04c:	4303      	orrs	r3, r0
    b04e:	4699      	mov	r9, r3
    b050:	d000      	beq.n	b054 <__aeabi_dmul+0xa0>
    b052:	e087      	b.n	b164 <__aeabi_dmul+0x1b0>
    b054:	2300      	movs	r3, #0
    b056:	469b      	mov	fp, r3
    b058:	3302      	adds	r3, #2
    b05a:	2708      	movs	r7, #8
    b05c:	9302      	str	r3, [sp, #8]
    b05e:	e7ce      	b.n	affe <__aeabi_dmul+0x4a>
    b060:	4642      	mov	r2, r8
    b062:	9201      	str	r2, [sp, #4]
    b064:	2802      	cmp	r0, #2
    b066:	d067      	beq.n	b138 <__aeabi_dmul+0x184>
    b068:	2803      	cmp	r0, #3
    b06a:	d100      	bne.n	b06e <__aeabi_dmul+0xba>
    b06c:	e20e      	b.n	b48c <__aeabi_dmul+0x4d8>
    b06e:	2801      	cmp	r0, #1
    b070:	d000      	beq.n	b074 <__aeabi_dmul+0xc0>
    b072:	e162      	b.n	b33a <__aeabi_dmul+0x386>
    b074:	2300      	movs	r3, #0
    b076:	2400      	movs	r4, #0
    b078:	2200      	movs	r2, #0
    b07a:	4699      	mov	r9, r3
    b07c:	9901      	ldr	r1, [sp, #4]
    b07e:	4001      	ands	r1, r0
    b080:	b2cd      	uxtb	r5, r1
    b082:	2100      	movs	r1, #0
    b084:	0312      	lsls	r2, r2, #12
    b086:	0d0b      	lsrs	r3, r1, #20
    b088:	0b12      	lsrs	r2, r2, #12
    b08a:	051b      	lsls	r3, r3, #20
    b08c:	4313      	orrs	r3, r2
    b08e:	4a43      	ldr	r2, [pc, #268]	; (b19c <__aeabi_dmul+0x1e8>)
    b090:	0524      	lsls	r4, r4, #20
    b092:	4013      	ands	r3, r2
    b094:	431c      	orrs	r4, r3
    b096:	0064      	lsls	r4, r4, #1
    b098:	07ed      	lsls	r5, r5, #31
    b09a:	0864      	lsrs	r4, r4, #1
    b09c:	432c      	orrs	r4, r5
    b09e:	4648      	mov	r0, r9
    b0a0:	0021      	movs	r1, r4
    b0a2:	b007      	add	sp, #28
    b0a4:	bc3c      	pop	{r2, r3, r4, r5}
    b0a6:	4690      	mov	r8, r2
    b0a8:	4699      	mov	r9, r3
    b0aa:	46a2      	mov	sl, r4
    b0ac:	46ab      	mov	fp, r5
    b0ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0b0:	4303      	orrs	r3, r0
    b0b2:	4699      	mov	r9, r3
    b0b4:	d04f      	beq.n	b156 <__aeabi_dmul+0x1a2>
    b0b6:	465b      	mov	r3, fp
    b0b8:	2b00      	cmp	r3, #0
    b0ba:	d100      	bne.n	b0be <__aeabi_dmul+0x10a>
    b0bc:	e189      	b.n	b3d2 <__aeabi_dmul+0x41e>
    b0be:	4658      	mov	r0, fp
    b0c0:	f000 feb8 	bl	be34 <__clzsi2>
    b0c4:	0003      	movs	r3, r0
    b0c6:	3b0b      	subs	r3, #11
    b0c8:	2b1c      	cmp	r3, #28
    b0ca:	dd00      	ble.n	b0ce <__aeabi_dmul+0x11a>
    b0cc:	e17a      	b.n	b3c4 <__aeabi_dmul+0x410>
    b0ce:	221d      	movs	r2, #29
    b0d0:	1ad3      	subs	r3, r2, r3
    b0d2:	003a      	movs	r2, r7
    b0d4:	0001      	movs	r1, r0
    b0d6:	465c      	mov	r4, fp
    b0d8:	40da      	lsrs	r2, r3
    b0da:	3908      	subs	r1, #8
    b0dc:	408c      	lsls	r4, r1
    b0de:	0013      	movs	r3, r2
    b0e0:	408f      	lsls	r7, r1
    b0e2:	4323      	orrs	r3, r4
    b0e4:	469b      	mov	fp, r3
    b0e6:	46b9      	mov	r9, r7
    b0e8:	2300      	movs	r3, #0
    b0ea:	4e2d      	ldr	r6, [pc, #180]	; (b1a0 <__aeabi_dmul+0x1ec>)
    b0ec:	2700      	movs	r7, #0
    b0ee:	1a36      	subs	r6, r6, r0
    b0f0:	9302      	str	r3, [sp, #8]
    b0f2:	e784      	b.n	affe <__aeabi_dmul+0x4a>
    b0f4:	4653      	mov	r3, sl
    b0f6:	4323      	orrs	r3, r4
    b0f8:	d12a      	bne.n	b150 <__aeabi_dmul+0x19c>
    b0fa:	2400      	movs	r4, #0
    b0fc:	2002      	movs	r0, #2
    b0fe:	e796      	b.n	b02e <__aeabi_dmul+0x7a>
    b100:	4653      	mov	r3, sl
    b102:	4323      	orrs	r3, r4
    b104:	d020      	beq.n	b148 <__aeabi_dmul+0x194>
    b106:	2c00      	cmp	r4, #0
    b108:	d100      	bne.n	b10c <__aeabi_dmul+0x158>
    b10a:	e157      	b.n	b3bc <__aeabi_dmul+0x408>
    b10c:	0020      	movs	r0, r4
    b10e:	f000 fe91 	bl	be34 <__clzsi2>
    b112:	0003      	movs	r3, r0
    b114:	3b0b      	subs	r3, #11
    b116:	2b1c      	cmp	r3, #28
    b118:	dd00      	ble.n	b11c <__aeabi_dmul+0x168>
    b11a:	e149      	b.n	b3b0 <__aeabi_dmul+0x3fc>
    b11c:	211d      	movs	r1, #29
    b11e:	1acb      	subs	r3, r1, r3
    b120:	4651      	mov	r1, sl
    b122:	0002      	movs	r2, r0
    b124:	40d9      	lsrs	r1, r3
    b126:	4653      	mov	r3, sl
    b128:	3a08      	subs	r2, #8
    b12a:	4094      	lsls	r4, r2
    b12c:	4093      	lsls	r3, r2
    b12e:	430c      	orrs	r4, r1
    b130:	4a1b      	ldr	r2, [pc, #108]	; (b1a0 <__aeabi_dmul+0x1ec>)
    b132:	1a12      	subs	r2, r2, r0
    b134:	2000      	movs	r0, #0
    b136:	e77a      	b.n	b02e <__aeabi_dmul+0x7a>
    b138:	2501      	movs	r5, #1
    b13a:	9b01      	ldr	r3, [sp, #4]
    b13c:	4c14      	ldr	r4, [pc, #80]	; (b190 <__aeabi_dmul+0x1dc>)
    b13e:	401d      	ands	r5, r3
    b140:	2300      	movs	r3, #0
    b142:	2200      	movs	r2, #0
    b144:	4699      	mov	r9, r3
    b146:	e79c      	b.n	b082 <__aeabi_dmul+0xce>
    b148:	2400      	movs	r4, #0
    b14a:	2200      	movs	r2, #0
    b14c:	2001      	movs	r0, #1
    b14e:	e76e      	b.n	b02e <__aeabi_dmul+0x7a>
    b150:	4653      	mov	r3, sl
    b152:	2003      	movs	r0, #3
    b154:	e76b      	b.n	b02e <__aeabi_dmul+0x7a>
    b156:	2300      	movs	r3, #0
    b158:	469b      	mov	fp, r3
    b15a:	3301      	adds	r3, #1
    b15c:	2704      	movs	r7, #4
    b15e:	2600      	movs	r6, #0
    b160:	9302      	str	r3, [sp, #8]
    b162:	e74c      	b.n	affe <__aeabi_dmul+0x4a>
    b164:	2303      	movs	r3, #3
    b166:	4681      	mov	r9, r0
    b168:	270c      	movs	r7, #12
    b16a:	9302      	str	r3, [sp, #8]
    b16c:	e747      	b.n	affe <__aeabi_dmul+0x4a>
    b16e:	2280      	movs	r2, #128	; 0x80
    b170:	2300      	movs	r3, #0
    b172:	2500      	movs	r5, #0
    b174:	0312      	lsls	r2, r2, #12
    b176:	4699      	mov	r9, r3
    b178:	4c05      	ldr	r4, [pc, #20]	; (b190 <__aeabi_dmul+0x1dc>)
    b17a:	e782      	b.n	b082 <__aeabi_dmul+0xce>
    b17c:	465c      	mov	r4, fp
    b17e:	464b      	mov	r3, r9
    b180:	9802      	ldr	r0, [sp, #8]
    b182:	e76f      	b.n	b064 <__aeabi_dmul+0xb0>
    b184:	465c      	mov	r4, fp
    b186:	464b      	mov	r3, r9
    b188:	9501      	str	r5, [sp, #4]
    b18a:	9802      	ldr	r0, [sp, #8]
    b18c:	e76a      	b.n	b064 <__aeabi_dmul+0xb0>
    b18e:	46c0      	nop			; (mov r8, r8)
    b190:	000007ff 	.word	0x000007ff
    b194:	fffffc01 	.word	0xfffffc01
    b198:	00011fc8 	.word	0x00011fc8
    b19c:	800fffff 	.word	0x800fffff
    b1a0:	fffffc0d 	.word	0xfffffc0d
    b1a4:	464a      	mov	r2, r9
    b1a6:	4649      	mov	r1, r9
    b1a8:	0c17      	lsrs	r7, r2, #16
    b1aa:	0c1a      	lsrs	r2, r3, #16
    b1ac:	041b      	lsls	r3, r3, #16
    b1ae:	0c1b      	lsrs	r3, r3, #16
    b1b0:	0408      	lsls	r0, r1, #16
    b1b2:	0019      	movs	r1, r3
    b1b4:	0c00      	lsrs	r0, r0, #16
    b1b6:	4341      	muls	r1, r0
    b1b8:	0015      	movs	r5, r2
    b1ba:	4688      	mov	r8, r1
    b1bc:	0019      	movs	r1, r3
    b1be:	437d      	muls	r5, r7
    b1c0:	4379      	muls	r1, r7
    b1c2:	9503      	str	r5, [sp, #12]
    b1c4:	4689      	mov	r9, r1
    b1c6:	0029      	movs	r1, r5
    b1c8:	0015      	movs	r5, r2
    b1ca:	4345      	muls	r5, r0
    b1cc:	444d      	add	r5, r9
    b1ce:	9502      	str	r5, [sp, #8]
    b1d0:	4645      	mov	r5, r8
    b1d2:	0c2d      	lsrs	r5, r5, #16
    b1d4:	46aa      	mov	sl, r5
    b1d6:	9d02      	ldr	r5, [sp, #8]
    b1d8:	4455      	add	r5, sl
    b1da:	45a9      	cmp	r9, r5
    b1dc:	d906      	bls.n	b1ec <__aeabi_dmul+0x238>
    b1de:	468a      	mov	sl, r1
    b1e0:	2180      	movs	r1, #128	; 0x80
    b1e2:	0249      	lsls	r1, r1, #9
    b1e4:	4689      	mov	r9, r1
    b1e6:	44ca      	add	sl, r9
    b1e8:	4651      	mov	r1, sl
    b1ea:	9103      	str	r1, [sp, #12]
    b1ec:	0c29      	lsrs	r1, r5, #16
    b1ee:	9104      	str	r1, [sp, #16]
    b1f0:	4641      	mov	r1, r8
    b1f2:	0409      	lsls	r1, r1, #16
    b1f4:	042d      	lsls	r5, r5, #16
    b1f6:	0c09      	lsrs	r1, r1, #16
    b1f8:	4688      	mov	r8, r1
    b1fa:	0029      	movs	r1, r5
    b1fc:	0c25      	lsrs	r5, r4, #16
    b1fe:	0424      	lsls	r4, r4, #16
    b200:	4441      	add	r1, r8
    b202:	0c24      	lsrs	r4, r4, #16
    b204:	9105      	str	r1, [sp, #20]
    b206:	0021      	movs	r1, r4
    b208:	4341      	muls	r1, r0
    b20a:	4688      	mov	r8, r1
    b20c:	0021      	movs	r1, r4
    b20e:	4379      	muls	r1, r7
    b210:	468a      	mov	sl, r1
    b212:	4368      	muls	r0, r5
    b214:	4641      	mov	r1, r8
    b216:	4450      	add	r0, sl
    b218:	4681      	mov	r9, r0
    b21a:	0c08      	lsrs	r0, r1, #16
    b21c:	4448      	add	r0, r9
    b21e:	436f      	muls	r7, r5
    b220:	4582      	cmp	sl, r0
    b222:	d903      	bls.n	b22c <__aeabi_dmul+0x278>
    b224:	2180      	movs	r1, #128	; 0x80
    b226:	0249      	lsls	r1, r1, #9
    b228:	4689      	mov	r9, r1
    b22a:	444f      	add	r7, r9
    b22c:	0c01      	lsrs	r1, r0, #16
    b22e:	4689      	mov	r9, r1
    b230:	0039      	movs	r1, r7
    b232:	4449      	add	r1, r9
    b234:	9102      	str	r1, [sp, #8]
    b236:	4641      	mov	r1, r8
    b238:	040f      	lsls	r7, r1, #16
    b23a:	9904      	ldr	r1, [sp, #16]
    b23c:	0c3f      	lsrs	r7, r7, #16
    b23e:	4688      	mov	r8, r1
    b240:	0400      	lsls	r0, r0, #16
    b242:	19c0      	adds	r0, r0, r7
    b244:	4480      	add	r8, r0
    b246:	4641      	mov	r1, r8
    b248:	9104      	str	r1, [sp, #16]
    b24a:	4659      	mov	r1, fp
    b24c:	0c0f      	lsrs	r7, r1, #16
    b24e:	0409      	lsls	r1, r1, #16
    b250:	0c09      	lsrs	r1, r1, #16
    b252:	4688      	mov	r8, r1
    b254:	4359      	muls	r1, r3
    b256:	468a      	mov	sl, r1
    b258:	0039      	movs	r1, r7
    b25a:	4351      	muls	r1, r2
    b25c:	4689      	mov	r9, r1
    b25e:	4641      	mov	r1, r8
    b260:	434a      	muls	r2, r1
    b262:	4651      	mov	r1, sl
    b264:	0c09      	lsrs	r1, r1, #16
    b266:	468b      	mov	fp, r1
    b268:	437b      	muls	r3, r7
    b26a:	18d2      	adds	r2, r2, r3
    b26c:	445a      	add	r2, fp
    b26e:	4293      	cmp	r3, r2
    b270:	d903      	bls.n	b27a <__aeabi_dmul+0x2c6>
    b272:	2380      	movs	r3, #128	; 0x80
    b274:	025b      	lsls	r3, r3, #9
    b276:	469b      	mov	fp, r3
    b278:	44d9      	add	r9, fp
    b27a:	4651      	mov	r1, sl
    b27c:	0409      	lsls	r1, r1, #16
    b27e:	0c09      	lsrs	r1, r1, #16
    b280:	468a      	mov	sl, r1
    b282:	4641      	mov	r1, r8
    b284:	4361      	muls	r1, r4
    b286:	437c      	muls	r4, r7
    b288:	0c13      	lsrs	r3, r2, #16
    b28a:	0412      	lsls	r2, r2, #16
    b28c:	444b      	add	r3, r9
    b28e:	4452      	add	r2, sl
    b290:	46a1      	mov	r9, r4
    b292:	468a      	mov	sl, r1
    b294:	003c      	movs	r4, r7
    b296:	4641      	mov	r1, r8
    b298:	436c      	muls	r4, r5
    b29a:	434d      	muls	r5, r1
    b29c:	4651      	mov	r1, sl
    b29e:	444d      	add	r5, r9
    b2a0:	0c0f      	lsrs	r7, r1, #16
    b2a2:	197d      	adds	r5, r7, r5
    b2a4:	45a9      	cmp	r9, r5
    b2a6:	d903      	bls.n	b2b0 <__aeabi_dmul+0x2fc>
    b2a8:	2180      	movs	r1, #128	; 0x80
    b2aa:	0249      	lsls	r1, r1, #9
    b2ac:	4688      	mov	r8, r1
    b2ae:	4444      	add	r4, r8
    b2b0:	9f04      	ldr	r7, [sp, #16]
    b2b2:	9903      	ldr	r1, [sp, #12]
    b2b4:	46b8      	mov	r8, r7
    b2b6:	4441      	add	r1, r8
    b2b8:	468b      	mov	fp, r1
    b2ba:	4583      	cmp	fp, r0
    b2bc:	4180      	sbcs	r0, r0
    b2be:	4241      	negs	r1, r0
    b2c0:	4688      	mov	r8, r1
    b2c2:	4651      	mov	r1, sl
    b2c4:	0408      	lsls	r0, r1, #16
    b2c6:	042f      	lsls	r7, r5, #16
    b2c8:	0c00      	lsrs	r0, r0, #16
    b2ca:	183f      	adds	r7, r7, r0
    b2cc:	4658      	mov	r0, fp
    b2ce:	9902      	ldr	r1, [sp, #8]
    b2d0:	1810      	adds	r0, r2, r0
    b2d2:	4689      	mov	r9, r1
    b2d4:	4290      	cmp	r0, r2
    b2d6:	4192      	sbcs	r2, r2
    b2d8:	444f      	add	r7, r9
    b2da:	46ba      	mov	sl, r7
    b2dc:	4252      	negs	r2, r2
    b2de:	4699      	mov	r9, r3
    b2e0:	4693      	mov	fp, r2
    b2e2:	44c2      	add	sl, r8
    b2e4:	44d1      	add	r9, sl
    b2e6:	44cb      	add	fp, r9
    b2e8:	428f      	cmp	r7, r1
    b2ea:	41bf      	sbcs	r7, r7
    b2ec:	45c2      	cmp	sl, r8
    b2ee:	4189      	sbcs	r1, r1
    b2f0:	4599      	cmp	r9, r3
    b2f2:	419b      	sbcs	r3, r3
    b2f4:	4593      	cmp	fp, r2
    b2f6:	4192      	sbcs	r2, r2
    b2f8:	427f      	negs	r7, r7
    b2fa:	4249      	negs	r1, r1
    b2fc:	0c2d      	lsrs	r5, r5, #16
    b2fe:	4252      	negs	r2, r2
    b300:	430f      	orrs	r7, r1
    b302:	425b      	negs	r3, r3
    b304:	4313      	orrs	r3, r2
    b306:	197f      	adds	r7, r7, r5
    b308:	18ff      	adds	r7, r7, r3
    b30a:	465b      	mov	r3, fp
    b30c:	193c      	adds	r4, r7, r4
    b30e:	0ddb      	lsrs	r3, r3, #23
    b310:	9a05      	ldr	r2, [sp, #20]
    b312:	0264      	lsls	r4, r4, #9
    b314:	431c      	orrs	r4, r3
    b316:	0243      	lsls	r3, r0, #9
    b318:	4313      	orrs	r3, r2
    b31a:	1e5d      	subs	r5, r3, #1
    b31c:	41ab      	sbcs	r3, r5
    b31e:	465a      	mov	r2, fp
    b320:	0dc0      	lsrs	r0, r0, #23
    b322:	4303      	orrs	r3, r0
    b324:	0252      	lsls	r2, r2, #9
    b326:	4313      	orrs	r3, r2
    b328:	01e2      	lsls	r2, r4, #7
    b32a:	d556      	bpl.n	b3da <__aeabi_dmul+0x426>
    b32c:	2001      	movs	r0, #1
    b32e:	085a      	lsrs	r2, r3, #1
    b330:	4003      	ands	r3, r0
    b332:	4313      	orrs	r3, r2
    b334:	07e2      	lsls	r2, r4, #31
    b336:	4313      	orrs	r3, r2
    b338:	0864      	lsrs	r4, r4, #1
    b33a:	485a      	ldr	r0, [pc, #360]	; (b4a4 <__aeabi_dmul+0x4f0>)
    b33c:	4460      	add	r0, ip
    b33e:	2800      	cmp	r0, #0
    b340:	dd4d      	ble.n	b3de <__aeabi_dmul+0x42a>
    b342:	075a      	lsls	r2, r3, #29
    b344:	d009      	beq.n	b35a <__aeabi_dmul+0x3a6>
    b346:	220f      	movs	r2, #15
    b348:	401a      	ands	r2, r3
    b34a:	2a04      	cmp	r2, #4
    b34c:	d005      	beq.n	b35a <__aeabi_dmul+0x3a6>
    b34e:	1d1a      	adds	r2, r3, #4
    b350:	429a      	cmp	r2, r3
    b352:	419b      	sbcs	r3, r3
    b354:	425b      	negs	r3, r3
    b356:	18e4      	adds	r4, r4, r3
    b358:	0013      	movs	r3, r2
    b35a:	01e2      	lsls	r2, r4, #7
    b35c:	d504      	bpl.n	b368 <__aeabi_dmul+0x3b4>
    b35e:	2080      	movs	r0, #128	; 0x80
    b360:	4a51      	ldr	r2, [pc, #324]	; (b4a8 <__aeabi_dmul+0x4f4>)
    b362:	00c0      	lsls	r0, r0, #3
    b364:	4014      	ands	r4, r2
    b366:	4460      	add	r0, ip
    b368:	4a50      	ldr	r2, [pc, #320]	; (b4ac <__aeabi_dmul+0x4f8>)
    b36a:	4290      	cmp	r0, r2
    b36c:	dd00      	ble.n	b370 <__aeabi_dmul+0x3bc>
    b36e:	e6e3      	b.n	b138 <__aeabi_dmul+0x184>
    b370:	2501      	movs	r5, #1
    b372:	08db      	lsrs	r3, r3, #3
    b374:	0762      	lsls	r2, r4, #29
    b376:	431a      	orrs	r2, r3
    b378:	0264      	lsls	r4, r4, #9
    b37a:	9b01      	ldr	r3, [sp, #4]
    b37c:	4691      	mov	r9, r2
    b37e:	0b22      	lsrs	r2, r4, #12
    b380:	0544      	lsls	r4, r0, #21
    b382:	0d64      	lsrs	r4, r4, #21
    b384:	401d      	ands	r5, r3
    b386:	e67c      	b.n	b082 <__aeabi_dmul+0xce>
    b388:	2280      	movs	r2, #128	; 0x80
    b38a:	4659      	mov	r1, fp
    b38c:	0312      	lsls	r2, r2, #12
    b38e:	4211      	tst	r1, r2
    b390:	d008      	beq.n	b3a4 <__aeabi_dmul+0x3f0>
    b392:	4214      	tst	r4, r2
    b394:	d106      	bne.n	b3a4 <__aeabi_dmul+0x3f0>
    b396:	4322      	orrs	r2, r4
    b398:	0312      	lsls	r2, r2, #12
    b39a:	0b12      	lsrs	r2, r2, #12
    b39c:	4645      	mov	r5, r8
    b39e:	4699      	mov	r9, r3
    b3a0:	4c43      	ldr	r4, [pc, #268]	; (b4b0 <__aeabi_dmul+0x4fc>)
    b3a2:	e66e      	b.n	b082 <__aeabi_dmul+0xce>
    b3a4:	465b      	mov	r3, fp
    b3a6:	431a      	orrs	r2, r3
    b3a8:	0312      	lsls	r2, r2, #12
    b3aa:	0b12      	lsrs	r2, r2, #12
    b3ac:	4c40      	ldr	r4, [pc, #256]	; (b4b0 <__aeabi_dmul+0x4fc>)
    b3ae:	e668      	b.n	b082 <__aeabi_dmul+0xce>
    b3b0:	0003      	movs	r3, r0
    b3b2:	4654      	mov	r4, sl
    b3b4:	3b28      	subs	r3, #40	; 0x28
    b3b6:	409c      	lsls	r4, r3
    b3b8:	2300      	movs	r3, #0
    b3ba:	e6b9      	b.n	b130 <__aeabi_dmul+0x17c>
    b3bc:	f000 fd3a 	bl	be34 <__clzsi2>
    b3c0:	3020      	adds	r0, #32
    b3c2:	e6a6      	b.n	b112 <__aeabi_dmul+0x15e>
    b3c4:	0003      	movs	r3, r0
    b3c6:	3b28      	subs	r3, #40	; 0x28
    b3c8:	409f      	lsls	r7, r3
    b3ca:	2300      	movs	r3, #0
    b3cc:	46bb      	mov	fp, r7
    b3ce:	4699      	mov	r9, r3
    b3d0:	e68a      	b.n	b0e8 <__aeabi_dmul+0x134>
    b3d2:	f000 fd2f 	bl	be34 <__clzsi2>
    b3d6:	3020      	adds	r0, #32
    b3d8:	e674      	b.n	b0c4 <__aeabi_dmul+0x110>
    b3da:	46b4      	mov	ip, r6
    b3dc:	e7ad      	b.n	b33a <__aeabi_dmul+0x386>
    b3de:	2501      	movs	r5, #1
    b3e0:	1a2a      	subs	r2, r5, r0
    b3e2:	2a38      	cmp	r2, #56	; 0x38
    b3e4:	dd06      	ble.n	b3f4 <__aeabi_dmul+0x440>
    b3e6:	9b01      	ldr	r3, [sp, #4]
    b3e8:	2400      	movs	r4, #0
    b3ea:	401d      	ands	r5, r3
    b3ec:	2300      	movs	r3, #0
    b3ee:	2200      	movs	r2, #0
    b3f0:	4699      	mov	r9, r3
    b3f2:	e646      	b.n	b082 <__aeabi_dmul+0xce>
    b3f4:	2a1f      	cmp	r2, #31
    b3f6:	dc21      	bgt.n	b43c <__aeabi_dmul+0x488>
    b3f8:	2520      	movs	r5, #32
    b3fa:	0020      	movs	r0, r4
    b3fc:	1aad      	subs	r5, r5, r2
    b3fe:	001e      	movs	r6, r3
    b400:	40ab      	lsls	r3, r5
    b402:	40a8      	lsls	r0, r5
    b404:	40d6      	lsrs	r6, r2
    b406:	1e5d      	subs	r5, r3, #1
    b408:	41ab      	sbcs	r3, r5
    b40a:	4330      	orrs	r0, r6
    b40c:	4318      	orrs	r0, r3
    b40e:	40d4      	lsrs	r4, r2
    b410:	0743      	lsls	r3, r0, #29
    b412:	d009      	beq.n	b428 <__aeabi_dmul+0x474>
    b414:	230f      	movs	r3, #15
    b416:	4003      	ands	r3, r0
    b418:	2b04      	cmp	r3, #4
    b41a:	d005      	beq.n	b428 <__aeabi_dmul+0x474>
    b41c:	0003      	movs	r3, r0
    b41e:	1d18      	adds	r0, r3, #4
    b420:	4298      	cmp	r0, r3
    b422:	419b      	sbcs	r3, r3
    b424:	425b      	negs	r3, r3
    b426:	18e4      	adds	r4, r4, r3
    b428:	0223      	lsls	r3, r4, #8
    b42a:	d521      	bpl.n	b470 <__aeabi_dmul+0x4bc>
    b42c:	2501      	movs	r5, #1
    b42e:	9b01      	ldr	r3, [sp, #4]
    b430:	2401      	movs	r4, #1
    b432:	401d      	ands	r5, r3
    b434:	2300      	movs	r3, #0
    b436:	2200      	movs	r2, #0
    b438:	4699      	mov	r9, r3
    b43a:	e622      	b.n	b082 <__aeabi_dmul+0xce>
    b43c:	251f      	movs	r5, #31
    b43e:	0021      	movs	r1, r4
    b440:	426d      	negs	r5, r5
    b442:	1a28      	subs	r0, r5, r0
    b444:	40c1      	lsrs	r1, r0
    b446:	0008      	movs	r0, r1
    b448:	2a20      	cmp	r2, #32
    b44a:	d01d      	beq.n	b488 <__aeabi_dmul+0x4d4>
    b44c:	355f      	adds	r5, #95	; 0x5f
    b44e:	1aaa      	subs	r2, r5, r2
    b450:	4094      	lsls	r4, r2
    b452:	4323      	orrs	r3, r4
    b454:	1e5c      	subs	r4, r3, #1
    b456:	41a3      	sbcs	r3, r4
    b458:	2507      	movs	r5, #7
    b45a:	4303      	orrs	r3, r0
    b45c:	401d      	ands	r5, r3
    b45e:	2200      	movs	r2, #0
    b460:	2d00      	cmp	r5, #0
    b462:	d009      	beq.n	b478 <__aeabi_dmul+0x4c4>
    b464:	220f      	movs	r2, #15
    b466:	2400      	movs	r4, #0
    b468:	401a      	ands	r2, r3
    b46a:	0018      	movs	r0, r3
    b46c:	2a04      	cmp	r2, #4
    b46e:	d1d6      	bne.n	b41e <__aeabi_dmul+0x46a>
    b470:	0003      	movs	r3, r0
    b472:	0765      	lsls	r5, r4, #29
    b474:	0264      	lsls	r4, r4, #9
    b476:	0b22      	lsrs	r2, r4, #12
    b478:	08db      	lsrs	r3, r3, #3
    b47a:	432b      	orrs	r3, r5
    b47c:	2501      	movs	r5, #1
    b47e:	4699      	mov	r9, r3
    b480:	9b01      	ldr	r3, [sp, #4]
    b482:	2400      	movs	r4, #0
    b484:	401d      	ands	r5, r3
    b486:	e5fc      	b.n	b082 <__aeabi_dmul+0xce>
    b488:	2400      	movs	r4, #0
    b48a:	e7e2      	b.n	b452 <__aeabi_dmul+0x49e>
    b48c:	2280      	movs	r2, #128	; 0x80
    b48e:	2501      	movs	r5, #1
    b490:	0312      	lsls	r2, r2, #12
    b492:	4322      	orrs	r2, r4
    b494:	9901      	ldr	r1, [sp, #4]
    b496:	0312      	lsls	r2, r2, #12
    b498:	0b12      	lsrs	r2, r2, #12
    b49a:	400d      	ands	r5, r1
    b49c:	4699      	mov	r9, r3
    b49e:	4c04      	ldr	r4, [pc, #16]	; (b4b0 <__aeabi_dmul+0x4fc>)
    b4a0:	e5ef      	b.n	b082 <__aeabi_dmul+0xce>
    b4a2:	46c0      	nop			; (mov r8, r8)
    b4a4:	000003ff 	.word	0x000003ff
    b4a8:	feffffff 	.word	0xfeffffff
    b4ac:	000007fe 	.word	0x000007fe
    b4b0:	000007ff 	.word	0x000007ff

0000b4b4 <__aeabi_dsub>:
    b4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4b6:	4646      	mov	r6, r8
    b4b8:	46d6      	mov	lr, sl
    b4ba:	464f      	mov	r7, r9
    b4bc:	030c      	lsls	r4, r1, #12
    b4be:	b5c0      	push	{r6, r7, lr}
    b4c0:	0fcd      	lsrs	r5, r1, #31
    b4c2:	004e      	lsls	r6, r1, #1
    b4c4:	0a61      	lsrs	r1, r4, #9
    b4c6:	0f44      	lsrs	r4, r0, #29
    b4c8:	430c      	orrs	r4, r1
    b4ca:	00c1      	lsls	r1, r0, #3
    b4cc:	0058      	lsls	r0, r3, #1
    b4ce:	0d40      	lsrs	r0, r0, #21
    b4d0:	4684      	mov	ip, r0
    b4d2:	468a      	mov	sl, r1
    b4d4:	000f      	movs	r7, r1
    b4d6:	0319      	lsls	r1, r3, #12
    b4d8:	0f50      	lsrs	r0, r2, #29
    b4da:	0a49      	lsrs	r1, r1, #9
    b4dc:	4301      	orrs	r1, r0
    b4de:	48c6      	ldr	r0, [pc, #792]	; (b7f8 <__aeabi_dsub+0x344>)
    b4e0:	0d76      	lsrs	r6, r6, #21
    b4e2:	46a8      	mov	r8, r5
    b4e4:	0fdb      	lsrs	r3, r3, #31
    b4e6:	00d2      	lsls	r2, r2, #3
    b4e8:	4584      	cmp	ip, r0
    b4ea:	d100      	bne.n	b4ee <__aeabi_dsub+0x3a>
    b4ec:	e0d8      	b.n	b6a0 <__aeabi_dsub+0x1ec>
    b4ee:	2001      	movs	r0, #1
    b4f0:	4043      	eors	r3, r0
    b4f2:	42ab      	cmp	r3, r5
    b4f4:	d100      	bne.n	b4f8 <__aeabi_dsub+0x44>
    b4f6:	e0a6      	b.n	b646 <__aeabi_dsub+0x192>
    b4f8:	4660      	mov	r0, ip
    b4fa:	1a35      	subs	r5, r6, r0
    b4fc:	2d00      	cmp	r5, #0
    b4fe:	dc00      	bgt.n	b502 <__aeabi_dsub+0x4e>
    b500:	e105      	b.n	b70e <__aeabi_dsub+0x25a>
    b502:	2800      	cmp	r0, #0
    b504:	d110      	bne.n	b528 <__aeabi_dsub+0x74>
    b506:	000b      	movs	r3, r1
    b508:	4313      	orrs	r3, r2
    b50a:	d100      	bne.n	b50e <__aeabi_dsub+0x5a>
    b50c:	e0d7      	b.n	b6be <__aeabi_dsub+0x20a>
    b50e:	1e6b      	subs	r3, r5, #1
    b510:	2b00      	cmp	r3, #0
    b512:	d000      	beq.n	b516 <__aeabi_dsub+0x62>
    b514:	e14b      	b.n	b7ae <__aeabi_dsub+0x2fa>
    b516:	4653      	mov	r3, sl
    b518:	1a9f      	subs	r7, r3, r2
    b51a:	45ba      	cmp	sl, r7
    b51c:	4180      	sbcs	r0, r0
    b51e:	1a64      	subs	r4, r4, r1
    b520:	4240      	negs	r0, r0
    b522:	1a24      	subs	r4, r4, r0
    b524:	2601      	movs	r6, #1
    b526:	e01e      	b.n	b566 <__aeabi_dsub+0xb2>
    b528:	4bb3      	ldr	r3, [pc, #716]	; (b7f8 <__aeabi_dsub+0x344>)
    b52a:	429e      	cmp	r6, r3
    b52c:	d048      	beq.n	b5c0 <__aeabi_dsub+0x10c>
    b52e:	2380      	movs	r3, #128	; 0x80
    b530:	041b      	lsls	r3, r3, #16
    b532:	4319      	orrs	r1, r3
    b534:	2d38      	cmp	r5, #56	; 0x38
    b536:	dd00      	ble.n	b53a <__aeabi_dsub+0x86>
    b538:	e119      	b.n	b76e <__aeabi_dsub+0x2ba>
    b53a:	2d1f      	cmp	r5, #31
    b53c:	dd00      	ble.n	b540 <__aeabi_dsub+0x8c>
    b53e:	e14c      	b.n	b7da <__aeabi_dsub+0x326>
    b540:	2320      	movs	r3, #32
    b542:	000f      	movs	r7, r1
    b544:	1b5b      	subs	r3, r3, r5
    b546:	0010      	movs	r0, r2
    b548:	409a      	lsls	r2, r3
    b54a:	409f      	lsls	r7, r3
    b54c:	40e8      	lsrs	r0, r5
    b54e:	1e53      	subs	r3, r2, #1
    b550:	419a      	sbcs	r2, r3
    b552:	40e9      	lsrs	r1, r5
    b554:	4307      	orrs	r7, r0
    b556:	4317      	orrs	r7, r2
    b558:	4653      	mov	r3, sl
    b55a:	1bdf      	subs	r7, r3, r7
    b55c:	1a61      	subs	r1, r4, r1
    b55e:	45ba      	cmp	sl, r7
    b560:	41a4      	sbcs	r4, r4
    b562:	4264      	negs	r4, r4
    b564:	1b0c      	subs	r4, r1, r4
    b566:	0223      	lsls	r3, r4, #8
    b568:	d400      	bmi.n	b56c <__aeabi_dsub+0xb8>
    b56a:	e0c5      	b.n	b6f8 <__aeabi_dsub+0x244>
    b56c:	0264      	lsls	r4, r4, #9
    b56e:	0a65      	lsrs	r5, r4, #9
    b570:	2d00      	cmp	r5, #0
    b572:	d100      	bne.n	b576 <__aeabi_dsub+0xc2>
    b574:	e0f6      	b.n	b764 <__aeabi_dsub+0x2b0>
    b576:	0028      	movs	r0, r5
    b578:	f000 fc5c 	bl	be34 <__clzsi2>
    b57c:	0003      	movs	r3, r0
    b57e:	3b08      	subs	r3, #8
    b580:	2b1f      	cmp	r3, #31
    b582:	dd00      	ble.n	b586 <__aeabi_dsub+0xd2>
    b584:	e0e9      	b.n	b75a <__aeabi_dsub+0x2a6>
    b586:	2220      	movs	r2, #32
    b588:	003c      	movs	r4, r7
    b58a:	1ad2      	subs	r2, r2, r3
    b58c:	409d      	lsls	r5, r3
    b58e:	40d4      	lsrs	r4, r2
    b590:	409f      	lsls	r7, r3
    b592:	4325      	orrs	r5, r4
    b594:	429e      	cmp	r6, r3
    b596:	dd00      	ble.n	b59a <__aeabi_dsub+0xe6>
    b598:	e0db      	b.n	b752 <__aeabi_dsub+0x29e>
    b59a:	1b9e      	subs	r6, r3, r6
    b59c:	1c73      	adds	r3, r6, #1
    b59e:	2b1f      	cmp	r3, #31
    b5a0:	dd00      	ble.n	b5a4 <__aeabi_dsub+0xf0>
    b5a2:	e10a      	b.n	b7ba <__aeabi_dsub+0x306>
    b5a4:	2220      	movs	r2, #32
    b5a6:	0038      	movs	r0, r7
    b5a8:	1ad2      	subs	r2, r2, r3
    b5aa:	0029      	movs	r1, r5
    b5ac:	4097      	lsls	r7, r2
    b5ae:	002c      	movs	r4, r5
    b5b0:	4091      	lsls	r1, r2
    b5b2:	40d8      	lsrs	r0, r3
    b5b4:	1e7a      	subs	r2, r7, #1
    b5b6:	4197      	sbcs	r7, r2
    b5b8:	40dc      	lsrs	r4, r3
    b5ba:	2600      	movs	r6, #0
    b5bc:	4301      	orrs	r1, r0
    b5be:	430f      	orrs	r7, r1
    b5c0:	077b      	lsls	r3, r7, #29
    b5c2:	d009      	beq.n	b5d8 <__aeabi_dsub+0x124>
    b5c4:	230f      	movs	r3, #15
    b5c6:	403b      	ands	r3, r7
    b5c8:	2b04      	cmp	r3, #4
    b5ca:	d005      	beq.n	b5d8 <__aeabi_dsub+0x124>
    b5cc:	1d3b      	adds	r3, r7, #4
    b5ce:	42bb      	cmp	r3, r7
    b5d0:	41bf      	sbcs	r7, r7
    b5d2:	427f      	negs	r7, r7
    b5d4:	19e4      	adds	r4, r4, r7
    b5d6:	001f      	movs	r7, r3
    b5d8:	0223      	lsls	r3, r4, #8
    b5da:	d525      	bpl.n	b628 <__aeabi_dsub+0x174>
    b5dc:	4b86      	ldr	r3, [pc, #536]	; (b7f8 <__aeabi_dsub+0x344>)
    b5de:	3601      	adds	r6, #1
    b5e0:	429e      	cmp	r6, r3
    b5e2:	d100      	bne.n	b5e6 <__aeabi_dsub+0x132>
    b5e4:	e0af      	b.n	b746 <__aeabi_dsub+0x292>
    b5e6:	4b85      	ldr	r3, [pc, #532]	; (b7fc <__aeabi_dsub+0x348>)
    b5e8:	2501      	movs	r5, #1
    b5ea:	401c      	ands	r4, r3
    b5ec:	4643      	mov	r3, r8
    b5ee:	0762      	lsls	r2, r4, #29
    b5f0:	08ff      	lsrs	r7, r7, #3
    b5f2:	0264      	lsls	r4, r4, #9
    b5f4:	0576      	lsls	r6, r6, #21
    b5f6:	4317      	orrs	r7, r2
    b5f8:	0b24      	lsrs	r4, r4, #12
    b5fa:	0d76      	lsrs	r6, r6, #21
    b5fc:	401d      	ands	r5, r3
    b5fe:	2100      	movs	r1, #0
    b600:	0324      	lsls	r4, r4, #12
    b602:	0b23      	lsrs	r3, r4, #12
    b604:	0d0c      	lsrs	r4, r1, #20
    b606:	4a7e      	ldr	r2, [pc, #504]	; (b800 <__aeabi_dsub+0x34c>)
    b608:	0524      	lsls	r4, r4, #20
    b60a:	431c      	orrs	r4, r3
    b60c:	4014      	ands	r4, r2
    b60e:	0533      	lsls	r3, r6, #20
    b610:	4323      	orrs	r3, r4
    b612:	005b      	lsls	r3, r3, #1
    b614:	07ed      	lsls	r5, r5, #31
    b616:	085b      	lsrs	r3, r3, #1
    b618:	432b      	orrs	r3, r5
    b61a:	0038      	movs	r0, r7
    b61c:	0019      	movs	r1, r3
    b61e:	bc1c      	pop	{r2, r3, r4}
    b620:	4690      	mov	r8, r2
    b622:	4699      	mov	r9, r3
    b624:	46a2      	mov	sl, r4
    b626:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b628:	2501      	movs	r5, #1
    b62a:	4643      	mov	r3, r8
    b62c:	0762      	lsls	r2, r4, #29
    b62e:	08ff      	lsrs	r7, r7, #3
    b630:	4317      	orrs	r7, r2
    b632:	08e4      	lsrs	r4, r4, #3
    b634:	401d      	ands	r5, r3
    b636:	4b70      	ldr	r3, [pc, #448]	; (b7f8 <__aeabi_dsub+0x344>)
    b638:	429e      	cmp	r6, r3
    b63a:	d036      	beq.n	b6aa <__aeabi_dsub+0x1f6>
    b63c:	0324      	lsls	r4, r4, #12
    b63e:	0576      	lsls	r6, r6, #21
    b640:	0b24      	lsrs	r4, r4, #12
    b642:	0d76      	lsrs	r6, r6, #21
    b644:	e7db      	b.n	b5fe <__aeabi_dsub+0x14a>
    b646:	4663      	mov	r3, ip
    b648:	1af3      	subs	r3, r6, r3
    b64a:	2b00      	cmp	r3, #0
    b64c:	dc00      	bgt.n	b650 <__aeabi_dsub+0x19c>
    b64e:	e094      	b.n	b77a <__aeabi_dsub+0x2c6>
    b650:	4660      	mov	r0, ip
    b652:	2800      	cmp	r0, #0
    b654:	d035      	beq.n	b6c2 <__aeabi_dsub+0x20e>
    b656:	4868      	ldr	r0, [pc, #416]	; (b7f8 <__aeabi_dsub+0x344>)
    b658:	4286      	cmp	r6, r0
    b65a:	d0b1      	beq.n	b5c0 <__aeabi_dsub+0x10c>
    b65c:	2780      	movs	r7, #128	; 0x80
    b65e:	043f      	lsls	r7, r7, #16
    b660:	4339      	orrs	r1, r7
    b662:	2b38      	cmp	r3, #56	; 0x38
    b664:	dc00      	bgt.n	b668 <__aeabi_dsub+0x1b4>
    b666:	e0fd      	b.n	b864 <__aeabi_dsub+0x3b0>
    b668:	430a      	orrs	r2, r1
    b66a:	0017      	movs	r7, r2
    b66c:	2100      	movs	r1, #0
    b66e:	1e7a      	subs	r2, r7, #1
    b670:	4197      	sbcs	r7, r2
    b672:	4457      	add	r7, sl
    b674:	4557      	cmp	r7, sl
    b676:	4180      	sbcs	r0, r0
    b678:	1909      	adds	r1, r1, r4
    b67a:	4244      	negs	r4, r0
    b67c:	190c      	adds	r4, r1, r4
    b67e:	0223      	lsls	r3, r4, #8
    b680:	d53a      	bpl.n	b6f8 <__aeabi_dsub+0x244>
    b682:	4b5d      	ldr	r3, [pc, #372]	; (b7f8 <__aeabi_dsub+0x344>)
    b684:	3601      	adds	r6, #1
    b686:	429e      	cmp	r6, r3
    b688:	d100      	bne.n	b68c <__aeabi_dsub+0x1d8>
    b68a:	e14b      	b.n	b924 <__aeabi_dsub+0x470>
    b68c:	2201      	movs	r2, #1
    b68e:	4b5b      	ldr	r3, [pc, #364]	; (b7fc <__aeabi_dsub+0x348>)
    b690:	401c      	ands	r4, r3
    b692:	087b      	lsrs	r3, r7, #1
    b694:	4017      	ands	r7, r2
    b696:	431f      	orrs	r7, r3
    b698:	07e2      	lsls	r2, r4, #31
    b69a:	4317      	orrs	r7, r2
    b69c:	0864      	lsrs	r4, r4, #1
    b69e:	e78f      	b.n	b5c0 <__aeabi_dsub+0x10c>
    b6a0:	0008      	movs	r0, r1
    b6a2:	4310      	orrs	r0, r2
    b6a4:	d000      	beq.n	b6a8 <__aeabi_dsub+0x1f4>
    b6a6:	e724      	b.n	b4f2 <__aeabi_dsub+0x3e>
    b6a8:	e721      	b.n	b4ee <__aeabi_dsub+0x3a>
    b6aa:	0023      	movs	r3, r4
    b6ac:	433b      	orrs	r3, r7
    b6ae:	d100      	bne.n	b6b2 <__aeabi_dsub+0x1fe>
    b6b0:	e1b9      	b.n	ba26 <__aeabi_dsub+0x572>
    b6b2:	2280      	movs	r2, #128	; 0x80
    b6b4:	0312      	lsls	r2, r2, #12
    b6b6:	4314      	orrs	r4, r2
    b6b8:	0324      	lsls	r4, r4, #12
    b6ba:	0b24      	lsrs	r4, r4, #12
    b6bc:	e79f      	b.n	b5fe <__aeabi_dsub+0x14a>
    b6be:	002e      	movs	r6, r5
    b6c0:	e77e      	b.n	b5c0 <__aeabi_dsub+0x10c>
    b6c2:	0008      	movs	r0, r1
    b6c4:	4310      	orrs	r0, r2
    b6c6:	d100      	bne.n	b6ca <__aeabi_dsub+0x216>
    b6c8:	e0ca      	b.n	b860 <__aeabi_dsub+0x3ac>
    b6ca:	1e58      	subs	r0, r3, #1
    b6cc:	4684      	mov	ip, r0
    b6ce:	2800      	cmp	r0, #0
    b6d0:	d000      	beq.n	b6d4 <__aeabi_dsub+0x220>
    b6d2:	e0e7      	b.n	b8a4 <__aeabi_dsub+0x3f0>
    b6d4:	4452      	add	r2, sl
    b6d6:	4552      	cmp	r2, sl
    b6d8:	4180      	sbcs	r0, r0
    b6da:	1864      	adds	r4, r4, r1
    b6dc:	4240      	negs	r0, r0
    b6de:	1824      	adds	r4, r4, r0
    b6e0:	0017      	movs	r7, r2
    b6e2:	2601      	movs	r6, #1
    b6e4:	0223      	lsls	r3, r4, #8
    b6e6:	d507      	bpl.n	b6f8 <__aeabi_dsub+0x244>
    b6e8:	2602      	movs	r6, #2
    b6ea:	e7cf      	b.n	b68c <__aeabi_dsub+0x1d8>
    b6ec:	4664      	mov	r4, ip
    b6ee:	432c      	orrs	r4, r5
    b6f0:	d100      	bne.n	b6f4 <__aeabi_dsub+0x240>
    b6f2:	e1b3      	b.n	ba5c <__aeabi_dsub+0x5a8>
    b6f4:	002c      	movs	r4, r5
    b6f6:	4667      	mov	r7, ip
    b6f8:	077b      	lsls	r3, r7, #29
    b6fa:	d000      	beq.n	b6fe <__aeabi_dsub+0x24a>
    b6fc:	e762      	b.n	b5c4 <__aeabi_dsub+0x110>
    b6fe:	0763      	lsls	r3, r4, #29
    b700:	08ff      	lsrs	r7, r7, #3
    b702:	431f      	orrs	r7, r3
    b704:	2501      	movs	r5, #1
    b706:	4643      	mov	r3, r8
    b708:	08e4      	lsrs	r4, r4, #3
    b70a:	401d      	ands	r5, r3
    b70c:	e793      	b.n	b636 <__aeabi_dsub+0x182>
    b70e:	2d00      	cmp	r5, #0
    b710:	d178      	bne.n	b804 <__aeabi_dsub+0x350>
    b712:	1c75      	adds	r5, r6, #1
    b714:	056d      	lsls	r5, r5, #21
    b716:	0d6d      	lsrs	r5, r5, #21
    b718:	2d01      	cmp	r5, #1
    b71a:	dc00      	bgt.n	b71e <__aeabi_dsub+0x26a>
    b71c:	e0f2      	b.n	b904 <__aeabi_dsub+0x450>
    b71e:	4650      	mov	r0, sl
    b720:	1a80      	subs	r0, r0, r2
    b722:	4582      	cmp	sl, r0
    b724:	41bf      	sbcs	r7, r7
    b726:	1a65      	subs	r5, r4, r1
    b728:	427f      	negs	r7, r7
    b72a:	1bed      	subs	r5, r5, r7
    b72c:	4684      	mov	ip, r0
    b72e:	0228      	lsls	r0, r5, #8
    b730:	d400      	bmi.n	b734 <__aeabi_dsub+0x280>
    b732:	e08c      	b.n	b84e <__aeabi_dsub+0x39a>
    b734:	4650      	mov	r0, sl
    b736:	1a17      	subs	r7, r2, r0
    b738:	42ba      	cmp	r2, r7
    b73a:	4192      	sbcs	r2, r2
    b73c:	1b0c      	subs	r4, r1, r4
    b73e:	4255      	negs	r5, r2
    b740:	1b65      	subs	r5, r4, r5
    b742:	4698      	mov	r8, r3
    b744:	e714      	b.n	b570 <__aeabi_dsub+0xbc>
    b746:	2501      	movs	r5, #1
    b748:	4643      	mov	r3, r8
    b74a:	2400      	movs	r4, #0
    b74c:	401d      	ands	r5, r3
    b74e:	2700      	movs	r7, #0
    b750:	e755      	b.n	b5fe <__aeabi_dsub+0x14a>
    b752:	4c2a      	ldr	r4, [pc, #168]	; (b7fc <__aeabi_dsub+0x348>)
    b754:	1af6      	subs	r6, r6, r3
    b756:	402c      	ands	r4, r5
    b758:	e732      	b.n	b5c0 <__aeabi_dsub+0x10c>
    b75a:	003d      	movs	r5, r7
    b75c:	3828      	subs	r0, #40	; 0x28
    b75e:	4085      	lsls	r5, r0
    b760:	2700      	movs	r7, #0
    b762:	e717      	b.n	b594 <__aeabi_dsub+0xe0>
    b764:	0038      	movs	r0, r7
    b766:	f000 fb65 	bl	be34 <__clzsi2>
    b76a:	3020      	adds	r0, #32
    b76c:	e706      	b.n	b57c <__aeabi_dsub+0xc8>
    b76e:	430a      	orrs	r2, r1
    b770:	0017      	movs	r7, r2
    b772:	2100      	movs	r1, #0
    b774:	1e7a      	subs	r2, r7, #1
    b776:	4197      	sbcs	r7, r2
    b778:	e6ee      	b.n	b558 <__aeabi_dsub+0xa4>
    b77a:	2b00      	cmp	r3, #0
    b77c:	d000      	beq.n	b780 <__aeabi_dsub+0x2cc>
    b77e:	e0e5      	b.n	b94c <__aeabi_dsub+0x498>
    b780:	1c73      	adds	r3, r6, #1
    b782:	469c      	mov	ip, r3
    b784:	055b      	lsls	r3, r3, #21
    b786:	0d5b      	lsrs	r3, r3, #21
    b788:	2b01      	cmp	r3, #1
    b78a:	dc00      	bgt.n	b78e <__aeabi_dsub+0x2da>
    b78c:	e09f      	b.n	b8ce <__aeabi_dsub+0x41a>
    b78e:	4b1a      	ldr	r3, [pc, #104]	; (b7f8 <__aeabi_dsub+0x344>)
    b790:	459c      	cmp	ip, r3
    b792:	d100      	bne.n	b796 <__aeabi_dsub+0x2e2>
    b794:	e0c5      	b.n	b922 <__aeabi_dsub+0x46e>
    b796:	4452      	add	r2, sl
    b798:	4552      	cmp	r2, sl
    b79a:	4180      	sbcs	r0, r0
    b79c:	1864      	adds	r4, r4, r1
    b79e:	4240      	negs	r0, r0
    b7a0:	1824      	adds	r4, r4, r0
    b7a2:	07e7      	lsls	r7, r4, #31
    b7a4:	0852      	lsrs	r2, r2, #1
    b7a6:	4317      	orrs	r7, r2
    b7a8:	0864      	lsrs	r4, r4, #1
    b7aa:	4666      	mov	r6, ip
    b7ac:	e708      	b.n	b5c0 <__aeabi_dsub+0x10c>
    b7ae:	4812      	ldr	r0, [pc, #72]	; (b7f8 <__aeabi_dsub+0x344>)
    b7b0:	4285      	cmp	r5, r0
    b7b2:	d100      	bne.n	b7b6 <__aeabi_dsub+0x302>
    b7b4:	e085      	b.n	b8c2 <__aeabi_dsub+0x40e>
    b7b6:	001d      	movs	r5, r3
    b7b8:	e6bc      	b.n	b534 <__aeabi_dsub+0x80>
    b7ba:	0029      	movs	r1, r5
    b7bc:	3e1f      	subs	r6, #31
    b7be:	40f1      	lsrs	r1, r6
    b7c0:	2b20      	cmp	r3, #32
    b7c2:	d100      	bne.n	b7c6 <__aeabi_dsub+0x312>
    b7c4:	e07f      	b.n	b8c6 <__aeabi_dsub+0x412>
    b7c6:	2240      	movs	r2, #64	; 0x40
    b7c8:	1ad3      	subs	r3, r2, r3
    b7ca:	409d      	lsls	r5, r3
    b7cc:	432f      	orrs	r7, r5
    b7ce:	1e7d      	subs	r5, r7, #1
    b7d0:	41af      	sbcs	r7, r5
    b7d2:	2400      	movs	r4, #0
    b7d4:	430f      	orrs	r7, r1
    b7d6:	2600      	movs	r6, #0
    b7d8:	e78e      	b.n	b6f8 <__aeabi_dsub+0x244>
    b7da:	002b      	movs	r3, r5
    b7dc:	000f      	movs	r7, r1
    b7de:	3b20      	subs	r3, #32
    b7e0:	40df      	lsrs	r7, r3
    b7e2:	2d20      	cmp	r5, #32
    b7e4:	d071      	beq.n	b8ca <__aeabi_dsub+0x416>
    b7e6:	2340      	movs	r3, #64	; 0x40
    b7e8:	1b5d      	subs	r5, r3, r5
    b7ea:	40a9      	lsls	r1, r5
    b7ec:	430a      	orrs	r2, r1
    b7ee:	1e51      	subs	r1, r2, #1
    b7f0:	418a      	sbcs	r2, r1
    b7f2:	2100      	movs	r1, #0
    b7f4:	4317      	orrs	r7, r2
    b7f6:	e6af      	b.n	b558 <__aeabi_dsub+0xa4>
    b7f8:	000007ff 	.word	0x000007ff
    b7fc:	ff7fffff 	.word	0xff7fffff
    b800:	800fffff 	.word	0x800fffff
    b804:	2e00      	cmp	r6, #0
    b806:	d03e      	beq.n	b886 <__aeabi_dsub+0x3d2>
    b808:	4eb3      	ldr	r6, [pc, #716]	; (bad8 <__aeabi_dsub+0x624>)
    b80a:	45b4      	cmp	ip, r6
    b80c:	d045      	beq.n	b89a <__aeabi_dsub+0x3e6>
    b80e:	2680      	movs	r6, #128	; 0x80
    b810:	0436      	lsls	r6, r6, #16
    b812:	426d      	negs	r5, r5
    b814:	4334      	orrs	r4, r6
    b816:	2d38      	cmp	r5, #56	; 0x38
    b818:	dd00      	ble.n	b81c <__aeabi_dsub+0x368>
    b81a:	e0a8      	b.n	b96e <__aeabi_dsub+0x4ba>
    b81c:	2d1f      	cmp	r5, #31
    b81e:	dd00      	ble.n	b822 <__aeabi_dsub+0x36e>
    b820:	e11f      	b.n	ba62 <__aeabi_dsub+0x5ae>
    b822:	2620      	movs	r6, #32
    b824:	0027      	movs	r7, r4
    b826:	4650      	mov	r0, sl
    b828:	1b76      	subs	r6, r6, r5
    b82a:	40b7      	lsls	r7, r6
    b82c:	40e8      	lsrs	r0, r5
    b82e:	4307      	orrs	r7, r0
    b830:	4650      	mov	r0, sl
    b832:	40b0      	lsls	r0, r6
    b834:	1e46      	subs	r6, r0, #1
    b836:	41b0      	sbcs	r0, r6
    b838:	40ec      	lsrs	r4, r5
    b83a:	4338      	orrs	r0, r7
    b83c:	1a17      	subs	r7, r2, r0
    b83e:	42ba      	cmp	r2, r7
    b840:	4192      	sbcs	r2, r2
    b842:	1b0c      	subs	r4, r1, r4
    b844:	4252      	negs	r2, r2
    b846:	1aa4      	subs	r4, r4, r2
    b848:	4666      	mov	r6, ip
    b84a:	4698      	mov	r8, r3
    b84c:	e68b      	b.n	b566 <__aeabi_dsub+0xb2>
    b84e:	4664      	mov	r4, ip
    b850:	4667      	mov	r7, ip
    b852:	432c      	orrs	r4, r5
    b854:	d000      	beq.n	b858 <__aeabi_dsub+0x3a4>
    b856:	e68b      	b.n	b570 <__aeabi_dsub+0xbc>
    b858:	2500      	movs	r5, #0
    b85a:	2600      	movs	r6, #0
    b85c:	2700      	movs	r7, #0
    b85e:	e6ea      	b.n	b636 <__aeabi_dsub+0x182>
    b860:	001e      	movs	r6, r3
    b862:	e6ad      	b.n	b5c0 <__aeabi_dsub+0x10c>
    b864:	2b1f      	cmp	r3, #31
    b866:	dc60      	bgt.n	b92a <__aeabi_dsub+0x476>
    b868:	2720      	movs	r7, #32
    b86a:	1af8      	subs	r0, r7, r3
    b86c:	000f      	movs	r7, r1
    b86e:	4684      	mov	ip, r0
    b870:	4087      	lsls	r7, r0
    b872:	0010      	movs	r0, r2
    b874:	40d8      	lsrs	r0, r3
    b876:	4307      	orrs	r7, r0
    b878:	4660      	mov	r0, ip
    b87a:	4082      	lsls	r2, r0
    b87c:	1e50      	subs	r0, r2, #1
    b87e:	4182      	sbcs	r2, r0
    b880:	40d9      	lsrs	r1, r3
    b882:	4317      	orrs	r7, r2
    b884:	e6f5      	b.n	b672 <__aeabi_dsub+0x1be>
    b886:	0026      	movs	r6, r4
    b888:	4650      	mov	r0, sl
    b88a:	4306      	orrs	r6, r0
    b88c:	d005      	beq.n	b89a <__aeabi_dsub+0x3e6>
    b88e:	43ed      	mvns	r5, r5
    b890:	2d00      	cmp	r5, #0
    b892:	d0d3      	beq.n	b83c <__aeabi_dsub+0x388>
    b894:	4e90      	ldr	r6, [pc, #576]	; (bad8 <__aeabi_dsub+0x624>)
    b896:	45b4      	cmp	ip, r6
    b898:	d1bd      	bne.n	b816 <__aeabi_dsub+0x362>
    b89a:	000c      	movs	r4, r1
    b89c:	0017      	movs	r7, r2
    b89e:	4666      	mov	r6, ip
    b8a0:	4698      	mov	r8, r3
    b8a2:	e68d      	b.n	b5c0 <__aeabi_dsub+0x10c>
    b8a4:	488c      	ldr	r0, [pc, #560]	; (bad8 <__aeabi_dsub+0x624>)
    b8a6:	4283      	cmp	r3, r0
    b8a8:	d00b      	beq.n	b8c2 <__aeabi_dsub+0x40e>
    b8aa:	4663      	mov	r3, ip
    b8ac:	e6d9      	b.n	b662 <__aeabi_dsub+0x1ae>
    b8ae:	2d00      	cmp	r5, #0
    b8b0:	d000      	beq.n	b8b4 <__aeabi_dsub+0x400>
    b8b2:	e096      	b.n	b9e2 <__aeabi_dsub+0x52e>
    b8b4:	0008      	movs	r0, r1
    b8b6:	4310      	orrs	r0, r2
    b8b8:	d100      	bne.n	b8bc <__aeabi_dsub+0x408>
    b8ba:	e0e2      	b.n	ba82 <__aeabi_dsub+0x5ce>
    b8bc:	000c      	movs	r4, r1
    b8be:	0017      	movs	r7, r2
    b8c0:	4698      	mov	r8, r3
    b8c2:	4e85      	ldr	r6, [pc, #532]	; (bad8 <__aeabi_dsub+0x624>)
    b8c4:	e67c      	b.n	b5c0 <__aeabi_dsub+0x10c>
    b8c6:	2500      	movs	r5, #0
    b8c8:	e780      	b.n	b7cc <__aeabi_dsub+0x318>
    b8ca:	2100      	movs	r1, #0
    b8cc:	e78e      	b.n	b7ec <__aeabi_dsub+0x338>
    b8ce:	0023      	movs	r3, r4
    b8d0:	4650      	mov	r0, sl
    b8d2:	4303      	orrs	r3, r0
    b8d4:	2e00      	cmp	r6, #0
    b8d6:	d000      	beq.n	b8da <__aeabi_dsub+0x426>
    b8d8:	e0a8      	b.n	ba2c <__aeabi_dsub+0x578>
    b8da:	2b00      	cmp	r3, #0
    b8dc:	d100      	bne.n	b8e0 <__aeabi_dsub+0x42c>
    b8de:	e0de      	b.n	ba9e <__aeabi_dsub+0x5ea>
    b8e0:	000b      	movs	r3, r1
    b8e2:	4313      	orrs	r3, r2
    b8e4:	d100      	bne.n	b8e8 <__aeabi_dsub+0x434>
    b8e6:	e66b      	b.n	b5c0 <__aeabi_dsub+0x10c>
    b8e8:	4452      	add	r2, sl
    b8ea:	4552      	cmp	r2, sl
    b8ec:	4180      	sbcs	r0, r0
    b8ee:	1864      	adds	r4, r4, r1
    b8f0:	4240      	negs	r0, r0
    b8f2:	1824      	adds	r4, r4, r0
    b8f4:	0017      	movs	r7, r2
    b8f6:	0223      	lsls	r3, r4, #8
    b8f8:	d400      	bmi.n	b8fc <__aeabi_dsub+0x448>
    b8fa:	e6fd      	b.n	b6f8 <__aeabi_dsub+0x244>
    b8fc:	4b77      	ldr	r3, [pc, #476]	; (badc <__aeabi_dsub+0x628>)
    b8fe:	4666      	mov	r6, ip
    b900:	401c      	ands	r4, r3
    b902:	e65d      	b.n	b5c0 <__aeabi_dsub+0x10c>
    b904:	0025      	movs	r5, r4
    b906:	4650      	mov	r0, sl
    b908:	4305      	orrs	r5, r0
    b90a:	2e00      	cmp	r6, #0
    b90c:	d1cf      	bne.n	b8ae <__aeabi_dsub+0x3fa>
    b90e:	2d00      	cmp	r5, #0
    b910:	d14f      	bne.n	b9b2 <__aeabi_dsub+0x4fe>
    b912:	000c      	movs	r4, r1
    b914:	4314      	orrs	r4, r2
    b916:	d100      	bne.n	b91a <__aeabi_dsub+0x466>
    b918:	e0a0      	b.n	ba5c <__aeabi_dsub+0x5a8>
    b91a:	000c      	movs	r4, r1
    b91c:	0017      	movs	r7, r2
    b91e:	4698      	mov	r8, r3
    b920:	e64e      	b.n	b5c0 <__aeabi_dsub+0x10c>
    b922:	4666      	mov	r6, ip
    b924:	2400      	movs	r4, #0
    b926:	2700      	movs	r7, #0
    b928:	e685      	b.n	b636 <__aeabi_dsub+0x182>
    b92a:	001f      	movs	r7, r3
    b92c:	0008      	movs	r0, r1
    b92e:	3f20      	subs	r7, #32
    b930:	40f8      	lsrs	r0, r7
    b932:	0007      	movs	r7, r0
    b934:	2b20      	cmp	r3, #32
    b936:	d100      	bne.n	b93a <__aeabi_dsub+0x486>
    b938:	e08e      	b.n	ba58 <__aeabi_dsub+0x5a4>
    b93a:	2040      	movs	r0, #64	; 0x40
    b93c:	1ac3      	subs	r3, r0, r3
    b93e:	4099      	lsls	r1, r3
    b940:	430a      	orrs	r2, r1
    b942:	1e51      	subs	r1, r2, #1
    b944:	418a      	sbcs	r2, r1
    b946:	2100      	movs	r1, #0
    b948:	4317      	orrs	r7, r2
    b94a:	e692      	b.n	b672 <__aeabi_dsub+0x1be>
    b94c:	2e00      	cmp	r6, #0
    b94e:	d114      	bne.n	b97a <__aeabi_dsub+0x4c6>
    b950:	0026      	movs	r6, r4
    b952:	4650      	mov	r0, sl
    b954:	4306      	orrs	r6, r0
    b956:	d062      	beq.n	ba1e <__aeabi_dsub+0x56a>
    b958:	43db      	mvns	r3, r3
    b95a:	2b00      	cmp	r3, #0
    b95c:	d15c      	bne.n	ba18 <__aeabi_dsub+0x564>
    b95e:	1887      	adds	r7, r0, r2
    b960:	4297      	cmp	r7, r2
    b962:	4192      	sbcs	r2, r2
    b964:	1864      	adds	r4, r4, r1
    b966:	4252      	negs	r2, r2
    b968:	18a4      	adds	r4, r4, r2
    b96a:	4666      	mov	r6, ip
    b96c:	e687      	b.n	b67e <__aeabi_dsub+0x1ca>
    b96e:	4650      	mov	r0, sl
    b970:	4320      	orrs	r0, r4
    b972:	1e44      	subs	r4, r0, #1
    b974:	41a0      	sbcs	r0, r4
    b976:	2400      	movs	r4, #0
    b978:	e760      	b.n	b83c <__aeabi_dsub+0x388>
    b97a:	4e57      	ldr	r6, [pc, #348]	; (bad8 <__aeabi_dsub+0x624>)
    b97c:	45b4      	cmp	ip, r6
    b97e:	d04e      	beq.n	ba1e <__aeabi_dsub+0x56a>
    b980:	2680      	movs	r6, #128	; 0x80
    b982:	0436      	lsls	r6, r6, #16
    b984:	425b      	negs	r3, r3
    b986:	4334      	orrs	r4, r6
    b988:	2b38      	cmp	r3, #56	; 0x38
    b98a:	dd00      	ble.n	b98e <__aeabi_dsub+0x4da>
    b98c:	e07f      	b.n	ba8e <__aeabi_dsub+0x5da>
    b98e:	2b1f      	cmp	r3, #31
    b990:	dd00      	ble.n	b994 <__aeabi_dsub+0x4e0>
    b992:	e08b      	b.n	baac <__aeabi_dsub+0x5f8>
    b994:	2620      	movs	r6, #32
    b996:	0027      	movs	r7, r4
    b998:	4650      	mov	r0, sl
    b99a:	1af6      	subs	r6, r6, r3
    b99c:	40b7      	lsls	r7, r6
    b99e:	40d8      	lsrs	r0, r3
    b9a0:	4307      	orrs	r7, r0
    b9a2:	4650      	mov	r0, sl
    b9a4:	40b0      	lsls	r0, r6
    b9a6:	1e46      	subs	r6, r0, #1
    b9a8:	41b0      	sbcs	r0, r6
    b9aa:	4307      	orrs	r7, r0
    b9ac:	40dc      	lsrs	r4, r3
    b9ae:	18bf      	adds	r7, r7, r2
    b9b0:	e7d6      	b.n	b960 <__aeabi_dsub+0x4ac>
    b9b2:	000d      	movs	r5, r1
    b9b4:	4315      	orrs	r5, r2
    b9b6:	d100      	bne.n	b9ba <__aeabi_dsub+0x506>
    b9b8:	e602      	b.n	b5c0 <__aeabi_dsub+0x10c>
    b9ba:	4650      	mov	r0, sl
    b9bc:	1a80      	subs	r0, r0, r2
    b9be:	4582      	cmp	sl, r0
    b9c0:	41bf      	sbcs	r7, r7
    b9c2:	1a65      	subs	r5, r4, r1
    b9c4:	427f      	negs	r7, r7
    b9c6:	1bed      	subs	r5, r5, r7
    b9c8:	4684      	mov	ip, r0
    b9ca:	0228      	lsls	r0, r5, #8
    b9cc:	d400      	bmi.n	b9d0 <__aeabi_dsub+0x51c>
    b9ce:	e68d      	b.n	b6ec <__aeabi_dsub+0x238>
    b9d0:	4650      	mov	r0, sl
    b9d2:	1a17      	subs	r7, r2, r0
    b9d4:	42ba      	cmp	r2, r7
    b9d6:	4192      	sbcs	r2, r2
    b9d8:	1b0c      	subs	r4, r1, r4
    b9da:	4252      	negs	r2, r2
    b9dc:	1aa4      	subs	r4, r4, r2
    b9de:	4698      	mov	r8, r3
    b9e0:	e5ee      	b.n	b5c0 <__aeabi_dsub+0x10c>
    b9e2:	000d      	movs	r5, r1
    b9e4:	4315      	orrs	r5, r2
    b9e6:	d100      	bne.n	b9ea <__aeabi_dsub+0x536>
    b9e8:	e76b      	b.n	b8c2 <__aeabi_dsub+0x40e>
    b9ea:	4650      	mov	r0, sl
    b9ec:	0767      	lsls	r7, r4, #29
    b9ee:	08c0      	lsrs	r0, r0, #3
    b9f0:	4307      	orrs	r7, r0
    b9f2:	2080      	movs	r0, #128	; 0x80
    b9f4:	08e4      	lsrs	r4, r4, #3
    b9f6:	0300      	lsls	r0, r0, #12
    b9f8:	4204      	tst	r4, r0
    b9fa:	d007      	beq.n	ba0c <__aeabi_dsub+0x558>
    b9fc:	08cd      	lsrs	r5, r1, #3
    b9fe:	4205      	tst	r5, r0
    ba00:	d104      	bne.n	ba0c <__aeabi_dsub+0x558>
    ba02:	002c      	movs	r4, r5
    ba04:	4698      	mov	r8, r3
    ba06:	08d7      	lsrs	r7, r2, #3
    ba08:	0749      	lsls	r1, r1, #29
    ba0a:	430f      	orrs	r7, r1
    ba0c:	0f7b      	lsrs	r3, r7, #29
    ba0e:	00e4      	lsls	r4, r4, #3
    ba10:	431c      	orrs	r4, r3
    ba12:	00ff      	lsls	r7, r7, #3
    ba14:	4e30      	ldr	r6, [pc, #192]	; (bad8 <__aeabi_dsub+0x624>)
    ba16:	e5d3      	b.n	b5c0 <__aeabi_dsub+0x10c>
    ba18:	4e2f      	ldr	r6, [pc, #188]	; (bad8 <__aeabi_dsub+0x624>)
    ba1a:	45b4      	cmp	ip, r6
    ba1c:	d1b4      	bne.n	b988 <__aeabi_dsub+0x4d4>
    ba1e:	000c      	movs	r4, r1
    ba20:	0017      	movs	r7, r2
    ba22:	4666      	mov	r6, ip
    ba24:	e5cc      	b.n	b5c0 <__aeabi_dsub+0x10c>
    ba26:	2700      	movs	r7, #0
    ba28:	2400      	movs	r4, #0
    ba2a:	e5e8      	b.n	b5fe <__aeabi_dsub+0x14a>
    ba2c:	2b00      	cmp	r3, #0
    ba2e:	d039      	beq.n	baa4 <__aeabi_dsub+0x5f0>
    ba30:	000b      	movs	r3, r1
    ba32:	4313      	orrs	r3, r2
    ba34:	d100      	bne.n	ba38 <__aeabi_dsub+0x584>
    ba36:	e744      	b.n	b8c2 <__aeabi_dsub+0x40e>
    ba38:	08c0      	lsrs	r0, r0, #3
    ba3a:	0767      	lsls	r7, r4, #29
    ba3c:	4307      	orrs	r7, r0
    ba3e:	2080      	movs	r0, #128	; 0x80
    ba40:	08e4      	lsrs	r4, r4, #3
    ba42:	0300      	lsls	r0, r0, #12
    ba44:	4204      	tst	r4, r0
    ba46:	d0e1      	beq.n	ba0c <__aeabi_dsub+0x558>
    ba48:	08cb      	lsrs	r3, r1, #3
    ba4a:	4203      	tst	r3, r0
    ba4c:	d1de      	bne.n	ba0c <__aeabi_dsub+0x558>
    ba4e:	08d7      	lsrs	r7, r2, #3
    ba50:	0749      	lsls	r1, r1, #29
    ba52:	430f      	orrs	r7, r1
    ba54:	001c      	movs	r4, r3
    ba56:	e7d9      	b.n	ba0c <__aeabi_dsub+0x558>
    ba58:	2100      	movs	r1, #0
    ba5a:	e771      	b.n	b940 <__aeabi_dsub+0x48c>
    ba5c:	2500      	movs	r5, #0
    ba5e:	2700      	movs	r7, #0
    ba60:	e5e9      	b.n	b636 <__aeabi_dsub+0x182>
    ba62:	002e      	movs	r6, r5
    ba64:	0027      	movs	r7, r4
    ba66:	3e20      	subs	r6, #32
    ba68:	40f7      	lsrs	r7, r6
    ba6a:	2d20      	cmp	r5, #32
    ba6c:	d02f      	beq.n	bace <__aeabi_dsub+0x61a>
    ba6e:	2640      	movs	r6, #64	; 0x40
    ba70:	1b75      	subs	r5, r6, r5
    ba72:	40ac      	lsls	r4, r5
    ba74:	4650      	mov	r0, sl
    ba76:	4320      	orrs	r0, r4
    ba78:	1e44      	subs	r4, r0, #1
    ba7a:	41a0      	sbcs	r0, r4
    ba7c:	2400      	movs	r4, #0
    ba7e:	4338      	orrs	r0, r7
    ba80:	e6dc      	b.n	b83c <__aeabi_dsub+0x388>
    ba82:	2480      	movs	r4, #128	; 0x80
    ba84:	2500      	movs	r5, #0
    ba86:	0324      	lsls	r4, r4, #12
    ba88:	4e13      	ldr	r6, [pc, #76]	; (bad8 <__aeabi_dsub+0x624>)
    ba8a:	2700      	movs	r7, #0
    ba8c:	e5d3      	b.n	b636 <__aeabi_dsub+0x182>
    ba8e:	4650      	mov	r0, sl
    ba90:	4320      	orrs	r0, r4
    ba92:	0007      	movs	r7, r0
    ba94:	1e78      	subs	r0, r7, #1
    ba96:	4187      	sbcs	r7, r0
    ba98:	2400      	movs	r4, #0
    ba9a:	18bf      	adds	r7, r7, r2
    ba9c:	e760      	b.n	b960 <__aeabi_dsub+0x4ac>
    ba9e:	000c      	movs	r4, r1
    baa0:	0017      	movs	r7, r2
    baa2:	e58d      	b.n	b5c0 <__aeabi_dsub+0x10c>
    baa4:	000c      	movs	r4, r1
    baa6:	0017      	movs	r7, r2
    baa8:	4e0b      	ldr	r6, [pc, #44]	; (bad8 <__aeabi_dsub+0x624>)
    baaa:	e589      	b.n	b5c0 <__aeabi_dsub+0x10c>
    baac:	001e      	movs	r6, r3
    baae:	0027      	movs	r7, r4
    bab0:	3e20      	subs	r6, #32
    bab2:	40f7      	lsrs	r7, r6
    bab4:	2b20      	cmp	r3, #32
    bab6:	d00c      	beq.n	bad2 <__aeabi_dsub+0x61e>
    bab8:	2640      	movs	r6, #64	; 0x40
    baba:	1af3      	subs	r3, r6, r3
    babc:	409c      	lsls	r4, r3
    babe:	4650      	mov	r0, sl
    bac0:	4320      	orrs	r0, r4
    bac2:	1e44      	subs	r4, r0, #1
    bac4:	41a0      	sbcs	r0, r4
    bac6:	4307      	orrs	r7, r0
    bac8:	2400      	movs	r4, #0
    baca:	18bf      	adds	r7, r7, r2
    bacc:	e748      	b.n	b960 <__aeabi_dsub+0x4ac>
    bace:	2400      	movs	r4, #0
    bad0:	e7d0      	b.n	ba74 <__aeabi_dsub+0x5c0>
    bad2:	2400      	movs	r4, #0
    bad4:	e7f3      	b.n	babe <__aeabi_dsub+0x60a>
    bad6:	46c0      	nop			; (mov r8, r8)
    bad8:	000007ff 	.word	0x000007ff
    badc:	ff7fffff 	.word	0xff7fffff

0000bae0 <__aeabi_dcmpun>:
    bae0:	b570      	push	{r4, r5, r6, lr}
    bae2:	4e0e      	ldr	r6, [pc, #56]	; (bb1c <__aeabi_dcmpun+0x3c>)
    bae4:	030d      	lsls	r5, r1, #12
    bae6:	031c      	lsls	r4, r3, #12
    bae8:	0049      	lsls	r1, r1, #1
    baea:	005b      	lsls	r3, r3, #1
    baec:	0b2d      	lsrs	r5, r5, #12
    baee:	0d49      	lsrs	r1, r1, #21
    baf0:	0b24      	lsrs	r4, r4, #12
    baf2:	0d5b      	lsrs	r3, r3, #21
    baf4:	42b1      	cmp	r1, r6
    baf6:	d004      	beq.n	bb02 <__aeabi_dcmpun+0x22>
    baf8:	4908      	ldr	r1, [pc, #32]	; (bb1c <__aeabi_dcmpun+0x3c>)
    bafa:	2000      	movs	r0, #0
    bafc:	428b      	cmp	r3, r1
    bafe:	d008      	beq.n	bb12 <__aeabi_dcmpun+0x32>
    bb00:	bd70      	pop	{r4, r5, r6, pc}
    bb02:	4305      	orrs	r5, r0
    bb04:	2001      	movs	r0, #1
    bb06:	2d00      	cmp	r5, #0
    bb08:	d1fa      	bne.n	bb00 <__aeabi_dcmpun+0x20>
    bb0a:	4904      	ldr	r1, [pc, #16]	; (bb1c <__aeabi_dcmpun+0x3c>)
    bb0c:	2000      	movs	r0, #0
    bb0e:	428b      	cmp	r3, r1
    bb10:	d1f6      	bne.n	bb00 <__aeabi_dcmpun+0x20>
    bb12:	4314      	orrs	r4, r2
    bb14:	0020      	movs	r0, r4
    bb16:	1e44      	subs	r4, r0, #1
    bb18:	41a0      	sbcs	r0, r4
    bb1a:	e7f1      	b.n	bb00 <__aeabi_dcmpun+0x20>
    bb1c:	000007ff 	.word	0x000007ff

0000bb20 <__aeabi_d2iz>:
    bb20:	b530      	push	{r4, r5, lr}
    bb22:	4d13      	ldr	r5, [pc, #76]	; (bb70 <__aeabi_d2iz+0x50>)
    bb24:	030a      	lsls	r2, r1, #12
    bb26:	004b      	lsls	r3, r1, #1
    bb28:	0b12      	lsrs	r2, r2, #12
    bb2a:	0d5b      	lsrs	r3, r3, #21
    bb2c:	0fc9      	lsrs	r1, r1, #31
    bb2e:	2400      	movs	r4, #0
    bb30:	42ab      	cmp	r3, r5
    bb32:	dd10      	ble.n	bb56 <__aeabi_d2iz+0x36>
    bb34:	4c0f      	ldr	r4, [pc, #60]	; (bb74 <__aeabi_d2iz+0x54>)
    bb36:	42a3      	cmp	r3, r4
    bb38:	dc0f      	bgt.n	bb5a <__aeabi_d2iz+0x3a>
    bb3a:	2480      	movs	r4, #128	; 0x80
    bb3c:	4d0e      	ldr	r5, [pc, #56]	; (bb78 <__aeabi_d2iz+0x58>)
    bb3e:	0364      	lsls	r4, r4, #13
    bb40:	4322      	orrs	r2, r4
    bb42:	1aed      	subs	r5, r5, r3
    bb44:	2d1f      	cmp	r5, #31
    bb46:	dd0b      	ble.n	bb60 <__aeabi_d2iz+0x40>
    bb48:	480c      	ldr	r0, [pc, #48]	; (bb7c <__aeabi_d2iz+0x5c>)
    bb4a:	1ac3      	subs	r3, r0, r3
    bb4c:	40da      	lsrs	r2, r3
    bb4e:	4254      	negs	r4, r2
    bb50:	2900      	cmp	r1, #0
    bb52:	d100      	bne.n	bb56 <__aeabi_d2iz+0x36>
    bb54:	0014      	movs	r4, r2
    bb56:	0020      	movs	r0, r4
    bb58:	bd30      	pop	{r4, r5, pc}
    bb5a:	4b09      	ldr	r3, [pc, #36]	; (bb80 <__aeabi_d2iz+0x60>)
    bb5c:	18cc      	adds	r4, r1, r3
    bb5e:	e7fa      	b.n	bb56 <__aeabi_d2iz+0x36>
    bb60:	4c08      	ldr	r4, [pc, #32]	; (bb84 <__aeabi_d2iz+0x64>)
    bb62:	40e8      	lsrs	r0, r5
    bb64:	46a4      	mov	ip, r4
    bb66:	4463      	add	r3, ip
    bb68:	409a      	lsls	r2, r3
    bb6a:	4302      	orrs	r2, r0
    bb6c:	e7ef      	b.n	bb4e <__aeabi_d2iz+0x2e>
    bb6e:	46c0      	nop			; (mov r8, r8)
    bb70:	000003fe 	.word	0x000003fe
    bb74:	0000041d 	.word	0x0000041d
    bb78:	00000433 	.word	0x00000433
    bb7c:	00000413 	.word	0x00000413
    bb80:	7fffffff 	.word	0x7fffffff
    bb84:	fffffbed 	.word	0xfffffbed

0000bb88 <__aeabi_i2d>:
    bb88:	b570      	push	{r4, r5, r6, lr}
    bb8a:	2800      	cmp	r0, #0
    bb8c:	d030      	beq.n	bbf0 <__aeabi_i2d+0x68>
    bb8e:	17c3      	asrs	r3, r0, #31
    bb90:	18c4      	adds	r4, r0, r3
    bb92:	405c      	eors	r4, r3
    bb94:	0fc5      	lsrs	r5, r0, #31
    bb96:	0020      	movs	r0, r4
    bb98:	f000 f94c 	bl	be34 <__clzsi2>
    bb9c:	4b17      	ldr	r3, [pc, #92]	; (bbfc <__aeabi_i2d+0x74>)
    bb9e:	4a18      	ldr	r2, [pc, #96]	; (bc00 <__aeabi_i2d+0x78>)
    bba0:	1a1b      	subs	r3, r3, r0
    bba2:	1ad2      	subs	r2, r2, r3
    bba4:	2a1f      	cmp	r2, #31
    bba6:	dd18      	ble.n	bbda <__aeabi_i2d+0x52>
    bba8:	4a16      	ldr	r2, [pc, #88]	; (bc04 <__aeabi_i2d+0x7c>)
    bbaa:	1ad2      	subs	r2, r2, r3
    bbac:	4094      	lsls	r4, r2
    bbae:	2200      	movs	r2, #0
    bbb0:	0324      	lsls	r4, r4, #12
    bbb2:	055b      	lsls	r3, r3, #21
    bbb4:	0b24      	lsrs	r4, r4, #12
    bbb6:	0d5b      	lsrs	r3, r3, #21
    bbb8:	2100      	movs	r1, #0
    bbba:	0010      	movs	r0, r2
    bbbc:	0324      	lsls	r4, r4, #12
    bbbe:	0d0a      	lsrs	r2, r1, #20
    bbc0:	0b24      	lsrs	r4, r4, #12
    bbc2:	0512      	lsls	r2, r2, #20
    bbc4:	4322      	orrs	r2, r4
    bbc6:	4c10      	ldr	r4, [pc, #64]	; (bc08 <__aeabi_i2d+0x80>)
    bbc8:	051b      	lsls	r3, r3, #20
    bbca:	4022      	ands	r2, r4
    bbcc:	4313      	orrs	r3, r2
    bbce:	005b      	lsls	r3, r3, #1
    bbd0:	07ed      	lsls	r5, r5, #31
    bbd2:	085b      	lsrs	r3, r3, #1
    bbd4:	432b      	orrs	r3, r5
    bbd6:	0019      	movs	r1, r3
    bbd8:	bd70      	pop	{r4, r5, r6, pc}
    bbda:	0021      	movs	r1, r4
    bbdc:	4091      	lsls	r1, r2
    bbde:	000a      	movs	r2, r1
    bbe0:	210b      	movs	r1, #11
    bbe2:	1a08      	subs	r0, r1, r0
    bbe4:	40c4      	lsrs	r4, r0
    bbe6:	055b      	lsls	r3, r3, #21
    bbe8:	0324      	lsls	r4, r4, #12
    bbea:	0b24      	lsrs	r4, r4, #12
    bbec:	0d5b      	lsrs	r3, r3, #21
    bbee:	e7e3      	b.n	bbb8 <__aeabi_i2d+0x30>
    bbf0:	2500      	movs	r5, #0
    bbf2:	2300      	movs	r3, #0
    bbf4:	2400      	movs	r4, #0
    bbf6:	2200      	movs	r2, #0
    bbf8:	e7de      	b.n	bbb8 <__aeabi_i2d+0x30>
    bbfa:	46c0      	nop			; (mov r8, r8)
    bbfc:	0000041e 	.word	0x0000041e
    bc00:	00000433 	.word	0x00000433
    bc04:	00000413 	.word	0x00000413
    bc08:	800fffff 	.word	0x800fffff

0000bc0c <__aeabi_ui2d>:
    bc0c:	b510      	push	{r4, lr}
    bc0e:	1e04      	subs	r4, r0, #0
    bc10:	d028      	beq.n	bc64 <__aeabi_ui2d+0x58>
    bc12:	f000 f90f 	bl	be34 <__clzsi2>
    bc16:	4b15      	ldr	r3, [pc, #84]	; (bc6c <__aeabi_ui2d+0x60>)
    bc18:	4a15      	ldr	r2, [pc, #84]	; (bc70 <__aeabi_ui2d+0x64>)
    bc1a:	1a1b      	subs	r3, r3, r0
    bc1c:	1ad2      	subs	r2, r2, r3
    bc1e:	2a1f      	cmp	r2, #31
    bc20:	dd15      	ble.n	bc4e <__aeabi_ui2d+0x42>
    bc22:	4a14      	ldr	r2, [pc, #80]	; (bc74 <__aeabi_ui2d+0x68>)
    bc24:	1ad2      	subs	r2, r2, r3
    bc26:	4094      	lsls	r4, r2
    bc28:	2200      	movs	r2, #0
    bc2a:	0324      	lsls	r4, r4, #12
    bc2c:	055b      	lsls	r3, r3, #21
    bc2e:	0b24      	lsrs	r4, r4, #12
    bc30:	0d5b      	lsrs	r3, r3, #21
    bc32:	2100      	movs	r1, #0
    bc34:	0010      	movs	r0, r2
    bc36:	0324      	lsls	r4, r4, #12
    bc38:	0d0a      	lsrs	r2, r1, #20
    bc3a:	0b24      	lsrs	r4, r4, #12
    bc3c:	0512      	lsls	r2, r2, #20
    bc3e:	4322      	orrs	r2, r4
    bc40:	4c0d      	ldr	r4, [pc, #52]	; (bc78 <__aeabi_ui2d+0x6c>)
    bc42:	051b      	lsls	r3, r3, #20
    bc44:	4022      	ands	r2, r4
    bc46:	4313      	orrs	r3, r2
    bc48:	005b      	lsls	r3, r3, #1
    bc4a:	0859      	lsrs	r1, r3, #1
    bc4c:	bd10      	pop	{r4, pc}
    bc4e:	0021      	movs	r1, r4
    bc50:	4091      	lsls	r1, r2
    bc52:	000a      	movs	r2, r1
    bc54:	210b      	movs	r1, #11
    bc56:	1a08      	subs	r0, r1, r0
    bc58:	40c4      	lsrs	r4, r0
    bc5a:	055b      	lsls	r3, r3, #21
    bc5c:	0324      	lsls	r4, r4, #12
    bc5e:	0b24      	lsrs	r4, r4, #12
    bc60:	0d5b      	lsrs	r3, r3, #21
    bc62:	e7e6      	b.n	bc32 <__aeabi_ui2d+0x26>
    bc64:	2300      	movs	r3, #0
    bc66:	2400      	movs	r4, #0
    bc68:	2200      	movs	r2, #0
    bc6a:	e7e2      	b.n	bc32 <__aeabi_ui2d+0x26>
    bc6c:	0000041e 	.word	0x0000041e
    bc70:	00000433 	.word	0x00000433
    bc74:	00000413 	.word	0x00000413
    bc78:	800fffff 	.word	0x800fffff

0000bc7c <__aeabi_f2d>:
    bc7c:	0041      	lsls	r1, r0, #1
    bc7e:	0e09      	lsrs	r1, r1, #24
    bc80:	1c4b      	adds	r3, r1, #1
    bc82:	b570      	push	{r4, r5, r6, lr}
    bc84:	b2db      	uxtb	r3, r3
    bc86:	0246      	lsls	r6, r0, #9
    bc88:	0a75      	lsrs	r5, r6, #9
    bc8a:	0fc4      	lsrs	r4, r0, #31
    bc8c:	2b01      	cmp	r3, #1
    bc8e:	dd14      	ble.n	bcba <__aeabi_f2d+0x3e>
    bc90:	23e0      	movs	r3, #224	; 0xe0
    bc92:	009b      	lsls	r3, r3, #2
    bc94:	076d      	lsls	r5, r5, #29
    bc96:	0b36      	lsrs	r6, r6, #12
    bc98:	18cb      	adds	r3, r1, r3
    bc9a:	2100      	movs	r1, #0
    bc9c:	0d0a      	lsrs	r2, r1, #20
    bc9e:	0028      	movs	r0, r5
    bca0:	0512      	lsls	r2, r2, #20
    bca2:	4d1c      	ldr	r5, [pc, #112]	; (bd14 <__aeabi_f2d+0x98>)
    bca4:	4332      	orrs	r2, r6
    bca6:	055b      	lsls	r3, r3, #21
    bca8:	402a      	ands	r2, r5
    bcaa:	085b      	lsrs	r3, r3, #1
    bcac:	4313      	orrs	r3, r2
    bcae:	005b      	lsls	r3, r3, #1
    bcb0:	07e4      	lsls	r4, r4, #31
    bcb2:	085b      	lsrs	r3, r3, #1
    bcb4:	4323      	orrs	r3, r4
    bcb6:	0019      	movs	r1, r3
    bcb8:	bd70      	pop	{r4, r5, r6, pc}
    bcba:	2900      	cmp	r1, #0
    bcbc:	d114      	bne.n	bce8 <__aeabi_f2d+0x6c>
    bcbe:	2d00      	cmp	r5, #0
    bcc0:	d01e      	beq.n	bd00 <__aeabi_f2d+0x84>
    bcc2:	0028      	movs	r0, r5
    bcc4:	f000 f8b6 	bl	be34 <__clzsi2>
    bcc8:	280a      	cmp	r0, #10
    bcca:	dc1c      	bgt.n	bd06 <__aeabi_f2d+0x8a>
    bccc:	230b      	movs	r3, #11
    bcce:	002a      	movs	r2, r5
    bcd0:	1a1b      	subs	r3, r3, r0
    bcd2:	40da      	lsrs	r2, r3
    bcd4:	0003      	movs	r3, r0
    bcd6:	3315      	adds	r3, #21
    bcd8:	409d      	lsls	r5, r3
    bcda:	4b0f      	ldr	r3, [pc, #60]	; (bd18 <__aeabi_f2d+0x9c>)
    bcdc:	0312      	lsls	r2, r2, #12
    bcde:	1a1b      	subs	r3, r3, r0
    bce0:	055b      	lsls	r3, r3, #21
    bce2:	0b16      	lsrs	r6, r2, #12
    bce4:	0d5b      	lsrs	r3, r3, #21
    bce6:	e7d8      	b.n	bc9a <__aeabi_f2d+0x1e>
    bce8:	2d00      	cmp	r5, #0
    bcea:	d006      	beq.n	bcfa <__aeabi_f2d+0x7e>
    bcec:	0b32      	lsrs	r2, r6, #12
    bcee:	2680      	movs	r6, #128	; 0x80
    bcf0:	0336      	lsls	r6, r6, #12
    bcf2:	076d      	lsls	r5, r5, #29
    bcf4:	4316      	orrs	r6, r2
    bcf6:	4b09      	ldr	r3, [pc, #36]	; (bd1c <__aeabi_f2d+0xa0>)
    bcf8:	e7cf      	b.n	bc9a <__aeabi_f2d+0x1e>
    bcfa:	4b08      	ldr	r3, [pc, #32]	; (bd1c <__aeabi_f2d+0xa0>)
    bcfc:	2600      	movs	r6, #0
    bcfe:	e7cc      	b.n	bc9a <__aeabi_f2d+0x1e>
    bd00:	2300      	movs	r3, #0
    bd02:	2600      	movs	r6, #0
    bd04:	e7c9      	b.n	bc9a <__aeabi_f2d+0x1e>
    bd06:	0003      	movs	r3, r0
    bd08:	002a      	movs	r2, r5
    bd0a:	3b0b      	subs	r3, #11
    bd0c:	409a      	lsls	r2, r3
    bd0e:	2500      	movs	r5, #0
    bd10:	e7e3      	b.n	bcda <__aeabi_f2d+0x5e>
    bd12:	46c0      	nop			; (mov r8, r8)
    bd14:	800fffff 	.word	0x800fffff
    bd18:	00000389 	.word	0x00000389
    bd1c:	000007ff 	.word	0x000007ff

0000bd20 <__aeabi_d2f>:
    bd20:	b5f0      	push	{r4, r5, r6, r7, lr}
    bd22:	004c      	lsls	r4, r1, #1
    bd24:	0d64      	lsrs	r4, r4, #21
    bd26:	030b      	lsls	r3, r1, #12
    bd28:	1c62      	adds	r2, r4, #1
    bd2a:	0f45      	lsrs	r5, r0, #29
    bd2c:	0a5b      	lsrs	r3, r3, #9
    bd2e:	0552      	lsls	r2, r2, #21
    bd30:	432b      	orrs	r3, r5
    bd32:	0fc9      	lsrs	r1, r1, #31
    bd34:	00c5      	lsls	r5, r0, #3
    bd36:	0d52      	lsrs	r2, r2, #21
    bd38:	2a01      	cmp	r2, #1
    bd3a:	dd28      	ble.n	bd8e <__aeabi_d2f+0x6e>
    bd3c:	4a3a      	ldr	r2, [pc, #232]	; (be28 <__aeabi_d2f+0x108>)
    bd3e:	18a6      	adds	r6, r4, r2
    bd40:	2efe      	cmp	r6, #254	; 0xfe
    bd42:	dc1b      	bgt.n	bd7c <__aeabi_d2f+0x5c>
    bd44:	2e00      	cmp	r6, #0
    bd46:	dd3e      	ble.n	bdc6 <__aeabi_d2f+0xa6>
    bd48:	0180      	lsls	r0, r0, #6
    bd4a:	0002      	movs	r2, r0
    bd4c:	1e50      	subs	r0, r2, #1
    bd4e:	4182      	sbcs	r2, r0
    bd50:	0f6d      	lsrs	r5, r5, #29
    bd52:	432a      	orrs	r2, r5
    bd54:	00db      	lsls	r3, r3, #3
    bd56:	4313      	orrs	r3, r2
    bd58:	075a      	lsls	r2, r3, #29
    bd5a:	d004      	beq.n	bd66 <__aeabi_d2f+0x46>
    bd5c:	220f      	movs	r2, #15
    bd5e:	401a      	ands	r2, r3
    bd60:	2a04      	cmp	r2, #4
    bd62:	d000      	beq.n	bd66 <__aeabi_d2f+0x46>
    bd64:	3304      	adds	r3, #4
    bd66:	2280      	movs	r2, #128	; 0x80
    bd68:	04d2      	lsls	r2, r2, #19
    bd6a:	401a      	ands	r2, r3
    bd6c:	d05a      	beq.n	be24 <__aeabi_d2f+0x104>
    bd6e:	3601      	adds	r6, #1
    bd70:	2eff      	cmp	r6, #255	; 0xff
    bd72:	d003      	beq.n	bd7c <__aeabi_d2f+0x5c>
    bd74:	019b      	lsls	r3, r3, #6
    bd76:	0a5b      	lsrs	r3, r3, #9
    bd78:	b2f4      	uxtb	r4, r6
    bd7a:	e001      	b.n	bd80 <__aeabi_d2f+0x60>
    bd7c:	24ff      	movs	r4, #255	; 0xff
    bd7e:	2300      	movs	r3, #0
    bd80:	0258      	lsls	r0, r3, #9
    bd82:	05e4      	lsls	r4, r4, #23
    bd84:	0a40      	lsrs	r0, r0, #9
    bd86:	07c9      	lsls	r1, r1, #31
    bd88:	4320      	orrs	r0, r4
    bd8a:	4308      	orrs	r0, r1
    bd8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bd8e:	2c00      	cmp	r4, #0
    bd90:	d007      	beq.n	bda2 <__aeabi_d2f+0x82>
    bd92:	431d      	orrs	r5, r3
    bd94:	d0f2      	beq.n	bd7c <__aeabi_d2f+0x5c>
    bd96:	2080      	movs	r0, #128	; 0x80
    bd98:	00db      	lsls	r3, r3, #3
    bd9a:	0480      	lsls	r0, r0, #18
    bd9c:	4303      	orrs	r3, r0
    bd9e:	26ff      	movs	r6, #255	; 0xff
    bda0:	e7da      	b.n	bd58 <__aeabi_d2f+0x38>
    bda2:	432b      	orrs	r3, r5
    bda4:	d003      	beq.n	bdae <__aeabi_d2f+0x8e>
    bda6:	2305      	movs	r3, #5
    bda8:	08db      	lsrs	r3, r3, #3
    bdaa:	2cff      	cmp	r4, #255	; 0xff
    bdac:	d003      	beq.n	bdb6 <__aeabi_d2f+0x96>
    bdae:	025b      	lsls	r3, r3, #9
    bdb0:	0a5b      	lsrs	r3, r3, #9
    bdb2:	b2e4      	uxtb	r4, r4
    bdb4:	e7e4      	b.n	bd80 <__aeabi_d2f+0x60>
    bdb6:	2b00      	cmp	r3, #0
    bdb8:	d032      	beq.n	be20 <__aeabi_d2f+0x100>
    bdba:	2080      	movs	r0, #128	; 0x80
    bdbc:	03c0      	lsls	r0, r0, #15
    bdbe:	4303      	orrs	r3, r0
    bdc0:	025b      	lsls	r3, r3, #9
    bdc2:	0a5b      	lsrs	r3, r3, #9
    bdc4:	e7dc      	b.n	bd80 <__aeabi_d2f+0x60>
    bdc6:	0032      	movs	r2, r6
    bdc8:	3217      	adds	r2, #23
    bdca:	db14      	blt.n	bdf6 <__aeabi_d2f+0xd6>
    bdcc:	2280      	movs	r2, #128	; 0x80
    bdce:	271e      	movs	r7, #30
    bdd0:	0412      	lsls	r2, r2, #16
    bdd2:	4313      	orrs	r3, r2
    bdd4:	1bbf      	subs	r7, r7, r6
    bdd6:	2f1f      	cmp	r7, #31
    bdd8:	dc0f      	bgt.n	bdfa <__aeabi_d2f+0xda>
    bdda:	4a14      	ldr	r2, [pc, #80]	; (be2c <__aeabi_d2f+0x10c>)
    bddc:	4694      	mov	ip, r2
    bdde:	4464      	add	r4, ip
    bde0:	002a      	movs	r2, r5
    bde2:	40a5      	lsls	r5, r4
    bde4:	002e      	movs	r6, r5
    bde6:	40a3      	lsls	r3, r4
    bde8:	1e75      	subs	r5, r6, #1
    bdea:	41ae      	sbcs	r6, r5
    bdec:	40fa      	lsrs	r2, r7
    bdee:	4333      	orrs	r3, r6
    bdf0:	4313      	orrs	r3, r2
    bdf2:	2600      	movs	r6, #0
    bdf4:	e7b0      	b.n	bd58 <__aeabi_d2f+0x38>
    bdf6:	2400      	movs	r4, #0
    bdf8:	e7d5      	b.n	bda6 <__aeabi_d2f+0x86>
    bdfa:	2202      	movs	r2, #2
    bdfc:	4252      	negs	r2, r2
    bdfe:	1b96      	subs	r6, r2, r6
    be00:	001a      	movs	r2, r3
    be02:	40f2      	lsrs	r2, r6
    be04:	2f20      	cmp	r7, #32
    be06:	d009      	beq.n	be1c <__aeabi_d2f+0xfc>
    be08:	4809      	ldr	r0, [pc, #36]	; (be30 <__aeabi_d2f+0x110>)
    be0a:	4684      	mov	ip, r0
    be0c:	4464      	add	r4, ip
    be0e:	40a3      	lsls	r3, r4
    be10:	432b      	orrs	r3, r5
    be12:	1e5d      	subs	r5, r3, #1
    be14:	41ab      	sbcs	r3, r5
    be16:	2600      	movs	r6, #0
    be18:	4313      	orrs	r3, r2
    be1a:	e79d      	b.n	bd58 <__aeabi_d2f+0x38>
    be1c:	2300      	movs	r3, #0
    be1e:	e7f7      	b.n	be10 <__aeabi_d2f+0xf0>
    be20:	2300      	movs	r3, #0
    be22:	e7ad      	b.n	bd80 <__aeabi_d2f+0x60>
    be24:	0034      	movs	r4, r6
    be26:	e7bf      	b.n	bda8 <__aeabi_d2f+0x88>
    be28:	fffffc80 	.word	0xfffffc80
    be2c:	fffffc82 	.word	0xfffffc82
    be30:	fffffca2 	.word	0xfffffca2

0000be34 <__clzsi2>:
    be34:	211c      	movs	r1, #28
    be36:	2301      	movs	r3, #1
    be38:	041b      	lsls	r3, r3, #16
    be3a:	4298      	cmp	r0, r3
    be3c:	d301      	bcc.n	be42 <__clzsi2+0xe>
    be3e:	0c00      	lsrs	r0, r0, #16
    be40:	3910      	subs	r1, #16
    be42:	0a1b      	lsrs	r3, r3, #8
    be44:	4298      	cmp	r0, r3
    be46:	d301      	bcc.n	be4c <__clzsi2+0x18>
    be48:	0a00      	lsrs	r0, r0, #8
    be4a:	3908      	subs	r1, #8
    be4c:	091b      	lsrs	r3, r3, #4
    be4e:	4298      	cmp	r0, r3
    be50:	d301      	bcc.n	be56 <__clzsi2+0x22>
    be52:	0900      	lsrs	r0, r0, #4
    be54:	3904      	subs	r1, #4
    be56:	a202      	add	r2, pc, #8	; (adr r2, be60 <__clzsi2+0x2c>)
    be58:	5c10      	ldrb	r0, [r2, r0]
    be5a:	1840      	adds	r0, r0, r1
    be5c:	4770      	bx	lr
    be5e:	46c0      	nop			; (mov r8, r8)
    be60:	02020304 	.word	0x02020304
    be64:	01010101 	.word	0x01010101
	...

0000be70 <__assert_func>:
    be70:	b530      	push	{r4, r5, lr}
    be72:	001c      	movs	r4, r3
    be74:	4b09      	ldr	r3, [pc, #36]	; (be9c <__assert_func+0x2c>)
    be76:	0005      	movs	r5, r0
    be78:	681b      	ldr	r3, [r3, #0]
    be7a:	b085      	sub	sp, #20
    be7c:	68d8      	ldr	r0, [r3, #12]
    be7e:	4b08      	ldr	r3, [pc, #32]	; (bea0 <__assert_func+0x30>)
    be80:	2a00      	cmp	r2, #0
    be82:	d101      	bne.n	be88 <__assert_func+0x18>
    be84:	4b07      	ldr	r3, [pc, #28]	; (bea4 <__assert_func+0x34>)
    be86:	001a      	movs	r2, r3
    be88:	9202      	str	r2, [sp, #8]
    be8a:	9301      	str	r3, [sp, #4]
    be8c:	9100      	str	r1, [sp, #0]
    be8e:	002b      	movs	r3, r5
    be90:	0022      	movs	r2, r4
    be92:	4905      	ldr	r1, [pc, #20]	; (bea8 <__assert_func+0x38>)
    be94:	f000 f818 	bl	bec8 <fiprintf>
    be98:	f001 feb6 	bl	dc08 <abort>
    be9c:	200000ac 	.word	0x200000ac
    bea0:	00012008 	.word	0x00012008
    bea4:	00010477 	.word	0x00010477
    bea8:	00012015 	.word	0x00012015

0000beac <__cxa_atexit>:
    beac:	b570      	push	{r4, r5, r6, lr}
    beae:	4c05      	ldr	r4, [pc, #20]	; (bec4 <__cxa_atexit+0x18>)
    beb0:	0005      	movs	r5, r0
    beb2:	0013      	movs	r3, r2
    beb4:	1e20      	subs	r0, r4, #0
    beb6:	d004      	beq.n	bec2 <__cxa_atexit+0x16>
    beb8:	000a      	movs	r2, r1
    beba:	2002      	movs	r0, #2
    bebc:	0029      	movs	r1, r5
    bebe:	e000      	b.n	bec2 <__cxa_atexit+0x16>
    bec0:	bf00      	nop
    bec2:	bd70      	pop	{r4, r5, r6, pc}
    bec4:	00000000 	.word	0x00000000

0000bec8 <fiprintf>:
    bec8:	b40e      	push	{r1, r2, r3}
    beca:	b503      	push	{r0, r1, lr}
    becc:	0001      	movs	r1, r0
    bece:	ab03      	add	r3, sp, #12
    bed0:	4804      	ldr	r0, [pc, #16]	; (bee4 <fiprintf+0x1c>)
    bed2:	cb04      	ldmia	r3!, {r2}
    bed4:	6800      	ldr	r0, [r0, #0]
    bed6:	9301      	str	r3, [sp, #4]
    bed8:	f000 fc8a 	bl	c7f0 <_vfiprintf_r>
    bedc:	b002      	add	sp, #8
    bede:	bc08      	pop	{r3}
    bee0:	b003      	add	sp, #12
    bee2:	4718      	bx	r3
    bee4:	200000ac 	.word	0x200000ac

0000bee8 <gmtime>:
    bee8:	4b07      	ldr	r3, [pc, #28]	; (bf08 <gmtime+0x20>)
    beea:	b570      	push	{r4, r5, r6, lr}
    beec:	681c      	ldr	r4, [r3, #0]
    beee:	0005      	movs	r5, r0
    bef0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    bef2:	2b00      	cmp	r3, #0
    bef4:	d103      	bne.n	befe <gmtime+0x16>
    bef6:	2024      	movs	r0, #36	; 0x24
    bef8:	f000 f8fc 	bl	c0f4 <malloc>
    befc:	63e0      	str	r0, [r4, #60]	; 0x3c
    befe:	0028      	movs	r0, r5
    bf00:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    bf02:	f000 f803 	bl	bf0c <gmtime_r>
    bf06:	bd70      	pop	{r4, r5, r6, pc}
    bf08:	200000ac 	.word	0x200000ac

0000bf0c <gmtime_r>:
    bf0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf0e:	6805      	ldr	r5, [r0, #0]
    bf10:	b085      	sub	sp, #20
    bf12:	000c      	movs	r4, r1
    bf14:	0028      	movs	r0, r5
    bf16:	4952      	ldr	r1, [pc, #328]	; (c060 <gmtime_r+0x154>)
    bf18:	f7fd fb7c 	bl	9614 <__divsi3>
    bf1c:	4950      	ldr	r1, [pc, #320]	; (c060 <gmtime_r+0x154>)
    bf1e:	0006      	movs	r6, r0
    bf20:	0028      	movs	r0, r5
    bf22:	f7fd fc5d 	bl	97e0 <__aeabi_idivmod>
    bf26:	1e0f      	subs	r7, r1, #0
    bf28:	da00      	bge.n	bf2c <gmtime_r+0x20>
    bf2a:	e080      	b.n	c02e <gmtime_r+0x122>
    bf2c:	4b4d      	ldr	r3, [pc, #308]	; (c064 <gmtime_r+0x158>)
    bf2e:	21e1      	movs	r1, #225	; 0xe1
    bf30:	0038      	movs	r0, r7
    bf32:	0109      	lsls	r1, r1, #4
    bf34:	18f5      	adds	r5, r6, r3
    bf36:	f7fd fb6d 	bl	9614 <__divsi3>
    bf3a:	21e1      	movs	r1, #225	; 0xe1
    bf3c:	60a0      	str	r0, [r4, #8]
    bf3e:	0109      	lsls	r1, r1, #4
    bf40:	0038      	movs	r0, r7
    bf42:	f7fd fc4d 	bl	97e0 <__aeabi_idivmod>
    bf46:	000e      	movs	r6, r1
    bf48:	213c      	movs	r1, #60	; 0x3c
    bf4a:	0030      	movs	r0, r6
    bf4c:	f7fd fb62 	bl	9614 <__divsi3>
    bf50:	213c      	movs	r1, #60	; 0x3c
    bf52:	6060      	str	r0, [r4, #4]
    bf54:	0030      	movs	r0, r6
    bf56:	f7fd fc43 	bl	97e0 <__aeabi_idivmod>
    bf5a:	1ce8      	adds	r0, r5, #3
    bf5c:	6021      	str	r1, [r4, #0]
    bf5e:	2107      	movs	r1, #7
    bf60:	f7fd fc3e 	bl	97e0 <__aeabi_idivmod>
    bf64:	0028      	movs	r0, r5
    bf66:	61a1      	str	r1, [r4, #24]
    bf68:	493f      	ldr	r1, [pc, #252]	; (c068 <gmtime_r+0x15c>)
    bf6a:	f7fd fb53 	bl	9614 <__divsi3>
    bf6e:	4e3f      	ldr	r6, [pc, #252]	; (c06c <gmtime_r+0x160>)
    bf70:	493f      	ldr	r1, [pc, #252]	; (c070 <gmtime_r+0x164>)
    bf72:	4346      	muls	r6, r0
    bf74:	1976      	adds	r6, r6, r5
    bf76:	0007      	movs	r7, r0
    bf78:	0030      	movs	r0, r6
    bf7a:	f7fd fac1 	bl	9500 <__udivsi3>
    bf7e:	493d      	ldr	r1, [pc, #244]	; (c074 <gmtime_r+0x168>)
    bf80:	1985      	adds	r5, r0, r6
    bf82:	0030      	movs	r0, r6
    bf84:	f7fd fabc 	bl	9500 <__udivsi3>
    bf88:	493b      	ldr	r1, [pc, #236]	; (c078 <gmtime_r+0x16c>)
    bf8a:	1a2d      	subs	r5, r5, r0
    bf8c:	0030      	movs	r0, r6
    bf8e:	f7fd fab7 	bl	9500 <__udivsi3>
    bf92:	216e      	movs	r1, #110	; 0x6e
    bf94:	1a2d      	subs	r5, r5, r0
    bf96:	31ff      	adds	r1, #255	; 0xff
    bf98:	0028      	movs	r0, r5
    bf9a:	f7fd fab1 	bl	9500 <__udivsi3>
    bf9e:	4937      	ldr	r1, [pc, #220]	; (c07c <gmtime_r+0x170>)
    bfa0:	9001      	str	r0, [sp, #4]
    bfa2:	0028      	movs	r0, r5
    bfa4:	f7fd faac 	bl	9500 <__udivsi3>
    bfa8:	4932      	ldr	r1, [pc, #200]	; (c074 <gmtime_r+0x168>)
    bfaa:	1986      	adds	r6, r0, r6
    bfac:	0028      	movs	r0, r5
    bfae:	f7fd faa7 	bl	9500 <__udivsi3>
    bfb2:	216e      	movs	r1, #110	; 0x6e
    bfb4:	9b01      	ldr	r3, [sp, #4]
    bfb6:	31ff      	adds	r1, #255	; 0xff
    bfb8:	4359      	muls	r1, r3
    bfba:	1a36      	subs	r6, r6, r0
    bfbc:	1a73      	subs	r3, r6, r1
    bfbe:	0018      	movs	r0, r3
    bfc0:	2605      	movs	r6, #5
    bfc2:	4370      	muls	r0, r6
    bfc4:	2199      	movs	r1, #153	; 0x99
    bfc6:	3002      	adds	r0, #2
    bfc8:	9302      	str	r3, [sp, #8]
    bfca:	f7fd fa99 	bl	9500 <__udivsi3>
    bfce:	0005      	movs	r5, r0
    bfd0:	2099      	movs	r0, #153	; 0x99
    bfd2:	4368      	muls	r0, r5
    bfd4:	9b02      	ldr	r3, [sp, #8]
    bfd6:	3002      	adds	r0, #2
    bfd8:	3301      	adds	r3, #1
    bfda:	0031      	movs	r1, r6
    bfdc:	9303      	str	r3, [sp, #12]
    bfde:	f7fd fa8f 	bl	9500 <__udivsi3>
    bfe2:	9b03      	ldr	r3, [sp, #12]
    bfe4:	1a1b      	subs	r3, r3, r0
    bfe6:	9303      	str	r3, [sp, #12]
    bfe8:	2302      	movs	r3, #2
    bfea:	2d09      	cmp	r5, #9
    bfec:	d900      	bls.n	bff0 <gmtime_r+0xe4>
    bfee:	3b0c      	subs	r3, #12
    bff0:	195d      	adds	r5, r3, r5
    bff2:	23c8      	movs	r3, #200	; 0xc8
    bff4:	005b      	lsls	r3, r3, #1
    bff6:	435f      	muls	r7, r3
    bff8:	9b01      	ldr	r3, [sp, #4]
    bffa:	2601      	movs	r6, #1
    bffc:	18ff      	adds	r7, r7, r3
    bffe:	2300      	movs	r3, #0
    c000:	42ae      	cmp	r6, r5
    c002:	415b      	adcs	r3, r3
    c004:	18ff      	adds	r7, r7, r3
    c006:	2332      	movs	r3, #50	; 0x32
    c008:	9a02      	ldr	r2, [sp, #8]
    c00a:	33ff      	adds	r3, #255	; 0xff
    c00c:	429a      	cmp	r2, r3
    c00e:	d912      	bls.n	c036 <gmtime_r+0x12a>
    c010:	0016      	movs	r6, r2
    c012:	3e33      	subs	r6, #51	; 0x33
    c014:	3eff      	subs	r6, #255	; 0xff
    c016:	4b1a      	ldr	r3, [pc, #104]	; (c080 <gmtime_r+0x174>)
    c018:	0020      	movs	r0, r4
    c01a:	18ff      	adds	r7, r7, r3
    c01c:	9b03      	ldr	r3, [sp, #12]
    c01e:	61e6      	str	r6, [r4, #28]
    c020:	60e3      	str	r3, [r4, #12]
    c022:	2300      	movs	r3, #0
    c024:	6167      	str	r7, [r4, #20]
    c026:	6125      	str	r5, [r4, #16]
    c028:	6223      	str	r3, [r4, #32]
    c02a:	b005      	add	sp, #20
    c02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c02e:	4b0c      	ldr	r3, [pc, #48]	; (c060 <gmtime_r+0x154>)
    c030:	18cf      	adds	r7, r1, r3
    c032:	4b14      	ldr	r3, [pc, #80]	; (c084 <gmtime_r+0x178>)
    c034:	e77b      	b.n	bf2e <gmtime_r+0x22>
    c036:	9b01      	ldr	r3, [sp, #4]
    c038:	079b      	lsls	r3, r3, #30
    c03a:	d105      	bne.n	c048 <gmtime_r+0x13c>
    c03c:	2164      	movs	r1, #100	; 0x64
    c03e:	9801      	ldr	r0, [sp, #4]
    c040:	f7fd fae4 	bl	960c <__aeabi_uidivmod>
    c044:	2900      	cmp	r1, #0
    c046:	d106      	bne.n	c056 <gmtime_r+0x14a>
    c048:	21c8      	movs	r1, #200	; 0xc8
    c04a:	9801      	ldr	r0, [sp, #4]
    c04c:	0049      	lsls	r1, r1, #1
    c04e:	f7fd fadd 	bl	960c <__aeabi_uidivmod>
    c052:	424e      	negs	r6, r1
    c054:	414e      	adcs	r6, r1
    c056:	9802      	ldr	r0, [sp, #8]
    c058:	303b      	adds	r0, #59	; 0x3b
    c05a:	1986      	adds	r6, r0, r6
    c05c:	e7db      	b.n	c016 <gmtime_r+0x10a>
    c05e:	46c0      	nop			; (mov r8, r8)
    c060:	00015180 	.word	0x00015180
    c064:	000afa6c 	.word	0x000afa6c
    c068:	00023ab1 	.word	0x00023ab1
    c06c:	fffdc54f 	.word	0xfffdc54f
    c070:	00008eac 	.word	0x00008eac
    c074:	000005b4 	.word	0x000005b4
    c078:	00023ab0 	.word	0x00023ab0
    c07c:	00008e94 	.word	0x00008e94
    c080:	fffff894 	.word	0xfffff894
    c084:	000afa6b 	.word	0x000afa6b

0000c088 <__libc_init_array>:
    c088:	b570      	push	{r4, r5, r6, lr}
    c08a:	2600      	movs	r6, #0
    c08c:	4d0c      	ldr	r5, [pc, #48]	; (c0c0 <__libc_init_array+0x38>)
    c08e:	4c0d      	ldr	r4, [pc, #52]	; (c0c4 <__libc_init_array+0x3c>)
    c090:	1b64      	subs	r4, r4, r5
    c092:	10a4      	asrs	r4, r4, #2
    c094:	42a6      	cmp	r6, r4
    c096:	d109      	bne.n	c0ac <__libc_init_array+0x24>
    c098:	2600      	movs	r6, #0
    c09a:	f004 f909 	bl	102b0 <_init>
    c09e:	4d0a      	ldr	r5, [pc, #40]	; (c0c8 <__libc_init_array+0x40>)
    c0a0:	4c0a      	ldr	r4, [pc, #40]	; (c0cc <__libc_init_array+0x44>)
    c0a2:	1b64      	subs	r4, r4, r5
    c0a4:	10a4      	asrs	r4, r4, #2
    c0a6:	42a6      	cmp	r6, r4
    c0a8:	d105      	bne.n	c0b6 <__libc_init_array+0x2e>
    c0aa:	bd70      	pop	{r4, r5, r6, pc}
    c0ac:	00b3      	lsls	r3, r6, #2
    c0ae:	58eb      	ldr	r3, [r5, r3]
    c0b0:	4798      	blx	r3
    c0b2:	3601      	adds	r6, #1
    c0b4:	e7ee      	b.n	c094 <__libc_init_array+0xc>
    c0b6:	00b3      	lsls	r3, r6, #2
    c0b8:	58eb      	ldr	r3, [r5, r3]
    c0ba:	4798      	blx	r3
    c0bc:	3601      	adds	r6, #1
    c0be:	e7f2      	b.n	c0a6 <__libc_init_array+0x1e>
    c0c0:	200002c8 	.word	0x200002c8
    c0c4:	200002c8 	.word	0x200002c8
    c0c8:	200002c8 	.word	0x200002c8
    c0cc:	200002fc 	.word	0x200002fc

0000c0d0 <__locale_ctype_ptr_l>:
    c0d0:	30ec      	adds	r0, #236	; 0xec
    c0d2:	6800      	ldr	r0, [r0, #0]
    c0d4:	4770      	bx	lr
	...

0000c0d8 <__locale_ctype_ptr>:
    c0d8:	4b04      	ldr	r3, [pc, #16]	; (c0ec <__locale_ctype_ptr+0x14>)
    c0da:	681b      	ldr	r3, [r3, #0]
    c0dc:	6a1b      	ldr	r3, [r3, #32]
    c0de:	2b00      	cmp	r3, #0
    c0e0:	d100      	bne.n	c0e4 <__locale_ctype_ptr+0xc>
    c0e2:	4b03      	ldr	r3, [pc, #12]	; (c0f0 <__locale_ctype_ptr+0x18>)
    c0e4:	33ec      	adds	r3, #236	; 0xec
    c0e6:	6818      	ldr	r0, [r3, #0]
    c0e8:	4770      	bx	lr
    c0ea:	46c0      	nop			; (mov r8, r8)
    c0ec:	200000ac 	.word	0x200000ac
    c0f0:	20000110 	.word	0x20000110

0000c0f4 <malloc>:
    c0f4:	b510      	push	{r4, lr}
    c0f6:	4b03      	ldr	r3, [pc, #12]	; (c104 <malloc+0x10>)
    c0f8:	0001      	movs	r1, r0
    c0fa:	6818      	ldr	r0, [r3, #0]
    c0fc:	f000 faf2 	bl	c6e4 <_malloc_r>
    c100:	bd10      	pop	{r4, pc}
    c102:	46c0      	nop			; (mov r8, r8)
    c104:	200000ac 	.word	0x200000ac

0000c108 <free>:
    c108:	b510      	push	{r4, lr}
    c10a:	4b03      	ldr	r3, [pc, #12]	; (c118 <free+0x10>)
    c10c:	0001      	movs	r1, r0
    c10e:	6818      	ldr	r0, [r3, #0]
    c110:	f000 fa9e 	bl	c650 <_free_r>
    c114:	bd10      	pop	{r4, pc}
    c116:	46c0      	nop			; (mov r8, r8)
    c118:	200000ac 	.word	0x200000ac

0000c11c <__ascii_mbtowc>:
    c11c:	b082      	sub	sp, #8
    c11e:	2900      	cmp	r1, #0
    c120:	d100      	bne.n	c124 <__ascii_mbtowc+0x8>
    c122:	a901      	add	r1, sp, #4
    c124:	1e10      	subs	r0, r2, #0
    c126:	d006      	beq.n	c136 <__ascii_mbtowc+0x1a>
    c128:	2b00      	cmp	r3, #0
    c12a:	d006      	beq.n	c13a <__ascii_mbtowc+0x1e>
    c12c:	7813      	ldrb	r3, [r2, #0]
    c12e:	600b      	str	r3, [r1, #0]
    c130:	7810      	ldrb	r0, [r2, #0]
    c132:	1e43      	subs	r3, r0, #1
    c134:	4198      	sbcs	r0, r3
    c136:	b002      	add	sp, #8
    c138:	4770      	bx	lr
    c13a:	2002      	movs	r0, #2
    c13c:	4240      	negs	r0, r0
    c13e:	e7fa      	b.n	c136 <__ascii_mbtowc+0x1a>

0000c140 <memcmp>:
    c140:	b530      	push	{r4, r5, lr}
    c142:	2400      	movs	r4, #0
    c144:	42a2      	cmp	r2, r4
    c146:	d101      	bne.n	c14c <memcmp+0xc>
    c148:	2000      	movs	r0, #0
    c14a:	e005      	b.n	c158 <memcmp+0x18>
    c14c:	5d03      	ldrb	r3, [r0, r4]
    c14e:	1c65      	adds	r5, r4, #1
    c150:	5d0c      	ldrb	r4, [r1, r4]
    c152:	42a3      	cmp	r3, r4
    c154:	d001      	beq.n	c15a <memcmp+0x1a>
    c156:	1b18      	subs	r0, r3, r4
    c158:	bd30      	pop	{r4, r5, pc}
    c15a:	002c      	movs	r4, r5
    c15c:	e7f2      	b.n	c144 <memcmp+0x4>

0000c15e <memcpy>:
    c15e:	2300      	movs	r3, #0
    c160:	b510      	push	{r4, lr}
    c162:	429a      	cmp	r2, r3
    c164:	d100      	bne.n	c168 <memcpy+0xa>
    c166:	bd10      	pop	{r4, pc}
    c168:	5ccc      	ldrb	r4, [r1, r3]
    c16a:	54c4      	strb	r4, [r0, r3]
    c16c:	3301      	adds	r3, #1
    c16e:	e7f8      	b.n	c162 <memcpy+0x4>

0000c170 <memmove>:
    c170:	b510      	push	{r4, lr}
    c172:	4288      	cmp	r0, r1
    c174:	d902      	bls.n	c17c <memmove+0xc>
    c176:	188b      	adds	r3, r1, r2
    c178:	4298      	cmp	r0, r3
    c17a:	d308      	bcc.n	c18e <memmove+0x1e>
    c17c:	2300      	movs	r3, #0
    c17e:	429a      	cmp	r2, r3
    c180:	d007      	beq.n	c192 <memmove+0x22>
    c182:	5ccc      	ldrb	r4, [r1, r3]
    c184:	54c4      	strb	r4, [r0, r3]
    c186:	3301      	adds	r3, #1
    c188:	e7f9      	b.n	c17e <memmove+0xe>
    c18a:	5c8b      	ldrb	r3, [r1, r2]
    c18c:	5483      	strb	r3, [r0, r2]
    c18e:	3a01      	subs	r2, #1
    c190:	d2fb      	bcs.n	c18a <memmove+0x1a>
    c192:	bd10      	pop	{r4, pc}

0000c194 <memset>:
    c194:	0003      	movs	r3, r0
    c196:	1882      	adds	r2, r0, r2
    c198:	4293      	cmp	r3, r2
    c19a:	d100      	bne.n	c19e <memset+0xa>
    c19c:	4770      	bx	lr
    c19e:	7019      	strb	r1, [r3, #0]
    c1a0:	3301      	adds	r3, #1
    c1a2:	e7f9      	b.n	c198 <memset+0x4>

0000c1a4 <validate_structure>:
    c1a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    c1a6:	6801      	ldr	r1, [r0, #0]
    c1a8:	0004      	movs	r4, r0
    c1aa:	293b      	cmp	r1, #59	; 0x3b
    c1ac:	d90b      	bls.n	c1c6 <validate_structure+0x22>
    c1ae:	223c      	movs	r2, #60	; 0x3c
    c1b0:	4668      	mov	r0, sp
    c1b2:	f001 fd30 	bl	dc16 <div>
    c1b6:	6863      	ldr	r3, [r4, #4]
    c1b8:	9900      	ldr	r1, [sp, #0]
    c1ba:	9a01      	ldr	r2, [sp, #4]
    c1bc:	185b      	adds	r3, r3, r1
    c1be:	6063      	str	r3, [r4, #4]
    c1c0:	2a00      	cmp	r2, #0
    c1c2:	db6c      	blt.n	c29e <validate_structure+0xfa>
    c1c4:	6022      	str	r2, [r4, #0]
    c1c6:	6861      	ldr	r1, [r4, #4]
    c1c8:	293b      	cmp	r1, #59	; 0x3b
    c1ca:	d90b      	bls.n	c1e4 <validate_structure+0x40>
    c1cc:	223c      	movs	r2, #60	; 0x3c
    c1ce:	4668      	mov	r0, sp
    c1d0:	f001 fd21 	bl	dc16 <div>
    c1d4:	68a3      	ldr	r3, [r4, #8]
    c1d6:	9900      	ldr	r1, [sp, #0]
    c1d8:	9a01      	ldr	r2, [sp, #4]
    c1da:	185b      	adds	r3, r3, r1
    c1dc:	60a3      	str	r3, [r4, #8]
    c1de:	2a00      	cmp	r2, #0
    c1e0:	db62      	blt.n	c2a8 <validate_structure+0x104>
    c1e2:	6062      	str	r2, [r4, #4]
    c1e4:	68a1      	ldr	r1, [r4, #8]
    c1e6:	2917      	cmp	r1, #23
    c1e8:	d90b      	bls.n	c202 <validate_structure+0x5e>
    c1ea:	2218      	movs	r2, #24
    c1ec:	4668      	mov	r0, sp
    c1ee:	f001 fd12 	bl	dc16 <div>
    c1f2:	68e3      	ldr	r3, [r4, #12]
    c1f4:	9900      	ldr	r1, [sp, #0]
    c1f6:	9a01      	ldr	r2, [sp, #4]
    c1f8:	185b      	adds	r3, r3, r1
    c1fa:	60e3      	str	r3, [r4, #12]
    c1fc:	2a00      	cmp	r2, #0
    c1fe:	db58      	blt.n	c2b2 <validate_structure+0x10e>
    c200:	60a2      	str	r2, [r4, #8]
    c202:	6921      	ldr	r1, [r4, #16]
    c204:	290b      	cmp	r1, #11
    c206:	d90b      	bls.n	c220 <validate_structure+0x7c>
    c208:	220c      	movs	r2, #12
    c20a:	4668      	mov	r0, sp
    c20c:	f001 fd03 	bl	dc16 <div>
    c210:	6963      	ldr	r3, [r4, #20]
    c212:	9900      	ldr	r1, [sp, #0]
    c214:	9a01      	ldr	r2, [sp, #4]
    c216:	185b      	adds	r3, r3, r1
    c218:	6163      	str	r3, [r4, #20]
    c21a:	2a00      	cmp	r2, #0
    c21c:	db4e      	blt.n	c2bc <validate_structure+0x118>
    c21e:	6122      	str	r2, [r4, #16]
    c220:	6965      	ldr	r5, [r4, #20]
    c222:	231c      	movs	r3, #28
    c224:	07aa      	lsls	r2, r5, #30
    c226:	d10f      	bne.n	c248 <validate_structure+0xa4>
    c228:	2164      	movs	r1, #100	; 0x64
    c22a:	0028      	movs	r0, r5
    c22c:	f7fd fad8 	bl	97e0 <__aeabi_idivmod>
    c230:	231d      	movs	r3, #29
    c232:	2900      	cmp	r1, #0
    c234:	d108      	bne.n	c248 <validate_structure+0xa4>
    c236:	4b3d      	ldr	r3, [pc, #244]	; (c32c <validate_structure+0x188>)
    c238:	3191      	adds	r1, #145	; 0x91
    c23a:	18e8      	adds	r0, r5, r3
    c23c:	31ff      	adds	r1, #255	; 0xff
    c23e:	f7fd facf 	bl	97e0 <__aeabi_idivmod>
    c242:	424b      	negs	r3, r1
    c244:	414b      	adcs	r3, r1
    c246:	331c      	adds	r3, #28
    c248:	68e2      	ldr	r2, [r4, #12]
    c24a:	2a00      	cmp	r2, #0
    c24c:	dd3b      	ble.n	c2c6 <validate_structure+0x122>
    c24e:	2602      	movs	r6, #2
    c250:	4f37      	ldr	r7, [pc, #220]	; (c330 <validate_structure+0x18c>)
    c252:	6921      	ldr	r1, [r4, #16]
    c254:	68e2      	ldr	r2, [r4, #12]
    c256:	2901      	cmp	r1, #1
    c258:	d061      	beq.n	c31e <validate_structure+0x17a>
    c25a:	0088      	lsls	r0, r1, #2
    c25c:	59c0      	ldr	r0, [r0, r7]
    c25e:	4282      	cmp	r2, r0
    c260:	dd35      	ble.n	c2ce <validate_structure+0x12a>
    c262:	1a12      	subs	r2, r2, r0
    c264:	3101      	adds	r1, #1
    c266:	60e2      	str	r2, [r4, #12]
    c268:	6121      	str	r1, [r4, #16]
    c26a:	290c      	cmp	r1, #12
    c26c:	d1f1      	bne.n	c252 <validate_structure+0xae>
    c26e:	2300      	movs	r3, #0
    c270:	6965      	ldr	r5, [r4, #20]
    c272:	6123      	str	r3, [r4, #16]
    c274:	1c68      	adds	r0, r5, #1
    c276:	6160      	str	r0, [r4, #20]
    c278:	331c      	adds	r3, #28
    c27a:	0782      	lsls	r2, r0, #30
    c27c:	d1e9      	bne.n	c252 <validate_structure+0xae>
    c27e:	3158      	adds	r1, #88	; 0x58
    c280:	f7fd faae 	bl	97e0 <__aeabi_idivmod>
    c284:	231d      	movs	r3, #29
    c286:	2900      	cmp	r1, #0
    c288:	d1e3      	bne.n	c252 <validate_structure+0xae>
    c28a:	4b2a      	ldr	r3, [pc, #168]	; (c334 <validate_structure+0x190>)
    c28c:	3191      	adds	r1, #145	; 0x91
    c28e:	18e8      	adds	r0, r5, r3
    c290:	31ff      	adds	r1, #255	; 0xff
    c292:	f7fd faa5 	bl	97e0 <__aeabi_idivmod>
    c296:	424b      	negs	r3, r1
    c298:	414b      	adcs	r3, r1
    c29a:	331c      	adds	r3, #28
    c29c:	e7d9      	b.n	c252 <validate_structure+0xae>
    c29e:	323c      	adds	r2, #60	; 0x3c
    c2a0:	3b01      	subs	r3, #1
    c2a2:	6022      	str	r2, [r4, #0]
    c2a4:	6063      	str	r3, [r4, #4]
    c2a6:	e78e      	b.n	c1c6 <validate_structure+0x22>
    c2a8:	323c      	adds	r2, #60	; 0x3c
    c2aa:	3b01      	subs	r3, #1
    c2ac:	6062      	str	r2, [r4, #4]
    c2ae:	60a3      	str	r3, [r4, #8]
    c2b0:	e798      	b.n	c1e4 <validate_structure+0x40>
    c2b2:	3218      	adds	r2, #24
    c2b4:	3b01      	subs	r3, #1
    c2b6:	60a2      	str	r2, [r4, #8]
    c2b8:	60e3      	str	r3, [r4, #12]
    c2ba:	e7a2      	b.n	c202 <validate_structure+0x5e>
    c2bc:	320c      	adds	r2, #12
    c2be:	3b01      	subs	r3, #1
    c2c0:	6122      	str	r2, [r4, #16]
    c2c2:	6163      	str	r3, [r4, #20]
    c2c4:	e7ac      	b.n	c220 <validate_structure+0x7c>
    c2c6:	271d      	movs	r7, #29
    c2c8:	68e6      	ldr	r6, [r4, #12]
    c2ca:	2e00      	cmp	r6, #0
    c2cc:	dd00      	ble.n	c2d0 <validate_structure+0x12c>
    c2ce:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    c2d0:	6922      	ldr	r2, [r4, #16]
    c2d2:	3a01      	subs	r2, #1
    c2d4:	6122      	str	r2, [r4, #16]
    c2d6:	3201      	adds	r2, #1
    c2d8:	d117      	bne.n	c30a <validate_structure+0x166>
    c2da:	230b      	movs	r3, #11
    c2dc:	2203      	movs	r2, #3
    c2de:	6965      	ldr	r5, [r4, #20]
    c2e0:	6123      	str	r3, [r4, #16]
    c2e2:	1e68      	subs	r0, r5, #1
    c2e4:	6160      	str	r0, [r4, #20]
    c2e6:	3311      	adds	r3, #17
    c2e8:	4210      	tst	r0, r2
    c2ea:	d10e      	bne.n	c30a <validate_structure+0x166>
    c2ec:	2164      	movs	r1, #100	; 0x64
    c2ee:	f7fd fa77 	bl	97e0 <__aeabi_idivmod>
    c2f2:	003b      	movs	r3, r7
    c2f4:	2900      	cmp	r1, #0
    c2f6:	d108      	bne.n	c30a <validate_structure+0x166>
    c2f8:	4b0f      	ldr	r3, [pc, #60]	; (c338 <validate_structure+0x194>)
    c2fa:	3191      	adds	r1, #145	; 0x91
    c2fc:	18e8      	adds	r0, r5, r3
    c2fe:	31ff      	adds	r1, #255	; 0xff
    c300:	f7fd fa6e 	bl	97e0 <__aeabi_idivmod>
    c304:	424b      	negs	r3, r1
    c306:	414b      	adcs	r3, r1
    c308:	331c      	adds	r3, #28
    c30a:	6921      	ldr	r1, [r4, #16]
    c30c:	001a      	movs	r2, r3
    c30e:	2901      	cmp	r1, #1
    c310:	d002      	beq.n	c318 <validate_structure+0x174>
    c312:	4a07      	ldr	r2, [pc, #28]	; (c330 <validate_structure+0x18c>)
    c314:	0089      	lsls	r1, r1, #2
    c316:	588a      	ldr	r2, [r1, r2]
    c318:	1996      	adds	r6, r2, r6
    c31a:	60e6      	str	r6, [r4, #12]
    c31c:	e7d4      	b.n	c2c8 <validate_structure+0x124>
    c31e:	4293      	cmp	r3, r2
    c320:	dad5      	bge.n	c2ce <validate_structure+0x12a>
    c322:	1ad2      	subs	r2, r2, r3
    c324:	60e2      	str	r2, [r4, #12]
    c326:	6126      	str	r6, [r4, #16]
    c328:	e793      	b.n	c252 <validate_structure+0xae>
    c32a:	46c0      	nop			; (mov r8, r8)
    c32c:	0000076c 	.word	0x0000076c
    c330:	00012050 	.word	0x00012050
    c334:	0000076d 	.word	0x0000076d
    c338:	0000076b 	.word	0x0000076b

0000c33c <mktime>:
    c33c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c33e:	b087      	sub	sp, #28
    c340:	0004      	movs	r4, r0
    c342:	f002 fcc1 	bl	ecc8 <__gettzinfo>
    c346:	9004      	str	r0, [sp, #16]
    c348:	0020      	movs	r0, r4
    c34a:	f7ff ff2b 	bl	c1a4 <validate_structure>
    c34e:	233c      	movs	r3, #60	; 0x3c
    c350:	6862      	ldr	r2, [r4, #4]
    c352:	68a1      	ldr	r1, [r4, #8]
    c354:	4353      	muls	r3, r2
    c356:	6822      	ldr	r2, [r4, #0]
    c358:	6965      	ldr	r5, [r4, #20]
    c35a:	189b      	adds	r3, r3, r2
    c35c:	22e1      	movs	r2, #225	; 0xe1
    c35e:	0112      	lsls	r2, r2, #4
    c360:	434a      	muls	r2, r1
    c362:	189b      	adds	r3, r3, r2
    c364:	68e2      	ldr	r2, [r4, #12]
    c366:	9303      	str	r3, [sp, #12]
    c368:	6923      	ldr	r3, [r4, #16]
    c36a:	1e50      	subs	r0, r2, #1
    c36c:	4ab1      	ldr	r2, [pc, #708]	; (c634 <mktime+0x2f8>)
    c36e:	0099      	lsls	r1, r3, #2
    c370:	588a      	ldr	r2, [r1, r2]
    c372:	1882      	adds	r2, r0, r2
    c374:	9201      	str	r2, [sp, #4]
    c376:	2b01      	cmp	r3, #1
    c378:	dd12      	ble.n	c3a0 <mktime+0x64>
    c37a:	07ab      	lsls	r3, r5, #30
    c37c:	d110      	bne.n	c3a0 <mktime+0x64>
    c37e:	2164      	movs	r1, #100	; 0x64
    c380:	0028      	movs	r0, r5
    c382:	f7fd fa2d 	bl	97e0 <__aeabi_idivmod>
    c386:	2900      	cmp	r1, #0
    c388:	d107      	bne.n	c39a <mktime+0x5e>
    c38a:	4bab      	ldr	r3, [pc, #684]	; (c638 <mktime+0x2fc>)
    c38c:	3191      	adds	r1, #145	; 0x91
    c38e:	31ff      	adds	r1, #255	; 0xff
    c390:	18e8      	adds	r0, r5, r3
    c392:	f7fd fa25 	bl	97e0 <__aeabi_idivmod>
    c396:	2900      	cmp	r1, #0
    c398:	d102      	bne.n	c3a0 <mktime+0x64>
    c39a:	9b01      	ldr	r3, [sp, #4]
    c39c:	3301      	adds	r3, #1
    c39e:	9301      	str	r3, [sp, #4]
    c3a0:	9b01      	ldr	r3, [sp, #4]
    c3a2:	4aa6      	ldr	r2, [pc, #664]	; (c63c <mktime+0x300>)
    c3a4:	61e3      	str	r3, [r4, #28]
    c3a6:	4ba6      	ldr	r3, [pc, #664]	; (c640 <mktime+0x304>)
    c3a8:	18eb      	adds	r3, r5, r3
    c3aa:	4293      	cmp	r3, r2
    c3ac:	d900      	bls.n	c3b0 <mktime+0x74>
    c3ae:	e0f8      	b.n	c5a2 <mktime+0x266>
    c3b0:	2346      	movs	r3, #70	; 0x46
    c3b2:	9302      	str	r3, [sp, #8]
    c3b4:	2d46      	cmp	r5, #70	; 0x46
    c3b6:	dc00      	bgt.n	c3ba <mktime+0x7e>
    c3b8:	e072      	b.n	c4a0 <mktime+0x164>
    c3ba:	27b7      	movs	r7, #183	; 0xb7
    c3bc:	26c8      	movs	r6, #200	; 0xc8
    c3be:	007f      	lsls	r7, r7, #1
    c3c0:	0076      	lsls	r6, r6, #1
    c3c2:	2203      	movs	r2, #3
    c3c4:	9b02      	ldr	r3, [sp, #8]
    c3c6:	4213      	tst	r3, r2
    c3c8:	d168      	bne.n	c49c <mktime+0x160>
    c3ca:	0018      	movs	r0, r3
    c3cc:	2164      	movs	r1, #100	; 0x64
    c3ce:	f7fd fa07 	bl	97e0 <__aeabi_idivmod>
    c3d2:	003b      	movs	r3, r7
    c3d4:	2900      	cmp	r1, #0
    c3d6:	d109      	bne.n	c3ec <mktime+0xb0>
    c3d8:	9b02      	ldr	r3, [sp, #8]
    c3da:	4a97      	ldr	r2, [pc, #604]	; (c638 <mktime+0x2fc>)
    c3dc:	0031      	movs	r1, r6
    c3de:	1898      	adds	r0, r3, r2
    c3e0:	f7fd f9fe 	bl	97e0 <__aeabi_idivmod>
    c3e4:	424b      	negs	r3, r1
    c3e6:	414b      	adcs	r3, r1
    c3e8:	336e      	adds	r3, #110	; 0x6e
    c3ea:	33ff      	adds	r3, #255	; 0xff
    c3ec:	9a01      	ldr	r2, [sp, #4]
    c3ee:	18d3      	adds	r3, r2, r3
    c3f0:	9301      	str	r3, [sp, #4]
    c3f2:	9b02      	ldr	r3, [sp, #8]
    c3f4:	3301      	adds	r3, #1
    c3f6:	9302      	str	r3, [sp, #8]
    c3f8:	429d      	cmp	r5, r3
    c3fa:	d1e2      	bne.n	c3c2 <mktime+0x86>
    c3fc:	9a01      	ldr	r2, [sp, #4]
    c3fe:	4b91      	ldr	r3, [pc, #580]	; (c644 <mktime+0x308>)
    c400:	4353      	muls	r3, r2
    c402:	9a03      	ldr	r2, [sp, #12]
    c404:	189b      	adds	r3, r3, r2
    c406:	9303      	str	r3, [sp, #12]
    c408:	f001 f97a 	bl	d700 <__tz_lock>
    c40c:	f001 f97a 	bl	d704 <_tzset_unlocked>
    c410:	4b8d      	ldr	r3, [pc, #564]	; (c648 <mktime+0x30c>)
    c412:	681d      	ldr	r5, [r3, #0]
    c414:	2d00      	cmp	r5, #0
    c416:	d100      	bne.n	c41a <mktime+0xde>
    c418:	e107      	b.n	c62a <mktime+0x2ee>
    c41a:	6963      	ldr	r3, [r4, #20]
    c41c:	4a86      	ldr	r2, [pc, #536]	; (c638 <mktime+0x2fc>)
    c41e:	6a26      	ldr	r6, [r4, #32]
    c420:	1898      	adds	r0, r3, r2
    c422:	2e00      	cmp	r6, #0
    c424:	dd00      	ble.n	c428 <mktime+0xec>
    c426:	2601      	movs	r6, #1
    c428:	9b04      	ldr	r3, [sp, #16]
    c42a:	685b      	ldr	r3, [r3, #4]
    c42c:	9305      	str	r3, [sp, #20]
    c42e:	4298      	cmp	r0, r3
    c430:	d000      	beq.n	c434 <mktime+0xf8>
    c432:	e073      	b.n	c51c <mktime+0x1e0>
    c434:	9b04      	ldr	r3, [sp, #16]
    c436:	9d03      	ldr	r5, [sp, #12]
    c438:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    c43a:	69db      	ldr	r3, [r3, #28]
    c43c:	9305      	str	r3, [sp, #20]
    c43e:	1a1a      	subs	r2, r3, r0
    c440:	9b04      	ldr	r3, [sp, #16]
    c442:	6b99      	ldr	r1, [r3, #56]	; 0x38
    c444:	6a1b      	ldr	r3, [r3, #32]
    c446:	1acf      	subs	r7, r1, r3
    c448:	42bd      	cmp	r5, r7
    c44a:	db00      	blt.n	c44e <mktime+0x112>
    c44c:	e06d      	b.n	c52a <mktime+0x1ee>
    c44e:	9904      	ldr	r1, [sp, #16]
    c450:	6809      	ldr	r1, [r1, #0]
    c452:	2900      	cmp	r1, #0
    c454:	d100      	bne.n	c458 <mktime+0x11c>
    c456:	e06d      	b.n	c534 <mktime+0x1f8>
    c458:	9903      	ldr	r1, [sp, #12]
    c45a:	4291      	cmp	r1, r2
    c45c:	da00      	bge.n	c460 <mktime+0x124>
    c45e:	e0e1      	b.n	c624 <mktime+0x2e8>
    c460:	2501      	movs	r5, #1
    c462:	42b9      	cmp	r1, r7
    c464:	db00      	blt.n	c468 <mktime+0x12c>
    c466:	2500      	movs	r5, #0
    c468:	2e00      	cmp	r6, #0
    c46a:	db00      	blt.n	c46e <mktime+0x132>
    c46c:	e0a0      	b.n	c5b0 <mktime+0x274>
    c46e:	2d01      	cmp	r5, #1
    c470:	d000      	beq.n	c474 <mktime+0x138>
    c472:	e0da      	b.n	c62a <mktime+0x2ee>
    c474:	2501      	movs	r5, #1
    c476:	9b04      	ldr	r3, [sp, #16]
    c478:	6bde      	ldr	r6, [r3, #60]	; 0x3c
    c47a:	9b03      	ldr	r3, [sp, #12]
    c47c:	199e      	adds	r6, r3, r6
    c47e:	f001 f940 	bl	d702 <__tz_unlock>
    c482:	9801      	ldr	r0, [sp, #4]
    c484:	6225      	str	r5, [r4, #32]
    c486:	3004      	adds	r0, #4
    c488:	2107      	movs	r1, #7
    c48a:	f7fd f9a9 	bl	97e0 <__aeabi_idivmod>
    c48e:	2900      	cmp	r1, #0
    c490:	da00      	bge.n	c494 <mktime+0x158>
    c492:	e084      	b.n	c59e <mktime+0x262>
    c494:	61a1      	str	r1, [r4, #24]
    c496:	0030      	movs	r0, r6
    c498:	b007      	add	sp, #28
    c49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c49c:	236e      	movs	r3, #110	; 0x6e
    c49e:	e7a4      	b.n	c3ea <mktime+0xae>
    c4a0:	429d      	cmp	r5, r3
    c4a2:	d0ab      	beq.n	c3fc <mktime+0xc0>
    c4a4:	2645      	movs	r6, #69	; 0x45
    c4a6:	2703      	movs	r7, #3
    c4a8:	42ae      	cmp	r6, r5
    c4aa:	dc17      	bgt.n	c4dc <mktime+0x1a0>
    c4ac:	423d      	tst	r5, r7
    c4ae:	d130      	bne.n	c512 <mktime+0x1d6>
    c4b0:	2164      	movs	r1, #100	; 0x64
    c4b2:	0028      	movs	r0, r5
    c4b4:	f7fd f994 	bl	97e0 <__aeabi_idivmod>
    c4b8:	2900      	cmp	r1, #0
    c4ba:	d12c      	bne.n	c516 <mktime+0x1da>
    c4bc:	4b5e      	ldr	r3, [pc, #376]	; (c638 <mktime+0x2fc>)
    c4be:	3191      	adds	r1, #145	; 0x91
    c4c0:	18e8      	adds	r0, r5, r3
    c4c2:	31ff      	adds	r1, #255	; 0xff
    c4c4:	f7fd f98c 	bl	97e0 <__aeabi_idivmod>
    c4c8:	000b      	movs	r3, r1
    c4ca:	4259      	negs	r1, r3
    c4cc:	4159      	adcs	r1, r3
    c4ce:	316e      	adds	r1, #110	; 0x6e
    c4d0:	31ff      	adds	r1, #255	; 0xff
    c4d2:	9b01      	ldr	r3, [sp, #4]
    c4d4:	9502      	str	r5, [sp, #8]
    c4d6:	1a5b      	subs	r3, r3, r1
    c4d8:	9301      	str	r3, [sp, #4]
    c4da:	e78f      	b.n	c3fc <mktime+0xc0>
    c4dc:	423e      	tst	r6, r7
    c4de:	d116      	bne.n	c50e <mktime+0x1d2>
    c4e0:	2164      	movs	r1, #100	; 0x64
    c4e2:	0030      	movs	r0, r6
    c4e4:	f7fd f97c 	bl	97e0 <__aeabi_idivmod>
    c4e8:	23b7      	movs	r3, #183	; 0xb7
    c4ea:	005b      	lsls	r3, r3, #1
    c4ec:	2900      	cmp	r1, #0
    c4ee:	d109      	bne.n	c504 <mktime+0x1c8>
    c4f0:	4b51      	ldr	r3, [pc, #324]	; (c638 <mktime+0x2fc>)
    c4f2:	3191      	adds	r1, #145	; 0x91
    c4f4:	18f0      	adds	r0, r6, r3
    c4f6:	31ff      	adds	r1, #255	; 0xff
    c4f8:	f7fd f972 	bl	97e0 <__aeabi_idivmod>
    c4fc:	424b      	negs	r3, r1
    c4fe:	414b      	adcs	r3, r1
    c500:	336e      	adds	r3, #110	; 0x6e
    c502:	33ff      	adds	r3, #255	; 0xff
    c504:	9a01      	ldr	r2, [sp, #4]
    c506:	3e01      	subs	r6, #1
    c508:	1ad3      	subs	r3, r2, r3
    c50a:	9301      	str	r3, [sp, #4]
    c50c:	e7cc      	b.n	c4a8 <mktime+0x16c>
    c50e:	236e      	movs	r3, #110	; 0x6e
    c510:	e7f7      	b.n	c502 <mktime+0x1c6>
    c512:	216e      	movs	r1, #110	; 0x6e
    c514:	e7dc      	b.n	c4d0 <mktime+0x194>
    c516:	21b7      	movs	r1, #183	; 0xb7
    c518:	0049      	lsls	r1, r1, #1
    c51a:	e7da      	b.n	c4d2 <mktime+0x196>
    c51c:	f001 f842 	bl	d5a4 <__tzcalc_limits>
    c520:	2800      	cmp	r0, #0
    c522:	d000      	beq.n	c526 <mktime+0x1ea>
    c524:	e786      	b.n	c434 <mktime+0xf8>
    c526:	0035      	movs	r5, r6
    c528:	e7a1      	b.n	c46e <mktime+0x132>
    c52a:	9d03      	ldr	r5, [sp, #12]
    c52c:	1a09      	subs	r1, r1, r0
    c52e:	428d      	cmp	r5, r1
    c530:	dbf9      	blt.n	c526 <mktime+0x1ea>
    c532:	e78c      	b.n	c44e <mktime+0x112>
    c534:	9d03      	ldr	r5, [sp, #12]
    c536:	4295      	cmp	r5, r2
    c538:	da36      	bge.n	c5a8 <mktime+0x26c>
    c53a:	9a03      	ldr	r2, [sp, #12]
    c53c:	2501      	movs	r5, #1
    c53e:	42ba      	cmp	r2, r7
    c540:	da00      	bge.n	c544 <mktime+0x208>
    c542:	e791      	b.n	c468 <mktime+0x12c>
    c544:	000d      	movs	r5, r1
    c546:	e78f      	b.n	c468 <mktime+0x12c>
    c548:	2701      	movs	r7, #1
    c54a:	427f      	negs	r7, r7
    c54c:	e04b      	b.n	c5e6 <mktime+0x2aa>
    c54e:	21b6      	movs	r1, #182	; 0xb6
    c550:	0049      	lsls	r1, r1, #1
    c552:	61e1      	str	r1, [r4, #28]
    c554:	e78b      	b.n	c46e <mktime+0x132>
    c556:	216e      	movs	r1, #110	; 0x6e
    c558:	e062      	b.n	c620 <mktime+0x2e4>
    c55a:	9a02      	ldr	r2, [sp, #8]
    c55c:	421a      	tst	r2, r3
    c55e:	d117      	bne.n	c590 <mktime+0x254>
    c560:	2164      	movs	r1, #100	; 0x64
    c562:	0010      	movs	r0, r2
    c564:	f7fd f93c 	bl	97e0 <__aeabi_idivmod>
    c568:	2900      	cmp	r1, #0
    c56a:	d113      	bne.n	c594 <mktime+0x258>
    c56c:	4a32      	ldr	r2, [pc, #200]	; (c638 <mktime+0x2fc>)
    c56e:	9b02      	ldr	r3, [sp, #8]
    c570:	4694      	mov	ip, r2
    c572:	3191      	adds	r1, #145	; 0x91
    c574:	4463      	add	r3, ip
    c576:	0018      	movs	r0, r3
    c578:	31ff      	adds	r1, #255	; 0xff
    c57a:	f7fd f931 	bl	97e0 <__aeabi_idivmod>
    c57e:	000b      	movs	r3, r1
    c580:	4259      	negs	r1, r3
    c582:	4159      	adcs	r1, r3
    c584:	316e      	adds	r1, #110	; 0x6e
    c586:	31ff      	adds	r1, #255	; 0xff
    c588:	42b9      	cmp	r1, r7
    c58a:	dd06      	ble.n	c59a <mktime+0x25e>
    c58c:	61e7      	str	r7, [r4, #28]
    c58e:	e76e      	b.n	c46e <mktime+0x132>
    c590:	216e      	movs	r1, #110	; 0x6e
    c592:	e7f8      	b.n	c586 <mktime+0x24a>
    c594:	21b7      	movs	r1, #183	; 0xb7
    c596:	0049      	lsls	r1, r1, #1
    c598:	e7f6      	b.n	c588 <mktime+0x24c>
    c59a:	1a7f      	subs	r7, r7, r1
    c59c:	e7f6      	b.n	c58c <mktime+0x250>
    c59e:	3107      	adds	r1, #7
    c5a0:	e778      	b.n	c494 <mktime+0x158>
    c5a2:	2601      	movs	r6, #1
    c5a4:	4276      	negs	r6, r6
    c5a6:	e776      	b.n	c496 <mktime+0x15a>
    c5a8:	2501      	movs	r5, #1
    c5aa:	2e00      	cmp	r6, #0
    c5ac:	da00      	bge.n	c5b0 <mktime+0x274>
    c5ae:	e761      	b.n	c474 <mktime+0x138>
    c5b0:	406e      	eors	r6, r5
    c5b2:	2e01      	cmp	r6, #1
    c5b4:	d000      	beq.n	c5b8 <mktime+0x27c>
    c5b6:	e75a      	b.n	c46e <mktime+0x132>
    c5b8:	1a1b      	subs	r3, r3, r0
    c5ba:	2d00      	cmp	r5, #0
    c5bc:	d100      	bne.n	c5c0 <mktime+0x284>
    c5be:	425b      	negs	r3, r3
    c5c0:	6822      	ldr	r2, [r4, #0]
    c5c2:	0020      	movs	r0, r4
    c5c4:	18d2      	adds	r2, r2, r3
    c5c6:	6022      	str	r2, [r4, #0]
    c5c8:	9a03      	ldr	r2, [sp, #12]
    c5ca:	68e7      	ldr	r7, [r4, #12]
    c5cc:	18d3      	adds	r3, r2, r3
    c5ce:	9303      	str	r3, [sp, #12]
    c5d0:	f7ff fde8 	bl	c1a4 <validate_structure>
    c5d4:	68e3      	ldr	r3, [r4, #12]
    c5d6:	1bdf      	subs	r7, r3, r7
    c5d8:	d100      	bne.n	c5dc <mktime+0x2a0>
    c5da:	e748      	b.n	c46e <mktime+0x132>
    c5dc:	2f01      	cmp	r7, #1
    c5de:	dcb3      	bgt.n	c548 <mktime+0x20c>
    c5e0:	1c7b      	adds	r3, r7, #1
    c5e2:	da00      	bge.n	c5e6 <mktime+0x2aa>
    c5e4:	0037      	movs	r7, r6
    c5e6:	9b01      	ldr	r3, [sp, #4]
    c5e8:	69e2      	ldr	r2, [r4, #28]
    c5ea:	19db      	adds	r3, r3, r7
    c5ec:	9301      	str	r3, [sp, #4]
    c5ee:	2303      	movs	r3, #3
    c5f0:	18bf      	adds	r7, r7, r2
    c5f2:	d5b2      	bpl.n	c55a <mktime+0x21e>
    c5f4:	9a02      	ldr	r2, [sp, #8]
    c5f6:	1e50      	subs	r0, r2, #1
    c5f8:	4218      	tst	r0, r3
    c5fa:	d1a8      	bne.n	c54e <mktime+0x212>
    c5fc:	2164      	movs	r1, #100	; 0x64
    c5fe:	f7fd f8ef 	bl	97e0 <__aeabi_idivmod>
    c602:	2900      	cmp	r1, #0
    c604:	d1a7      	bne.n	c556 <mktime+0x21a>
    c606:	4a11      	ldr	r2, [pc, #68]	; (c64c <mktime+0x310>)
    c608:	9b02      	ldr	r3, [sp, #8]
    c60a:	4694      	mov	ip, r2
    c60c:	3191      	adds	r1, #145	; 0x91
    c60e:	4463      	add	r3, ip
    c610:	0018      	movs	r0, r3
    c612:	31ff      	adds	r1, #255	; 0xff
    c614:	f7fd f8e4 	bl	97e0 <__aeabi_idivmod>
    c618:	000b      	movs	r3, r1
    c61a:	4259      	negs	r1, r3
    c61c:	4159      	adcs	r1, r3
    c61e:	316d      	adds	r1, #109	; 0x6d
    c620:	31ff      	adds	r1, #255	; 0xff
    c622:	e796      	b.n	c552 <mktime+0x216>
    c624:	2500      	movs	r5, #0
    c626:	2e00      	cmp	r6, #0
    c628:	dac2      	bge.n	c5b0 <mktime+0x274>
    c62a:	9b04      	ldr	r3, [sp, #16]
    c62c:	6a1e      	ldr	r6, [r3, #32]
    c62e:	9b03      	ldr	r3, [sp, #12]
    c630:	199e      	adds	r6, r3, r6
    c632:	e724      	b.n	c47e <mktime+0x142>
    c634:	00012080 	.word	0x00012080
    c638:	0000076c 	.word	0x0000076c
    c63c:	00004e20 	.word	0x00004e20
    c640:	00002710 	.word	0x00002710
    c644:	00015180 	.word	0x00015180
    c648:	200022cc 	.word	0x200022cc
    c64c:	0000076b 	.word	0x0000076b

0000c650 <_free_r>:
    c650:	b570      	push	{r4, r5, r6, lr}
    c652:	0005      	movs	r5, r0
    c654:	2900      	cmp	r1, #0
    c656:	d010      	beq.n	c67a <_free_r+0x2a>
    c658:	1f0c      	subs	r4, r1, #4
    c65a:	6823      	ldr	r3, [r4, #0]
    c65c:	2b00      	cmp	r3, #0
    c65e:	da00      	bge.n	c662 <_free_r+0x12>
    c660:	18e4      	adds	r4, r4, r3
    c662:	0028      	movs	r0, r5
    c664:	f002 fbb7 	bl	edd6 <__malloc_lock>
    c668:	4a1d      	ldr	r2, [pc, #116]	; (c6e0 <_free_r+0x90>)
    c66a:	6813      	ldr	r3, [r2, #0]
    c66c:	2b00      	cmp	r3, #0
    c66e:	d105      	bne.n	c67c <_free_r+0x2c>
    c670:	6063      	str	r3, [r4, #4]
    c672:	6014      	str	r4, [r2, #0]
    c674:	0028      	movs	r0, r5
    c676:	f002 fbaf 	bl	edd8 <__malloc_unlock>
    c67a:	bd70      	pop	{r4, r5, r6, pc}
    c67c:	42a3      	cmp	r3, r4
    c67e:	d909      	bls.n	c694 <_free_r+0x44>
    c680:	6821      	ldr	r1, [r4, #0]
    c682:	1860      	adds	r0, r4, r1
    c684:	4283      	cmp	r3, r0
    c686:	d1f3      	bne.n	c670 <_free_r+0x20>
    c688:	6818      	ldr	r0, [r3, #0]
    c68a:	685b      	ldr	r3, [r3, #4]
    c68c:	1841      	adds	r1, r0, r1
    c68e:	6021      	str	r1, [r4, #0]
    c690:	e7ee      	b.n	c670 <_free_r+0x20>
    c692:	0013      	movs	r3, r2
    c694:	685a      	ldr	r2, [r3, #4]
    c696:	2a00      	cmp	r2, #0
    c698:	d001      	beq.n	c69e <_free_r+0x4e>
    c69a:	42a2      	cmp	r2, r4
    c69c:	d9f9      	bls.n	c692 <_free_r+0x42>
    c69e:	6819      	ldr	r1, [r3, #0]
    c6a0:	1858      	adds	r0, r3, r1
    c6a2:	42a0      	cmp	r0, r4
    c6a4:	d10b      	bne.n	c6be <_free_r+0x6e>
    c6a6:	6820      	ldr	r0, [r4, #0]
    c6a8:	1809      	adds	r1, r1, r0
    c6aa:	1858      	adds	r0, r3, r1
    c6ac:	6019      	str	r1, [r3, #0]
    c6ae:	4282      	cmp	r2, r0
    c6b0:	d1e0      	bne.n	c674 <_free_r+0x24>
    c6b2:	6810      	ldr	r0, [r2, #0]
    c6b4:	6852      	ldr	r2, [r2, #4]
    c6b6:	1841      	adds	r1, r0, r1
    c6b8:	6019      	str	r1, [r3, #0]
    c6ba:	605a      	str	r2, [r3, #4]
    c6bc:	e7da      	b.n	c674 <_free_r+0x24>
    c6be:	42a0      	cmp	r0, r4
    c6c0:	d902      	bls.n	c6c8 <_free_r+0x78>
    c6c2:	230c      	movs	r3, #12
    c6c4:	602b      	str	r3, [r5, #0]
    c6c6:	e7d5      	b.n	c674 <_free_r+0x24>
    c6c8:	6821      	ldr	r1, [r4, #0]
    c6ca:	1860      	adds	r0, r4, r1
    c6cc:	4282      	cmp	r2, r0
    c6ce:	d103      	bne.n	c6d8 <_free_r+0x88>
    c6d0:	6810      	ldr	r0, [r2, #0]
    c6d2:	6852      	ldr	r2, [r2, #4]
    c6d4:	1841      	adds	r1, r0, r1
    c6d6:	6021      	str	r1, [r4, #0]
    c6d8:	6062      	str	r2, [r4, #4]
    c6da:	605c      	str	r4, [r3, #4]
    c6dc:	e7ca      	b.n	c674 <_free_r+0x24>
    c6de:	46c0      	nop			; (mov r8, r8)
    c6e0:	200022a8 	.word	0x200022a8

0000c6e4 <_malloc_r>:
    c6e4:	2303      	movs	r3, #3
    c6e6:	b570      	push	{r4, r5, r6, lr}
    c6e8:	1ccd      	adds	r5, r1, #3
    c6ea:	439d      	bics	r5, r3
    c6ec:	3508      	adds	r5, #8
    c6ee:	0006      	movs	r6, r0
    c6f0:	2d0c      	cmp	r5, #12
    c6f2:	d21e      	bcs.n	c732 <_malloc_r+0x4e>
    c6f4:	250c      	movs	r5, #12
    c6f6:	42a9      	cmp	r1, r5
    c6f8:	d81d      	bhi.n	c736 <_malloc_r+0x52>
    c6fa:	0030      	movs	r0, r6
    c6fc:	f002 fb6b 	bl	edd6 <__malloc_lock>
    c700:	4a25      	ldr	r2, [pc, #148]	; (c798 <_malloc_r+0xb4>)
    c702:	6814      	ldr	r4, [r2, #0]
    c704:	0021      	movs	r1, r4
    c706:	2900      	cmp	r1, #0
    c708:	d119      	bne.n	c73e <_malloc_r+0x5a>
    c70a:	4c24      	ldr	r4, [pc, #144]	; (c79c <_malloc_r+0xb8>)
    c70c:	6823      	ldr	r3, [r4, #0]
    c70e:	2b00      	cmp	r3, #0
    c710:	d103      	bne.n	c71a <_malloc_r+0x36>
    c712:	0030      	movs	r0, r6
    c714:	f000 fe02 	bl	d31c <_sbrk_r>
    c718:	6020      	str	r0, [r4, #0]
    c71a:	0029      	movs	r1, r5
    c71c:	0030      	movs	r0, r6
    c71e:	f000 fdfd 	bl	d31c <_sbrk_r>
    c722:	1c43      	adds	r3, r0, #1
    c724:	d12c      	bne.n	c780 <_malloc_r+0x9c>
    c726:	230c      	movs	r3, #12
    c728:	0030      	movs	r0, r6
    c72a:	6033      	str	r3, [r6, #0]
    c72c:	f002 fb54 	bl	edd8 <__malloc_unlock>
    c730:	e003      	b.n	c73a <_malloc_r+0x56>
    c732:	2d00      	cmp	r5, #0
    c734:	dadf      	bge.n	c6f6 <_malloc_r+0x12>
    c736:	230c      	movs	r3, #12
    c738:	6033      	str	r3, [r6, #0]
    c73a:	2000      	movs	r0, #0
    c73c:	bd70      	pop	{r4, r5, r6, pc}
    c73e:	680b      	ldr	r3, [r1, #0]
    c740:	1b5b      	subs	r3, r3, r5
    c742:	d41a      	bmi.n	c77a <_malloc_r+0x96>
    c744:	2b0b      	cmp	r3, #11
    c746:	d903      	bls.n	c750 <_malloc_r+0x6c>
    c748:	600b      	str	r3, [r1, #0]
    c74a:	18cc      	adds	r4, r1, r3
    c74c:	6025      	str	r5, [r4, #0]
    c74e:	e003      	b.n	c758 <_malloc_r+0x74>
    c750:	428c      	cmp	r4, r1
    c752:	d10e      	bne.n	c772 <_malloc_r+0x8e>
    c754:	6863      	ldr	r3, [r4, #4]
    c756:	6013      	str	r3, [r2, #0]
    c758:	0030      	movs	r0, r6
    c75a:	f002 fb3d 	bl	edd8 <__malloc_unlock>
    c75e:	0020      	movs	r0, r4
    c760:	2207      	movs	r2, #7
    c762:	300b      	adds	r0, #11
    c764:	1d23      	adds	r3, r4, #4
    c766:	4390      	bics	r0, r2
    c768:	1ac3      	subs	r3, r0, r3
    c76a:	d0e7      	beq.n	c73c <_malloc_r+0x58>
    c76c:	425a      	negs	r2, r3
    c76e:	50e2      	str	r2, [r4, r3]
    c770:	e7e4      	b.n	c73c <_malloc_r+0x58>
    c772:	684b      	ldr	r3, [r1, #4]
    c774:	6063      	str	r3, [r4, #4]
    c776:	000c      	movs	r4, r1
    c778:	e7ee      	b.n	c758 <_malloc_r+0x74>
    c77a:	000c      	movs	r4, r1
    c77c:	6849      	ldr	r1, [r1, #4]
    c77e:	e7c2      	b.n	c706 <_malloc_r+0x22>
    c780:	2303      	movs	r3, #3
    c782:	1cc4      	adds	r4, r0, #3
    c784:	439c      	bics	r4, r3
    c786:	42a0      	cmp	r0, r4
    c788:	d0e0      	beq.n	c74c <_malloc_r+0x68>
    c78a:	1a21      	subs	r1, r4, r0
    c78c:	0030      	movs	r0, r6
    c78e:	f000 fdc5 	bl	d31c <_sbrk_r>
    c792:	1c43      	adds	r3, r0, #1
    c794:	d1da      	bne.n	c74c <_malloc_r+0x68>
    c796:	e7c6      	b.n	c726 <_malloc_r+0x42>
    c798:	200022a8 	.word	0x200022a8
    c79c:	200022ac 	.word	0x200022ac

0000c7a0 <__sfputc_r>:
    c7a0:	6893      	ldr	r3, [r2, #8]
    c7a2:	b510      	push	{r4, lr}
    c7a4:	3b01      	subs	r3, #1
    c7a6:	6093      	str	r3, [r2, #8]
    c7a8:	2b00      	cmp	r3, #0
    c7aa:	da05      	bge.n	c7b8 <__sfputc_r+0x18>
    c7ac:	6994      	ldr	r4, [r2, #24]
    c7ae:	42a3      	cmp	r3, r4
    c7b0:	db08      	blt.n	c7c4 <__sfputc_r+0x24>
    c7b2:	b2cb      	uxtb	r3, r1
    c7b4:	2b0a      	cmp	r3, #10
    c7b6:	d005      	beq.n	c7c4 <__sfputc_r+0x24>
    c7b8:	6813      	ldr	r3, [r2, #0]
    c7ba:	1c58      	adds	r0, r3, #1
    c7bc:	6010      	str	r0, [r2, #0]
    c7be:	7019      	strb	r1, [r3, #0]
    c7c0:	b2c8      	uxtb	r0, r1
    c7c2:	bd10      	pop	{r4, pc}
    c7c4:	f001 f948 	bl	da58 <__swbuf_r>
    c7c8:	e7fb      	b.n	c7c2 <__sfputc_r+0x22>

0000c7ca <__sfputs_r>:
    c7ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7cc:	0006      	movs	r6, r0
    c7ce:	000f      	movs	r7, r1
    c7d0:	0014      	movs	r4, r2
    c7d2:	18d5      	adds	r5, r2, r3
    c7d4:	42ac      	cmp	r4, r5
    c7d6:	d101      	bne.n	c7dc <__sfputs_r+0x12>
    c7d8:	2000      	movs	r0, #0
    c7da:	e007      	b.n	c7ec <__sfputs_r+0x22>
    c7dc:	7821      	ldrb	r1, [r4, #0]
    c7de:	003a      	movs	r2, r7
    c7e0:	0030      	movs	r0, r6
    c7e2:	f7ff ffdd 	bl	c7a0 <__sfputc_r>
    c7e6:	3401      	adds	r4, #1
    c7e8:	1c43      	adds	r3, r0, #1
    c7ea:	d1f3      	bne.n	c7d4 <__sfputs_r+0xa>
    c7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000c7f0 <_vfiprintf_r>:
    c7f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7f2:	b09f      	sub	sp, #124	; 0x7c
    c7f4:	0006      	movs	r6, r0
    c7f6:	000f      	movs	r7, r1
    c7f8:	0014      	movs	r4, r2
    c7fa:	9305      	str	r3, [sp, #20]
    c7fc:	2800      	cmp	r0, #0
    c7fe:	d004      	beq.n	c80a <_vfiprintf_r+0x1a>
    c800:	6983      	ldr	r3, [r0, #24]
    c802:	2b00      	cmp	r3, #0
    c804:	d101      	bne.n	c80a <_vfiprintf_r+0x1a>
    c806:	f002 f987 	bl	eb18 <__sinit>
    c80a:	4b7f      	ldr	r3, [pc, #508]	; (ca08 <_vfiprintf_r+0x218>)
    c80c:	429f      	cmp	r7, r3
    c80e:	d15c      	bne.n	c8ca <_vfiprintf_r+0xda>
    c810:	6877      	ldr	r7, [r6, #4]
    c812:	89bb      	ldrh	r3, [r7, #12]
    c814:	071b      	lsls	r3, r3, #28
    c816:	d562      	bpl.n	c8de <_vfiprintf_r+0xee>
    c818:	693b      	ldr	r3, [r7, #16]
    c81a:	2b00      	cmp	r3, #0
    c81c:	d05f      	beq.n	c8de <_vfiprintf_r+0xee>
    c81e:	2300      	movs	r3, #0
    c820:	ad06      	add	r5, sp, #24
    c822:	616b      	str	r3, [r5, #20]
    c824:	3320      	adds	r3, #32
    c826:	766b      	strb	r3, [r5, #25]
    c828:	3310      	adds	r3, #16
    c82a:	76ab      	strb	r3, [r5, #26]
    c82c:	9402      	str	r4, [sp, #8]
    c82e:	9c02      	ldr	r4, [sp, #8]
    c830:	7823      	ldrb	r3, [r4, #0]
    c832:	2b00      	cmp	r3, #0
    c834:	d15d      	bne.n	c8f2 <_vfiprintf_r+0x102>
    c836:	9b02      	ldr	r3, [sp, #8]
    c838:	1ae3      	subs	r3, r4, r3
    c83a:	9304      	str	r3, [sp, #16]
    c83c:	d00d      	beq.n	c85a <_vfiprintf_r+0x6a>
    c83e:	9b04      	ldr	r3, [sp, #16]
    c840:	9a02      	ldr	r2, [sp, #8]
    c842:	0039      	movs	r1, r7
    c844:	0030      	movs	r0, r6
    c846:	f7ff ffc0 	bl	c7ca <__sfputs_r>
    c84a:	1c43      	adds	r3, r0, #1
    c84c:	d100      	bne.n	c850 <_vfiprintf_r+0x60>
    c84e:	e0cc      	b.n	c9ea <_vfiprintf_r+0x1fa>
    c850:	696a      	ldr	r2, [r5, #20]
    c852:	9b04      	ldr	r3, [sp, #16]
    c854:	4694      	mov	ip, r2
    c856:	4463      	add	r3, ip
    c858:	616b      	str	r3, [r5, #20]
    c85a:	7823      	ldrb	r3, [r4, #0]
    c85c:	2b00      	cmp	r3, #0
    c85e:	d100      	bne.n	c862 <_vfiprintf_r+0x72>
    c860:	e0c3      	b.n	c9ea <_vfiprintf_r+0x1fa>
    c862:	2201      	movs	r2, #1
    c864:	2300      	movs	r3, #0
    c866:	4252      	negs	r2, r2
    c868:	606a      	str	r2, [r5, #4]
    c86a:	a902      	add	r1, sp, #8
    c86c:	3254      	adds	r2, #84	; 0x54
    c86e:	1852      	adds	r2, r2, r1
    c870:	3401      	adds	r4, #1
    c872:	602b      	str	r3, [r5, #0]
    c874:	60eb      	str	r3, [r5, #12]
    c876:	60ab      	str	r3, [r5, #8]
    c878:	7013      	strb	r3, [r2, #0]
    c87a:	65ab      	str	r3, [r5, #88]	; 0x58
    c87c:	7821      	ldrb	r1, [r4, #0]
    c87e:	2205      	movs	r2, #5
    c880:	4862      	ldr	r0, [pc, #392]	; (ca0c <_vfiprintf_r+0x21c>)
    c882:	f002 fa9d 	bl	edc0 <memchr>
    c886:	1c63      	adds	r3, r4, #1
    c888:	469c      	mov	ip, r3
    c88a:	2800      	cmp	r0, #0
    c88c:	d135      	bne.n	c8fa <_vfiprintf_r+0x10a>
    c88e:	6829      	ldr	r1, [r5, #0]
    c890:	06cb      	lsls	r3, r1, #27
    c892:	d504      	bpl.n	c89e <_vfiprintf_r+0xae>
    c894:	2353      	movs	r3, #83	; 0x53
    c896:	aa02      	add	r2, sp, #8
    c898:	3020      	adds	r0, #32
    c89a:	189b      	adds	r3, r3, r2
    c89c:	7018      	strb	r0, [r3, #0]
    c89e:	070b      	lsls	r3, r1, #28
    c8a0:	d504      	bpl.n	c8ac <_vfiprintf_r+0xbc>
    c8a2:	2353      	movs	r3, #83	; 0x53
    c8a4:	202b      	movs	r0, #43	; 0x2b
    c8a6:	aa02      	add	r2, sp, #8
    c8a8:	189b      	adds	r3, r3, r2
    c8aa:	7018      	strb	r0, [r3, #0]
    c8ac:	7823      	ldrb	r3, [r4, #0]
    c8ae:	2b2a      	cmp	r3, #42	; 0x2a
    c8b0:	d02c      	beq.n	c90c <_vfiprintf_r+0x11c>
    c8b2:	2000      	movs	r0, #0
    c8b4:	210a      	movs	r1, #10
    c8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c8b8:	7822      	ldrb	r2, [r4, #0]
    c8ba:	3a30      	subs	r2, #48	; 0x30
    c8bc:	2a09      	cmp	r2, #9
    c8be:	d800      	bhi.n	c8c2 <_vfiprintf_r+0xd2>
    c8c0:	e06b      	b.n	c99a <_vfiprintf_r+0x1aa>
    c8c2:	2800      	cmp	r0, #0
    c8c4:	d02a      	beq.n	c91c <_vfiprintf_r+0x12c>
    c8c6:	9309      	str	r3, [sp, #36]	; 0x24
    c8c8:	e028      	b.n	c91c <_vfiprintf_r+0x12c>
    c8ca:	4b51      	ldr	r3, [pc, #324]	; (ca10 <_vfiprintf_r+0x220>)
    c8cc:	429f      	cmp	r7, r3
    c8ce:	d101      	bne.n	c8d4 <_vfiprintf_r+0xe4>
    c8d0:	68b7      	ldr	r7, [r6, #8]
    c8d2:	e79e      	b.n	c812 <_vfiprintf_r+0x22>
    c8d4:	4b4f      	ldr	r3, [pc, #316]	; (ca14 <_vfiprintf_r+0x224>)
    c8d6:	429f      	cmp	r7, r3
    c8d8:	d19b      	bne.n	c812 <_vfiprintf_r+0x22>
    c8da:	68f7      	ldr	r7, [r6, #12]
    c8dc:	e799      	b.n	c812 <_vfiprintf_r+0x22>
    c8de:	0039      	movs	r1, r7
    c8e0:	0030      	movs	r0, r6
    c8e2:	f001 f91b 	bl	db1c <__swsetup_r>
    c8e6:	2800      	cmp	r0, #0
    c8e8:	d099      	beq.n	c81e <_vfiprintf_r+0x2e>
    c8ea:	2001      	movs	r0, #1
    c8ec:	4240      	negs	r0, r0
    c8ee:	b01f      	add	sp, #124	; 0x7c
    c8f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c8f2:	2b25      	cmp	r3, #37	; 0x25
    c8f4:	d09f      	beq.n	c836 <_vfiprintf_r+0x46>
    c8f6:	3401      	adds	r4, #1
    c8f8:	e79a      	b.n	c830 <_vfiprintf_r+0x40>
    c8fa:	4b44      	ldr	r3, [pc, #272]	; (ca0c <_vfiprintf_r+0x21c>)
    c8fc:	6829      	ldr	r1, [r5, #0]
    c8fe:	1ac0      	subs	r0, r0, r3
    c900:	2301      	movs	r3, #1
    c902:	4083      	lsls	r3, r0
    c904:	430b      	orrs	r3, r1
    c906:	602b      	str	r3, [r5, #0]
    c908:	4664      	mov	r4, ip
    c90a:	e7b7      	b.n	c87c <_vfiprintf_r+0x8c>
    c90c:	9b05      	ldr	r3, [sp, #20]
    c90e:	1d18      	adds	r0, r3, #4
    c910:	681b      	ldr	r3, [r3, #0]
    c912:	9005      	str	r0, [sp, #20]
    c914:	2b00      	cmp	r3, #0
    c916:	db3a      	blt.n	c98e <_vfiprintf_r+0x19e>
    c918:	9309      	str	r3, [sp, #36]	; 0x24
    c91a:	4664      	mov	r4, ip
    c91c:	7823      	ldrb	r3, [r4, #0]
    c91e:	2b2e      	cmp	r3, #46	; 0x2e
    c920:	d10b      	bne.n	c93a <_vfiprintf_r+0x14a>
    c922:	7863      	ldrb	r3, [r4, #1]
    c924:	1c62      	adds	r2, r4, #1
    c926:	2b2a      	cmp	r3, #42	; 0x2a
    c928:	d13f      	bne.n	c9aa <_vfiprintf_r+0x1ba>
    c92a:	9b05      	ldr	r3, [sp, #20]
    c92c:	3402      	adds	r4, #2
    c92e:	1d1a      	adds	r2, r3, #4
    c930:	681b      	ldr	r3, [r3, #0]
    c932:	9205      	str	r2, [sp, #20]
    c934:	2b00      	cmp	r3, #0
    c936:	db35      	blt.n	c9a4 <_vfiprintf_r+0x1b4>
    c938:	9307      	str	r3, [sp, #28]
    c93a:	7821      	ldrb	r1, [r4, #0]
    c93c:	2203      	movs	r2, #3
    c93e:	4836      	ldr	r0, [pc, #216]	; (ca18 <_vfiprintf_r+0x228>)
    c940:	f002 fa3e 	bl	edc0 <memchr>
    c944:	2800      	cmp	r0, #0
    c946:	d007      	beq.n	c958 <_vfiprintf_r+0x168>
    c948:	4b33      	ldr	r3, [pc, #204]	; (ca18 <_vfiprintf_r+0x228>)
    c94a:	682a      	ldr	r2, [r5, #0]
    c94c:	1ac0      	subs	r0, r0, r3
    c94e:	2340      	movs	r3, #64	; 0x40
    c950:	4083      	lsls	r3, r0
    c952:	4313      	orrs	r3, r2
    c954:	602b      	str	r3, [r5, #0]
    c956:	3401      	adds	r4, #1
    c958:	7821      	ldrb	r1, [r4, #0]
    c95a:	1c63      	adds	r3, r4, #1
    c95c:	2206      	movs	r2, #6
    c95e:	482f      	ldr	r0, [pc, #188]	; (ca1c <_vfiprintf_r+0x22c>)
    c960:	9302      	str	r3, [sp, #8]
    c962:	7629      	strb	r1, [r5, #24]
    c964:	f002 fa2c 	bl	edc0 <memchr>
    c968:	2800      	cmp	r0, #0
    c96a:	d044      	beq.n	c9f6 <_vfiprintf_r+0x206>
    c96c:	4b2c      	ldr	r3, [pc, #176]	; (ca20 <_vfiprintf_r+0x230>)
    c96e:	2b00      	cmp	r3, #0
    c970:	d12f      	bne.n	c9d2 <_vfiprintf_r+0x1e2>
    c972:	6829      	ldr	r1, [r5, #0]
    c974:	9b05      	ldr	r3, [sp, #20]
    c976:	2207      	movs	r2, #7
    c978:	05c9      	lsls	r1, r1, #23
    c97a:	d528      	bpl.n	c9ce <_vfiprintf_r+0x1de>
    c97c:	189b      	adds	r3, r3, r2
    c97e:	4393      	bics	r3, r2
    c980:	3308      	adds	r3, #8
    c982:	9305      	str	r3, [sp, #20]
    c984:	696b      	ldr	r3, [r5, #20]
    c986:	9a03      	ldr	r2, [sp, #12]
    c988:	189b      	adds	r3, r3, r2
    c98a:	616b      	str	r3, [r5, #20]
    c98c:	e74f      	b.n	c82e <_vfiprintf_r+0x3e>
    c98e:	425b      	negs	r3, r3
    c990:	60eb      	str	r3, [r5, #12]
    c992:	2302      	movs	r3, #2
    c994:	430b      	orrs	r3, r1
    c996:	602b      	str	r3, [r5, #0]
    c998:	e7bf      	b.n	c91a <_vfiprintf_r+0x12a>
    c99a:	434b      	muls	r3, r1
    c99c:	3401      	adds	r4, #1
    c99e:	189b      	adds	r3, r3, r2
    c9a0:	2001      	movs	r0, #1
    c9a2:	e789      	b.n	c8b8 <_vfiprintf_r+0xc8>
    c9a4:	2301      	movs	r3, #1
    c9a6:	425b      	negs	r3, r3
    c9a8:	e7c6      	b.n	c938 <_vfiprintf_r+0x148>
    c9aa:	2300      	movs	r3, #0
    c9ac:	0014      	movs	r4, r2
    c9ae:	200a      	movs	r0, #10
    c9b0:	001a      	movs	r2, r3
    c9b2:	606b      	str	r3, [r5, #4]
    c9b4:	7821      	ldrb	r1, [r4, #0]
    c9b6:	3930      	subs	r1, #48	; 0x30
    c9b8:	2909      	cmp	r1, #9
    c9ba:	d903      	bls.n	c9c4 <_vfiprintf_r+0x1d4>
    c9bc:	2b00      	cmp	r3, #0
    c9be:	d0bc      	beq.n	c93a <_vfiprintf_r+0x14a>
    c9c0:	9207      	str	r2, [sp, #28]
    c9c2:	e7ba      	b.n	c93a <_vfiprintf_r+0x14a>
    c9c4:	4342      	muls	r2, r0
    c9c6:	3401      	adds	r4, #1
    c9c8:	1852      	adds	r2, r2, r1
    c9ca:	2301      	movs	r3, #1
    c9cc:	e7f2      	b.n	c9b4 <_vfiprintf_r+0x1c4>
    c9ce:	3307      	adds	r3, #7
    c9d0:	e7d5      	b.n	c97e <_vfiprintf_r+0x18e>
    c9d2:	ab05      	add	r3, sp, #20
    c9d4:	9300      	str	r3, [sp, #0]
    c9d6:	003a      	movs	r2, r7
    c9d8:	4b12      	ldr	r3, [pc, #72]	; (ca24 <_vfiprintf_r+0x234>)
    c9da:	0029      	movs	r1, r5
    c9dc:	0030      	movs	r0, r6
    c9de:	f000 f8bf 	bl	cb60 <_printf_float>
    c9e2:	9003      	str	r0, [sp, #12]
    c9e4:	9b03      	ldr	r3, [sp, #12]
    c9e6:	3301      	adds	r3, #1
    c9e8:	d1cc      	bne.n	c984 <_vfiprintf_r+0x194>
    c9ea:	89bb      	ldrh	r3, [r7, #12]
    c9ec:	065b      	lsls	r3, r3, #25
    c9ee:	d500      	bpl.n	c9f2 <_vfiprintf_r+0x202>
    c9f0:	e77b      	b.n	c8ea <_vfiprintf_r+0xfa>
    c9f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c9f4:	e77b      	b.n	c8ee <_vfiprintf_r+0xfe>
    c9f6:	ab05      	add	r3, sp, #20
    c9f8:	9300      	str	r3, [sp, #0]
    c9fa:	003a      	movs	r2, r7
    c9fc:	4b09      	ldr	r3, [pc, #36]	; (ca24 <_vfiprintf_r+0x234>)
    c9fe:	0029      	movs	r1, r5
    ca00:	0030      	movs	r0, r6
    ca02:	f000 fb67 	bl	d0d4 <_printf_i>
    ca06:	e7ec      	b.n	c9e2 <_vfiprintf_r+0x1f2>
    ca08:	00012260 	.word	0x00012260
    ca0c:	000120b0 	.word	0x000120b0
    ca10:	00012280 	.word	0x00012280
    ca14:	00012240 	.word	0x00012240
    ca18:	000120b6 	.word	0x000120b6
    ca1c:	000120ba 	.word	0x000120ba
    ca20:	0000cb61 	.word	0x0000cb61
    ca24:	0000c7cb 	.word	0x0000c7cb

0000ca28 <__cvt>:
    ca28:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca2a:	b08b      	sub	sp, #44	; 0x2c
    ca2c:	0014      	movs	r4, r2
    ca2e:	1e1d      	subs	r5, r3, #0
    ca30:	9912      	ldr	r1, [sp, #72]	; 0x48
    ca32:	da53      	bge.n	cadc <__cvt+0xb4>
    ca34:	2480      	movs	r4, #128	; 0x80
    ca36:	0624      	lsls	r4, r4, #24
    ca38:	191b      	adds	r3, r3, r4
    ca3a:	001d      	movs	r5, r3
    ca3c:	0014      	movs	r4, r2
    ca3e:	232d      	movs	r3, #45	; 0x2d
    ca40:	700b      	strb	r3, [r1, #0]
    ca42:	2320      	movs	r3, #32
    ca44:	9e14      	ldr	r6, [sp, #80]	; 0x50
    ca46:	2203      	movs	r2, #3
    ca48:	439e      	bics	r6, r3
    ca4a:	2e46      	cmp	r6, #70	; 0x46
    ca4c:	d007      	beq.n	ca5e <__cvt+0x36>
    ca4e:	0033      	movs	r3, r6
    ca50:	3b45      	subs	r3, #69	; 0x45
    ca52:	4259      	negs	r1, r3
    ca54:	414b      	adcs	r3, r1
    ca56:	9910      	ldr	r1, [sp, #64]	; 0x40
    ca58:	3a01      	subs	r2, #1
    ca5a:	18cb      	adds	r3, r1, r3
    ca5c:	9310      	str	r3, [sp, #64]	; 0x40
    ca5e:	ab09      	add	r3, sp, #36	; 0x24
    ca60:	9304      	str	r3, [sp, #16]
    ca62:	ab08      	add	r3, sp, #32
    ca64:	9303      	str	r3, [sp, #12]
    ca66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ca68:	9200      	str	r2, [sp, #0]
    ca6a:	9302      	str	r3, [sp, #8]
    ca6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ca6e:	0022      	movs	r2, r4
    ca70:	9301      	str	r3, [sp, #4]
    ca72:	002b      	movs	r3, r5
    ca74:	f001 f970 	bl	dd58 <_dtoa_r>
    ca78:	0007      	movs	r7, r0
    ca7a:	2e47      	cmp	r6, #71	; 0x47
    ca7c:	d102      	bne.n	ca84 <__cvt+0x5c>
    ca7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ca80:	07db      	lsls	r3, r3, #31
    ca82:	d524      	bpl.n	cace <__cvt+0xa6>
    ca84:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ca86:	18fb      	adds	r3, r7, r3
    ca88:	9307      	str	r3, [sp, #28]
    ca8a:	2e46      	cmp	r6, #70	; 0x46
    ca8c:	d114      	bne.n	cab8 <__cvt+0x90>
    ca8e:	783b      	ldrb	r3, [r7, #0]
    ca90:	2b30      	cmp	r3, #48	; 0x30
    ca92:	d10c      	bne.n	caae <__cvt+0x86>
    ca94:	2200      	movs	r2, #0
    ca96:	2300      	movs	r3, #0
    ca98:	0020      	movs	r0, r4
    ca9a:	0029      	movs	r1, r5
    ca9c:	f7fc feb6 	bl	980c <__aeabi_dcmpeq>
    caa0:	2800      	cmp	r0, #0
    caa2:	d104      	bne.n	caae <__cvt+0x86>
    caa4:	2301      	movs	r3, #1
    caa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
    caa8:	1a9b      	subs	r3, r3, r2
    caaa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    caac:	6013      	str	r3, [r2, #0]
    caae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cab0:	9a07      	ldr	r2, [sp, #28]
    cab2:	681b      	ldr	r3, [r3, #0]
    cab4:	18d3      	adds	r3, r2, r3
    cab6:	9307      	str	r3, [sp, #28]
    cab8:	2200      	movs	r2, #0
    caba:	2300      	movs	r3, #0
    cabc:	0020      	movs	r0, r4
    cabe:	0029      	movs	r1, r5
    cac0:	f7fc fea4 	bl	980c <__aeabi_dcmpeq>
    cac4:	2230      	movs	r2, #48	; 0x30
    cac6:	2800      	cmp	r0, #0
    cac8:	d00d      	beq.n	cae6 <__cvt+0xbe>
    caca:	9b07      	ldr	r3, [sp, #28]
    cacc:	9309      	str	r3, [sp, #36]	; 0x24
    cace:	0038      	movs	r0, r7
    cad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cad2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    cad4:	1bdb      	subs	r3, r3, r7
    cad6:	6013      	str	r3, [r2, #0]
    cad8:	b00b      	add	sp, #44	; 0x2c
    cada:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cadc:	2300      	movs	r3, #0
    cade:	e7af      	b.n	ca40 <__cvt+0x18>
    cae0:	1c59      	adds	r1, r3, #1
    cae2:	9109      	str	r1, [sp, #36]	; 0x24
    cae4:	701a      	strb	r2, [r3, #0]
    cae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cae8:	9907      	ldr	r1, [sp, #28]
    caea:	4299      	cmp	r1, r3
    caec:	d8f8      	bhi.n	cae0 <__cvt+0xb8>
    caee:	e7ee      	b.n	cace <__cvt+0xa6>

0000caf0 <__exponent>:
    caf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    caf2:	232b      	movs	r3, #43	; 0x2b
    caf4:	b085      	sub	sp, #20
    caf6:	0007      	movs	r7, r0
    caf8:	000c      	movs	r4, r1
    cafa:	7002      	strb	r2, [r0, #0]
    cafc:	1c86      	adds	r6, r0, #2
    cafe:	2900      	cmp	r1, #0
    cb00:	da01      	bge.n	cb06 <__exponent+0x16>
    cb02:	232d      	movs	r3, #45	; 0x2d
    cb04:	424c      	negs	r4, r1
    cb06:	707b      	strb	r3, [r7, #1]
    cb08:	2c09      	cmp	r4, #9
    cb0a:	dd23      	ble.n	cb54 <__exponent+0x64>
    cb0c:	ab02      	add	r3, sp, #8
    cb0e:	1ddd      	adds	r5, r3, #7
    cb10:	1e6b      	subs	r3, r5, #1
    cb12:	0020      	movs	r0, r4
    cb14:	210a      	movs	r1, #10
    cb16:	9301      	str	r3, [sp, #4]
    cb18:	f7fc fe62 	bl	97e0 <__aeabi_idivmod>
    cb1c:	1e6b      	subs	r3, r5, #1
    cb1e:	3130      	adds	r1, #48	; 0x30
    cb20:	7019      	strb	r1, [r3, #0]
    cb22:	0020      	movs	r0, r4
    cb24:	210a      	movs	r1, #10
    cb26:	f7fc fd75 	bl	9614 <__divsi3>
    cb2a:	0004      	movs	r4, r0
    cb2c:	2809      	cmp	r0, #9
    cb2e:	dc0a      	bgt.n	cb46 <__exponent+0x56>
    cb30:	3d02      	subs	r5, #2
    cb32:	3430      	adds	r4, #48	; 0x30
    cb34:	702c      	strb	r4, [r5, #0]
    cb36:	ab02      	add	r3, sp, #8
    cb38:	3307      	adds	r3, #7
    cb3a:	0030      	movs	r0, r6
    cb3c:	42ab      	cmp	r3, r5
    cb3e:	d804      	bhi.n	cb4a <__exponent+0x5a>
    cb40:	1bc0      	subs	r0, r0, r7
    cb42:	b005      	add	sp, #20
    cb44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cb46:	9d01      	ldr	r5, [sp, #4]
    cb48:	e7e2      	b.n	cb10 <__exponent+0x20>
    cb4a:	782b      	ldrb	r3, [r5, #0]
    cb4c:	3501      	adds	r5, #1
    cb4e:	7033      	strb	r3, [r6, #0]
    cb50:	3601      	adds	r6, #1
    cb52:	e7f0      	b.n	cb36 <__exponent+0x46>
    cb54:	2330      	movs	r3, #48	; 0x30
    cb56:	18e4      	adds	r4, r4, r3
    cb58:	7033      	strb	r3, [r6, #0]
    cb5a:	1cb0      	adds	r0, r6, #2
    cb5c:	7074      	strb	r4, [r6, #1]
    cb5e:	e7ef      	b.n	cb40 <__exponent+0x50>

0000cb60 <_printf_float>:
    cb60:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb62:	b095      	sub	sp, #84	; 0x54
    cb64:	000c      	movs	r4, r1
    cb66:	920a      	str	r2, [sp, #40]	; 0x28
    cb68:	930b      	str	r3, [sp, #44]	; 0x2c
    cb6a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    cb6c:	9009      	str	r0, [sp, #36]	; 0x24
    cb6e:	f002 f8af 	bl	ecd0 <_localeconv_r>
    cb72:	6803      	ldr	r3, [r0, #0]
    cb74:	0018      	movs	r0, r3
    cb76:	930d      	str	r3, [sp, #52]	; 0x34
    cb78:	f000 fc23 	bl	d3c2 <strlen>
    cb7c:	2300      	movs	r3, #0
    cb7e:	9312      	str	r3, [sp, #72]	; 0x48
    cb80:	6823      	ldr	r3, [r4, #0]
    cb82:	900e      	str	r0, [sp, #56]	; 0x38
    cb84:	930c      	str	r3, [sp, #48]	; 0x30
    cb86:	990c      	ldr	r1, [sp, #48]	; 0x30
    cb88:	7e27      	ldrb	r7, [r4, #24]
    cb8a:	682b      	ldr	r3, [r5, #0]
    cb8c:	2207      	movs	r2, #7
    cb8e:	05c9      	lsls	r1, r1, #23
    cb90:	d547      	bpl.n	cc22 <_printf_float+0xc2>
    cb92:	189b      	adds	r3, r3, r2
    cb94:	4393      	bics	r3, r2
    cb96:	001a      	movs	r2, r3
    cb98:	3208      	adds	r2, #8
    cb9a:	602a      	str	r2, [r5, #0]
    cb9c:	681a      	ldr	r2, [r3, #0]
    cb9e:	685b      	ldr	r3, [r3, #4]
    cba0:	64a2      	str	r2, [r4, #72]	; 0x48
    cba2:	64e3      	str	r3, [r4, #76]	; 0x4c
    cba4:	2201      	movs	r2, #1
    cba6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
    cba8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
    cbaa:	006b      	lsls	r3, r5, #1
    cbac:	085b      	lsrs	r3, r3, #1
    cbae:	930f      	str	r3, [sp, #60]	; 0x3c
    cbb0:	4252      	negs	r2, r2
    cbb2:	4ba7      	ldr	r3, [pc, #668]	; (ce50 <_printf_float+0x2f0>)
    cbb4:	0030      	movs	r0, r6
    cbb6:	990f      	ldr	r1, [sp, #60]	; 0x3c
    cbb8:	f7fe ff92 	bl	bae0 <__aeabi_dcmpun>
    cbbc:	2800      	cmp	r0, #0
    cbbe:	d000      	beq.n	cbc2 <_printf_float+0x62>
    cbc0:	e206      	b.n	cfd0 <_printf_float+0x470>
    cbc2:	2201      	movs	r2, #1
    cbc4:	4ba2      	ldr	r3, [pc, #648]	; (ce50 <_printf_float+0x2f0>)
    cbc6:	4252      	negs	r2, r2
    cbc8:	0030      	movs	r0, r6
    cbca:	990f      	ldr	r1, [sp, #60]	; 0x3c
    cbcc:	f7fc fe2e 	bl	982c <__aeabi_dcmple>
    cbd0:	2800      	cmp	r0, #0
    cbd2:	d000      	beq.n	cbd6 <_printf_float+0x76>
    cbd4:	e1fc      	b.n	cfd0 <_printf_float+0x470>
    cbd6:	2200      	movs	r2, #0
    cbd8:	2300      	movs	r3, #0
    cbda:	0030      	movs	r0, r6
    cbdc:	0029      	movs	r1, r5
    cbde:	f7fc fe1b 	bl	9818 <__aeabi_dcmplt>
    cbe2:	2800      	cmp	r0, #0
    cbe4:	d003      	beq.n	cbee <_printf_float+0x8e>
    cbe6:	0023      	movs	r3, r4
    cbe8:	222d      	movs	r2, #45	; 0x2d
    cbea:	3343      	adds	r3, #67	; 0x43
    cbec:	701a      	strb	r2, [r3, #0]
    cbee:	4d99      	ldr	r5, [pc, #612]	; (ce54 <_printf_float+0x2f4>)
    cbf0:	2f47      	cmp	r7, #71	; 0x47
    cbf2:	d800      	bhi.n	cbf6 <_printf_float+0x96>
    cbf4:	4d98      	ldr	r5, [pc, #608]	; (ce58 <_printf_float+0x2f8>)
    cbf6:	2303      	movs	r3, #3
    cbf8:	2600      	movs	r6, #0
    cbfa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cbfc:	6123      	str	r3, [r4, #16]
    cbfe:	3301      	adds	r3, #1
    cc00:	439a      	bics	r2, r3
    cc02:	6022      	str	r2, [r4, #0]
    cc04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cc06:	aa13      	add	r2, sp, #76	; 0x4c
    cc08:	9300      	str	r3, [sp, #0]
    cc0a:	0021      	movs	r1, r4
    cc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cc0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    cc10:	f000 f9f2 	bl	cff8 <_printf_common>
    cc14:	1c43      	adds	r3, r0, #1
    cc16:	d000      	beq.n	cc1a <_printf_float+0xba>
    cc18:	e09c      	b.n	cd54 <_printf_float+0x1f4>
    cc1a:	2001      	movs	r0, #1
    cc1c:	4240      	negs	r0, r0
    cc1e:	b015      	add	sp, #84	; 0x54
    cc20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cc22:	3307      	adds	r3, #7
    cc24:	e7b6      	b.n	cb94 <_printf_float+0x34>
    cc26:	2380      	movs	r3, #128	; 0x80
    cc28:	6862      	ldr	r2, [r4, #4]
    cc2a:	00db      	lsls	r3, r3, #3
    cc2c:	1c51      	adds	r1, r2, #1
    cc2e:	d145      	bne.n	ccbc <_printf_float+0x15c>
    cc30:	3207      	adds	r2, #7
    cc32:	6062      	str	r2, [r4, #4]
    cc34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cc36:	2100      	movs	r1, #0
    cc38:	4313      	orrs	r3, r2
    cc3a:	aa12      	add	r2, sp, #72	; 0x48
    cc3c:	9205      	str	r2, [sp, #20]
    cc3e:	aa11      	add	r2, sp, #68	; 0x44
    cc40:	9203      	str	r2, [sp, #12]
    cc42:	2223      	movs	r2, #35	; 0x23
    cc44:	6023      	str	r3, [r4, #0]
    cc46:	9106      	str	r1, [sp, #24]
    cc48:	9301      	str	r3, [sp, #4]
    cc4a:	a908      	add	r1, sp, #32
    cc4c:	6863      	ldr	r3, [r4, #4]
    cc4e:	1852      	adds	r2, r2, r1
    cc50:	9202      	str	r2, [sp, #8]
    cc52:	9300      	str	r3, [sp, #0]
    cc54:	0032      	movs	r2, r6
    cc56:	002b      	movs	r3, r5
    cc58:	9704      	str	r7, [sp, #16]
    cc5a:	9809      	ldr	r0, [sp, #36]	; 0x24
    cc5c:	f7ff fee4 	bl	ca28 <__cvt>
    cc60:	2320      	movs	r3, #32
    cc62:	003a      	movs	r2, r7
    cc64:	0005      	movs	r5, r0
    cc66:	439a      	bics	r2, r3
    cc68:	2a47      	cmp	r2, #71	; 0x47
    cc6a:	d107      	bne.n	cc7c <_printf_float+0x11c>
    cc6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cc6e:	1cda      	adds	r2, r3, #3
    cc70:	db02      	blt.n	cc78 <_printf_float+0x118>
    cc72:	6862      	ldr	r2, [r4, #4]
    cc74:	4293      	cmp	r3, r2
    cc76:	dd5b      	ble.n	cd30 <_printf_float+0x1d0>
    cc78:	3f02      	subs	r7, #2
    cc7a:	b2ff      	uxtb	r7, r7
    cc7c:	9911      	ldr	r1, [sp, #68]	; 0x44
    cc7e:	2f65      	cmp	r7, #101	; 0x65
    cc80:	d83b      	bhi.n	ccfa <_printf_float+0x19a>
    cc82:	0020      	movs	r0, r4
    cc84:	3901      	subs	r1, #1
    cc86:	003a      	movs	r2, r7
    cc88:	3050      	adds	r0, #80	; 0x50
    cc8a:	9111      	str	r1, [sp, #68]	; 0x44
    cc8c:	f7ff ff30 	bl	caf0 <__exponent>
    cc90:	9a12      	ldr	r2, [sp, #72]	; 0x48
    cc92:	0006      	movs	r6, r0
    cc94:	1883      	adds	r3, r0, r2
    cc96:	6123      	str	r3, [r4, #16]
    cc98:	2a01      	cmp	r2, #1
    cc9a:	dc02      	bgt.n	cca2 <_printf_float+0x142>
    cc9c:	6822      	ldr	r2, [r4, #0]
    cc9e:	07d2      	lsls	r2, r2, #31
    cca0:	d501      	bpl.n	cca6 <_printf_float+0x146>
    cca2:	3301      	adds	r3, #1
    cca4:	6123      	str	r3, [r4, #16]
    cca6:	2323      	movs	r3, #35	; 0x23
    cca8:	aa08      	add	r2, sp, #32
    ccaa:	189b      	adds	r3, r3, r2
    ccac:	781b      	ldrb	r3, [r3, #0]
    ccae:	2b00      	cmp	r3, #0
    ccb0:	d0a8      	beq.n	cc04 <_printf_float+0xa4>
    ccb2:	0023      	movs	r3, r4
    ccb4:	222d      	movs	r2, #45	; 0x2d
    ccb6:	3343      	adds	r3, #67	; 0x43
    ccb8:	701a      	strb	r2, [r3, #0]
    ccba:	e7a3      	b.n	cc04 <_printf_float+0xa4>
    ccbc:	2f67      	cmp	r7, #103	; 0x67
    ccbe:	d001      	beq.n	ccc4 <_printf_float+0x164>
    ccc0:	2f47      	cmp	r7, #71	; 0x47
    ccc2:	d1b7      	bne.n	cc34 <_printf_float+0xd4>
    ccc4:	2a00      	cmp	r2, #0
    ccc6:	d016      	beq.n	ccf6 <_printf_float+0x196>
    ccc8:	990c      	ldr	r1, [sp, #48]	; 0x30
    ccca:	a808      	add	r0, sp, #32
    cccc:	430b      	orrs	r3, r1
    ccce:	2100      	movs	r1, #0
    ccd0:	9106      	str	r1, [sp, #24]
    ccd2:	a912      	add	r1, sp, #72	; 0x48
    ccd4:	9105      	str	r1, [sp, #20]
    ccd6:	a911      	add	r1, sp, #68	; 0x44
    ccd8:	9103      	str	r1, [sp, #12]
    ccda:	2123      	movs	r1, #35	; 0x23
    ccdc:	1809      	adds	r1, r1, r0
    ccde:	6023      	str	r3, [r4, #0]
    cce0:	9301      	str	r3, [sp, #4]
    cce2:	9200      	str	r2, [sp, #0]
    cce4:	002b      	movs	r3, r5
    cce6:	9704      	str	r7, [sp, #16]
    cce8:	9102      	str	r1, [sp, #8]
    ccea:	0032      	movs	r2, r6
    ccec:	9809      	ldr	r0, [sp, #36]	; 0x24
    ccee:	f7ff fe9b 	bl	ca28 <__cvt>
    ccf2:	0005      	movs	r5, r0
    ccf4:	e7ba      	b.n	cc6c <_printf_float+0x10c>
    ccf6:	2201      	movs	r2, #1
    ccf8:	e79b      	b.n	cc32 <_printf_float+0xd2>
    ccfa:	2f66      	cmp	r7, #102	; 0x66
    ccfc:	d119      	bne.n	cd32 <_printf_float+0x1d2>
    ccfe:	6863      	ldr	r3, [r4, #4]
    cd00:	2900      	cmp	r1, #0
    cd02:	dd0c      	ble.n	cd1e <_printf_float+0x1be>
    cd04:	6121      	str	r1, [r4, #16]
    cd06:	2b00      	cmp	r3, #0
    cd08:	d102      	bne.n	cd10 <_printf_float+0x1b0>
    cd0a:	6822      	ldr	r2, [r4, #0]
    cd0c:	07d2      	lsls	r2, r2, #31
    cd0e:	d502      	bpl.n	cd16 <_printf_float+0x1b6>
    cd10:	3301      	adds	r3, #1
    cd12:	185b      	adds	r3, r3, r1
    cd14:	6123      	str	r3, [r4, #16]
    cd16:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd18:	2600      	movs	r6, #0
    cd1a:	65a3      	str	r3, [r4, #88]	; 0x58
    cd1c:	e7c3      	b.n	cca6 <_printf_float+0x146>
    cd1e:	2b00      	cmp	r3, #0
    cd20:	d103      	bne.n	cd2a <_printf_float+0x1ca>
    cd22:	2201      	movs	r2, #1
    cd24:	6821      	ldr	r1, [r4, #0]
    cd26:	4211      	tst	r1, r2
    cd28:	d000      	beq.n	cd2c <_printf_float+0x1cc>
    cd2a:	1c9a      	adds	r2, r3, #2
    cd2c:	6122      	str	r2, [r4, #16]
    cd2e:	e7f2      	b.n	cd16 <_printf_float+0x1b6>
    cd30:	2767      	movs	r7, #103	; 0x67
    cd32:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd34:	9812      	ldr	r0, [sp, #72]	; 0x48
    cd36:	4283      	cmp	r3, r0
    cd38:	db05      	blt.n	cd46 <_printf_float+0x1e6>
    cd3a:	6822      	ldr	r2, [r4, #0]
    cd3c:	6123      	str	r3, [r4, #16]
    cd3e:	07d2      	lsls	r2, r2, #31
    cd40:	d5e9      	bpl.n	cd16 <_printf_float+0x1b6>
    cd42:	3301      	adds	r3, #1
    cd44:	e7e6      	b.n	cd14 <_printf_float+0x1b4>
    cd46:	2201      	movs	r2, #1
    cd48:	2b00      	cmp	r3, #0
    cd4a:	dc01      	bgt.n	cd50 <_printf_float+0x1f0>
    cd4c:	1892      	adds	r2, r2, r2
    cd4e:	1ad2      	subs	r2, r2, r3
    cd50:	1812      	adds	r2, r2, r0
    cd52:	e7eb      	b.n	cd2c <_printf_float+0x1cc>
    cd54:	6822      	ldr	r2, [r4, #0]
    cd56:	0553      	lsls	r3, r2, #21
    cd58:	d408      	bmi.n	cd6c <_printf_float+0x20c>
    cd5a:	6923      	ldr	r3, [r4, #16]
    cd5c:	002a      	movs	r2, r5
    cd5e:	990a      	ldr	r1, [sp, #40]	; 0x28
    cd60:	9809      	ldr	r0, [sp, #36]	; 0x24
    cd62:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cd64:	47a8      	blx	r5
    cd66:	1c43      	adds	r3, r0, #1
    cd68:	d129      	bne.n	cdbe <_printf_float+0x25e>
    cd6a:	e756      	b.n	cc1a <_printf_float+0xba>
    cd6c:	2f65      	cmp	r7, #101	; 0x65
    cd6e:	d800      	bhi.n	cd72 <_printf_float+0x212>
    cd70:	e0dc      	b.n	cf2c <_printf_float+0x3cc>
    cd72:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    cd74:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    cd76:	2200      	movs	r2, #0
    cd78:	2300      	movs	r3, #0
    cd7a:	f7fc fd47 	bl	980c <__aeabi_dcmpeq>
    cd7e:	2800      	cmp	r0, #0
    cd80:	d035      	beq.n	cdee <_printf_float+0x28e>
    cd82:	2301      	movs	r3, #1
    cd84:	4a35      	ldr	r2, [pc, #212]	; (ce5c <_printf_float+0x2fc>)
    cd86:	990a      	ldr	r1, [sp, #40]	; 0x28
    cd88:	9809      	ldr	r0, [sp, #36]	; 0x24
    cd8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cd8c:	47a8      	blx	r5
    cd8e:	1c43      	adds	r3, r0, #1
    cd90:	d100      	bne.n	cd94 <_printf_float+0x234>
    cd92:	e742      	b.n	cc1a <_printf_float+0xba>
    cd94:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cd96:	9a12      	ldr	r2, [sp, #72]	; 0x48
    cd98:	4293      	cmp	r3, r2
    cd9a:	db02      	blt.n	cda2 <_printf_float+0x242>
    cd9c:	6823      	ldr	r3, [r4, #0]
    cd9e:	07db      	lsls	r3, r3, #31
    cda0:	d50d      	bpl.n	cdbe <_printf_float+0x25e>
    cda2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cda4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cda6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cda8:	990a      	ldr	r1, [sp, #40]	; 0x28
    cdaa:	9809      	ldr	r0, [sp, #36]	; 0x24
    cdac:	47a8      	blx	r5
    cdae:	2500      	movs	r5, #0
    cdb0:	1c43      	adds	r3, r0, #1
    cdb2:	d100      	bne.n	cdb6 <_printf_float+0x256>
    cdb4:	e731      	b.n	cc1a <_printf_float+0xba>
    cdb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cdb8:	3b01      	subs	r3, #1
    cdba:	429d      	cmp	r5, r3
    cdbc:	db0b      	blt.n	cdd6 <_printf_float+0x276>
    cdbe:	6823      	ldr	r3, [r4, #0]
    cdc0:	2500      	movs	r5, #0
    cdc2:	079b      	lsls	r3, r3, #30
    cdc4:	d500      	bpl.n	cdc8 <_printf_float+0x268>
    cdc6:	e0fd      	b.n	cfc4 <_printf_float+0x464>
    cdc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cdca:	68e0      	ldr	r0, [r4, #12]
    cdcc:	4298      	cmp	r0, r3
    cdce:	db00      	blt.n	cdd2 <_printf_float+0x272>
    cdd0:	e725      	b.n	cc1e <_printf_float+0xbe>
    cdd2:	0018      	movs	r0, r3
    cdd4:	e723      	b.n	cc1e <_printf_float+0xbe>
    cdd6:	0022      	movs	r2, r4
    cdd8:	2301      	movs	r3, #1
    cdda:	321a      	adds	r2, #26
    cddc:	990a      	ldr	r1, [sp, #40]	; 0x28
    cdde:	9809      	ldr	r0, [sp, #36]	; 0x24
    cde0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    cde2:	47b0      	blx	r6
    cde4:	1c43      	adds	r3, r0, #1
    cde6:	d100      	bne.n	cdea <_printf_float+0x28a>
    cde8:	e717      	b.n	cc1a <_printf_float+0xba>
    cdea:	3501      	adds	r5, #1
    cdec:	e7e3      	b.n	cdb6 <_printf_float+0x256>
    cdee:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cdf0:	2b00      	cmp	r3, #0
    cdf2:	dc35      	bgt.n	ce60 <_printf_float+0x300>
    cdf4:	2301      	movs	r3, #1
    cdf6:	4a19      	ldr	r2, [pc, #100]	; (ce5c <_printf_float+0x2fc>)
    cdf8:	990a      	ldr	r1, [sp, #40]	; 0x28
    cdfa:	9809      	ldr	r0, [sp, #36]	; 0x24
    cdfc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    cdfe:	47b0      	blx	r6
    ce00:	1c43      	adds	r3, r0, #1
    ce02:	d100      	bne.n	ce06 <_printf_float+0x2a6>
    ce04:	e709      	b.n	cc1a <_printf_float+0xba>
    ce06:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce08:	2b00      	cmp	r3, #0
    ce0a:	d105      	bne.n	ce18 <_printf_float+0x2b8>
    ce0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ce0e:	2b00      	cmp	r3, #0
    ce10:	d102      	bne.n	ce18 <_printf_float+0x2b8>
    ce12:	6823      	ldr	r3, [r4, #0]
    ce14:	07db      	lsls	r3, r3, #31
    ce16:	d5d2      	bpl.n	cdbe <_printf_float+0x25e>
    ce18:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    ce1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ce1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ce1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ce20:	9809      	ldr	r0, [sp, #36]	; 0x24
    ce22:	47b0      	blx	r6
    ce24:	2600      	movs	r6, #0
    ce26:	1c43      	adds	r3, r0, #1
    ce28:	d100      	bne.n	ce2c <_printf_float+0x2cc>
    ce2a:	e6f6      	b.n	cc1a <_printf_float+0xba>
    ce2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce2e:	425b      	negs	r3, r3
    ce30:	429e      	cmp	r6, r3
    ce32:	db01      	blt.n	ce38 <_printf_float+0x2d8>
    ce34:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ce36:	e791      	b.n	cd5c <_printf_float+0x1fc>
    ce38:	0022      	movs	r2, r4
    ce3a:	2301      	movs	r3, #1
    ce3c:	321a      	adds	r2, #26
    ce3e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ce40:	9809      	ldr	r0, [sp, #36]	; 0x24
    ce42:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    ce44:	47b8      	blx	r7
    ce46:	1c43      	adds	r3, r0, #1
    ce48:	d100      	bne.n	ce4c <_printf_float+0x2ec>
    ce4a:	e6e6      	b.n	cc1a <_printf_float+0xba>
    ce4c:	3601      	adds	r6, #1
    ce4e:	e7ed      	b.n	ce2c <_printf_float+0x2cc>
    ce50:	7fefffff 	.word	0x7fefffff
    ce54:	000120c5 	.word	0x000120c5
    ce58:	000120c1 	.word	0x000120c1
    ce5c:	0001067b 	.word	0x0001067b
    ce60:	6da3      	ldr	r3, [r4, #88]	; 0x58
    ce62:	9e12      	ldr	r6, [sp, #72]	; 0x48
    ce64:	429e      	cmp	r6, r3
    ce66:	dd00      	ble.n	ce6a <_printf_float+0x30a>
    ce68:	001e      	movs	r6, r3
    ce6a:	2e00      	cmp	r6, #0
    ce6c:	dc35      	bgt.n	ceda <_printf_float+0x37a>
    ce6e:	2300      	movs	r3, #0
    ce70:	930c      	str	r3, [sp, #48]	; 0x30
    ce72:	43f3      	mvns	r3, r6
    ce74:	17db      	asrs	r3, r3, #31
    ce76:	930f      	str	r3, [sp, #60]	; 0x3c
    ce78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce7a:	6da7      	ldr	r7, [r4, #88]	; 0x58
    ce7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ce7e:	4033      	ands	r3, r6
    ce80:	1afb      	subs	r3, r7, r3
    ce82:	429a      	cmp	r2, r3
    ce84:	db32      	blt.n	ceec <_printf_float+0x38c>
    ce86:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ce88:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ce8a:	4293      	cmp	r3, r2
    ce8c:	db3c      	blt.n	cf08 <_printf_float+0x3a8>
    ce8e:	6823      	ldr	r3, [r4, #0]
    ce90:	07db      	lsls	r3, r3, #31
    ce92:	d439      	bmi.n	cf08 <_printf_float+0x3a8>
    ce94:	9e12      	ldr	r6, [sp, #72]	; 0x48
    ce96:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ce98:	1bf3      	subs	r3, r6, r7
    ce9a:	1ab6      	subs	r6, r6, r2
    ce9c:	429e      	cmp	r6, r3
    ce9e:	dd00      	ble.n	cea2 <_printf_float+0x342>
    cea0:	001e      	movs	r6, r3
    cea2:	2e00      	cmp	r6, #0
    cea4:	dc39      	bgt.n	cf1a <_printf_float+0x3ba>
    cea6:	43f7      	mvns	r7, r6
    cea8:	2500      	movs	r5, #0
    ceaa:	17fb      	asrs	r3, r7, #31
    ceac:	930c      	str	r3, [sp, #48]	; 0x30
    ceae:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ceb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ceb2:	990c      	ldr	r1, [sp, #48]	; 0x30
    ceb4:	1a9b      	subs	r3, r3, r2
    ceb6:	0032      	movs	r2, r6
    ceb8:	400a      	ands	r2, r1
    ceba:	1a9b      	subs	r3, r3, r2
    cebc:	429d      	cmp	r5, r3
    cebe:	db00      	blt.n	cec2 <_printf_float+0x362>
    cec0:	e77d      	b.n	cdbe <_printf_float+0x25e>
    cec2:	0022      	movs	r2, r4
    cec4:	2301      	movs	r3, #1
    cec6:	321a      	adds	r2, #26
    cec8:	990a      	ldr	r1, [sp, #40]	; 0x28
    ceca:	9809      	ldr	r0, [sp, #36]	; 0x24
    cecc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    cece:	47b8      	blx	r7
    ced0:	1c43      	adds	r3, r0, #1
    ced2:	d100      	bne.n	ced6 <_printf_float+0x376>
    ced4:	e6a1      	b.n	cc1a <_printf_float+0xba>
    ced6:	3501      	adds	r5, #1
    ced8:	e7e9      	b.n	ceae <_printf_float+0x34e>
    ceda:	0033      	movs	r3, r6
    cedc:	002a      	movs	r2, r5
    cede:	990a      	ldr	r1, [sp, #40]	; 0x28
    cee0:	9809      	ldr	r0, [sp, #36]	; 0x24
    cee2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    cee4:	47b8      	blx	r7
    cee6:	1c43      	adds	r3, r0, #1
    cee8:	d1c1      	bne.n	ce6e <_printf_float+0x30e>
    ceea:	e696      	b.n	cc1a <_printf_float+0xba>
    ceec:	0022      	movs	r2, r4
    ceee:	2301      	movs	r3, #1
    cef0:	321a      	adds	r2, #26
    cef2:	990a      	ldr	r1, [sp, #40]	; 0x28
    cef4:	9809      	ldr	r0, [sp, #36]	; 0x24
    cef6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    cef8:	47b8      	blx	r7
    cefa:	1c43      	adds	r3, r0, #1
    cefc:	d100      	bne.n	cf00 <_printf_float+0x3a0>
    cefe:	e68c      	b.n	cc1a <_printf_float+0xba>
    cf00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cf02:	3301      	adds	r3, #1
    cf04:	930c      	str	r3, [sp, #48]	; 0x30
    cf06:	e7b7      	b.n	ce78 <_printf_float+0x318>
    cf08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cf0c:	990a      	ldr	r1, [sp, #40]	; 0x28
    cf0e:	9809      	ldr	r0, [sp, #36]	; 0x24
    cf10:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    cf12:	47b0      	blx	r6
    cf14:	1c43      	adds	r3, r0, #1
    cf16:	d1bd      	bne.n	ce94 <_printf_float+0x334>
    cf18:	e67f      	b.n	cc1a <_printf_float+0xba>
    cf1a:	19ea      	adds	r2, r5, r7
    cf1c:	0033      	movs	r3, r6
    cf1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    cf20:	9809      	ldr	r0, [sp, #36]	; 0x24
    cf22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cf24:	47a8      	blx	r5
    cf26:	1c43      	adds	r3, r0, #1
    cf28:	d1bd      	bne.n	cea6 <_printf_float+0x346>
    cf2a:	e676      	b.n	cc1a <_printf_float+0xba>
    cf2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cf2e:	2b01      	cmp	r3, #1
    cf30:	dc02      	bgt.n	cf38 <_printf_float+0x3d8>
    cf32:	2301      	movs	r3, #1
    cf34:	421a      	tst	r2, r3
    cf36:	d038      	beq.n	cfaa <_printf_float+0x44a>
    cf38:	2301      	movs	r3, #1
    cf3a:	002a      	movs	r2, r5
    cf3c:	990a      	ldr	r1, [sp, #40]	; 0x28
    cf3e:	9809      	ldr	r0, [sp, #36]	; 0x24
    cf40:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    cf42:	47b8      	blx	r7
    cf44:	1c43      	adds	r3, r0, #1
    cf46:	d100      	bne.n	cf4a <_printf_float+0x3ea>
    cf48:	e667      	b.n	cc1a <_printf_float+0xba>
    cf4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cf4e:	990a      	ldr	r1, [sp, #40]	; 0x28
    cf50:	9809      	ldr	r0, [sp, #36]	; 0x24
    cf52:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    cf54:	47b8      	blx	r7
    cf56:	1c43      	adds	r3, r0, #1
    cf58:	d100      	bne.n	cf5c <_printf_float+0x3fc>
    cf5a:	e65e      	b.n	cc1a <_printf_float+0xba>
    cf5c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    cf5e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    cf60:	2200      	movs	r2, #0
    cf62:	2300      	movs	r3, #0
    cf64:	f7fc fc52 	bl	980c <__aeabi_dcmpeq>
    cf68:	2800      	cmp	r0, #0
    cf6a:	d008      	beq.n	cf7e <_printf_float+0x41e>
    cf6c:	2500      	movs	r5, #0
    cf6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cf70:	3b01      	subs	r3, #1
    cf72:	429d      	cmp	r5, r3
    cf74:	db0d      	blt.n	cf92 <_printf_float+0x432>
    cf76:	0022      	movs	r2, r4
    cf78:	0033      	movs	r3, r6
    cf7a:	3250      	adds	r2, #80	; 0x50
    cf7c:	e6ef      	b.n	cd5e <_printf_float+0x1fe>
    cf7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    cf80:	1c6a      	adds	r2, r5, #1
    cf82:	3b01      	subs	r3, #1
    cf84:	990a      	ldr	r1, [sp, #40]	; 0x28
    cf86:	9809      	ldr	r0, [sp, #36]	; 0x24
    cf88:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    cf8a:	47a8      	blx	r5
    cf8c:	1c43      	adds	r3, r0, #1
    cf8e:	d1f2      	bne.n	cf76 <_printf_float+0x416>
    cf90:	e643      	b.n	cc1a <_printf_float+0xba>
    cf92:	0022      	movs	r2, r4
    cf94:	2301      	movs	r3, #1
    cf96:	321a      	adds	r2, #26
    cf98:	990a      	ldr	r1, [sp, #40]	; 0x28
    cf9a:	9809      	ldr	r0, [sp, #36]	; 0x24
    cf9c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    cf9e:	47b8      	blx	r7
    cfa0:	1c43      	adds	r3, r0, #1
    cfa2:	d100      	bne.n	cfa6 <_printf_float+0x446>
    cfa4:	e639      	b.n	cc1a <_printf_float+0xba>
    cfa6:	3501      	adds	r5, #1
    cfa8:	e7e1      	b.n	cf6e <_printf_float+0x40e>
    cfaa:	002a      	movs	r2, r5
    cfac:	e7ea      	b.n	cf84 <_printf_float+0x424>
    cfae:	0022      	movs	r2, r4
    cfb0:	2301      	movs	r3, #1
    cfb2:	3219      	adds	r2, #25
    cfb4:	990a      	ldr	r1, [sp, #40]	; 0x28
    cfb6:	9809      	ldr	r0, [sp, #36]	; 0x24
    cfb8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    cfba:	47b0      	blx	r6
    cfbc:	1c43      	adds	r3, r0, #1
    cfbe:	d100      	bne.n	cfc2 <_printf_float+0x462>
    cfc0:	e62b      	b.n	cc1a <_printf_float+0xba>
    cfc2:	3501      	adds	r5, #1
    cfc4:	68e3      	ldr	r3, [r4, #12]
    cfc6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cfc8:	1a9b      	subs	r3, r3, r2
    cfca:	429d      	cmp	r5, r3
    cfcc:	dbef      	blt.n	cfae <_printf_float+0x44e>
    cfce:	e6fb      	b.n	cdc8 <_printf_float+0x268>
    cfd0:	0032      	movs	r2, r6
    cfd2:	002b      	movs	r3, r5
    cfd4:	0030      	movs	r0, r6
    cfd6:	0029      	movs	r1, r5
    cfd8:	f7fe fd82 	bl	bae0 <__aeabi_dcmpun>
    cfdc:	2800      	cmp	r0, #0
    cfde:	d100      	bne.n	cfe2 <_printf_float+0x482>
    cfe0:	e621      	b.n	cc26 <_printf_float+0xc6>
    cfe2:	4d03      	ldr	r5, [pc, #12]	; (cff0 <_printf_float+0x490>)
    cfe4:	2f47      	cmp	r7, #71	; 0x47
    cfe6:	d900      	bls.n	cfea <_printf_float+0x48a>
    cfe8:	e605      	b.n	cbf6 <_printf_float+0x96>
    cfea:	4d02      	ldr	r5, [pc, #8]	; (cff4 <_printf_float+0x494>)
    cfec:	e603      	b.n	cbf6 <_printf_float+0x96>
    cfee:	46c0      	nop			; (mov r8, r8)
    cff0:	000120cd 	.word	0x000120cd
    cff4:	000120c9 	.word	0x000120c9

0000cff8 <_printf_common>:
    cff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cffa:	0015      	movs	r5, r2
    cffc:	9301      	str	r3, [sp, #4]
    cffe:	688a      	ldr	r2, [r1, #8]
    d000:	690b      	ldr	r3, [r1, #16]
    d002:	9000      	str	r0, [sp, #0]
    d004:	000c      	movs	r4, r1
    d006:	4293      	cmp	r3, r2
    d008:	da00      	bge.n	d00c <_printf_common+0x14>
    d00a:	0013      	movs	r3, r2
    d00c:	0022      	movs	r2, r4
    d00e:	602b      	str	r3, [r5, #0]
    d010:	3243      	adds	r2, #67	; 0x43
    d012:	7812      	ldrb	r2, [r2, #0]
    d014:	2a00      	cmp	r2, #0
    d016:	d001      	beq.n	d01c <_printf_common+0x24>
    d018:	3301      	adds	r3, #1
    d01a:	602b      	str	r3, [r5, #0]
    d01c:	6823      	ldr	r3, [r4, #0]
    d01e:	069b      	lsls	r3, r3, #26
    d020:	d502      	bpl.n	d028 <_printf_common+0x30>
    d022:	682b      	ldr	r3, [r5, #0]
    d024:	3302      	adds	r3, #2
    d026:	602b      	str	r3, [r5, #0]
    d028:	2706      	movs	r7, #6
    d02a:	6823      	ldr	r3, [r4, #0]
    d02c:	401f      	ands	r7, r3
    d02e:	d027      	beq.n	d080 <_printf_common+0x88>
    d030:	0023      	movs	r3, r4
    d032:	3343      	adds	r3, #67	; 0x43
    d034:	781b      	ldrb	r3, [r3, #0]
    d036:	1e5a      	subs	r2, r3, #1
    d038:	4193      	sbcs	r3, r2
    d03a:	6822      	ldr	r2, [r4, #0]
    d03c:	0692      	lsls	r2, r2, #26
    d03e:	d430      	bmi.n	d0a2 <_printf_common+0xaa>
    d040:	0022      	movs	r2, r4
    d042:	9901      	ldr	r1, [sp, #4]
    d044:	3243      	adds	r2, #67	; 0x43
    d046:	9800      	ldr	r0, [sp, #0]
    d048:	9e08      	ldr	r6, [sp, #32]
    d04a:	47b0      	blx	r6
    d04c:	1c43      	adds	r3, r0, #1
    d04e:	d025      	beq.n	d09c <_printf_common+0xa4>
    d050:	2306      	movs	r3, #6
    d052:	6820      	ldr	r0, [r4, #0]
    d054:	682a      	ldr	r2, [r5, #0]
    d056:	68e1      	ldr	r1, [r4, #12]
    d058:	4003      	ands	r3, r0
    d05a:	2500      	movs	r5, #0
    d05c:	2b04      	cmp	r3, #4
    d05e:	d103      	bne.n	d068 <_printf_common+0x70>
    d060:	1a8d      	subs	r5, r1, r2
    d062:	43eb      	mvns	r3, r5
    d064:	17db      	asrs	r3, r3, #31
    d066:	401d      	ands	r5, r3
    d068:	68a3      	ldr	r3, [r4, #8]
    d06a:	6922      	ldr	r2, [r4, #16]
    d06c:	4293      	cmp	r3, r2
    d06e:	dd01      	ble.n	d074 <_printf_common+0x7c>
    d070:	1a9b      	subs	r3, r3, r2
    d072:	18ed      	adds	r5, r5, r3
    d074:	2700      	movs	r7, #0
    d076:	42bd      	cmp	r5, r7
    d078:	d120      	bne.n	d0bc <_printf_common+0xc4>
    d07a:	2000      	movs	r0, #0
    d07c:	e010      	b.n	d0a0 <_printf_common+0xa8>
    d07e:	3701      	adds	r7, #1
    d080:	68e3      	ldr	r3, [r4, #12]
    d082:	682a      	ldr	r2, [r5, #0]
    d084:	1a9b      	subs	r3, r3, r2
    d086:	429f      	cmp	r7, r3
    d088:	dad2      	bge.n	d030 <_printf_common+0x38>
    d08a:	0022      	movs	r2, r4
    d08c:	2301      	movs	r3, #1
    d08e:	3219      	adds	r2, #25
    d090:	9901      	ldr	r1, [sp, #4]
    d092:	9800      	ldr	r0, [sp, #0]
    d094:	9e08      	ldr	r6, [sp, #32]
    d096:	47b0      	blx	r6
    d098:	1c43      	adds	r3, r0, #1
    d09a:	d1f0      	bne.n	d07e <_printf_common+0x86>
    d09c:	2001      	movs	r0, #1
    d09e:	4240      	negs	r0, r0
    d0a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d0a2:	2030      	movs	r0, #48	; 0x30
    d0a4:	18e1      	adds	r1, r4, r3
    d0a6:	3143      	adds	r1, #67	; 0x43
    d0a8:	7008      	strb	r0, [r1, #0]
    d0aa:	0021      	movs	r1, r4
    d0ac:	1c5a      	adds	r2, r3, #1
    d0ae:	3145      	adds	r1, #69	; 0x45
    d0b0:	7809      	ldrb	r1, [r1, #0]
    d0b2:	18a2      	adds	r2, r4, r2
    d0b4:	3243      	adds	r2, #67	; 0x43
    d0b6:	3302      	adds	r3, #2
    d0b8:	7011      	strb	r1, [r2, #0]
    d0ba:	e7c1      	b.n	d040 <_printf_common+0x48>
    d0bc:	0022      	movs	r2, r4
    d0be:	2301      	movs	r3, #1
    d0c0:	321a      	adds	r2, #26
    d0c2:	9901      	ldr	r1, [sp, #4]
    d0c4:	9800      	ldr	r0, [sp, #0]
    d0c6:	9e08      	ldr	r6, [sp, #32]
    d0c8:	47b0      	blx	r6
    d0ca:	1c43      	adds	r3, r0, #1
    d0cc:	d0e6      	beq.n	d09c <_printf_common+0xa4>
    d0ce:	3701      	adds	r7, #1
    d0d0:	e7d1      	b.n	d076 <_printf_common+0x7e>
	...

0000d0d4 <_printf_i>:
    d0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0d6:	b08b      	sub	sp, #44	; 0x2c
    d0d8:	9206      	str	r2, [sp, #24]
    d0da:	000a      	movs	r2, r1
    d0dc:	3243      	adds	r2, #67	; 0x43
    d0de:	9307      	str	r3, [sp, #28]
    d0e0:	9005      	str	r0, [sp, #20]
    d0e2:	9204      	str	r2, [sp, #16]
    d0e4:	7e0a      	ldrb	r2, [r1, #24]
    d0e6:	000c      	movs	r4, r1
    d0e8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d0ea:	2a6e      	cmp	r2, #110	; 0x6e
    d0ec:	d100      	bne.n	d0f0 <_printf_i+0x1c>
    d0ee:	e08f      	b.n	d210 <_printf_i+0x13c>
    d0f0:	d817      	bhi.n	d122 <_printf_i+0x4e>
    d0f2:	2a63      	cmp	r2, #99	; 0x63
    d0f4:	d02c      	beq.n	d150 <_printf_i+0x7c>
    d0f6:	d808      	bhi.n	d10a <_printf_i+0x36>
    d0f8:	2a00      	cmp	r2, #0
    d0fa:	d100      	bne.n	d0fe <_printf_i+0x2a>
    d0fc:	e099      	b.n	d232 <_printf_i+0x15e>
    d0fe:	2a58      	cmp	r2, #88	; 0x58
    d100:	d054      	beq.n	d1ac <_printf_i+0xd8>
    d102:	0026      	movs	r6, r4
    d104:	3642      	adds	r6, #66	; 0x42
    d106:	7032      	strb	r2, [r6, #0]
    d108:	e029      	b.n	d15e <_printf_i+0x8a>
    d10a:	2a64      	cmp	r2, #100	; 0x64
    d10c:	d001      	beq.n	d112 <_printf_i+0x3e>
    d10e:	2a69      	cmp	r2, #105	; 0x69
    d110:	d1f7      	bne.n	d102 <_printf_i+0x2e>
    d112:	6821      	ldr	r1, [r4, #0]
    d114:	681a      	ldr	r2, [r3, #0]
    d116:	0608      	lsls	r0, r1, #24
    d118:	d523      	bpl.n	d162 <_printf_i+0x8e>
    d11a:	1d11      	adds	r1, r2, #4
    d11c:	6019      	str	r1, [r3, #0]
    d11e:	6815      	ldr	r5, [r2, #0]
    d120:	e025      	b.n	d16e <_printf_i+0x9a>
    d122:	2a73      	cmp	r2, #115	; 0x73
    d124:	d100      	bne.n	d128 <_printf_i+0x54>
    d126:	e088      	b.n	d23a <_printf_i+0x166>
    d128:	d808      	bhi.n	d13c <_printf_i+0x68>
    d12a:	2a6f      	cmp	r2, #111	; 0x6f
    d12c:	d029      	beq.n	d182 <_printf_i+0xae>
    d12e:	2a70      	cmp	r2, #112	; 0x70
    d130:	d1e7      	bne.n	d102 <_printf_i+0x2e>
    d132:	2220      	movs	r2, #32
    d134:	6809      	ldr	r1, [r1, #0]
    d136:	430a      	orrs	r2, r1
    d138:	6022      	str	r2, [r4, #0]
    d13a:	e003      	b.n	d144 <_printf_i+0x70>
    d13c:	2a75      	cmp	r2, #117	; 0x75
    d13e:	d020      	beq.n	d182 <_printf_i+0xae>
    d140:	2a78      	cmp	r2, #120	; 0x78
    d142:	d1de      	bne.n	d102 <_printf_i+0x2e>
    d144:	0022      	movs	r2, r4
    d146:	2178      	movs	r1, #120	; 0x78
    d148:	3245      	adds	r2, #69	; 0x45
    d14a:	7011      	strb	r1, [r2, #0]
    d14c:	4a6c      	ldr	r2, [pc, #432]	; (d300 <_printf_i+0x22c>)
    d14e:	e030      	b.n	d1b2 <_printf_i+0xde>
    d150:	000e      	movs	r6, r1
    d152:	681a      	ldr	r2, [r3, #0]
    d154:	3642      	adds	r6, #66	; 0x42
    d156:	1d11      	adds	r1, r2, #4
    d158:	6019      	str	r1, [r3, #0]
    d15a:	6813      	ldr	r3, [r2, #0]
    d15c:	7033      	strb	r3, [r6, #0]
    d15e:	2301      	movs	r3, #1
    d160:	e079      	b.n	d256 <_printf_i+0x182>
    d162:	0649      	lsls	r1, r1, #25
    d164:	d5d9      	bpl.n	d11a <_printf_i+0x46>
    d166:	1d11      	adds	r1, r2, #4
    d168:	6019      	str	r1, [r3, #0]
    d16a:	2300      	movs	r3, #0
    d16c:	5ed5      	ldrsh	r5, [r2, r3]
    d16e:	2d00      	cmp	r5, #0
    d170:	da03      	bge.n	d17a <_printf_i+0xa6>
    d172:	232d      	movs	r3, #45	; 0x2d
    d174:	9a04      	ldr	r2, [sp, #16]
    d176:	426d      	negs	r5, r5
    d178:	7013      	strb	r3, [r2, #0]
    d17a:	4b62      	ldr	r3, [pc, #392]	; (d304 <_printf_i+0x230>)
    d17c:	270a      	movs	r7, #10
    d17e:	9303      	str	r3, [sp, #12]
    d180:	e02f      	b.n	d1e2 <_printf_i+0x10e>
    d182:	6820      	ldr	r0, [r4, #0]
    d184:	6819      	ldr	r1, [r3, #0]
    d186:	0605      	lsls	r5, r0, #24
    d188:	d503      	bpl.n	d192 <_printf_i+0xbe>
    d18a:	1d08      	adds	r0, r1, #4
    d18c:	6018      	str	r0, [r3, #0]
    d18e:	680d      	ldr	r5, [r1, #0]
    d190:	e005      	b.n	d19e <_printf_i+0xca>
    d192:	0640      	lsls	r0, r0, #25
    d194:	d5f9      	bpl.n	d18a <_printf_i+0xb6>
    d196:	680d      	ldr	r5, [r1, #0]
    d198:	1d08      	adds	r0, r1, #4
    d19a:	6018      	str	r0, [r3, #0]
    d19c:	b2ad      	uxth	r5, r5
    d19e:	4b59      	ldr	r3, [pc, #356]	; (d304 <_printf_i+0x230>)
    d1a0:	2708      	movs	r7, #8
    d1a2:	9303      	str	r3, [sp, #12]
    d1a4:	2a6f      	cmp	r2, #111	; 0x6f
    d1a6:	d018      	beq.n	d1da <_printf_i+0x106>
    d1a8:	270a      	movs	r7, #10
    d1aa:	e016      	b.n	d1da <_printf_i+0x106>
    d1ac:	3145      	adds	r1, #69	; 0x45
    d1ae:	700a      	strb	r2, [r1, #0]
    d1b0:	4a54      	ldr	r2, [pc, #336]	; (d304 <_printf_i+0x230>)
    d1b2:	9203      	str	r2, [sp, #12]
    d1b4:	681a      	ldr	r2, [r3, #0]
    d1b6:	6821      	ldr	r1, [r4, #0]
    d1b8:	1d10      	adds	r0, r2, #4
    d1ba:	6018      	str	r0, [r3, #0]
    d1bc:	6815      	ldr	r5, [r2, #0]
    d1be:	0608      	lsls	r0, r1, #24
    d1c0:	d522      	bpl.n	d208 <_printf_i+0x134>
    d1c2:	07cb      	lsls	r3, r1, #31
    d1c4:	d502      	bpl.n	d1cc <_printf_i+0xf8>
    d1c6:	2320      	movs	r3, #32
    d1c8:	4319      	orrs	r1, r3
    d1ca:	6021      	str	r1, [r4, #0]
    d1cc:	2710      	movs	r7, #16
    d1ce:	2d00      	cmp	r5, #0
    d1d0:	d103      	bne.n	d1da <_printf_i+0x106>
    d1d2:	2320      	movs	r3, #32
    d1d4:	6822      	ldr	r2, [r4, #0]
    d1d6:	439a      	bics	r2, r3
    d1d8:	6022      	str	r2, [r4, #0]
    d1da:	0023      	movs	r3, r4
    d1dc:	2200      	movs	r2, #0
    d1de:	3343      	adds	r3, #67	; 0x43
    d1e0:	701a      	strb	r2, [r3, #0]
    d1e2:	6863      	ldr	r3, [r4, #4]
    d1e4:	60a3      	str	r3, [r4, #8]
    d1e6:	2b00      	cmp	r3, #0
    d1e8:	db5c      	blt.n	d2a4 <_printf_i+0x1d0>
    d1ea:	2204      	movs	r2, #4
    d1ec:	6821      	ldr	r1, [r4, #0]
    d1ee:	4391      	bics	r1, r2
    d1f0:	6021      	str	r1, [r4, #0]
    d1f2:	2d00      	cmp	r5, #0
    d1f4:	d158      	bne.n	d2a8 <_printf_i+0x1d4>
    d1f6:	9e04      	ldr	r6, [sp, #16]
    d1f8:	2b00      	cmp	r3, #0
    d1fa:	d064      	beq.n	d2c6 <_printf_i+0x1f2>
    d1fc:	0026      	movs	r6, r4
    d1fe:	9b03      	ldr	r3, [sp, #12]
    d200:	3642      	adds	r6, #66	; 0x42
    d202:	781b      	ldrb	r3, [r3, #0]
    d204:	7033      	strb	r3, [r6, #0]
    d206:	e05e      	b.n	d2c6 <_printf_i+0x1f2>
    d208:	0648      	lsls	r0, r1, #25
    d20a:	d5da      	bpl.n	d1c2 <_printf_i+0xee>
    d20c:	b2ad      	uxth	r5, r5
    d20e:	e7d8      	b.n	d1c2 <_printf_i+0xee>
    d210:	6809      	ldr	r1, [r1, #0]
    d212:	681a      	ldr	r2, [r3, #0]
    d214:	0608      	lsls	r0, r1, #24
    d216:	d505      	bpl.n	d224 <_printf_i+0x150>
    d218:	1d11      	adds	r1, r2, #4
    d21a:	6019      	str	r1, [r3, #0]
    d21c:	6813      	ldr	r3, [r2, #0]
    d21e:	6962      	ldr	r2, [r4, #20]
    d220:	601a      	str	r2, [r3, #0]
    d222:	e006      	b.n	d232 <_printf_i+0x15e>
    d224:	0649      	lsls	r1, r1, #25
    d226:	d5f7      	bpl.n	d218 <_printf_i+0x144>
    d228:	1d11      	adds	r1, r2, #4
    d22a:	6019      	str	r1, [r3, #0]
    d22c:	6813      	ldr	r3, [r2, #0]
    d22e:	8aa2      	ldrh	r2, [r4, #20]
    d230:	801a      	strh	r2, [r3, #0]
    d232:	2300      	movs	r3, #0
    d234:	9e04      	ldr	r6, [sp, #16]
    d236:	6123      	str	r3, [r4, #16]
    d238:	e054      	b.n	d2e4 <_printf_i+0x210>
    d23a:	681a      	ldr	r2, [r3, #0]
    d23c:	1d11      	adds	r1, r2, #4
    d23e:	6019      	str	r1, [r3, #0]
    d240:	6816      	ldr	r6, [r2, #0]
    d242:	2100      	movs	r1, #0
    d244:	6862      	ldr	r2, [r4, #4]
    d246:	0030      	movs	r0, r6
    d248:	f001 fdba 	bl	edc0 <memchr>
    d24c:	2800      	cmp	r0, #0
    d24e:	d001      	beq.n	d254 <_printf_i+0x180>
    d250:	1b80      	subs	r0, r0, r6
    d252:	6060      	str	r0, [r4, #4]
    d254:	6863      	ldr	r3, [r4, #4]
    d256:	6123      	str	r3, [r4, #16]
    d258:	2300      	movs	r3, #0
    d25a:	9a04      	ldr	r2, [sp, #16]
    d25c:	7013      	strb	r3, [r2, #0]
    d25e:	e041      	b.n	d2e4 <_printf_i+0x210>
    d260:	6923      	ldr	r3, [r4, #16]
    d262:	0032      	movs	r2, r6
    d264:	9906      	ldr	r1, [sp, #24]
    d266:	9805      	ldr	r0, [sp, #20]
    d268:	9d07      	ldr	r5, [sp, #28]
    d26a:	47a8      	blx	r5
    d26c:	1c43      	adds	r3, r0, #1
    d26e:	d043      	beq.n	d2f8 <_printf_i+0x224>
    d270:	6823      	ldr	r3, [r4, #0]
    d272:	2500      	movs	r5, #0
    d274:	079b      	lsls	r3, r3, #30
    d276:	d40f      	bmi.n	d298 <_printf_i+0x1c4>
    d278:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d27a:	68e0      	ldr	r0, [r4, #12]
    d27c:	4298      	cmp	r0, r3
    d27e:	da3d      	bge.n	d2fc <_printf_i+0x228>
    d280:	0018      	movs	r0, r3
    d282:	e03b      	b.n	d2fc <_printf_i+0x228>
    d284:	0022      	movs	r2, r4
    d286:	2301      	movs	r3, #1
    d288:	3219      	adds	r2, #25
    d28a:	9906      	ldr	r1, [sp, #24]
    d28c:	9805      	ldr	r0, [sp, #20]
    d28e:	9e07      	ldr	r6, [sp, #28]
    d290:	47b0      	blx	r6
    d292:	1c43      	adds	r3, r0, #1
    d294:	d030      	beq.n	d2f8 <_printf_i+0x224>
    d296:	3501      	adds	r5, #1
    d298:	68e3      	ldr	r3, [r4, #12]
    d29a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d29c:	1a9b      	subs	r3, r3, r2
    d29e:	429d      	cmp	r5, r3
    d2a0:	dbf0      	blt.n	d284 <_printf_i+0x1b0>
    d2a2:	e7e9      	b.n	d278 <_printf_i+0x1a4>
    d2a4:	2d00      	cmp	r5, #0
    d2a6:	d0a9      	beq.n	d1fc <_printf_i+0x128>
    d2a8:	9e04      	ldr	r6, [sp, #16]
    d2aa:	0028      	movs	r0, r5
    d2ac:	0039      	movs	r1, r7
    d2ae:	f7fc f9ad 	bl	960c <__aeabi_uidivmod>
    d2b2:	9b03      	ldr	r3, [sp, #12]
    d2b4:	3e01      	subs	r6, #1
    d2b6:	5c5b      	ldrb	r3, [r3, r1]
    d2b8:	0028      	movs	r0, r5
    d2ba:	7033      	strb	r3, [r6, #0]
    d2bc:	0039      	movs	r1, r7
    d2be:	f7fc f91f 	bl	9500 <__udivsi3>
    d2c2:	1e05      	subs	r5, r0, #0
    d2c4:	d1f1      	bne.n	d2aa <_printf_i+0x1d6>
    d2c6:	2f08      	cmp	r7, #8
    d2c8:	d109      	bne.n	d2de <_printf_i+0x20a>
    d2ca:	6823      	ldr	r3, [r4, #0]
    d2cc:	07db      	lsls	r3, r3, #31
    d2ce:	d506      	bpl.n	d2de <_printf_i+0x20a>
    d2d0:	6863      	ldr	r3, [r4, #4]
    d2d2:	6922      	ldr	r2, [r4, #16]
    d2d4:	4293      	cmp	r3, r2
    d2d6:	dc02      	bgt.n	d2de <_printf_i+0x20a>
    d2d8:	2330      	movs	r3, #48	; 0x30
    d2da:	3e01      	subs	r6, #1
    d2dc:	7033      	strb	r3, [r6, #0]
    d2de:	9b04      	ldr	r3, [sp, #16]
    d2e0:	1b9b      	subs	r3, r3, r6
    d2e2:	6123      	str	r3, [r4, #16]
    d2e4:	9b07      	ldr	r3, [sp, #28]
    d2e6:	aa09      	add	r2, sp, #36	; 0x24
    d2e8:	9300      	str	r3, [sp, #0]
    d2ea:	0021      	movs	r1, r4
    d2ec:	9b06      	ldr	r3, [sp, #24]
    d2ee:	9805      	ldr	r0, [sp, #20]
    d2f0:	f7ff fe82 	bl	cff8 <_printf_common>
    d2f4:	1c43      	adds	r3, r0, #1
    d2f6:	d1b3      	bne.n	d260 <_printf_i+0x18c>
    d2f8:	2001      	movs	r0, #1
    d2fa:	4240      	negs	r0, r0
    d2fc:	b00b      	add	sp, #44	; 0x2c
    d2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d300:	000120e2 	.word	0x000120e2
    d304:	000120d1 	.word	0x000120d1

0000d308 <realloc>:
    d308:	b510      	push	{r4, lr}
    d30a:	4b03      	ldr	r3, [pc, #12]	; (d318 <realloc+0x10>)
    d30c:	000a      	movs	r2, r1
    d30e:	0001      	movs	r1, r0
    d310:	6818      	ldr	r0, [r3, #0]
    d312:	f002 f853 	bl	f3bc <_realloc_r>
    d316:	bd10      	pop	{r4, pc}
    d318:	200000ac 	.word	0x200000ac

0000d31c <_sbrk_r>:
    d31c:	2300      	movs	r3, #0
    d31e:	b570      	push	{r4, r5, r6, lr}
    d320:	4c06      	ldr	r4, [pc, #24]	; (d33c <_sbrk_r+0x20>)
    d322:	0005      	movs	r5, r0
    d324:	0008      	movs	r0, r1
    d326:	6023      	str	r3, [r4, #0]
    d328:	f002 ffaa 	bl	10280 <_sbrk>
    d32c:	1c43      	adds	r3, r0, #1
    d32e:	d103      	bne.n	d338 <_sbrk_r+0x1c>
    d330:	6823      	ldr	r3, [r4, #0]
    d332:	2b00      	cmp	r3, #0
    d334:	d000      	beq.n	d338 <_sbrk_r+0x1c>
    d336:	602b      	str	r3, [r5, #0]
    d338:	bd70      	pop	{r4, r5, r6, pc}
    d33a:	46c0      	nop			; (mov r8, r8)
    d33c:	200022dc 	.word	0x200022dc

0000d340 <siprintf>:
    d340:	b40e      	push	{r1, r2, r3}
    d342:	b510      	push	{r4, lr}
    d344:	b09d      	sub	sp, #116	; 0x74
    d346:	a902      	add	r1, sp, #8
    d348:	9002      	str	r0, [sp, #8]
    d34a:	6108      	str	r0, [r1, #16]
    d34c:	480b      	ldr	r0, [pc, #44]	; (d37c <siprintf+0x3c>)
    d34e:	2482      	movs	r4, #130	; 0x82
    d350:	6088      	str	r0, [r1, #8]
    d352:	6148      	str	r0, [r1, #20]
    d354:	2001      	movs	r0, #1
    d356:	4240      	negs	r0, r0
    d358:	ab1f      	add	r3, sp, #124	; 0x7c
    d35a:	81c8      	strh	r0, [r1, #14]
    d35c:	4808      	ldr	r0, [pc, #32]	; (d380 <siprintf+0x40>)
    d35e:	cb04      	ldmia	r3!, {r2}
    d360:	00a4      	lsls	r4, r4, #2
    d362:	6800      	ldr	r0, [r0, #0]
    d364:	9301      	str	r3, [sp, #4]
    d366:	818c      	strh	r4, [r1, #12]
    d368:	f002 f8b0 	bl	f4cc <_svfiprintf_r>
    d36c:	2300      	movs	r3, #0
    d36e:	9a02      	ldr	r2, [sp, #8]
    d370:	7013      	strb	r3, [r2, #0]
    d372:	b01d      	add	sp, #116	; 0x74
    d374:	bc10      	pop	{r4}
    d376:	bc08      	pop	{r3}
    d378:	b003      	add	sp, #12
    d37a:	4718      	bx	r3
    d37c:	7fffffff 	.word	0x7fffffff
    d380:	200000ac 	.word	0x200000ac

0000d384 <strcat>:
    d384:	0002      	movs	r2, r0
    d386:	b510      	push	{r4, lr}
    d388:	7813      	ldrb	r3, [r2, #0]
    d38a:	2b00      	cmp	r3, #0
    d38c:	d105      	bne.n	d39a <strcat+0x16>
    d38e:	5ccc      	ldrb	r4, [r1, r3]
    d390:	54d4      	strb	r4, [r2, r3]
    d392:	3301      	adds	r3, #1
    d394:	2c00      	cmp	r4, #0
    d396:	d1fa      	bne.n	d38e <strcat+0xa>
    d398:	bd10      	pop	{r4, pc}
    d39a:	3201      	adds	r2, #1
    d39c:	e7f4      	b.n	d388 <strcat+0x4>

0000d39e <strcmp>:
    d39e:	7802      	ldrb	r2, [r0, #0]
    d3a0:	780b      	ldrb	r3, [r1, #0]
    d3a2:	2a00      	cmp	r2, #0
    d3a4:	d003      	beq.n	d3ae <strcmp+0x10>
    d3a6:	3001      	adds	r0, #1
    d3a8:	3101      	adds	r1, #1
    d3aa:	429a      	cmp	r2, r3
    d3ac:	d0f7      	beq.n	d39e <strcmp>
    d3ae:	1ad0      	subs	r0, r2, r3
    d3b0:	4770      	bx	lr

0000d3b2 <strcpy>:
    d3b2:	1c03      	adds	r3, r0, #0
    d3b4:	780a      	ldrb	r2, [r1, #0]
    d3b6:	3101      	adds	r1, #1
    d3b8:	701a      	strb	r2, [r3, #0]
    d3ba:	3301      	adds	r3, #1
    d3bc:	2a00      	cmp	r2, #0
    d3be:	d1f9      	bne.n	d3b4 <strcpy+0x2>
    d3c0:	4770      	bx	lr

0000d3c2 <strlen>:
    d3c2:	2300      	movs	r3, #0
    d3c4:	5cc2      	ldrb	r2, [r0, r3]
    d3c6:	3301      	adds	r3, #1
    d3c8:	2a00      	cmp	r2, #0
    d3ca:	d1fb      	bne.n	d3c4 <strlen+0x2>
    d3cc:	1e58      	subs	r0, r3, #1
    d3ce:	4770      	bx	lr

0000d3d0 <strncat>:
    d3d0:	0003      	movs	r3, r0
    d3d2:	b510      	push	{r4, lr}
    d3d4:	781c      	ldrb	r4, [r3, #0]
    d3d6:	2c00      	cmp	r4, #0
    d3d8:	d107      	bne.n	d3ea <strncat+0x1a>
    d3da:	3a01      	subs	r2, #1
    d3dc:	1c54      	adds	r4, r2, #1
    d3de:	d003      	beq.n	d3e8 <strncat+0x18>
    d3e0:	780c      	ldrb	r4, [r1, #0]
    d3e2:	701c      	strb	r4, [r3, #0]
    d3e4:	2c00      	cmp	r4, #0
    d3e6:	d102      	bne.n	d3ee <strncat+0x1e>
    d3e8:	bd10      	pop	{r4, pc}
    d3ea:	3301      	adds	r3, #1
    d3ec:	e7f2      	b.n	d3d4 <strncat+0x4>
    d3ee:	2a00      	cmp	r2, #0
    d3f0:	d100      	bne.n	d3f4 <strncat+0x24>
    d3f2:	705a      	strb	r2, [r3, #1]
    d3f4:	3301      	adds	r3, #1
    d3f6:	3101      	adds	r1, #1
    d3f8:	e7ef      	b.n	d3da <strncat+0xa>

0000d3fa <strncmp>:
    d3fa:	2300      	movs	r3, #0
    d3fc:	b530      	push	{r4, r5, lr}
    d3fe:	429a      	cmp	r2, r3
    d400:	d00a      	beq.n	d418 <strncmp+0x1e>
    d402:	3a01      	subs	r2, #1
    d404:	5cc4      	ldrb	r4, [r0, r3]
    d406:	5ccd      	ldrb	r5, [r1, r3]
    d408:	42ac      	cmp	r4, r5
    d40a:	d104      	bne.n	d416 <strncmp+0x1c>
    d40c:	429a      	cmp	r2, r3
    d40e:	d002      	beq.n	d416 <strncmp+0x1c>
    d410:	3301      	adds	r3, #1
    d412:	2c00      	cmp	r4, #0
    d414:	d1f6      	bne.n	d404 <strncmp+0xa>
    d416:	1b63      	subs	r3, r4, r5
    d418:	0018      	movs	r0, r3
    d41a:	bd30      	pop	{r4, r5, pc}

0000d41c <strncpy>:
    d41c:	b570      	push	{r4, r5, r6, lr}
    d41e:	0004      	movs	r4, r0
    d420:	2a00      	cmp	r2, #0
    d422:	d100      	bne.n	d426 <strncpy+0xa>
    d424:	bd70      	pop	{r4, r5, r6, pc}
    d426:	780d      	ldrb	r5, [r1, #0]
    d428:	1e56      	subs	r6, r2, #1
    d42a:	1c63      	adds	r3, r4, #1
    d42c:	7025      	strb	r5, [r4, #0]
    d42e:	3101      	adds	r1, #1
    d430:	2d00      	cmp	r5, #0
    d432:	d105      	bne.n	d440 <strncpy+0x24>
    d434:	18a4      	adds	r4, r4, r2
    d436:	429c      	cmp	r4, r3
    d438:	d0f4      	beq.n	d424 <strncpy+0x8>
    d43a:	701d      	strb	r5, [r3, #0]
    d43c:	3301      	adds	r3, #1
    d43e:	e7fa      	b.n	d436 <strncpy+0x1a>
    d440:	001c      	movs	r4, r3
    d442:	0032      	movs	r2, r6
    d444:	e7ec      	b.n	d420 <strncpy+0x4>
	...

0000d448 <_strtol_l.isra.0>:
    d448:	b5f0      	push	{r4, r5, r6, r7, lr}
    d44a:	001f      	movs	r7, r3
    d44c:	000e      	movs	r6, r1
    d44e:	b087      	sub	sp, #28
    d450:	9005      	str	r0, [sp, #20]
    d452:	9103      	str	r1, [sp, #12]
    d454:	9202      	str	r2, [sp, #8]
    d456:	980c      	ldr	r0, [sp, #48]	; 0x30
    d458:	7834      	ldrb	r4, [r6, #0]
    d45a:	f7fe fe39 	bl	c0d0 <__locale_ctype_ptr_l>
    d45e:	2208      	movs	r2, #8
    d460:	1900      	adds	r0, r0, r4
    d462:	7843      	ldrb	r3, [r0, #1]
    d464:	1c75      	adds	r5, r6, #1
    d466:	4013      	ands	r3, r2
    d468:	d10c      	bne.n	d484 <_strtol_l.isra.0+0x3c>
    d46a:	2c2d      	cmp	r4, #45	; 0x2d
    d46c:	d10c      	bne.n	d488 <_strtol_l.isra.0+0x40>
    d46e:	3301      	adds	r3, #1
    d470:	782c      	ldrb	r4, [r5, #0]
    d472:	9301      	str	r3, [sp, #4]
    d474:	1cb5      	adds	r5, r6, #2
    d476:	2f00      	cmp	r7, #0
    d478:	d00c      	beq.n	d494 <_strtol_l.isra.0+0x4c>
    d47a:	2f10      	cmp	r7, #16
    d47c:	d114      	bne.n	d4a8 <_strtol_l.isra.0+0x60>
    d47e:	2c30      	cmp	r4, #48	; 0x30
    d480:	d00a      	beq.n	d498 <_strtol_l.isra.0+0x50>
    d482:	e011      	b.n	d4a8 <_strtol_l.isra.0+0x60>
    d484:	002e      	movs	r6, r5
    d486:	e7e6      	b.n	d456 <_strtol_l.isra.0+0xe>
    d488:	9301      	str	r3, [sp, #4]
    d48a:	2c2b      	cmp	r4, #43	; 0x2b
    d48c:	d1f3      	bne.n	d476 <_strtol_l.isra.0+0x2e>
    d48e:	782c      	ldrb	r4, [r5, #0]
    d490:	1cb5      	adds	r5, r6, #2
    d492:	e7f0      	b.n	d476 <_strtol_l.isra.0+0x2e>
    d494:	2c30      	cmp	r4, #48	; 0x30
    d496:	d12f      	bne.n	d4f8 <_strtol_l.isra.0+0xb0>
    d498:	2220      	movs	r2, #32
    d49a:	782b      	ldrb	r3, [r5, #0]
    d49c:	4393      	bics	r3, r2
    d49e:	2b58      	cmp	r3, #88	; 0x58
    d4a0:	d151      	bne.n	d546 <_strtol_l.isra.0+0xfe>
    d4a2:	2710      	movs	r7, #16
    d4a4:	786c      	ldrb	r4, [r5, #1]
    d4a6:	3502      	adds	r5, #2
    d4a8:	9b01      	ldr	r3, [sp, #4]
    d4aa:	4a29      	ldr	r2, [pc, #164]	; (d550 <_strtol_l.isra.0+0x108>)
    d4ac:	0039      	movs	r1, r7
    d4ae:	189e      	adds	r6, r3, r2
    d4b0:	0030      	movs	r0, r6
    d4b2:	f7fc f8ab 	bl	960c <__aeabi_uidivmod>
    d4b6:	0030      	movs	r0, r6
    d4b8:	9104      	str	r1, [sp, #16]
    d4ba:	0039      	movs	r1, r7
    d4bc:	f7fc f820 	bl	9500 <__udivsi3>
    d4c0:	2101      	movs	r1, #1
    d4c2:	2300      	movs	r3, #0
    d4c4:	4249      	negs	r1, r1
    d4c6:	0002      	movs	r2, r0
    d4c8:	468c      	mov	ip, r1
    d4ca:	0018      	movs	r0, r3
    d4cc:	0021      	movs	r1, r4
    d4ce:	3930      	subs	r1, #48	; 0x30
    d4d0:	2909      	cmp	r1, #9
    d4d2:	d813      	bhi.n	d4fc <_strtol_l.isra.0+0xb4>
    d4d4:	000c      	movs	r4, r1
    d4d6:	42a7      	cmp	r7, r4
    d4d8:	dd1c      	ble.n	d514 <_strtol_l.isra.0+0xcc>
    d4da:	1c59      	adds	r1, r3, #1
    d4dc:	d009      	beq.n	d4f2 <_strtol_l.isra.0+0xaa>
    d4de:	4663      	mov	r3, ip
    d4e0:	4282      	cmp	r2, r0
    d4e2:	d306      	bcc.n	d4f2 <_strtol_l.isra.0+0xaa>
    d4e4:	d102      	bne.n	d4ec <_strtol_l.isra.0+0xa4>
    d4e6:	9904      	ldr	r1, [sp, #16]
    d4e8:	42a1      	cmp	r1, r4
    d4ea:	db02      	blt.n	d4f2 <_strtol_l.isra.0+0xaa>
    d4ec:	2301      	movs	r3, #1
    d4ee:	4378      	muls	r0, r7
    d4f0:	1820      	adds	r0, r4, r0
    d4f2:	782c      	ldrb	r4, [r5, #0]
    d4f4:	3501      	adds	r5, #1
    d4f6:	e7e9      	b.n	d4cc <_strtol_l.isra.0+0x84>
    d4f8:	270a      	movs	r7, #10
    d4fa:	e7d5      	b.n	d4a8 <_strtol_l.isra.0+0x60>
    d4fc:	0021      	movs	r1, r4
    d4fe:	3941      	subs	r1, #65	; 0x41
    d500:	2919      	cmp	r1, #25
    d502:	d801      	bhi.n	d508 <_strtol_l.isra.0+0xc0>
    d504:	3c37      	subs	r4, #55	; 0x37
    d506:	e7e6      	b.n	d4d6 <_strtol_l.isra.0+0x8e>
    d508:	0021      	movs	r1, r4
    d50a:	3961      	subs	r1, #97	; 0x61
    d50c:	2919      	cmp	r1, #25
    d50e:	d801      	bhi.n	d514 <_strtol_l.isra.0+0xcc>
    d510:	3c57      	subs	r4, #87	; 0x57
    d512:	e7e0      	b.n	d4d6 <_strtol_l.isra.0+0x8e>
    d514:	1c5a      	adds	r2, r3, #1
    d516:	d108      	bne.n	d52a <_strtol_l.isra.0+0xe2>
    d518:	9a05      	ldr	r2, [sp, #20]
    d51a:	3323      	adds	r3, #35	; 0x23
    d51c:	6013      	str	r3, [r2, #0]
    d51e:	9b02      	ldr	r3, [sp, #8]
    d520:	0030      	movs	r0, r6
    d522:	2b00      	cmp	r3, #0
    d524:	d10b      	bne.n	d53e <_strtol_l.isra.0+0xf6>
    d526:	b007      	add	sp, #28
    d528:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d52a:	9a01      	ldr	r2, [sp, #4]
    d52c:	2a00      	cmp	r2, #0
    d52e:	d000      	beq.n	d532 <_strtol_l.isra.0+0xea>
    d530:	4240      	negs	r0, r0
    d532:	9a02      	ldr	r2, [sp, #8]
    d534:	2a00      	cmp	r2, #0
    d536:	d0f6      	beq.n	d526 <_strtol_l.isra.0+0xde>
    d538:	9a03      	ldr	r2, [sp, #12]
    d53a:	2b00      	cmp	r3, #0
    d53c:	d000      	beq.n	d540 <_strtol_l.isra.0+0xf8>
    d53e:	1e6a      	subs	r2, r5, #1
    d540:	9b02      	ldr	r3, [sp, #8]
    d542:	601a      	str	r2, [r3, #0]
    d544:	e7ef      	b.n	d526 <_strtol_l.isra.0+0xde>
    d546:	2430      	movs	r4, #48	; 0x30
    d548:	2f00      	cmp	r7, #0
    d54a:	d1ad      	bne.n	d4a8 <_strtol_l.isra.0+0x60>
    d54c:	3708      	adds	r7, #8
    d54e:	e7ab      	b.n	d4a8 <_strtol_l.isra.0+0x60>
    d550:	7fffffff 	.word	0x7fffffff

0000d554 <_strtol_r>:
    d554:	b513      	push	{r0, r1, r4, lr}
    d556:	4c05      	ldr	r4, [pc, #20]	; (d56c <_strtol_r+0x18>)
    d558:	6824      	ldr	r4, [r4, #0]
    d55a:	6a24      	ldr	r4, [r4, #32]
    d55c:	2c00      	cmp	r4, #0
    d55e:	d100      	bne.n	d562 <_strtol_r+0xe>
    d560:	4c03      	ldr	r4, [pc, #12]	; (d570 <_strtol_r+0x1c>)
    d562:	9400      	str	r4, [sp, #0]
    d564:	f7ff ff70 	bl	d448 <_strtol_l.isra.0>
    d568:	bd16      	pop	{r1, r2, r4, pc}
    d56a:	46c0      	nop			; (mov r8, r8)
    d56c:	200000ac 	.word	0x200000ac
    d570:	20000110 	.word	0x20000110

0000d574 <sbrk>:
    d574:	b510      	push	{r4, lr}
    d576:	4b03      	ldr	r3, [pc, #12]	; (d584 <sbrk+0x10>)
    d578:	0001      	movs	r1, r0
    d57a:	6818      	ldr	r0, [r3, #0]
    d57c:	f7ff fece 	bl	d31c <_sbrk_r>
    d580:	bd10      	pop	{r4, pc}
    d582:	46c0      	nop			; (mov r8, r8)
    d584:	200000ac 	.word	0x200000ac

0000d588 <toupper>:
    d588:	b510      	push	{r4, lr}
    d58a:	0004      	movs	r4, r0
    d58c:	f7fe fda4 	bl	c0d8 <__locale_ctype_ptr>
    d590:	2203      	movs	r2, #3
    d592:	1900      	adds	r0, r0, r4
    d594:	7843      	ldrb	r3, [r0, #1]
    d596:	4013      	ands	r3, r2
    d598:	2b02      	cmp	r3, #2
    d59a:	d100      	bne.n	d59e <toupper+0x16>
    d59c:	3c20      	subs	r4, #32
    d59e:	0020      	movs	r0, r4
    d5a0:	bd10      	pop	{r4, pc}
	...

0000d5a4 <__tzcalc_limits>:
    d5a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5a6:	b089      	sub	sp, #36	; 0x24
    d5a8:	0004      	movs	r4, r0
    d5aa:	f001 fb8d 	bl	ecc8 <__gettzinfo>
    d5ae:	4b4c      	ldr	r3, [pc, #304]	; (d6e0 <__tzcalc_limits+0x13c>)
    d5b0:	0007      	movs	r7, r0
    d5b2:	2000      	movs	r0, #0
    d5b4:	429c      	cmp	r4, r3
    d5b6:	dd58      	ble.n	d66a <__tzcalc_limits+0xc6>
    d5b8:	256e      	movs	r5, #110	; 0x6e
    d5ba:	2164      	movs	r1, #100	; 0x64
    d5bc:	4b49      	ldr	r3, [pc, #292]	; (d6e4 <__tzcalc_limits+0x140>)
    d5be:	35ff      	adds	r5, #255	; 0xff
    d5c0:	18e0      	adds	r0, r4, r3
    d5c2:	4345      	muls	r5, r0
    d5c4:	4b48      	ldr	r3, [pc, #288]	; (d6e8 <__tzcalc_limits+0x144>)
    d5c6:	607c      	str	r4, [r7, #4]
    d5c8:	18e0      	adds	r0, r4, r3
    d5ca:	4b48      	ldr	r3, [pc, #288]	; (d6ec <__tzcalc_limits+0x148>)
    d5cc:	1080      	asrs	r0, r0, #2
    d5ce:	182d      	adds	r5, r5, r0
    d5d0:	4249      	negs	r1, r1
    d5d2:	18e0      	adds	r0, r4, r3
    d5d4:	f7fc f81e 	bl	9614 <__divsi3>
    d5d8:	21c8      	movs	r1, #200	; 0xc8
    d5da:	4b45      	ldr	r3, [pc, #276]	; (d6f0 <__tzcalc_limits+0x14c>)
    d5dc:	182d      	adds	r5, r5, r0
    d5de:	0049      	lsls	r1, r1, #1
    d5e0:	18e0      	adds	r0, r4, r3
    d5e2:	f7fc f817 	bl	9614 <__divsi3>
    d5e6:	2164      	movs	r1, #100	; 0x64
    d5e8:	182b      	adds	r3, r5, r0
    d5ea:	0020      	movs	r0, r4
    d5ec:	9301      	str	r3, [sp, #4]
    d5ee:	f7fc f8f7 	bl	97e0 <__aeabi_idivmod>
    d5f2:	9102      	str	r1, [sp, #8]
    d5f4:	21c8      	movs	r1, #200	; 0xc8
    d5f6:	0020      	movs	r0, r4
    d5f8:	0049      	lsls	r1, r1, #1
    d5fa:	f7fc f8f1 	bl	97e0 <__aeabi_idivmod>
    d5fe:	000a      	movs	r2, r1
    d600:	4253      	negs	r3, r2
    d602:	415a      	adcs	r2, r3
    d604:	003b      	movs	r3, r7
    d606:	3340      	adds	r3, #64	; 0x40
    d608:	9307      	str	r3, [sp, #28]
    d60a:	2303      	movs	r3, #3
    d60c:	003d      	movs	r5, r7
    d60e:	401c      	ands	r4, r3
    d610:	9103      	str	r1, [sp, #12]
    d612:	9205      	str	r2, [sp, #20]
    d614:	3508      	adds	r5, #8
    d616:	9406      	str	r4, [sp, #24]
    d618:	782b      	ldrb	r3, [r5, #0]
    d61a:	2b4a      	cmp	r3, #74	; 0x4a
    d61c:	d127      	bne.n	d66e <__tzcalc_limits+0xca>
    d61e:	9a01      	ldr	r2, [sp, #4]
    d620:	68eb      	ldr	r3, [r5, #12]
    d622:	18d1      	adds	r1, r2, r3
    d624:	9a06      	ldr	r2, [sp, #24]
    d626:	2a00      	cmp	r2, #0
    d628:	d102      	bne.n	d630 <__tzcalc_limits+0x8c>
    d62a:	9a02      	ldr	r2, [sp, #8]
    d62c:	2a00      	cmp	r2, #0
    d62e:	d103      	bne.n	d638 <__tzcalc_limits+0x94>
    d630:	2400      	movs	r4, #0
    d632:	9a03      	ldr	r2, [sp, #12]
    d634:	42a2      	cmp	r2, r4
    d636:	d103      	bne.n	d640 <__tzcalc_limits+0x9c>
    d638:	2401      	movs	r4, #1
    d63a:	2b3b      	cmp	r3, #59	; 0x3b
    d63c:	dc00      	bgt.n	d640 <__tzcalc_limits+0x9c>
    d63e:	2400      	movs	r4, #0
    d640:	1864      	adds	r4, r4, r1
    d642:	3c01      	subs	r4, #1
    d644:	492b      	ldr	r1, [pc, #172]	; (d6f4 <__tzcalc_limits+0x150>)
    d646:	692b      	ldr	r3, [r5, #16]
    d648:	434c      	muls	r4, r1
    d64a:	18e4      	adds	r4, r4, r3
    d64c:	69ab      	ldr	r3, [r5, #24]
    d64e:	18e4      	adds	r4, r4, r3
    d650:	9b07      	ldr	r3, [sp, #28]
    d652:	616c      	str	r4, [r5, #20]
    d654:	351c      	adds	r5, #28
    d656:	42ab      	cmp	r3, r5
    d658:	d1de      	bne.n	d618 <__tzcalc_limits+0x74>
    d65a:	69fa      	ldr	r2, [r7, #28]
    d65c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    d65e:	2301      	movs	r3, #1
    d660:	428a      	cmp	r2, r1
    d662:	db00      	blt.n	d666 <__tzcalc_limits+0xc2>
    d664:	2300      	movs	r3, #0
    d666:	2001      	movs	r0, #1
    d668:	603b      	str	r3, [r7, #0]
    d66a:	b009      	add	sp, #36	; 0x24
    d66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d66e:	2b44      	cmp	r3, #68	; 0x44
    d670:	d103      	bne.n	d67a <__tzcalc_limits+0xd6>
    d672:	9b01      	ldr	r3, [sp, #4]
    d674:	68ea      	ldr	r2, [r5, #12]
    d676:	189c      	adds	r4, r3, r2
    d678:	e7e4      	b.n	d644 <__tzcalc_limits+0xa0>
    d67a:	9a06      	ldr	r2, [sp, #24]
    d67c:	9b05      	ldr	r3, [sp, #20]
    d67e:	2a00      	cmp	r2, #0
    d680:	d103      	bne.n	d68a <__tzcalc_limits+0xe6>
    d682:	9a02      	ldr	r2, [sp, #8]
    d684:	2a00      	cmp	r2, #0
    d686:	d000      	beq.n	d68a <__tzcalc_limits+0xe6>
    d688:	2301      	movs	r3, #1
    d68a:	2230      	movs	r2, #48	; 0x30
    d68c:	4353      	muls	r3, r2
    d68e:	4a1a      	ldr	r2, [pc, #104]	; (d6f8 <__tzcalc_limits+0x154>)
    d690:	686e      	ldr	r6, [r5, #4]
    d692:	189b      	adds	r3, r3, r2
    d694:	9304      	str	r3, [sp, #16]
    d696:	001a      	movs	r2, r3
    d698:	2301      	movs	r3, #1
    d69a:	9c01      	ldr	r4, [sp, #4]
    d69c:	42b3      	cmp	r3, r6
    d69e:	db18      	blt.n	d6d2 <__tzcalc_limits+0x12e>
    d6a0:	2e00      	cmp	r6, #0
    d6a2:	dc00      	bgt.n	d6a6 <__tzcalc_limits+0x102>
    d6a4:	2601      	movs	r6, #1
    d6a6:	1d20      	adds	r0, r4, #4
    d6a8:	2107      	movs	r1, #7
    d6aa:	f7fc f899 	bl	97e0 <__aeabi_idivmod>
    d6ae:	68eb      	ldr	r3, [r5, #12]
    d6b0:	1a5b      	subs	r3, r3, r1
    d6b2:	d500      	bpl.n	d6b6 <__tzcalc_limits+0x112>
    d6b4:	3307      	adds	r3, #7
    d6b6:	2107      	movs	r1, #7
    d6b8:	68aa      	ldr	r2, [r5, #8]
    d6ba:	3a01      	subs	r2, #1
    d6bc:	4351      	muls	r1, r2
    d6be:	18c9      	adds	r1, r1, r3
    d6c0:	4b0e      	ldr	r3, [pc, #56]	; (d6fc <__tzcalc_limits+0x158>)
    d6c2:	18f6      	adds	r6, r6, r3
    d6c4:	9b04      	ldr	r3, [sp, #16]
    d6c6:	00b6      	lsls	r6, r6, #2
    d6c8:	58f3      	ldr	r3, [r6, r3]
    d6ca:	4299      	cmp	r1, r3
    d6cc:	da05      	bge.n	d6da <__tzcalc_limits+0x136>
    d6ce:	1864      	adds	r4, r4, r1
    d6d0:	e7b8      	b.n	d644 <__tzcalc_limits+0xa0>
    d6d2:	ca02      	ldmia	r2!, {r1}
    d6d4:	3301      	adds	r3, #1
    d6d6:	1864      	adds	r4, r4, r1
    d6d8:	e7e0      	b.n	d69c <__tzcalc_limits+0xf8>
    d6da:	3907      	subs	r1, #7
    d6dc:	e7f5      	b.n	d6ca <__tzcalc_limits+0x126>
    d6de:	46c0      	nop			; (mov r8, r8)
    d6e0:	000007b1 	.word	0x000007b1
    d6e4:	fffff84e 	.word	0xfffff84e
    d6e8:	fffff84f 	.word	0xfffff84f
    d6ec:	fffff893 	.word	0xfffff893
    d6f0:	fffff9bf 	.word	0xfffff9bf
    d6f4:	00015180 	.word	0x00015180
    d6f8:	000122a0 	.word	0x000122a0
    d6fc:	3fffffff 	.word	0x3fffffff

0000d700 <__tz_lock>:
    d700:	4770      	bx	lr

0000d702 <__tz_unlock>:
    d702:	4770      	bx	lr

0000d704 <_tzset_unlocked>:
    d704:	b510      	push	{r4, lr}
    d706:	4b02      	ldr	r3, [pc, #8]	; (d710 <_tzset_unlocked+0xc>)
    d708:	6818      	ldr	r0, [r3, #0]
    d70a:	f000 f803 	bl	d714 <_tzset_unlocked_r>
    d70e:	bd10      	pop	{r4, pc}
    d710:	200000ac 	.word	0x200000ac

0000d714 <_tzset_unlocked_r>:
    d714:	b5f0      	push	{r4, r5, r6, r7, lr}
    d716:	b08d      	sub	sp, #52	; 0x34
    d718:	0007      	movs	r7, r0
    d71a:	f001 fad5 	bl	ecc8 <__gettzinfo>
    d71e:	49af      	ldr	r1, [pc, #700]	; (d9dc <_tzset_unlocked_r+0x2c8>)
    d720:	0006      	movs	r6, r0
    d722:	0038      	movs	r0, r7
    d724:	f001 faca 	bl	ecbc <_getenv_r>
    d728:	4dad      	ldr	r5, [pc, #692]	; (d9e0 <_tzset_unlocked_r+0x2cc>)
    d72a:	1e04      	subs	r4, r0, #0
    d72c:	d10d      	bne.n	d74a <_tzset_unlocked_r+0x36>
    d72e:	4bad      	ldr	r3, [pc, #692]	; (d9e4 <_tzset_unlocked_r+0x2d0>)
    d730:	4aad      	ldr	r2, [pc, #692]	; (d9e8 <_tzset_unlocked_r+0x2d4>)
    d732:	6018      	str	r0, [r3, #0]
    d734:	4bad      	ldr	r3, [pc, #692]	; (d9ec <_tzset_unlocked_r+0x2d8>)
    d736:	6018      	str	r0, [r3, #0]
    d738:	4bad      	ldr	r3, [pc, #692]	; (d9f0 <_tzset_unlocked_r+0x2dc>)
    d73a:	6828      	ldr	r0, [r5, #0]
    d73c:	601a      	str	r2, [r3, #0]
    d73e:	605a      	str	r2, [r3, #4]
    d740:	f7fe fce2 	bl	c108 <free>
    d744:	602c      	str	r4, [r5, #0]
    d746:	b00d      	add	sp, #52	; 0x34
    d748:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d74a:	6829      	ldr	r1, [r5, #0]
    d74c:	2900      	cmp	r1, #0
    d74e:	d15a      	bne.n	d806 <_tzset_unlocked_r+0xf2>
    d750:	6828      	ldr	r0, [r5, #0]
    d752:	f7fe fcd9 	bl	c108 <free>
    d756:	0020      	movs	r0, r4
    d758:	f7ff fe33 	bl	d3c2 <strlen>
    d75c:	1c41      	adds	r1, r0, #1
    d75e:	0038      	movs	r0, r7
    d760:	f7fe ffc0 	bl	c6e4 <_malloc_r>
    d764:	6028      	str	r0, [r5, #0]
    d766:	2800      	cmp	r0, #0
    d768:	d152      	bne.n	d810 <_tzset_unlocked_r+0xfc>
    d76a:	7823      	ldrb	r3, [r4, #0]
    d76c:	3b3a      	subs	r3, #58	; 0x3a
    d76e:	4259      	negs	r1, r3
    d770:	4159      	adcs	r1, r3
    d772:	1864      	adds	r4, r4, r1
    d774:	ab0a      	add	r3, sp, #40	; 0x28
    d776:	4a9f      	ldr	r2, [pc, #636]	; (d9f4 <_tzset_unlocked_r+0x2e0>)
    d778:	499f      	ldr	r1, [pc, #636]	; (d9f8 <_tzset_unlocked_r+0x2e4>)
    d77a:	0020      	movs	r0, r4
    d77c:	f001 fff4 	bl	f768 <siscanf>
    d780:	2800      	cmp	r0, #0
    d782:	dde0      	ble.n	d746 <_tzset_unlocked_r+0x32>
    d784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d786:	18e4      	adds	r4, r4, r3
    d788:	7823      	ldrb	r3, [r4, #0]
    d78a:	2b2d      	cmp	r3, #45	; 0x2d
    d78c:	d144      	bne.n	d818 <_tzset_unlocked_r+0x104>
    d78e:	3b2e      	subs	r3, #46	; 0x2e
    d790:	3401      	adds	r4, #1
    d792:	9304      	str	r3, [sp, #16]
    d794:	2716      	movs	r7, #22
    d796:	ab02      	add	r3, sp, #8
    d798:	18ff      	adds	r7, r7, r3
    d79a:	2300      	movs	r3, #0
    d79c:	803b      	strh	r3, [r7, #0]
    d79e:	2300      	movs	r3, #0
    d7a0:	ad08      	add	r5, sp, #32
    d7a2:	802b      	strh	r3, [r5, #0]
    d7a4:	ab0a      	add	r3, sp, #40	; 0x28
    d7a6:	9303      	str	r3, [sp, #12]
    d7a8:	9502      	str	r5, [sp, #8]
    d7aa:	9301      	str	r3, [sp, #4]
    d7ac:	9700      	str	r7, [sp, #0]
    d7ae:	aa07      	add	r2, sp, #28
    d7b0:	4992      	ldr	r1, [pc, #584]	; (d9fc <_tzset_unlocked_r+0x2e8>)
    d7b2:	0020      	movs	r0, r4
    d7b4:	f001 ffd8 	bl	f768 <siscanf>
    d7b8:	2800      	cmp	r0, #0
    d7ba:	ddc4      	ble.n	d746 <_tzset_unlocked_r+0x32>
    d7bc:	233c      	movs	r3, #60	; 0x3c
    d7be:	883a      	ldrh	r2, [r7, #0]
    d7c0:	4f8f      	ldr	r7, [pc, #572]	; (da00 <_tzset_unlocked_r+0x2ec>)
    d7c2:	4353      	muls	r3, r2
    d7c4:	882a      	ldrh	r2, [r5, #0]
    d7c6:	4d8a      	ldr	r5, [pc, #552]	; (d9f0 <_tzset_unlocked_r+0x2dc>)
    d7c8:	189b      	adds	r3, r3, r2
    d7ca:	aa02      	add	r2, sp, #8
    d7cc:	8a91      	ldrh	r1, [r2, #20]
    d7ce:	22e1      	movs	r2, #225	; 0xe1
    d7d0:	0112      	lsls	r2, r2, #4
    d7d2:	434a      	muls	r2, r1
    d7d4:	189b      	adds	r3, r3, r2
    d7d6:	9a04      	ldr	r2, [sp, #16]
    d7d8:	4987      	ldr	r1, [pc, #540]	; (d9f8 <_tzset_unlocked_r+0x2e4>)
    d7da:	435a      	muls	r2, r3
    d7dc:	4b85      	ldr	r3, [pc, #532]	; (d9f4 <_tzset_unlocked_r+0x2e0>)
    d7de:	6232      	str	r2, [r6, #32]
    d7e0:	602b      	str	r3, [r5, #0]
    d7e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d7e4:	003a      	movs	r2, r7
    d7e6:	18e4      	adds	r4, r4, r3
    d7e8:	0020      	movs	r0, r4
    d7ea:	ab0a      	add	r3, sp, #40	; 0x28
    d7ec:	f001 ffbc 	bl	f768 <siscanf>
    d7f0:	2800      	cmp	r0, #0
    d7f2:	dc18      	bgt.n	d826 <_tzset_unlocked_r+0x112>
    d7f4:	682b      	ldr	r3, [r5, #0]
    d7f6:	6a32      	ldr	r2, [r6, #32]
    d7f8:	606b      	str	r3, [r5, #4]
    d7fa:	4b7a      	ldr	r3, [pc, #488]	; (d9e4 <_tzset_unlocked_r+0x2d0>)
    d7fc:	601a      	str	r2, [r3, #0]
    d7fe:	2200      	movs	r2, #0
    d800:	4b7a      	ldr	r3, [pc, #488]	; (d9ec <_tzset_unlocked_r+0x2d8>)
    d802:	601a      	str	r2, [r3, #0]
    d804:	e79f      	b.n	d746 <_tzset_unlocked_r+0x32>
    d806:	f7ff fdca 	bl	d39e <strcmp>
    d80a:	2800      	cmp	r0, #0
    d80c:	d09b      	beq.n	d746 <_tzset_unlocked_r+0x32>
    d80e:	e79f      	b.n	d750 <_tzset_unlocked_r+0x3c>
    d810:	0021      	movs	r1, r4
    d812:	f7ff fdce 	bl	d3b2 <strcpy>
    d816:	e7a8      	b.n	d76a <_tzset_unlocked_r+0x56>
    d818:	2201      	movs	r2, #1
    d81a:	3b2b      	subs	r3, #43	; 0x2b
    d81c:	9204      	str	r2, [sp, #16]
    d81e:	4259      	negs	r1, r3
    d820:	4159      	adcs	r1, r3
    d822:	1864      	adds	r4, r4, r1
    d824:	e7b6      	b.n	d794 <_tzset_unlocked_r+0x80>
    d826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d828:	606f      	str	r7, [r5, #4]
    d82a:	18e4      	adds	r4, r4, r3
    d82c:	7823      	ldrb	r3, [r4, #0]
    d82e:	2b2d      	cmp	r3, #45	; 0x2d
    d830:	d000      	beq.n	d834 <_tzset_unlocked_r+0x120>
    d832:	e08f      	b.n	d954 <_tzset_unlocked_r+0x240>
    d834:	3b2e      	subs	r3, #46	; 0x2e
    d836:	3401      	adds	r4, #1
    d838:	9304      	str	r3, [sp, #16]
    d83a:	2716      	movs	r7, #22
    d83c:	2300      	movs	r3, #0
    d83e:	aa02      	add	r2, sp, #8
    d840:	18bf      	adds	r7, r7, r2
    d842:	ad07      	add	r5, sp, #28
    d844:	8313      	strh	r3, [r2, #24]
    d846:	802b      	strh	r3, [r5, #0]
    d848:	803b      	strh	r3, [r7, #0]
    d84a:	aa08      	add	r2, sp, #32
    d84c:	930a      	str	r3, [sp, #40]	; 0x28
    d84e:	ab0a      	add	r3, sp, #40	; 0x28
    d850:	9202      	str	r2, [sp, #8]
    d852:	9303      	str	r3, [sp, #12]
    d854:	9301      	str	r3, [sp, #4]
    d856:	9700      	str	r7, [sp, #0]
    d858:	002a      	movs	r2, r5
    d85a:	4968      	ldr	r1, [pc, #416]	; (d9fc <_tzset_unlocked_r+0x2e8>)
    d85c:	0020      	movs	r0, r4
    d85e:	f001 ff83 	bl	f768 <siscanf>
    d862:	2800      	cmp	r0, #0
    d864:	dd00      	ble.n	d868 <_tzset_unlocked_r+0x154>
    d866:	e07c      	b.n	d962 <_tzset_unlocked_r+0x24e>
    d868:	6a33      	ldr	r3, [r6, #32]
    d86a:	4a66      	ldr	r2, [pc, #408]	; (da04 <_tzset_unlocked_r+0x2f0>)
    d86c:	189b      	adds	r3, r3, r2
    d86e:	63f3      	str	r3, [r6, #60]	; 0x3c
    d870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d872:	0037      	movs	r7, r6
    d874:	18e4      	adds	r4, r4, r3
    d876:	2300      	movs	r3, #0
    d878:	3708      	adds	r7, #8
    d87a:	9304      	str	r3, [sp, #16]
    d87c:	7823      	ldrb	r3, [r4, #0]
    d87e:	3b2c      	subs	r3, #44	; 0x2c
    d880:	4259      	negs	r1, r3
    d882:	4159      	adcs	r1, r3
    d884:	1864      	adds	r4, r4, r1
    d886:	7825      	ldrb	r5, [r4, #0]
    d888:	2d4d      	cmp	r5, #77	; 0x4d
    d88a:	d000      	beq.n	d88e <_tzset_unlocked_r+0x17a>
    d88c:	e078      	b.n	d980 <_tzset_unlocked_r+0x26c>
    d88e:	221e      	movs	r2, #30
    d890:	a902      	add	r1, sp, #8
    d892:	1852      	adds	r2, r2, r1
    d894:	9202      	str	r2, [sp, #8]
    d896:	aa09      	add	r2, sp, #36	; 0x24
    d898:	9200      	str	r2, [sp, #0]
    d89a:	221a      	movs	r2, #26
    d89c:	ab0a      	add	r3, sp, #40	; 0x28
    d89e:	1852      	adds	r2, r2, r1
    d8a0:	9303      	str	r3, [sp, #12]
    d8a2:	9301      	str	r3, [sp, #4]
    d8a4:	4958      	ldr	r1, [pc, #352]	; (da08 <_tzset_unlocked_r+0x2f4>)
    d8a6:	0020      	movs	r0, r4
    d8a8:	f001 ff5e 	bl	f768 <siscanf>
    d8ac:	2803      	cmp	r0, #3
    d8ae:	d000      	beq.n	d8b2 <_tzset_unlocked_r+0x19e>
    d8b0:	e749      	b.n	d746 <_tzset_unlocked_r+0x32>
    d8b2:	ab02      	add	r3, sp, #8
    d8b4:	8b59      	ldrh	r1, [r3, #26]
    d8b6:	1e4b      	subs	r3, r1, #1
    d8b8:	2b0b      	cmp	r3, #11
    d8ba:	d900      	bls.n	d8be <_tzset_unlocked_r+0x1aa>
    d8bc:	e743      	b.n	d746 <_tzset_unlocked_r+0x32>
    d8be:	ab02      	add	r3, sp, #8
    d8c0:	8b9a      	ldrh	r2, [r3, #28]
    d8c2:	1e53      	subs	r3, r2, #1
    d8c4:	2b04      	cmp	r3, #4
    d8c6:	d900      	bls.n	d8ca <_tzset_unlocked_r+0x1b6>
    d8c8:	e73d      	b.n	d746 <_tzset_unlocked_r+0x32>
    d8ca:	ab02      	add	r3, sp, #8
    d8cc:	8bdb      	ldrh	r3, [r3, #30]
    d8ce:	2b06      	cmp	r3, #6
    d8d0:	d900      	bls.n	d8d4 <_tzset_unlocked_r+0x1c0>
    d8d2:	e738      	b.n	d746 <_tzset_unlocked_r+0x32>
    d8d4:	703d      	strb	r5, [r7, #0]
    d8d6:	6079      	str	r1, [r7, #4]
    d8d8:	60ba      	str	r2, [r7, #8]
    d8da:	60fb      	str	r3, [r7, #12]
    d8dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d8de:	18e5      	adds	r5, r4, r3
    d8e0:	2302      	movs	r3, #2
    d8e2:	aa07      	add	r2, sp, #28
    d8e4:	8013      	strh	r3, [r2, #0]
    d8e6:	2300      	movs	r3, #0
    d8e8:	a902      	add	r1, sp, #8
    d8ea:	ac08      	add	r4, sp, #32
    d8ec:	82cb      	strh	r3, [r1, #22]
    d8ee:	8023      	strh	r3, [r4, #0]
    d8f0:	930a      	str	r3, [sp, #40]	; 0x28
    d8f2:	782b      	ldrb	r3, [r5, #0]
    d8f4:	2b2f      	cmp	r3, #47	; 0x2f
    d8f6:	d10b      	bne.n	d910 <_tzset_unlocked_r+0x1fc>
    d8f8:	2116      	movs	r1, #22
    d8fa:	a802      	add	r0, sp, #8
    d8fc:	1809      	adds	r1, r1, r0
    d8fe:	ab0a      	add	r3, sp, #40	; 0x28
    d900:	9100      	str	r1, [sp, #0]
    d902:	9303      	str	r3, [sp, #12]
    d904:	9402      	str	r4, [sp, #8]
    d906:	9301      	str	r3, [sp, #4]
    d908:	4940      	ldr	r1, [pc, #256]	; (da0c <_tzset_unlocked_r+0x2f8>)
    d90a:	0028      	movs	r0, r5
    d90c:	f001 ff2c 	bl	f768 <siscanf>
    d910:	ab02      	add	r3, sp, #8
    d912:	8ada      	ldrh	r2, [r3, #22]
    d914:	233c      	movs	r3, #60	; 0x3c
    d916:	4353      	muls	r3, r2
    d918:	8822      	ldrh	r2, [r4, #0]
    d91a:	189b      	adds	r3, r3, r2
    d91c:	aa07      	add	r2, sp, #28
    d91e:	8811      	ldrh	r1, [r2, #0]
    d920:	22e1      	movs	r2, #225	; 0xe1
    d922:	0112      	lsls	r2, r2, #4
    d924:	434a      	muls	r2, r1
    d926:	189b      	adds	r3, r3, r2
    d928:	613b      	str	r3, [r7, #16]
    d92a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d92c:	371c      	adds	r7, #28
    d92e:	18ec      	adds	r4, r5, r3
    d930:	9b04      	ldr	r3, [sp, #16]
    d932:	3301      	adds	r3, #1
    d934:	9304      	str	r3, [sp, #16]
    d936:	2b02      	cmp	r3, #2
    d938:	d1a0      	bne.n	d87c <_tzset_unlocked_r+0x168>
    d93a:	6870      	ldr	r0, [r6, #4]
    d93c:	f7ff fe32 	bl	d5a4 <__tzcalc_limits>
    d940:	6a32      	ldr	r2, [r6, #32]
    d942:	4b28      	ldr	r3, [pc, #160]	; (d9e4 <_tzset_unlocked_r+0x2d0>)
    d944:	601a      	str	r2, [r3, #0]
    d946:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    d948:	1a9b      	subs	r3, r3, r2
    d94a:	1e5a      	subs	r2, r3, #1
    d94c:	4193      	sbcs	r3, r2
    d94e:	4a27      	ldr	r2, [pc, #156]	; (d9ec <_tzset_unlocked_r+0x2d8>)
    d950:	6013      	str	r3, [r2, #0]
    d952:	e6f8      	b.n	d746 <_tzset_unlocked_r+0x32>
    d954:	2201      	movs	r2, #1
    d956:	3b2b      	subs	r3, #43	; 0x2b
    d958:	9204      	str	r2, [sp, #16]
    d95a:	4259      	negs	r1, r3
    d95c:	4159      	adcs	r1, r3
    d95e:	1864      	adds	r4, r4, r1
    d960:	e76b      	b.n	d83a <_tzset_unlocked_r+0x126>
    d962:	233c      	movs	r3, #60	; 0x3c
    d964:	883a      	ldrh	r2, [r7, #0]
    d966:	8829      	ldrh	r1, [r5, #0]
    d968:	4353      	muls	r3, r2
    d96a:	aa02      	add	r2, sp, #8
    d96c:	8b12      	ldrh	r2, [r2, #24]
    d96e:	189b      	adds	r3, r3, r2
    d970:	22e1      	movs	r2, #225	; 0xe1
    d972:	0112      	lsls	r2, r2, #4
    d974:	434a      	muls	r2, r1
    d976:	189b      	adds	r3, r3, r2
    d978:	9a04      	ldr	r2, [sp, #16]
    d97a:	435a      	muls	r2, r3
    d97c:	0013      	movs	r3, r2
    d97e:	e776      	b.n	d86e <_tzset_unlocked_r+0x15a>
    d980:	2344      	movs	r3, #68	; 0x44
    d982:	9305      	str	r3, [sp, #20]
    d984:	2d4a      	cmp	r5, #74	; 0x4a
    d986:	d101      	bne.n	d98c <_tzset_unlocked_r+0x278>
    d988:	3401      	adds	r4, #1
    d98a:	9505      	str	r5, [sp, #20]
    d98c:	220a      	movs	r2, #10
    d98e:	a90b      	add	r1, sp, #44	; 0x2c
    d990:	0020      	movs	r0, r4
    d992:	f001 fff7 	bl	f984 <strtoul>
    d996:	231e      	movs	r3, #30
    d998:	aa02      	add	r2, sp, #8
    d99a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    d99c:	189b      	adds	r3, r3, r2
    d99e:	8018      	strh	r0, [r3, #0]
    d9a0:	42ac      	cmp	r4, r5
    d9a2:	d115      	bne.n	d9d0 <_tzset_unlocked_r+0x2bc>
    d9a4:	9b04      	ldr	r3, [sp, #16]
    d9a6:	2b00      	cmp	r3, #0
    d9a8:	d108      	bne.n	d9bc <_tzset_unlocked_r+0x2a8>
    d9aa:	334d      	adds	r3, #77	; 0x4d
    d9ac:	7233      	strb	r3, [r6, #8]
    d9ae:	2303      	movs	r3, #3
    d9b0:	60f3      	str	r3, [r6, #12]
    d9b2:	3b01      	subs	r3, #1
    d9b4:	6133      	str	r3, [r6, #16]
    d9b6:	9b04      	ldr	r3, [sp, #16]
    d9b8:	6173      	str	r3, [r6, #20]
    d9ba:	e791      	b.n	d8e0 <_tzset_unlocked_r+0x1cc>
    d9bc:	224d      	movs	r2, #77	; 0x4d
    d9be:	1d73      	adds	r3, r6, #5
    d9c0:	77da      	strb	r2, [r3, #31]
    d9c2:	230b      	movs	r3, #11
    d9c4:	62b3      	str	r3, [r6, #40]	; 0x28
    d9c6:	3b0a      	subs	r3, #10
    d9c8:	62f3      	str	r3, [r6, #44]	; 0x2c
    d9ca:	2300      	movs	r3, #0
    d9cc:	6333      	str	r3, [r6, #48]	; 0x30
    d9ce:	e787      	b.n	d8e0 <_tzset_unlocked_r+0x1cc>
    d9d0:	466b      	mov	r3, sp
    d9d2:	7d1b      	ldrb	r3, [r3, #20]
    d9d4:	b280      	uxth	r0, r0
    d9d6:	703b      	strb	r3, [r7, #0]
    d9d8:	60f8      	str	r0, [r7, #12]
    d9da:	e781      	b.n	d8e0 <_tzset_unlocked_r+0x1cc>
    d9dc:	000120f3 	.word	0x000120f3
    d9e0:	200022c8 	.word	0x200022c8
    d9e4:	200022d0 	.word	0x200022d0
    d9e8:	000120f6 	.word	0x000120f6
    d9ec:	200022cc 	.word	0x200022cc
    d9f0:	2000027c 	.word	0x2000027c
    d9f4:	200022bb 	.word	0x200022bb
    d9f8:	000120fa 	.word	0x000120fa
    d9fc:	0001211d 	.word	0x0001211d
    da00:	200022b0 	.word	0x200022b0
    da04:	fffff1f0 	.word	0xfffff1f0
    da08:	00012109 	.word	0x00012109
    da0c:	0001211c 	.word	0x0001211c

0000da10 <_vsiprintf_r>:
    da10:	b530      	push	{r4, r5, lr}
    da12:	b09b      	sub	sp, #108	; 0x6c
    da14:	9100      	str	r1, [sp, #0]
    da16:	9104      	str	r1, [sp, #16]
    da18:	4908      	ldr	r1, [pc, #32]	; (da3c <_vsiprintf_r+0x2c>)
    da1a:	466d      	mov	r5, sp
    da1c:	9102      	str	r1, [sp, #8]
    da1e:	9105      	str	r1, [sp, #20]
    da20:	2101      	movs	r1, #1
    da22:	2482      	movs	r4, #130	; 0x82
    da24:	4249      	negs	r1, r1
    da26:	81e9      	strh	r1, [r5, #14]
    da28:	00a4      	lsls	r4, r4, #2
    da2a:	4669      	mov	r1, sp
    da2c:	81ac      	strh	r4, [r5, #12]
    da2e:	f001 fd4d 	bl	f4cc <_svfiprintf_r>
    da32:	2300      	movs	r3, #0
    da34:	9a00      	ldr	r2, [sp, #0]
    da36:	7013      	strb	r3, [r2, #0]
    da38:	b01b      	add	sp, #108	; 0x6c
    da3a:	bd30      	pop	{r4, r5, pc}
    da3c:	7fffffff 	.word	0x7fffffff

0000da40 <vsiprintf>:
    da40:	b510      	push	{r4, lr}
    da42:	0013      	movs	r3, r2
    da44:	000a      	movs	r2, r1
    da46:	0001      	movs	r1, r0
    da48:	4802      	ldr	r0, [pc, #8]	; (da54 <vsiprintf+0x14>)
    da4a:	6800      	ldr	r0, [r0, #0]
    da4c:	f7ff ffe0 	bl	da10 <_vsiprintf_r>
    da50:	bd10      	pop	{r4, pc}
    da52:	46c0      	nop			; (mov r8, r8)
    da54:	200000ac 	.word	0x200000ac

0000da58 <__swbuf_r>:
    da58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da5a:	0005      	movs	r5, r0
    da5c:	000e      	movs	r6, r1
    da5e:	0014      	movs	r4, r2
    da60:	2800      	cmp	r0, #0
    da62:	d004      	beq.n	da6e <__swbuf_r+0x16>
    da64:	6983      	ldr	r3, [r0, #24]
    da66:	2b00      	cmp	r3, #0
    da68:	d101      	bne.n	da6e <__swbuf_r+0x16>
    da6a:	f001 f855 	bl	eb18 <__sinit>
    da6e:	4b22      	ldr	r3, [pc, #136]	; (daf8 <__swbuf_r+0xa0>)
    da70:	429c      	cmp	r4, r3
    da72:	d12d      	bne.n	dad0 <__swbuf_r+0x78>
    da74:	686c      	ldr	r4, [r5, #4]
    da76:	69a3      	ldr	r3, [r4, #24]
    da78:	60a3      	str	r3, [r4, #8]
    da7a:	89a3      	ldrh	r3, [r4, #12]
    da7c:	071b      	lsls	r3, r3, #28
    da7e:	d531      	bpl.n	dae4 <__swbuf_r+0x8c>
    da80:	6923      	ldr	r3, [r4, #16]
    da82:	2b00      	cmp	r3, #0
    da84:	d02e      	beq.n	dae4 <__swbuf_r+0x8c>
    da86:	6823      	ldr	r3, [r4, #0]
    da88:	6922      	ldr	r2, [r4, #16]
    da8a:	b2f7      	uxtb	r7, r6
    da8c:	1a98      	subs	r0, r3, r2
    da8e:	6963      	ldr	r3, [r4, #20]
    da90:	b2f6      	uxtb	r6, r6
    da92:	4298      	cmp	r0, r3
    da94:	db05      	blt.n	daa2 <__swbuf_r+0x4a>
    da96:	0021      	movs	r1, r4
    da98:	0028      	movs	r0, r5
    da9a:	f000 ffcf 	bl	ea3c <_fflush_r>
    da9e:	2800      	cmp	r0, #0
    daa0:	d126      	bne.n	daf0 <__swbuf_r+0x98>
    daa2:	68a3      	ldr	r3, [r4, #8]
    daa4:	3001      	adds	r0, #1
    daa6:	3b01      	subs	r3, #1
    daa8:	60a3      	str	r3, [r4, #8]
    daaa:	6823      	ldr	r3, [r4, #0]
    daac:	1c5a      	adds	r2, r3, #1
    daae:	6022      	str	r2, [r4, #0]
    dab0:	701f      	strb	r7, [r3, #0]
    dab2:	6963      	ldr	r3, [r4, #20]
    dab4:	4298      	cmp	r0, r3
    dab6:	d004      	beq.n	dac2 <__swbuf_r+0x6a>
    dab8:	89a3      	ldrh	r3, [r4, #12]
    daba:	07db      	lsls	r3, r3, #31
    dabc:	d51a      	bpl.n	daf4 <__swbuf_r+0x9c>
    dabe:	2e0a      	cmp	r6, #10
    dac0:	d118      	bne.n	daf4 <__swbuf_r+0x9c>
    dac2:	0021      	movs	r1, r4
    dac4:	0028      	movs	r0, r5
    dac6:	f000 ffb9 	bl	ea3c <_fflush_r>
    daca:	2800      	cmp	r0, #0
    dacc:	d012      	beq.n	daf4 <__swbuf_r+0x9c>
    dace:	e00f      	b.n	daf0 <__swbuf_r+0x98>
    dad0:	4b0a      	ldr	r3, [pc, #40]	; (dafc <__swbuf_r+0xa4>)
    dad2:	429c      	cmp	r4, r3
    dad4:	d101      	bne.n	dada <__swbuf_r+0x82>
    dad6:	68ac      	ldr	r4, [r5, #8]
    dad8:	e7cd      	b.n	da76 <__swbuf_r+0x1e>
    dada:	4b09      	ldr	r3, [pc, #36]	; (db00 <__swbuf_r+0xa8>)
    dadc:	429c      	cmp	r4, r3
    dade:	d1ca      	bne.n	da76 <__swbuf_r+0x1e>
    dae0:	68ec      	ldr	r4, [r5, #12]
    dae2:	e7c8      	b.n	da76 <__swbuf_r+0x1e>
    dae4:	0021      	movs	r1, r4
    dae6:	0028      	movs	r0, r5
    dae8:	f000 f818 	bl	db1c <__swsetup_r>
    daec:	2800      	cmp	r0, #0
    daee:	d0ca      	beq.n	da86 <__swbuf_r+0x2e>
    daf0:	2601      	movs	r6, #1
    daf2:	4276      	negs	r6, r6
    daf4:	0030      	movs	r0, r6
    daf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    daf8:	00012260 	.word	0x00012260
    dafc:	00012280 	.word	0x00012280
    db00:	00012240 	.word	0x00012240

0000db04 <__ascii_wctomb>:
    db04:	1e0b      	subs	r3, r1, #0
    db06:	d004      	beq.n	db12 <__ascii_wctomb+0xe>
    db08:	2aff      	cmp	r2, #255	; 0xff
    db0a:	d904      	bls.n	db16 <__ascii_wctomb+0x12>
    db0c:	238a      	movs	r3, #138	; 0x8a
    db0e:	6003      	str	r3, [r0, #0]
    db10:	3b8b      	subs	r3, #139	; 0x8b
    db12:	0018      	movs	r0, r3
    db14:	4770      	bx	lr
    db16:	700a      	strb	r2, [r1, #0]
    db18:	2301      	movs	r3, #1
    db1a:	e7fa      	b.n	db12 <__ascii_wctomb+0xe>

0000db1c <__swsetup_r>:
    db1c:	4b36      	ldr	r3, [pc, #216]	; (dbf8 <__swsetup_r+0xdc>)
    db1e:	b570      	push	{r4, r5, r6, lr}
    db20:	681d      	ldr	r5, [r3, #0]
    db22:	0006      	movs	r6, r0
    db24:	000c      	movs	r4, r1
    db26:	2d00      	cmp	r5, #0
    db28:	d005      	beq.n	db36 <__swsetup_r+0x1a>
    db2a:	69ab      	ldr	r3, [r5, #24]
    db2c:	2b00      	cmp	r3, #0
    db2e:	d102      	bne.n	db36 <__swsetup_r+0x1a>
    db30:	0028      	movs	r0, r5
    db32:	f000 fff1 	bl	eb18 <__sinit>
    db36:	4b31      	ldr	r3, [pc, #196]	; (dbfc <__swsetup_r+0xe0>)
    db38:	429c      	cmp	r4, r3
    db3a:	d10f      	bne.n	db5c <__swsetup_r+0x40>
    db3c:	686c      	ldr	r4, [r5, #4]
    db3e:	230c      	movs	r3, #12
    db40:	5ee2      	ldrsh	r2, [r4, r3]
    db42:	b293      	uxth	r3, r2
    db44:	0719      	lsls	r1, r3, #28
    db46:	d42d      	bmi.n	dba4 <__swsetup_r+0x88>
    db48:	06d9      	lsls	r1, r3, #27
    db4a:	d411      	bmi.n	db70 <__swsetup_r+0x54>
    db4c:	2309      	movs	r3, #9
    db4e:	2001      	movs	r0, #1
    db50:	6033      	str	r3, [r6, #0]
    db52:	3337      	adds	r3, #55	; 0x37
    db54:	4313      	orrs	r3, r2
    db56:	81a3      	strh	r3, [r4, #12]
    db58:	4240      	negs	r0, r0
    db5a:	bd70      	pop	{r4, r5, r6, pc}
    db5c:	4b28      	ldr	r3, [pc, #160]	; (dc00 <__swsetup_r+0xe4>)
    db5e:	429c      	cmp	r4, r3
    db60:	d101      	bne.n	db66 <__swsetup_r+0x4a>
    db62:	68ac      	ldr	r4, [r5, #8]
    db64:	e7eb      	b.n	db3e <__swsetup_r+0x22>
    db66:	4b27      	ldr	r3, [pc, #156]	; (dc04 <__swsetup_r+0xe8>)
    db68:	429c      	cmp	r4, r3
    db6a:	d1e8      	bne.n	db3e <__swsetup_r+0x22>
    db6c:	68ec      	ldr	r4, [r5, #12]
    db6e:	e7e6      	b.n	db3e <__swsetup_r+0x22>
    db70:	075b      	lsls	r3, r3, #29
    db72:	d513      	bpl.n	db9c <__swsetup_r+0x80>
    db74:	6b61      	ldr	r1, [r4, #52]	; 0x34
    db76:	2900      	cmp	r1, #0
    db78:	d008      	beq.n	db8c <__swsetup_r+0x70>
    db7a:	0023      	movs	r3, r4
    db7c:	3344      	adds	r3, #68	; 0x44
    db7e:	4299      	cmp	r1, r3
    db80:	d002      	beq.n	db88 <__swsetup_r+0x6c>
    db82:	0030      	movs	r0, r6
    db84:	f7fe fd64 	bl	c650 <_free_r>
    db88:	2300      	movs	r3, #0
    db8a:	6363      	str	r3, [r4, #52]	; 0x34
    db8c:	2224      	movs	r2, #36	; 0x24
    db8e:	89a3      	ldrh	r3, [r4, #12]
    db90:	4393      	bics	r3, r2
    db92:	81a3      	strh	r3, [r4, #12]
    db94:	2300      	movs	r3, #0
    db96:	6063      	str	r3, [r4, #4]
    db98:	6923      	ldr	r3, [r4, #16]
    db9a:	6023      	str	r3, [r4, #0]
    db9c:	2308      	movs	r3, #8
    db9e:	89a2      	ldrh	r2, [r4, #12]
    dba0:	4313      	orrs	r3, r2
    dba2:	81a3      	strh	r3, [r4, #12]
    dba4:	6923      	ldr	r3, [r4, #16]
    dba6:	2b00      	cmp	r3, #0
    dba8:	d10b      	bne.n	dbc2 <__swsetup_r+0xa6>
    dbaa:	21a0      	movs	r1, #160	; 0xa0
    dbac:	2280      	movs	r2, #128	; 0x80
    dbae:	89a3      	ldrh	r3, [r4, #12]
    dbb0:	0089      	lsls	r1, r1, #2
    dbb2:	0092      	lsls	r2, r2, #2
    dbb4:	400b      	ands	r3, r1
    dbb6:	4293      	cmp	r3, r2
    dbb8:	d003      	beq.n	dbc2 <__swsetup_r+0xa6>
    dbba:	0021      	movs	r1, r4
    dbbc:	0030      	movs	r0, r6
    dbbe:	f001 f8bb 	bl	ed38 <__smakebuf_r>
    dbc2:	2301      	movs	r3, #1
    dbc4:	89a2      	ldrh	r2, [r4, #12]
    dbc6:	4013      	ands	r3, r2
    dbc8:	d011      	beq.n	dbee <__swsetup_r+0xd2>
    dbca:	2300      	movs	r3, #0
    dbcc:	60a3      	str	r3, [r4, #8]
    dbce:	6963      	ldr	r3, [r4, #20]
    dbd0:	425b      	negs	r3, r3
    dbd2:	61a3      	str	r3, [r4, #24]
    dbd4:	2000      	movs	r0, #0
    dbd6:	6923      	ldr	r3, [r4, #16]
    dbd8:	4283      	cmp	r3, r0
    dbda:	d1be      	bne.n	db5a <__swsetup_r+0x3e>
    dbdc:	230c      	movs	r3, #12
    dbde:	5ee2      	ldrsh	r2, [r4, r3]
    dbe0:	0613      	lsls	r3, r2, #24
    dbe2:	d5ba      	bpl.n	db5a <__swsetup_r+0x3e>
    dbe4:	2340      	movs	r3, #64	; 0x40
    dbe6:	4313      	orrs	r3, r2
    dbe8:	81a3      	strh	r3, [r4, #12]
    dbea:	3801      	subs	r0, #1
    dbec:	e7b5      	b.n	db5a <__swsetup_r+0x3e>
    dbee:	0792      	lsls	r2, r2, #30
    dbf0:	d400      	bmi.n	dbf4 <__swsetup_r+0xd8>
    dbf2:	6963      	ldr	r3, [r4, #20]
    dbf4:	60a3      	str	r3, [r4, #8]
    dbf6:	e7ed      	b.n	dbd4 <__swsetup_r+0xb8>
    dbf8:	200000ac 	.word	0x200000ac
    dbfc:	00012260 	.word	0x00012260
    dc00:	00012280 	.word	0x00012280
    dc04:	00012240 	.word	0x00012240

0000dc08 <abort>:
    dc08:	b510      	push	{r4, lr}
    dc0a:	2006      	movs	r0, #6
    dc0c:	f001 fd8c 	bl	f728 <raise>
    dc10:	2001      	movs	r0, #1
    dc12:	f002 fb4b 	bl	102ac <_exit>

0000dc16 <div>:
    dc16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc18:	000f      	movs	r7, r1
    dc1a:	0006      	movs	r6, r0
    dc1c:	0011      	movs	r1, r2
    dc1e:	0038      	movs	r0, r7
    dc20:	0015      	movs	r5, r2
    dc22:	f7fb fcf7 	bl	9614 <__divsi3>
    dc26:	0029      	movs	r1, r5
    dc28:	0004      	movs	r4, r0
    dc2a:	0038      	movs	r0, r7
    dc2c:	f7fb fdd8 	bl	97e0 <__aeabi_idivmod>
    dc30:	2f00      	cmp	r7, #0
    dc32:	db07      	blt.n	dc44 <div+0x2e>
    dc34:	2900      	cmp	r1, #0
    dc36:	da01      	bge.n	dc3c <div+0x26>
    dc38:	3401      	adds	r4, #1
    dc3a:	1b49      	subs	r1, r1, r5
    dc3c:	0030      	movs	r0, r6
    dc3e:	6034      	str	r4, [r6, #0]
    dc40:	6071      	str	r1, [r6, #4]
    dc42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dc44:	2900      	cmp	r1, #0
    dc46:	ddf9      	ble.n	dc3c <div+0x26>
    dc48:	3c01      	subs	r4, #1
    dc4a:	1949      	adds	r1, r1, r5
    dc4c:	e7f6      	b.n	dc3c <div+0x26>

0000dc4e <quorem>:
    dc4e:	b5f0      	push	{r4, r5, r6, r7, lr}
    dc50:	6903      	ldr	r3, [r0, #16]
    dc52:	690c      	ldr	r4, [r1, #16]
    dc54:	b089      	sub	sp, #36	; 0x24
    dc56:	0007      	movs	r7, r0
    dc58:	9105      	str	r1, [sp, #20]
    dc5a:	2600      	movs	r6, #0
    dc5c:	429c      	cmp	r4, r3
    dc5e:	dc6d      	bgt.n	dd3c <quorem+0xee>
    dc60:	000b      	movs	r3, r1
    dc62:	3c01      	subs	r4, #1
    dc64:	3314      	adds	r3, #20
    dc66:	00a5      	lsls	r5, r4, #2
    dc68:	9303      	str	r3, [sp, #12]
    dc6a:	195b      	adds	r3, r3, r5
    dc6c:	9304      	str	r3, [sp, #16]
    dc6e:	0003      	movs	r3, r0
    dc70:	3314      	adds	r3, #20
    dc72:	9302      	str	r3, [sp, #8]
    dc74:	195d      	adds	r5, r3, r5
    dc76:	9b04      	ldr	r3, [sp, #16]
    dc78:	6828      	ldr	r0, [r5, #0]
    dc7a:	681b      	ldr	r3, [r3, #0]
    dc7c:	1c59      	adds	r1, r3, #1
    dc7e:	9301      	str	r3, [sp, #4]
    dc80:	f7fb fc3e 	bl	9500 <__udivsi3>
    dc84:	9001      	str	r0, [sp, #4]
    dc86:	42b0      	cmp	r0, r6
    dc88:	d02d      	beq.n	dce6 <quorem+0x98>
    dc8a:	9b03      	ldr	r3, [sp, #12]
    dc8c:	9802      	ldr	r0, [sp, #8]
    dc8e:	469c      	mov	ip, r3
    dc90:	9606      	str	r6, [sp, #24]
    dc92:	4662      	mov	r2, ip
    dc94:	ca08      	ldmia	r2!, {r3}
    dc96:	4694      	mov	ip, r2
    dc98:	9a01      	ldr	r2, [sp, #4]
    dc9a:	b299      	uxth	r1, r3
    dc9c:	4351      	muls	r1, r2
    dc9e:	0c1b      	lsrs	r3, r3, #16
    dca0:	4353      	muls	r3, r2
    dca2:	1989      	adds	r1, r1, r6
    dca4:	0c0a      	lsrs	r2, r1, #16
    dca6:	189b      	adds	r3, r3, r2
    dca8:	9307      	str	r3, [sp, #28]
    dcaa:	8802      	ldrh	r2, [r0, #0]
    dcac:	0c1e      	lsrs	r6, r3, #16
    dcae:	9b06      	ldr	r3, [sp, #24]
    dcb0:	b289      	uxth	r1, r1
    dcb2:	18d2      	adds	r2, r2, r3
    dcb4:	6803      	ldr	r3, [r0, #0]
    dcb6:	1a52      	subs	r2, r2, r1
    dcb8:	0c19      	lsrs	r1, r3, #16
    dcba:	466b      	mov	r3, sp
    dcbc:	8b9b      	ldrh	r3, [r3, #28]
    dcbe:	1acb      	subs	r3, r1, r3
    dcc0:	1411      	asrs	r1, r2, #16
    dcc2:	185b      	adds	r3, r3, r1
    dcc4:	1419      	asrs	r1, r3, #16
    dcc6:	b292      	uxth	r2, r2
    dcc8:	041b      	lsls	r3, r3, #16
    dcca:	431a      	orrs	r2, r3
    dccc:	9b04      	ldr	r3, [sp, #16]
    dcce:	9106      	str	r1, [sp, #24]
    dcd0:	c004      	stmia	r0!, {r2}
    dcd2:	4563      	cmp	r3, ip
    dcd4:	d2dd      	bcs.n	dc92 <quorem+0x44>
    dcd6:	682b      	ldr	r3, [r5, #0]
    dcd8:	2b00      	cmp	r3, #0
    dcda:	d104      	bne.n	dce6 <quorem+0x98>
    dcdc:	9b02      	ldr	r3, [sp, #8]
    dcde:	3d04      	subs	r5, #4
    dce0:	42ab      	cmp	r3, r5
    dce2:	d32e      	bcc.n	dd42 <quorem+0xf4>
    dce4:	613c      	str	r4, [r7, #16]
    dce6:	9905      	ldr	r1, [sp, #20]
    dce8:	0038      	movs	r0, r7
    dcea:	f001 fa88 	bl	f1fe <__mcmp>
    dcee:	2800      	cmp	r0, #0
    dcf0:	db23      	blt.n	dd3a <quorem+0xec>
    dcf2:	2500      	movs	r5, #0
    dcf4:	9b01      	ldr	r3, [sp, #4]
    dcf6:	9802      	ldr	r0, [sp, #8]
    dcf8:	3301      	adds	r3, #1
    dcfa:	9903      	ldr	r1, [sp, #12]
    dcfc:	9301      	str	r3, [sp, #4]
    dcfe:	c908      	ldmia	r1!, {r3}
    dd00:	8802      	ldrh	r2, [r0, #0]
    dd02:	1955      	adds	r5, r2, r5
    dd04:	b29a      	uxth	r2, r3
    dd06:	1aaa      	subs	r2, r5, r2
    dd08:	6805      	ldr	r5, [r0, #0]
    dd0a:	0c1b      	lsrs	r3, r3, #16
    dd0c:	0c2d      	lsrs	r5, r5, #16
    dd0e:	1aeb      	subs	r3, r5, r3
    dd10:	1415      	asrs	r5, r2, #16
    dd12:	195b      	adds	r3, r3, r5
    dd14:	141d      	asrs	r5, r3, #16
    dd16:	b292      	uxth	r2, r2
    dd18:	041b      	lsls	r3, r3, #16
    dd1a:	4313      	orrs	r3, r2
    dd1c:	c008      	stmia	r0!, {r3}
    dd1e:	9b04      	ldr	r3, [sp, #16]
    dd20:	428b      	cmp	r3, r1
    dd22:	d2ec      	bcs.n	dcfe <quorem+0xb0>
    dd24:	9a02      	ldr	r2, [sp, #8]
    dd26:	00a3      	lsls	r3, r4, #2
    dd28:	18d3      	adds	r3, r2, r3
    dd2a:	681a      	ldr	r2, [r3, #0]
    dd2c:	2a00      	cmp	r2, #0
    dd2e:	d104      	bne.n	dd3a <quorem+0xec>
    dd30:	9a02      	ldr	r2, [sp, #8]
    dd32:	3b04      	subs	r3, #4
    dd34:	429a      	cmp	r2, r3
    dd36:	d309      	bcc.n	dd4c <quorem+0xfe>
    dd38:	613c      	str	r4, [r7, #16]
    dd3a:	9e01      	ldr	r6, [sp, #4]
    dd3c:	0030      	movs	r0, r6
    dd3e:	b009      	add	sp, #36	; 0x24
    dd40:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd42:	682b      	ldr	r3, [r5, #0]
    dd44:	2b00      	cmp	r3, #0
    dd46:	d1cd      	bne.n	dce4 <quorem+0x96>
    dd48:	3c01      	subs	r4, #1
    dd4a:	e7c7      	b.n	dcdc <quorem+0x8e>
    dd4c:	681a      	ldr	r2, [r3, #0]
    dd4e:	2a00      	cmp	r2, #0
    dd50:	d1f2      	bne.n	dd38 <quorem+0xea>
    dd52:	3c01      	subs	r4, #1
    dd54:	e7ec      	b.n	dd30 <quorem+0xe2>
	...

0000dd58 <_dtoa_r>:
    dd58:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd5a:	0016      	movs	r6, r2
    dd5c:	001f      	movs	r7, r3
    dd5e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    dd60:	b09d      	sub	sp, #116	; 0x74
    dd62:	9004      	str	r0, [sp, #16]
    dd64:	9d25      	ldr	r5, [sp, #148]	; 0x94
    dd66:	9606      	str	r6, [sp, #24]
    dd68:	9707      	str	r7, [sp, #28]
    dd6a:	2c00      	cmp	r4, #0
    dd6c:	d108      	bne.n	dd80 <_dtoa_r+0x28>
    dd6e:	2010      	movs	r0, #16
    dd70:	f7fe f9c0 	bl	c0f4 <malloc>
    dd74:	9b04      	ldr	r3, [sp, #16]
    dd76:	6258      	str	r0, [r3, #36]	; 0x24
    dd78:	6044      	str	r4, [r0, #4]
    dd7a:	6084      	str	r4, [r0, #8]
    dd7c:	6004      	str	r4, [r0, #0]
    dd7e:	60c4      	str	r4, [r0, #12]
    dd80:	9b04      	ldr	r3, [sp, #16]
    dd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dd84:	6819      	ldr	r1, [r3, #0]
    dd86:	2900      	cmp	r1, #0
    dd88:	d00b      	beq.n	dda2 <_dtoa_r+0x4a>
    dd8a:	685a      	ldr	r2, [r3, #4]
    dd8c:	2301      	movs	r3, #1
    dd8e:	4093      	lsls	r3, r2
    dd90:	604a      	str	r2, [r1, #4]
    dd92:	608b      	str	r3, [r1, #8]
    dd94:	9804      	ldr	r0, [sp, #16]
    dd96:	f001 f858 	bl	ee4a <_Bfree>
    dd9a:	2200      	movs	r2, #0
    dd9c:	9b04      	ldr	r3, [sp, #16]
    dd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dda0:	601a      	str	r2, [r3, #0]
    dda2:	9b07      	ldr	r3, [sp, #28]
    dda4:	2b00      	cmp	r3, #0
    dda6:	da1f      	bge.n	dde8 <_dtoa_r+0x90>
    dda8:	2301      	movs	r3, #1
    ddaa:	602b      	str	r3, [r5, #0]
    ddac:	007b      	lsls	r3, r7, #1
    ddae:	085b      	lsrs	r3, r3, #1
    ddb0:	9307      	str	r3, [sp, #28]
    ddb2:	9c07      	ldr	r4, [sp, #28]
    ddb4:	4bb7      	ldr	r3, [pc, #732]	; (e094 <_dtoa_r+0x33c>)
    ddb6:	0022      	movs	r2, r4
    ddb8:	9319      	str	r3, [sp, #100]	; 0x64
    ddba:	401a      	ands	r2, r3
    ddbc:	429a      	cmp	r2, r3
    ddbe:	d116      	bne.n	ddee <_dtoa_r+0x96>
    ddc0:	4bb5      	ldr	r3, [pc, #724]	; (e098 <_dtoa_r+0x340>)
    ddc2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    ddc4:	6013      	str	r3, [r2, #0]
    ddc6:	9b06      	ldr	r3, [sp, #24]
    ddc8:	2b00      	cmp	r3, #0
    ddca:	d103      	bne.n	ddd4 <_dtoa_r+0x7c>
    ddcc:	0324      	lsls	r4, r4, #12
    ddce:	d101      	bne.n	ddd4 <_dtoa_r+0x7c>
    ddd0:	f000 fd91 	bl	e8f6 <_dtoa_r+0xb9e>
    ddd4:	4bb1      	ldr	r3, [pc, #708]	; (e09c <_dtoa_r+0x344>)
    ddd6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ddd8:	930a      	str	r3, [sp, #40]	; 0x28
    ddda:	4bb1      	ldr	r3, [pc, #708]	; (e0a0 <_dtoa_r+0x348>)
    dddc:	2a00      	cmp	r2, #0
    ddde:	d001      	beq.n	dde4 <_dtoa_r+0x8c>
    dde0:	f000 fd8f 	bl	e902 <_dtoa_r+0xbaa>
    dde4:	f000 fd8f 	bl	e906 <_dtoa_r+0xbae>
    dde8:	2300      	movs	r3, #0
    ddea:	602b      	str	r3, [r5, #0]
    ddec:	e7e1      	b.n	ddb2 <_dtoa_r+0x5a>
    ddee:	9e06      	ldr	r6, [sp, #24]
    ddf0:	9f07      	ldr	r7, [sp, #28]
    ddf2:	2200      	movs	r2, #0
    ddf4:	2300      	movs	r3, #0
    ddf6:	0030      	movs	r0, r6
    ddf8:	0039      	movs	r1, r7
    ddfa:	f7fb fd07 	bl	980c <__aeabi_dcmpeq>
    ddfe:	1e05      	subs	r5, r0, #0
    de00:	d00e      	beq.n	de20 <_dtoa_r+0xc8>
    de02:	2301      	movs	r3, #1
    de04:	9a24      	ldr	r2, [sp, #144]	; 0x90
    de06:	6013      	str	r3, [r2, #0]
    de08:	4ba6      	ldr	r3, [pc, #664]	; (e0a4 <_dtoa_r+0x34c>)
    de0a:	9a26      	ldr	r2, [sp, #152]	; 0x98
    de0c:	930a      	str	r3, [sp, #40]	; 0x28
    de0e:	2a00      	cmp	r2, #0
    de10:	d101      	bne.n	de16 <_dtoa_r+0xbe>
    de12:	f000 fd78 	bl	e906 <_dtoa_r+0xbae>
    de16:	4aa4      	ldr	r2, [pc, #656]	; (e0a8 <_dtoa_r+0x350>)
    de18:	9926      	ldr	r1, [sp, #152]	; 0x98
    de1a:	600a      	str	r2, [r1, #0]
    de1c:	f000 fd73 	bl	e906 <_dtoa_r+0xbae>
    de20:	ab1a      	add	r3, sp, #104	; 0x68
    de22:	9301      	str	r3, [sp, #4]
    de24:	ab1b      	add	r3, sp, #108	; 0x6c
    de26:	9300      	str	r3, [sp, #0]
    de28:	0032      	movs	r2, r6
    de2a:	003b      	movs	r3, r7
    de2c:	9804      	ldr	r0, [sp, #16]
    de2e:	f001 fa63 	bl	f2f8 <__d2b>
    de32:	0063      	lsls	r3, r4, #1
    de34:	9005      	str	r0, [sp, #20]
    de36:	0d5b      	lsrs	r3, r3, #21
    de38:	d100      	bne.n	de3c <_dtoa_r+0xe4>
    de3a:	e07f      	b.n	df3c <_dtoa_r+0x1e4>
    de3c:	033a      	lsls	r2, r7, #12
    de3e:	4c9b      	ldr	r4, [pc, #620]	; (e0ac <_dtoa_r+0x354>)
    de40:	0b12      	lsrs	r2, r2, #12
    de42:	4314      	orrs	r4, r2
    de44:	0021      	movs	r1, r4
    de46:	4a9a      	ldr	r2, [pc, #616]	; (e0b0 <_dtoa_r+0x358>)
    de48:	0030      	movs	r0, r6
    de4a:	9518      	str	r5, [sp, #96]	; 0x60
    de4c:	189e      	adds	r6, r3, r2
    de4e:	2200      	movs	r2, #0
    de50:	4b98      	ldr	r3, [pc, #608]	; (e0b4 <_dtoa_r+0x35c>)
    de52:	f7fd fb2f 	bl	b4b4 <__aeabi_dsub>
    de56:	4a98      	ldr	r2, [pc, #608]	; (e0b8 <_dtoa_r+0x360>)
    de58:	4b98      	ldr	r3, [pc, #608]	; (e0bc <_dtoa_r+0x364>)
    de5a:	f7fd f8ab 	bl	afb4 <__aeabi_dmul>
    de5e:	4a98      	ldr	r2, [pc, #608]	; (e0c0 <_dtoa_r+0x368>)
    de60:	4b98      	ldr	r3, [pc, #608]	; (e0c4 <_dtoa_r+0x36c>)
    de62:	f7fc f963 	bl	a12c <__aeabi_dadd>
    de66:	0004      	movs	r4, r0
    de68:	0030      	movs	r0, r6
    de6a:	000d      	movs	r5, r1
    de6c:	f7fd fe8c 	bl	bb88 <__aeabi_i2d>
    de70:	4a95      	ldr	r2, [pc, #596]	; (e0c8 <_dtoa_r+0x370>)
    de72:	4b96      	ldr	r3, [pc, #600]	; (e0cc <_dtoa_r+0x374>)
    de74:	f7fd f89e 	bl	afb4 <__aeabi_dmul>
    de78:	0002      	movs	r2, r0
    de7a:	000b      	movs	r3, r1
    de7c:	0020      	movs	r0, r4
    de7e:	0029      	movs	r1, r5
    de80:	f7fc f954 	bl	a12c <__aeabi_dadd>
    de84:	0004      	movs	r4, r0
    de86:	000d      	movs	r5, r1
    de88:	f7fd fe4a 	bl	bb20 <__aeabi_d2iz>
    de8c:	2200      	movs	r2, #0
    de8e:	9003      	str	r0, [sp, #12]
    de90:	2300      	movs	r3, #0
    de92:	0020      	movs	r0, r4
    de94:	0029      	movs	r1, r5
    de96:	f7fb fcbf 	bl	9818 <__aeabi_dcmplt>
    de9a:	2800      	cmp	r0, #0
    de9c:	d00e      	beq.n	debc <_dtoa_r+0x164>
    de9e:	9803      	ldr	r0, [sp, #12]
    dea0:	f7fd fe72 	bl	bb88 <__aeabi_i2d>
    dea4:	000b      	movs	r3, r1
    dea6:	0002      	movs	r2, r0
    dea8:	0029      	movs	r1, r5
    deaa:	0020      	movs	r0, r4
    deac:	f7fb fcae 	bl	980c <__aeabi_dcmpeq>
    deb0:	0003      	movs	r3, r0
    deb2:	4258      	negs	r0, r3
    deb4:	4158      	adcs	r0, r3
    deb6:	9b03      	ldr	r3, [sp, #12]
    deb8:	1a1b      	subs	r3, r3, r0
    deba:	9303      	str	r3, [sp, #12]
    debc:	2301      	movs	r3, #1
    debe:	9316      	str	r3, [sp, #88]	; 0x58
    dec0:	9b03      	ldr	r3, [sp, #12]
    dec2:	2b16      	cmp	r3, #22
    dec4:	d80f      	bhi.n	dee6 <_dtoa_r+0x18e>
    dec6:	4982      	ldr	r1, [pc, #520]	; (e0d0 <_dtoa_r+0x378>)
    dec8:	00db      	lsls	r3, r3, #3
    deca:	18c9      	adds	r1, r1, r3
    decc:	6808      	ldr	r0, [r1, #0]
    dece:	6849      	ldr	r1, [r1, #4]
    ded0:	9a06      	ldr	r2, [sp, #24]
    ded2:	9b07      	ldr	r3, [sp, #28]
    ded4:	f7fb fcb4 	bl	9840 <__aeabi_dcmpgt>
    ded8:	2800      	cmp	r0, #0
    deda:	d04b      	beq.n	df74 <_dtoa_r+0x21c>
    dedc:	9b03      	ldr	r3, [sp, #12]
    dede:	3b01      	subs	r3, #1
    dee0:	9303      	str	r3, [sp, #12]
    dee2:	2300      	movs	r3, #0
    dee4:	9316      	str	r3, [sp, #88]	; 0x58
    dee6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    dee8:	1b9e      	subs	r6, r3, r6
    deea:	2300      	movs	r3, #0
    deec:	930b      	str	r3, [sp, #44]	; 0x2c
    deee:	0033      	movs	r3, r6
    def0:	3b01      	subs	r3, #1
    def2:	930c      	str	r3, [sp, #48]	; 0x30
    def4:	d504      	bpl.n	df00 <_dtoa_r+0x1a8>
    def6:	2301      	movs	r3, #1
    def8:	1b9b      	subs	r3, r3, r6
    defa:	930b      	str	r3, [sp, #44]	; 0x2c
    defc:	2300      	movs	r3, #0
    defe:	930c      	str	r3, [sp, #48]	; 0x30
    df00:	9b03      	ldr	r3, [sp, #12]
    df02:	2b00      	cmp	r3, #0
    df04:	db38      	blt.n	df78 <_dtoa_r+0x220>
    df06:	9a03      	ldr	r2, [sp, #12]
    df08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    df0a:	4694      	mov	ip, r2
    df0c:	4463      	add	r3, ip
    df0e:	930c      	str	r3, [sp, #48]	; 0x30
    df10:	2300      	movs	r3, #0
    df12:	920f      	str	r2, [sp, #60]	; 0x3c
    df14:	9308      	str	r3, [sp, #32]
    df16:	9b22      	ldr	r3, [sp, #136]	; 0x88
    df18:	2501      	movs	r5, #1
    df1a:	2b09      	cmp	r3, #9
    df1c:	d900      	bls.n	df20 <_dtoa_r+0x1c8>
    df1e:	e091      	b.n	e044 <_dtoa_r+0x2ec>
    df20:	2b05      	cmp	r3, #5
    df22:	dd02      	ble.n	df2a <_dtoa_r+0x1d2>
    df24:	2500      	movs	r5, #0
    df26:	3b04      	subs	r3, #4
    df28:	9322      	str	r3, [sp, #136]	; 0x88
    df2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    df2c:	1e98      	subs	r0, r3, #2
    df2e:	2803      	cmp	r0, #3
    df30:	d900      	bls.n	df34 <_dtoa_r+0x1dc>
    df32:	e091      	b.n	e058 <_dtoa_r+0x300>
    df34:	f7fb fada 	bl	94ec <__gnu_thumb1_case_uqi>
    df38:	76298482 	.word	0x76298482
    df3c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    df3e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    df40:	189e      	adds	r6, r3, r2
    df42:	4b64      	ldr	r3, [pc, #400]	; (e0d4 <_dtoa_r+0x37c>)
    df44:	18f2      	adds	r2, r6, r3
    df46:	2a20      	cmp	r2, #32
    df48:	dd0f      	ble.n	df6a <_dtoa_r+0x212>
    df4a:	4b63      	ldr	r3, [pc, #396]	; (e0d8 <_dtoa_r+0x380>)
    df4c:	9806      	ldr	r0, [sp, #24]
    df4e:	18f3      	adds	r3, r6, r3
    df50:	40d8      	lsrs	r0, r3
    df52:	2340      	movs	r3, #64	; 0x40
    df54:	1a9b      	subs	r3, r3, r2
    df56:	409c      	lsls	r4, r3
    df58:	4320      	orrs	r0, r4
    df5a:	f7fd fe57 	bl	bc0c <__aeabi_ui2d>
    df5e:	2301      	movs	r3, #1
    df60:	4c5e      	ldr	r4, [pc, #376]	; (e0dc <_dtoa_r+0x384>)
    df62:	3e01      	subs	r6, #1
    df64:	1909      	adds	r1, r1, r4
    df66:	9318      	str	r3, [sp, #96]	; 0x60
    df68:	e771      	b.n	de4e <_dtoa_r+0xf6>
    df6a:	2320      	movs	r3, #32
    df6c:	9806      	ldr	r0, [sp, #24]
    df6e:	1a9b      	subs	r3, r3, r2
    df70:	4098      	lsls	r0, r3
    df72:	e7f2      	b.n	df5a <_dtoa_r+0x202>
    df74:	9016      	str	r0, [sp, #88]	; 0x58
    df76:	e7b6      	b.n	dee6 <_dtoa_r+0x18e>
    df78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    df7a:	9a03      	ldr	r2, [sp, #12]
    df7c:	1a9b      	subs	r3, r3, r2
    df7e:	930b      	str	r3, [sp, #44]	; 0x2c
    df80:	4253      	negs	r3, r2
    df82:	9308      	str	r3, [sp, #32]
    df84:	2300      	movs	r3, #0
    df86:	930f      	str	r3, [sp, #60]	; 0x3c
    df88:	e7c5      	b.n	df16 <_dtoa_r+0x1be>
    df8a:	2301      	movs	r3, #1
    df8c:	930e      	str	r3, [sp, #56]	; 0x38
    df8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    df90:	2b00      	cmp	r3, #0
    df92:	dd65      	ble.n	e060 <_dtoa_r+0x308>
    df94:	001f      	movs	r7, r3
    df96:	930d      	str	r3, [sp, #52]	; 0x34
    df98:	9a04      	ldr	r2, [sp, #16]
    df9a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    df9c:	2200      	movs	r2, #0
    df9e:	6062      	str	r2, [r4, #4]
    dfa0:	3204      	adds	r2, #4
    dfa2:	0011      	movs	r1, r2
    dfa4:	3114      	adds	r1, #20
    dfa6:	4299      	cmp	r1, r3
    dfa8:	d95f      	bls.n	e06a <_dtoa_r+0x312>
    dfaa:	6861      	ldr	r1, [r4, #4]
    dfac:	9804      	ldr	r0, [sp, #16]
    dfae:	f000 ff14 	bl	edda <_Balloc>
    dfb2:	9b04      	ldr	r3, [sp, #16]
    dfb4:	6020      	str	r0, [r4, #0]
    dfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dfb8:	681b      	ldr	r3, [r3, #0]
    dfba:	930a      	str	r3, [sp, #40]	; 0x28
    dfbc:	2f0e      	cmp	r7, #14
    dfbe:	d900      	bls.n	dfc2 <_dtoa_r+0x26a>
    dfc0:	e105      	b.n	e1ce <_dtoa_r+0x476>
    dfc2:	2d00      	cmp	r5, #0
    dfc4:	d100      	bne.n	dfc8 <_dtoa_r+0x270>
    dfc6:	e102      	b.n	e1ce <_dtoa_r+0x476>
    dfc8:	9b06      	ldr	r3, [sp, #24]
    dfca:	9c07      	ldr	r4, [sp, #28]
    dfcc:	9314      	str	r3, [sp, #80]	; 0x50
    dfce:	9415      	str	r4, [sp, #84]	; 0x54
    dfd0:	9b03      	ldr	r3, [sp, #12]
    dfd2:	2b00      	cmp	r3, #0
    dfd4:	dc00      	bgt.n	dfd8 <_dtoa_r+0x280>
    dfd6:	e085      	b.n	e0e4 <_dtoa_r+0x38c>
    dfd8:	001a      	movs	r2, r3
    dfda:	210f      	movs	r1, #15
    dfdc:	4b3c      	ldr	r3, [pc, #240]	; (e0d0 <_dtoa_r+0x378>)
    dfde:	400a      	ands	r2, r1
    dfe0:	00d2      	lsls	r2, r2, #3
    dfe2:	189b      	adds	r3, r3, r2
    dfe4:	685c      	ldr	r4, [r3, #4]
    dfe6:	681b      	ldr	r3, [r3, #0]
    dfe8:	9310      	str	r3, [sp, #64]	; 0x40
    dfea:	9411      	str	r4, [sp, #68]	; 0x44
    dfec:	9b03      	ldr	r3, [sp, #12]
    dfee:	2402      	movs	r4, #2
    dff0:	111d      	asrs	r5, r3, #4
    dff2:	06eb      	lsls	r3, r5, #27
    dff4:	d50a      	bpl.n	e00c <_dtoa_r+0x2b4>
    dff6:	4b3a      	ldr	r3, [pc, #232]	; (e0e0 <_dtoa_r+0x388>)
    dff8:	400d      	ands	r5, r1
    dffa:	6a1a      	ldr	r2, [r3, #32]
    dffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    dffe:	9814      	ldr	r0, [sp, #80]	; 0x50
    e000:	9915      	ldr	r1, [sp, #84]	; 0x54
    e002:	f7fc fba3 	bl	a74c <__aeabi_ddiv>
    e006:	9006      	str	r0, [sp, #24]
    e008:	9107      	str	r1, [sp, #28]
    e00a:	3401      	adds	r4, #1
    e00c:	4e34      	ldr	r6, [pc, #208]	; (e0e0 <_dtoa_r+0x388>)
    e00e:	2d00      	cmp	r5, #0
    e010:	d130      	bne.n	e074 <_dtoa_r+0x31c>
    e012:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e014:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e016:	9806      	ldr	r0, [sp, #24]
    e018:	9907      	ldr	r1, [sp, #28]
    e01a:	f7fc fb97 	bl	a74c <__aeabi_ddiv>
    e01e:	9006      	str	r0, [sp, #24]
    e020:	9107      	str	r1, [sp, #28]
    e022:	e07a      	b.n	e11a <_dtoa_r+0x3c2>
    e024:	2301      	movs	r3, #1
    e026:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    e028:	930e      	str	r3, [sp, #56]	; 0x38
    e02a:	4694      	mov	ip, r2
    e02c:	9b03      	ldr	r3, [sp, #12]
    e02e:	4463      	add	r3, ip
    e030:	1c5f      	adds	r7, r3, #1
    e032:	930d      	str	r3, [sp, #52]	; 0x34
    e034:	1e3b      	subs	r3, r7, #0
    e036:	dcaf      	bgt.n	df98 <_dtoa_r+0x240>
    e038:	2301      	movs	r3, #1
    e03a:	e7ad      	b.n	df98 <_dtoa_r+0x240>
    e03c:	2300      	movs	r3, #0
    e03e:	e7a5      	b.n	df8c <_dtoa_r+0x234>
    e040:	2300      	movs	r3, #0
    e042:	e7f0      	b.n	e026 <_dtoa_r+0x2ce>
    e044:	2300      	movs	r3, #0
    e046:	950e      	str	r5, [sp, #56]	; 0x38
    e048:	9322      	str	r3, [sp, #136]	; 0x88
    e04a:	3b01      	subs	r3, #1
    e04c:	2200      	movs	r2, #0
    e04e:	930d      	str	r3, [sp, #52]	; 0x34
    e050:	001f      	movs	r7, r3
    e052:	3313      	adds	r3, #19
    e054:	9223      	str	r2, [sp, #140]	; 0x8c
    e056:	e79f      	b.n	df98 <_dtoa_r+0x240>
    e058:	2301      	movs	r3, #1
    e05a:	930e      	str	r3, [sp, #56]	; 0x38
    e05c:	3b02      	subs	r3, #2
    e05e:	e7f5      	b.n	e04c <_dtoa_r+0x2f4>
    e060:	2301      	movs	r3, #1
    e062:	930d      	str	r3, [sp, #52]	; 0x34
    e064:	001f      	movs	r7, r3
    e066:	001a      	movs	r2, r3
    e068:	e7f4      	b.n	e054 <_dtoa_r+0x2fc>
    e06a:	6861      	ldr	r1, [r4, #4]
    e06c:	0052      	lsls	r2, r2, #1
    e06e:	3101      	adds	r1, #1
    e070:	6061      	str	r1, [r4, #4]
    e072:	e796      	b.n	dfa2 <_dtoa_r+0x24a>
    e074:	2301      	movs	r3, #1
    e076:	421d      	tst	r5, r3
    e078:	d008      	beq.n	e08c <_dtoa_r+0x334>
    e07a:	9810      	ldr	r0, [sp, #64]	; 0x40
    e07c:	9911      	ldr	r1, [sp, #68]	; 0x44
    e07e:	18e4      	adds	r4, r4, r3
    e080:	6832      	ldr	r2, [r6, #0]
    e082:	6873      	ldr	r3, [r6, #4]
    e084:	f7fc ff96 	bl	afb4 <__aeabi_dmul>
    e088:	9010      	str	r0, [sp, #64]	; 0x40
    e08a:	9111      	str	r1, [sp, #68]	; 0x44
    e08c:	106d      	asrs	r5, r5, #1
    e08e:	3608      	adds	r6, #8
    e090:	e7bd      	b.n	e00e <_dtoa_r+0x2b6>
    e092:	46c0      	nop			; (mov r8, r8)
    e094:	7ff00000 	.word	0x7ff00000
    e098:	0000270f 	.word	0x0000270f
    e09c:	00012239 	.word	0x00012239
    e0a0:	0001223c 	.word	0x0001223c
    e0a4:	0001067b 	.word	0x0001067b
    e0a8:	0001067c 	.word	0x0001067c
    e0ac:	3ff00000 	.word	0x3ff00000
    e0b0:	fffffc01 	.word	0xfffffc01
    e0b4:	3ff80000 	.word	0x3ff80000
    e0b8:	636f4361 	.word	0x636f4361
    e0bc:	3fd287a7 	.word	0x3fd287a7
    e0c0:	8b60c8b3 	.word	0x8b60c8b3
    e0c4:	3fc68a28 	.word	0x3fc68a28
    e0c8:	509f79fb 	.word	0x509f79fb
    e0cc:	3fd34413 	.word	0x3fd34413
    e0d0:	00012328 	.word	0x00012328
    e0d4:	00000432 	.word	0x00000432
    e0d8:	00000412 	.word	0x00000412
    e0dc:	fe100000 	.word	0xfe100000
    e0e0:	00012300 	.word	0x00012300
    e0e4:	9b03      	ldr	r3, [sp, #12]
    e0e6:	2402      	movs	r4, #2
    e0e8:	2b00      	cmp	r3, #0
    e0ea:	d016      	beq.n	e11a <_dtoa_r+0x3c2>
    e0ec:	9814      	ldr	r0, [sp, #80]	; 0x50
    e0ee:	9915      	ldr	r1, [sp, #84]	; 0x54
    e0f0:	425d      	negs	r5, r3
    e0f2:	230f      	movs	r3, #15
    e0f4:	4aca      	ldr	r2, [pc, #808]	; (e420 <_dtoa_r+0x6c8>)
    e0f6:	402b      	ands	r3, r5
    e0f8:	00db      	lsls	r3, r3, #3
    e0fa:	18d3      	adds	r3, r2, r3
    e0fc:	681a      	ldr	r2, [r3, #0]
    e0fe:	685b      	ldr	r3, [r3, #4]
    e100:	f7fc ff58 	bl	afb4 <__aeabi_dmul>
    e104:	2300      	movs	r3, #0
    e106:	9006      	str	r0, [sp, #24]
    e108:	9107      	str	r1, [sp, #28]
    e10a:	4ec6      	ldr	r6, [pc, #792]	; (e424 <_dtoa_r+0x6cc>)
    e10c:	112d      	asrs	r5, r5, #4
    e10e:	2d00      	cmp	r5, #0
    e110:	d000      	beq.n	e114 <_dtoa_r+0x3bc>
    e112:	e08c      	b.n	e22e <_dtoa_r+0x4d6>
    e114:	2b00      	cmp	r3, #0
    e116:	d000      	beq.n	e11a <_dtoa_r+0x3c2>
    e118:	e781      	b.n	e01e <_dtoa_r+0x2c6>
    e11a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e11c:	2b00      	cmp	r3, #0
    e11e:	d100      	bne.n	e122 <_dtoa_r+0x3ca>
    e120:	e091      	b.n	e246 <_dtoa_r+0x4ee>
    e122:	9a06      	ldr	r2, [sp, #24]
    e124:	9b07      	ldr	r3, [sp, #28]
    e126:	9210      	str	r2, [sp, #64]	; 0x40
    e128:	9311      	str	r3, [sp, #68]	; 0x44
    e12a:	9810      	ldr	r0, [sp, #64]	; 0x40
    e12c:	9911      	ldr	r1, [sp, #68]	; 0x44
    e12e:	2200      	movs	r2, #0
    e130:	4bbd      	ldr	r3, [pc, #756]	; (e428 <_dtoa_r+0x6d0>)
    e132:	f7fb fb71 	bl	9818 <__aeabi_dcmplt>
    e136:	2800      	cmp	r0, #0
    e138:	d100      	bne.n	e13c <_dtoa_r+0x3e4>
    e13a:	e084      	b.n	e246 <_dtoa_r+0x4ee>
    e13c:	2f00      	cmp	r7, #0
    e13e:	d100      	bne.n	e142 <_dtoa_r+0x3ea>
    e140:	e081      	b.n	e246 <_dtoa_r+0x4ee>
    e142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e144:	2b00      	cmp	r3, #0
    e146:	dd3e      	ble.n	e1c6 <_dtoa_r+0x46e>
    e148:	9810      	ldr	r0, [sp, #64]	; 0x40
    e14a:	9911      	ldr	r1, [sp, #68]	; 0x44
    e14c:	9b03      	ldr	r3, [sp, #12]
    e14e:	2200      	movs	r2, #0
    e150:	1e5e      	subs	r6, r3, #1
    e152:	4bb6      	ldr	r3, [pc, #728]	; (e42c <_dtoa_r+0x6d4>)
    e154:	f7fc ff2e 	bl	afb4 <__aeabi_dmul>
    e158:	9006      	str	r0, [sp, #24]
    e15a:	9107      	str	r1, [sp, #28]
    e15c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    e15e:	3401      	adds	r4, #1
    e160:	0020      	movs	r0, r4
    e162:	f7fd fd11 	bl	bb88 <__aeabi_i2d>
    e166:	9a06      	ldr	r2, [sp, #24]
    e168:	9b07      	ldr	r3, [sp, #28]
    e16a:	f7fc ff23 	bl	afb4 <__aeabi_dmul>
    e16e:	2200      	movs	r2, #0
    e170:	4baf      	ldr	r3, [pc, #700]	; (e430 <_dtoa_r+0x6d8>)
    e172:	f7fb ffdb 	bl	a12c <__aeabi_dadd>
    e176:	9012      	str	r0, [sp, #72]	; 0x48
    e178:	9113      	str	r1, [sp, #76]	; 0x4c
    e17a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e17c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    e17e:	4aad      	ldr	r2, [pc, #692]	; (e434 <_dtoa_r+0x6dc>)
    e180:	9310      	str	r3, [sp, #64]	; 0x40
    e182:	9411      	str	r4, [sp, #68]	; 0x44
    e184:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e186:	189c      	adds	r4, r3, r2
    e188:	9411      	str	r4, [sp, #68]	; 0x44
    e18a:	2d00      	cmp	r5, #0
    e18c:	d15e      	bne.n	e24c <_dtoa_r+0x4f4>
    e18e:	9806      	ldr	r0, [sp, #24]
    e190:	9907      	ldr	r1, [sp, #28]
    e192:	2200      	movs	r2, #0
    e194:	4ba8      	ldr	r3, [pc, #672]	; (e438 <_dtoa_r+0x6e0>)
    e196:	f7fd f98d 	bl	b4b4 <__aeabi_dsub>
    e19a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e19c:	0023      	movs	r3, r4
    e19e:	9006      	str	r0, [sp, #24]
    e1a0:	9107      	str	r1, [sp, #28]
    e1a2:	f7fb fb4d 	bl	9840 <__aeabi_dcmpgt>
    e1a6:	2800      	cmp	r0, #0
    e1a8:	d000      	beq.n	e1ac <_dtoa_r+0x454>
    e1aa:	e301      	b.n	e7b0 <_dtoa_r+0xa58>
    e1ac:	48a3      	ldr	r0, [pc, #652]	; (e43c <_dtoa_r+0x6e4>)
    e1ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
    e1b0:	4684      	mov	ip, r0
    e1b2:	4461      	add	r1, ip
    e1b4:	000b      	movs	r3, r1
    e1b6:	9806      	ldr	r0, [sp, #24]
    e1b8:	9907      	ldr	r1, [sp, #28]
    e1ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e1bc:	f7fb fb2c 	bl	9818 <__aeabi_dcmplt>
    e1c0:	2800      	cmp	r0, #0
    e1c2:	d000      	beq.n	e1c6 <_dtoa_r+0x46e>
    e1c4:	e2e8      	b.n	e798 <_dtoa_r+0xa40>
    e1c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    e1c8:	9c15      	ldr	r4, [sp, #84]	; 0x54
    e1ca:	9306      	str	r3, [sp, #24]
    e1cc:	9407      	str	r4, [sp, #28]
    e1ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e1d0:	2b00      	cmp	r3, #0
    e1d2:	da00      	bge.n	e1d6 <_dtoa_r+0x47e>
    e1d4:	e157      	b.n	e486 <_dtoa_r+0x72e>
    e1d6:	9a03      	ldr	r2, [sp, #12]
    e1d8:	2a0e      	cmp	r2, #14
    e1da:	dd00      	ble.n	e1de <_dtoa_r+0x486>
    e1dc:	e153      	b.n	e486 <_dtoa_r+0x72e>
    e1de:	4b90      	ldr	r3, [pc, #576]	; (e420 <_dtoa_r+0x6c8>)
    e1e0:	00d2      	lsls	r2, r2, #3
    e1e2:	189b      	adds	r3, r3, r2
    e1e4:	685c      	ldr	r4, [r3, #4]
    e1e6:	681b      	ldr	r3, [r3, #0]
    e1e8:	9308      	str	r3, [sp, #32]
    e1ea:	9409      	str	r4, [sp, #36]	; 0x24
    e1ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e1ee:	2b00      	cmp	r3, #0
    e1f0:	db00      	blt.n	e1f4 <_dtoa_r+0x49c>
    e1f2:	e0ce      	b.n	e392 <_dtoa_r+0x63a>
    e1f4:	2f00      	cmp	r7, #0
    e1f6:	dd00      	ble.n	e1fa <_dtoa_r+0x4a2>
    e1f8:	e0cb      	b.n	e392 <_dtoa_r+0x63a>
    e1fa:	d000      	beq.n	e1fe <_dtoa_r+0x4a6>
    e1fc:	e2cf      	b.n	e79e <_dtoa_r+0xa46>
    e1fe:	9808      	ldr	r0, [sp, #32]
    e200:	9909      	ldr	r1, [sp, #36]	; 0x24
    e202:	2200      	movs	r2, #0
    e204:	4b8c      	ldr	r3, [pc, #560]	; (e438 <_dtoa_r+0x6e0>)
    e206:	f7fc fed5 	bl	afb4 <__aeabi_dmul>
    e20a:	9a06      	ldr	r2, [sp, #24]
    e20c:	9b07      	ldr	r3, [sp, #28]
    e20e:	f7fb fb21 	bl	9854 <__aeabi_dcmpge>
    e212:	003e      	movs	r6, r7
    e214:	9708      	str	r7, [sp, #32]
    e216:	2800      	cmp	r0, #0
    e218:	d000      	beq.n	e21c <_dtoa_r+0x4c4>
    e21a:	e2a4      	b.n	e766 <_dtoa_r+0xa0e>
    e21c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e21e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e220:	1c5d      	adds	r5, r3, #1
    e222:	2331      	movs	r3, #49	; 0x31
    e224:	7013      	strb	r3, [r2, #0]
    e226:	9b03      	ldr	r3, [sp, #12]
    e228:	3301      	adds	r3, #1
    e22a:	9303      	str	r3, [sp, #12]
    e22c:	e29f      	b.n	e76e <_dtoa_r+0xa16>
    e22e:	2201      	movs	r2, #1
    e230:	4215      	tst	r5, r2
    e232:	d005      	beq.n	e240 <_dtoa_r+0x4e8>
    e234:	18a4      	adds	r4, r4, r2
    e236:	6832      	ldr	r2, [r6, #0]
    e238:	6873      	ldr	r3, [r6, #4]
    e23a:	f7fc febb 	bl	afb4 <__aeabi_dmul>
    e23e:	2301      	movs	r3, #1
    e240:	106d      	asrs	r5, r5, #1
    e242:	3608      	adds	r6, #8
    e244:	e763      	b.n	e10e <_dtoa_r+0x3b6>
    e246:	9e03      	ldr	r6, [sp, #12]
    e248:	003d      	movs	r5, r7
    e24a:	e789      	b.n	e160 <_dtoa_r+0x408>
    e24c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e24e:	1e69      	subs	r1, r5, #1
    e250:	1952      	adds	r2, r2, r5
    e252:	9217      	str	r2, [sp, #92]	; 0x5c
    e254:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e256:	4b72      	ldr	r3, [pc, #456]	; (e420 <_dtoa_r+0x6c8>)
    e258:	00c9      	lsls	r1, r1, #3
    e25a:	2a00      	cmp	r2, #0
    e25c:	d04a      	beq.n	e2f4 <_dtoa_r+0x59c>
    e25e:	185b      	adds	r3, r3, r1
    e260:	681a      	ldr	r2, [r3, #0]
    e262:	685b      	ldr	r3, [r3, #4]
    e264:	2000      	movs	r0, #0
    e266:	4976      	ldr	r1, [pc, #472]	; (e440 <_dtoa_r+0x6e8>)
    e268:	f7fc fa70 	bl	a74c <__aeabi_ddiv>
    e26c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e26e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e270:	f7fd f920 	bl	b4b4 <__aeabi_dsub>
    e274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e276:	9010      	str	r0, [sp, #64]	; 0x40
    e278:	9111      	str	r1, [sp, #68]	; 0x44
    e27a:	9312      	str	r3, [sp, #72]	; 0x48
    e27c:	9806      	ldr	r0, [sp, #24]
    e27e:	9907      	ldr	r1, [sp, #28]
    e280:	f7fd fc4e 	bl	bb20 <__aeabi_d2iz>
    e284:	0004      	movs	r4, r0
    e286:	f7fd fc7f 	bl	bb88 <__aeabi_i2d>
    e28a:	0002      	movs	r2, r0
    e28c:	000b      	movs	r3, r1
    e28e:	9806      	ldr	r0, [sp, #24]
    e290:	9907      	ldr	r1, [sp, #28]
    e292:	f7fd f90f 	bl	b4b4 <__aeabi_dsub>
    e296:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e298:	3430      	adds	r4, #48	; 0x30
    e29a:	1c5d      	adds	r5, r3, #1
    e29c:	701c      	strb	r4, [r3, #0]
    e29e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e2a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e2a2:	9006      	str	r0, [sp, #24]
    e2a4:	9107      	str	r1, [sp, #28]
    e2a6:	f7fb fab7 	bl	9818 <__aeabi_dcmplt>
    e2aa:	2800      	cmp	r0, #0
    e2ac:	d165      	bne.n	e37a <_dtoa_r+0x622>
    e2ae:	9a06      	ldr	r2, [sp, #24]
    e2b0:	9b07      	ldr	r3, [sp, #28]
    e2b2:	2000      	movs	r0, #0
    e2b4:	495c      	ldr	r1, [pc, #368]	; (e428 <_dtoa_r+0x6d0>)
    e2b6:	f7fd f8fd 	bl	b4b4 <__aeabi_dsub>
    e2ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e2bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e2be:	f7fb faab 	bl	9818 <__aeabi_dcmplt>
    e2c2:	2800      	cmp	r0, #0
    e2c4:	d000      	beq.n	e2c8 <_dtoa_r+0x570>
    e2c6:	e0be      	b.n	e446 <_dtoa_r+0x6ee>
    e2c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e2ca:	429d      	cmp	r5, r3
    e2cc:	d100      	bne.n	e2d0 <_dtoa_r+0x578>
    e2ce:	e77a      	b.n	e1c6 <_dtoa_r+0x46e>
    e2d0:	9810      	ldr	r0, [sp, #64]	; 0x40
    e2d2:	9911      	ldr	r1, [sp, #68]	; 0x44
    e2d4:	2200      	movs	r2, #0
    e2d6:	4b55      	ldr	r3, [pc, #340]	; (e42c <_dtoa_r+0x6d4>)
    e2d8:	f7fc fe6c 	bl	afb4 <__aeabi_dmul>
    e2dc:	2200      	movs	r2, #0
    e2de:	9010      	str	r0, [sp, #64]	; 0x40
    e2e0:	9111      	str	r1, [sp, #68]	; 0x44
    e2e2:	9806      	ldr	r0, [sp, #24]
    e2e4:	9907      	ldr	r1, [sp, #28]
    e2e6:	4b51      	ldr	r3, [pc, #324]	; (e42c <_dtoa_r+0x6d4>)
    e2e8:	f7fc fe64 	bl	afb4 <__aeabi_dmul>
    e2ec:	9512      	str	r5, [sp, #72]	; 0x48
    e2ee:	9006      	str	r0, [sp, #24]
    e2f0:	9107      	str	r1, [sp, #28]
    e2f2:	e7c3      	b.n	e27c <_dtoa_r+0x524>
    e2f4:	1859      	adds	r1, r3, r1
    e2f6:	6808      	ldr	r0, [r1, #0]
    e2f8:	6849      	ldr	r1, [r1, #4]
    e2fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e2fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e2fe:	f7fc fe59 	bl	afb4 <__aeabi_dmul>
    e302:	9010      	str	r0, [sp, #64]	; 0x40
    e304:	9111      	str	r1, [sp, #68]	; 0x44
    e306:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    e308:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    e30a:	9806      	ldr	r0, [sp, #24]
    e30c:	9907      	ldr	r1, [sp, #28]
    e30e:	f7fd fc07 	bl	bb20 <__aeabi_d2iz>
    e312:	9012      	str	r0, [sp, #72]	; 0x48
    e314:	f7fd fc38 	bl	bb88 <__aeabi_i2d>
    e318:	0002      	movs	r2, r0
    e31a:	000b      	movs	r3, r1
    e31c:	9806      	ldr	r0, [sp, #24]
    e31e:	9907      	ldr	r1, [sp, #28]
    e320:	f7fd f8c8 	bl	b4b4 <__aeabi_dsub>
    e324:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e326:	9006      	str	r0, [sp, #24]
    e328:	9107      	str	r1, [sp, #28]
    e32a:	3330      	adds	r3, #48	; 0x30
    e32c:	7023      	strb	r3, [r4, #0]
    e32e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e330:	3401      	adds	r4, #1
    e332:	2200      	movs	r2, #0
    e334:	42a3      	cmp	r3, r4
    e336:	d124      	bne.n	e382 <_dtoa_r+0x62a>
    e338:	4b41      	ldr	r3, [pc, #260]	; (e440 <_dtoa_r+0x6e8>)
    e33a:	9810      	ldr	r0, [sp, #64]	; 0x40
    e33c:	9911      	ldr	r1, [sp, #68]	; 0x44
    e33e:	f7fb fef5 	bl	a12c <__aeabi_dadd>
    e342:	0002      	movs	r2, r0
    e344:	000b      	movs	r3, r1
    e346:	9806      	ldr	r0, [sp, #24]
    e348:	9907      	ldr	r1, [sp, #28]
    e34a:	f7fb fa79 	bl	9840 <__aeabi_dcmpgt>
    e34e:	2800      	cmp	r0, #0
    e350:	d000      	beq.n	e354 <_dtoa_r+0x5fc>
    e352:	e078      	b.n	e446 <_dtoa_r+0x6ee>
    e354:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e356:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e358:	2000      	movs	r0, #0
    e35a:	4939      	ldr	r1, [pc, #228]	; (e440 <_dtoa_r+0x6e8>)
    e35c:	f7fd f8aa 	bl	b4b4 <__aeabi_dsub>
    e360:	0002      	movs	r2, r0
    e362:	000b      	movs	r3, r1
    e364:	9806      	ldr	r0, [sp, #24]
    e366:	9907      	ldr	r1, [sp, #28]
    e368:	f7fb fa56 	bl	9818 <__aeabi_dcmplt>
    e36c:	2800      	cmp	r0, #0
    e36e:	d100      	bne.n	e372 <_dtoa_r+0x61a>
    e370:	e729      	b.n	e1c6 <_dtoa_r+0x46e>
    e372:	1e6b      	subs	r3, r5, #1
    e374:	781a      	ldrb	r2, [r3, #0]
    e376:	2a30      	cmp	r2, #48	; 0x30
    e378:	d001      	beq.n	e37e <_dtoa_r+0x626>
    e37a:	9603      	str	r6, [sp, #12]
    e37c:	e03f      	b.n	e3fe <_dtoa_r+0x6a6>
    e37e:	001d      	movs	r5, r3
    e380:	e7f7      	b.n	e372 <_dtoa_r+0x61a>
    e382:	9806      	ldr	r0, [sp, #24]
    e384:	9907      	ldr	r1, [sp, #28]
    e386:	4b29      	ldr	r3, [pc, #164]	; (e42c <_dtoa_r+0x6d4>)
    e388:	f7fc fe14 	bl	afb4 <__aeabi_dmul>
    e38c:	9006      	str	r0, [sp, #24]
    e38e:	9107      	str	r1, [sp, #28]
    e390:	e7bb      	b.n	e30a <_dtoa_r+0x5b2>
    e392:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    e394:	9a08      	ldr	r2, [sp, #32]
    e396:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e398:	9806      	ldr	r0, [sp, #24]
    e39a:	9907      	ldr	r1, [sp, #28]
    e39c:	f7fc f9d6 	bl	a74c <__aeabi_ddiv>
    e3a0:	f7fd fbbe 	bl	bb20 <__aeabi_d2iz>
    e3a4:	0004      	movs	r4, r0
    e3a6:	f7fd fbef 	bl	bb88 <__aeabi_i2d>
    e3aa:	9a08      	ldr	r2, [sp, #32]
    e3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e3ae:	f7fc fe01 	bl	afb4 <__aeabi_dmul>
    e3b2:	000b      	movs	r3, r1
    e3b4:	0002      	movs	r2, r0
    e3b6:	9806      	ldr	r0, [sp, #24]
    e3b8:	9907      	ldr	r1, [sp, #28]
    e3ba:	f7fd f87b 	bl	b4b4 <__aeabi_dsub>
    e3be:	0023      	movs	r3, r4
    e3c0:	3330      	adds	r3, #48	; 0x30
    e3c2:	7033      	strb	r3, [r6, #0]
    e3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e3c6:	1c75      	adds	r5, r6, #1
    e3c8:	1aeb      	subs	r3, r5, r3
    e3ca:	429f      	cmp	r7, r3
    e3cc:	d14c      	bne.n	e468 <_dtoa_r+0x710>
    e3ce:	0002      	movs	r2, r0
    e3d0:	000b      	movs	r3, r1
    e3d2:	f7fb feab 	bl	a12c <__aeabi_dadd>
    e3d6:	0006      	movs	r6, r0
    e3d8:	000f      	movs	r7, r1
    e3da:	0002      	movs	r2, r0
    e3dc:	000b      	movs	r3, r1
    e3de:	9808      	ldr	r0, [sp, #32]
    e3e0:	9909      	ldr	r1, [sp, #36]	; 0x24
    e3e2:	f7fb fa19 	bl	9818 <__aeabi_dcmplt>
    e3e6:	2800      	cmp	r0, #0
    e3e8:	d12c      	bne.n	e444 <_dtoa_r+0x6ec>
    e3ea:	9808      	ldr	r0, [sp, #32]
    e3ec:	9909      	ldr	r1, [sp, #36]	; 0x24
    e3ee:	0032      	movs	r2, r6
    e3f0:	003b      	movs	r3, r7
    e3f2:	f7fb fa0b 	bl	980c <__aeabi_dcmpeq>
    e3f6:	2800      	cmp	r0, #0
    e3f8:	d001      	beq.n	e3fe <_dtoa_r+0x6a6>
    e3fa:	07e3      	lsls	r3, r4, #31
    e3fc:	d422      	bmi.n	e444 <_dtoa_r+0x6ec>
    e3fe:	9905      	ldr	r1, [sp, #20]
    e400:	9804      	ldr	r0, [sp, #16]
    e402:	f000 fd22 	bl	ee4a <_Bfree>
    e406:	2300      	movs	r3, #0
    e408:	702b      	strb	r3, [r5, #0]
    e40a:	9b03      	ldr	r3, [sp, #12]
    e40c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    e40e:	3301      	adds	r3, #1
    e410:	6013      	str	r3, [r2, #0]
    e412:	9b26      	ldr	r3, [sp, #152]	; 0x98
    e414:	2b00      	cmp	r3, #0
    e416:	d100      	bne.n	e41a <_dtoa_r+0x6c2>
    e418:	e275      	b.n	e906 <_dtoa_r+0xbae>
    e41a:	601d      	str	r5, [r3, #0]
    e41c:	e273      	b.n	e906 <_dtoa_r+0xbae>
    e41e:	46c0      	nop			; (mov r8, r8)
    e420:	00012328 	.word	0x00012328
    e424:	00012300 	.word	0x00012300
    e428:	3ff00000 	.word	0x3ff00000
    e42c:	40240000 	.word	0x40240000
    e430:	401c0000 	.word	0x401c0000
    e434:	fcc00000 	.word	0xfcc00000
    e438:	40140000 	.word	0x40140000
    e43c:	7cc00000 	.word	0x7cc00000
    e440:	3fe00000 	.word	0x3fe00000
    e444:	9e03      	ldr	r6, [sp, #12]
    e446:	1e6b      	subs	r3, r5, #1
    e448:	781a      	ldrb	r2, [r3, #0]
    e44a:	2a39      	cmp	r2, #57	; 0x39
    e44c:	d106      	bne.n	e45c <_dtoa_r+0x704>
    e44e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e450:	429a      	cmp	r2, r3
    e452:	d107      	bne.n	e464 <_dtoa_r+0x70c>
    e454:	2330      	movs	r3, #48	; 0x30
    e456:	7013      	strb	r3, [r2, #0]
    e458:	0013      	movs	r3, r2
    e45a:	3601      	adds	r6, #1
    e45c:	781a      	ldrb	r2, [r3, #0]
    e45e:	3201      	adds	r2, #1
    e460:	701a      	strb	r2, [r3, #0]
    e462:	e78a      	b.n	e37a <_dtoa_r+0x622>
    e464:	001d      	movs	r5, r3
    e466:	e7ee      	b.n	e446 <_dtoa_r+0x6ee>
    e468:	2200      	movs	r2, #0
    e46a:	4bcf      	ldr	r3, [pc, #828]	; (e7a8 <_dtoa_r+0xa50>)
    e46c:	f7fc fda2 	bl	afb4 <__aeabi_dmul>
    e470:	2200      	movs	r2, #0
    e472:	2300      	movs	r3, #0
    e474:	9006      	str	r0, [sp, #24]
    e476:	9107      	str	r1, [sp, #28]
    e478:	002e      	movs	r6, r5
    e47a:	f7fb f9c7 	bl	980c <__aeabi_dcmpeq>
    e47e:	2800      	cmp	r0, #0
    e480:	d100      	bne.n	e484 <_dtoa_r+0x72c>
    e482:	e787      	b.n	e394 <_dtoa_r+0x63c>
    e484:	e7bb      	b.n	e3fe <_dtoa_r+0x6a6>
    e486:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e488:	2a00      	cmp	r2, #0
    e48a:	d100      	bne.n	e48e <_dtoa_r+0x736>
    e48c:	e087      	b.n	e59e <_dtoa_r+0x846>
    e48e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    e490:	2a01      	cmp	r2, #1
    e492:	dc6e      	bgt.n	e572 <_dtoa_r+0x81a>
    e494:	9a18      	ldr	r2, [sp, #96]	; 0x60
    e496:	2a00      	cmp	r2, #0
    e498:	d067      	beq.n	e56a <_dtoa_r+0x812>
    e49a:	4ac4      	ldr	r2, [pc, #784]	; (e7ac <_dtoa_r+0xa54>)
    e49c:	189b      	adds	r3, r3, r2
    e49e:	9d08      	ldr	r5, [sp, #32]
    e4a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    e4a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e4a4:	2101      	movs	r1, #1
    e4a6:	18d2      	adds	r2, r2, r3
    e4a8:	920b      	str	r2, [sp, #44]	; 0x2c
    e4aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e4ac:	9804      	ldr	r0, [sp, #16]
    e4ae:	18d3      	adds	r3, r2, r3
    e4b0:	930c      	str	r3, [sp, #48]	; 0x30
    e4b2:	f000 fd68 	bl	ef86 <__i2b>
    e4b6:	0006      	movs	r6, r0
    e4b8:	2c00      	cmp	r4, #0
    e4ba:	dd0e      	ble.n	e4da <_dtoa_r+0x782>
    e4bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e4be:	2b00      	cmp	r3, #0
    e4c0:	dd0b      	ble.n	e4da <_dtoa_r+0x782>
    e4c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e4c4:	0023      	movs	r3, r4
    e4c6:	4294      	cmp	r4, r2
    e4c8:	dd00      	ble.n	e4cc <_dtoa_r+0x774>
    e4ca:	0013      	movs	r3, r2
    e4cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e4ce:	1ae4      	subs	r4, r4, r3
    e4d0:	1ad2      	subs	r2, r2, r3
    e4d2:	920b      	str	r2, [sp, #44]	; 0x2c
    e4d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e4d6:	1ad3      	subs	r3, r2, r3
    e4d8:	930c      	str	r3, [sp, #48]	; 0x30
    e4da:	9b08      	ldr	r3, [sp, #32]
    e4dc:	2b00      	cmp	r3, #0
    e4de:	d01e      	beq.n	e51e <_dtoa_r+0x7c6>
    e4e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e4e2:	2b00      	cmp	r3, #0
    e4e4:	d05f      	beq.n	e5a6 <_dtoa_r+0x84e>
    e4e6:	2d00      	cmp	r5, #0
    e4e8:	dd11      	ble.n	e50e <_dtoa_r+0x7b6>
    e4ea:	0031      	movs	r1, r6
    e4ec:	002a      	movs	r2, r5
    e4ee:	9804      	ldr	r0, [sp, #16]
    e4f0:	f000 fde2 	bl	f0b8 <__pow5mult>
    e4f4:	9a05      	ldr	r2, [sp, #20]
    e4f6:	0001      	movs	r1, r0
    e4f8:	0006      	movs	r6, r0
    e4fa:	9804      	ldr	r0, [sp, #16]
    e4fc:	f000 fd4c 	bl	ef98 <__multiply>
    e500:	9905      	ldr	r1, [sp, #20]
    e502:	9010      	str	r0, [sp, #64]	; 0x40
    e504:	9804      	ldr	r0, [sp, #16]
    e506:	f000 fca0 	bl	ee4a <_Bfree>
    e50a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e50c:	9305      	str	r3, [sp, #20]
    e50e:	9b08      	ldr	r3, [sp, #32]
    e510:	1b5a      	subs	r2, r3, r5
    e512:	d004      	beq.n	e51e <_dtoa_r+0x7c6>
    e514:	9905      	ldr	r1, [sp, #20]
    e516:	9804      	ldr	r0, [sp, #16]
    e518:	f000 fdce 	bl	f0b8 <__pow5mult>
    e51c:	9005      	str	r0, [sp, #20]
    e51e:	2101      	movs	r1, #1
    e520:	9804      	ldr	r0, [sp, #16]
    e522:	f000 fd30 	bl	ef86 <__i2b>
    e526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e528:	9008      	str	r0, [sp, #32]
    e52a:	2b00      	cmp	r3, #0
    e52c:	dd3d      	ble.n	e5aa <_dtoa_r+0x852>
    e52e:	001a      	movs	r2, r3
    e530:	0001      	movs	r1, r0
    e532:	9804      	ldr	r0, [sp, #16]
    e534:	f000 fdc0 	bl	f0b8 <__pow5mult>
    e538:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e53a:	9008      	str	r0, [sp, #32]
    e53c:	2500      	movs	r5, #0
    e53e:	2b01      	cmp	r3, #1
    e540:	dc3b      	bgt.n	e5ba <_dtoa_r+0x862>
    e542:	2500      	movs	r5, #0
    e544:	9b06      	ldr	r3, [sp, #24]
    e546:	42ab      	cmp	r3, r5
    e548:	d133      	bne.n	e5b2 <_dtoa_r+0x85a>
    e54a:	9b07      	ldr	r3, [sp, #28]
    e54c:	031b      	lsls	r3, r3, #12
    e54e:	42ab      	cmp	r3, r5
    e550:	d12f      	bne.n	e5b2 <_dtoa_r+0x85a>
    e552:	9b19      	ldr	r3, [sp, #100]	; 0x64
    e554:	9a07      	ldr	r2, [sp, #28]
    e556:	4213      	tst	r3, r2
    e558:	d02b      	beq.n	e5b2 <_dtoa_r+0x85a>
    e55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e55c:	3501      	adds	r5, #1
    e55e:	3301      	adds	r3, #1
    e560:	930b      	str	r3, [sp, #44]	; 0x2c
    e562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e564:	3301      	adds	r3, #1
    e566:	930c      	str	r3, [sp, #48]	; 0x30
    e568:	e023      	b.n	e5b2 <_dtoa_r+0x85a>
    e56a:	2336      	movs	r3, #54	; 0x36
    e56c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    e56e:	1a9b      	subs	r3, r3, r2
    e570:	e795      	b.n	e49e <_dtoa_r+0x746>
    e572:	9b08      	ldr	r3, [sp, #32]
    e574:	1e7d      	subs	r5, r7, #1
    e576:	42ab      	cmp	r3, r5
    e578:	db06      	blt.n	e588 <_dtoa_r+0x830>
    e57a:	1b5d      	subs	r5, r3, r5
    e57c:	2f00      	cmp	r7, #0
    e57e:	da0b      	bge.n	e598 <_dtoa_r+0x840>
    e580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e582:	1bdc      	subs	r4, r3, r7
    e584:	2300      	movs	r3, #0
    e586:	e78c      	b.n	e4a2 <_dtoa_r+0x74a>
    e588:	9b08      	ldr	r3, [sp, #32]
    e58a:	9508      	str	r5, [sp, #32]
    e58c:	1aea      	subs	r2, r5, r3
    e58e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e590:	2500      	movs	r5, #0
    e592:	189b      	adds	r3, r3, r2
    e594:	930f      	str	r3, [sp, #60]	; 0x3c
    e596:	e7f1      	b.n	e57c <_dtoa_r+0x824>
    e598:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    e59a:	003b      	movs	r3, r7
    e59c:	e781      	b.n	e4a2 <_dtoa_r+0x74a>
    e59e:	9d08      	ldr	r5, [sp, #32]
    e5a0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    e5a2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    e5a4:	e788      	b.n	e4b8 <_dtoa_r+0x760>
    e5a6:	9a08      	ldr	r2, [sp, #32]
    e5a8:	e7b4      	b.n	e514 <_dtoa_r+0x7bc>
    e5aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e5ac:	2500      	movs	r5, #0
    e5ae:	2b01      	cmp	r3, #1
    e5b0:	ddc7      	ble.n	e542 <_dtoa_r+0x7ea>
    e5b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e5b4:	2001      	movs	r0, #1
    e5b6:	2b00      	cmp	r3, #0
    e5b8:	d00b      	beq.n	e5d2 <_dtoa_r+0x87a>
    e5ba:	9b08      	ldr	r3, [sp, #32]
    e5bc:	9a08      	ldr	r2, [sp, #32]
    e5be:	691b      	ldr	r3, [r3, #16]
    e5c0:	930f      	str	r3, [sp, #60]	; 0x3c
    e5c2:	3303      	adds	r3, #3
    e5c4:	009b      	lsls	r3, r3, #2
    e5c6:	18d3      	adds	r3, r2, r3
    e5c8:	6858      	ldr	r0, [r3, #4]
    e5ca:	f000 fc93 	bl	eef4 <__hi0bits>
    e5ce:	2320      	movs	r3, #32
    e5d0:	1a18      	subs	r0, r3, r0
    e5d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e5d4:	18c0      	adds	r0, r0, r3
    e5d6:	231f      	movs	r3, #31
    e5d8:	4018      	ands	r0, r3
    e5da:	d100      	bne.n	e5de <_dtoa_r+0x886>
    e5dc:	e0ab      	b.n	e736 <_dtoa_r+0x9de>
    e5de:	3301      	adds	r3, #1
    e5e0:	1a1b      	subs	r3, r3, r0
    e5e2:	2b04      	cmp	r3, #4
    e5e4:	dc00      	bgt.n	e5e8 <_dtoa_r+0x890>
    e5e6:	e09b      	b.n	e720 <_dtoa_r+0x9c8>
    e5e8:	231c      	movs	r3, #28
    e5ea:	1a18      	subs	r0, r3, r0
    e5ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5ee:	1824      	adds	r4, r4, r0
    e5f0:	181b      	adds	r3, r3, r0
    e5f2:	930b      	str	r3, [sp, #44]	; 0x2c
    e5f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e5f6:	181b      	adds	r3, r3, r0
    e5f8:	930c      	str	r3, [sp, #48]	; 0x30
    e5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e5fc:	2b00      	cmp	r3, #0
    e5fe:	dd05      	ble.n	e60c <_dtoa_r+0x8b4>
    e600:	001a      	movs	r2, r3
    e602:	9905      	ldr	r1, [sp, #20]
    e604:	9804      	ldr	r0, [sp, #16]
    e606:	f000 fda9 	bl	f15c <__lshift>
    e60a:	9005      	str	r0, [sp, #20]
    e60c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e60e:	2b00      	cmp	r3, #0
    e610:	dd05      	ble.n	e61e <_dtoa_r+0x8c6>
    e612:	001a      	movs	r2, r3
    e614:	9908      	ldr	r1, [sp, #32]
    e616:	9804      	ldr	r0, [sp, #16]
    e618:	f000 fda0 	bl	f15c <__lshift>
    e61c:	9008      	str	r0, [sp, #32]
    e61e:	9b16      	ldr	r3, [sp, #88]	; 0x58
    e620:	2b00      	cmp	r3, #0
    e622:	d100      	bne.n	e626 <_dtoa_r+0x8ce>
    e624:	e089      	b.n	e73a <_dtoa_r+0x9e2>
    e626:	9908      	ldr	r1, [sp, #32]
    e628:	9805      	ldr	r0, [sp, #20]
    e62a:	f000 fde8 	bl	f1fe <__mcmp>
    e62e:	2800      	cmp	r0, #0
    e630:	db00      	blt.n	e634 <_dtoa_r+0x8dc>
    e632:	e082      	b.n	e73a <_dtoa_r+0x9e2>
    e634:	9b03      	ldr	r3, [sp, #12]
    e636:	220a      	movs	r2, #10
    e638:	3b01      	subs	r3, #1
    e63a:	9303      	str	r3, [sp, #12]
    e63c:	9905      	ldr	r1, [sp, #20]
    e63e:	2300      	movs	r3, #0
    e640:	9804      	ldr	r0, [sp, #16]
    e642:	f000 fc1b 	bl	ee7c <__multadd>
    e646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e648:	9005      	str	r0, [sp, #20]
    e64a:	2b00      	cmp	r3, #0
    e64c:	d100      	bne.n	e650 <_dtoa_r+0x8f8>
    e64e:	e15d      	b.n	e90c <_dtoa_r+0xbb4>
    e650:	2300      	movs	r3, #0
    e652:	0031      	movs	r1, r6
    e654:	220a      	movs	r2, #10
    e656:	9804      	ldr	r0, [sp, #16]
    e658:	f000 fc10 	bl	ee7c <__multadd>
    e65c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e65e:	0006      	movs	r6, r0
    e660:	2b00      	cmp	r3, #0
    e662:	dc02      	bgt.n	e66a <_dtoa_r+0x912>
    e664:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e666:	2b02      	cmp	r3, #2
    e668:	dc6d      	bgt.n	e746 <_dtoa_r+0x9ee>
    e66a:	2c00      	cmp	r4, #0
    e66c:	dd05      	ble.n	e67a <_dtoa_r+0x922>
    e66e:	0031      	movs	r1, r6
    e670:	0022      	movs	r2, r4
    e672:	9804      	ldr	r0, [sp, #16]
    e674:	f000 fd72 	bl	f15c <__lshift>
    e678:	0006      	movs	r6, r0
    e67a:	0030      	movs	r0, r6
    e67c:	2d00      	cmp	r5, #0
    e67e:	d011      	beq.n	e6a4 <_dtoa_r+0x94c>
    e680:	6871      	ldr	r1, [r6, #4]
    e682:	9804      	ldr	r0, [sp, #16]
    e684:	f000 fba9 	bl	edda <_Balloc>
    e688:	0031      	movs	r1, r6
    e68a:	0004      	movs	r4, r0
    e68c:	6933      	ldr	r3, [r6, #16]
    e68e:	310c      	adds	r1, #12
    e690:	1c9a      	adds	r2, r3, #2
    e692:	0092      	lsls	r2, r2, #2
    e694:	300c      	adds	r0, #12
    e696:	f7fd fd62 	bl	c15e <memcpy>
    e69a:	2201      	movs	r2, #1
    e69c:	0021      	movs	r1, r4
    e69e:	9804      	ldr	r0, [sp, #16]
    e6a0:	f000 fd5c 	bl	f15c <__lshift>
    e6a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    e6a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e6a8:	3f01      	subs	r7, #1
    e6aa:	930b      	str	r3, [sp, #44]	; 0x2c
    e6ac:	19db      	adds	r3, r3, r7
    e6ae:	0037      	movs	r7, r6
    e6b0:	0006      	movs	r6, r0
    e6b2:	930f      	str	r3, [sp, #60]	; 0x3c
    e6b4:	9908      	ldr	r1, [sp, #32]
    e6b6:	9805      	ldr	r0, [sp, #20]
    e6b8:	f7ff fac9 	bl	dc4e <quorem>
    e6bc:	0039      	movs	r1, r7
    e6be:	900d      	str	r0, [sp, #52]	; 0x34
    e6c0:	0004      	movs	r4, r0
    e6c2:	9805      	ldr	r0, [sp, #20]
    e6c4:	f000 fd9b 	bl	f1fe <__mcmp>
    e6c8:	0032      	movs	r2, r6
    e6ca:	900e      	str	r0, [sp, #56]	; 0x38
    e6cc:	9908      	ldr	r1, [sp, #32]
    e6ce:	9804      	ldr	r0, [sp, #16]
    e6d0:	f000 fdae 	bl	f230 <__mdiff>
    e6d4:	2301      	movs	r3, #1
    e6d6:	930c      	str	r3, [sp, #48]	; 0x30
    e6d8:	68c3      	ldr	r3, [r0, #12]
    e6da:	3430      	adds	r4, #48	; 0x30
    e6dc:	0005      	movs	r5, r0
    e6de:	2b00      	cmp	r3, #0
    e6e0:	d104      	bne.n	e6ec <_dtoa_r+0x994>
    e6e2:	0001      	movs	r1, r0
    e6e4:	9805      	ldr	r0, [sp, #20]
    e6e6:	f000 fd8a 	bl	f1fe <__mcmp>
    e6ea:	900c      	str	r0, [sp, #48]	; 0x30
    e6ec:	0029      	movs	r1, r5
    e6ee:	9804      	ldr	r0, [sp, #16]
    e6f0:	f000 fbab 	bl	ee4a <_Bfree>
    e6f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e6f6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    e6f8:	4313      	orrs	r3, r2
    e6fa:	d000      	beq.n	e6fe <_dtoa_r+0x9a6>
    e6fc:	e089      	b.n	e812 <_dtoa_r+0xaba>
    e6fe:	9a06      	ldr	r2, [sp, #24]
    e700:	3301      	adds	r3, #1
    e702:	4213      	tst	r3, r2
    e704:	d000      	beq.n	e708 <_dtoa_r+0x9b0>
    e706:	e084      	b.n	e812 <_dtoa_r+0xaba>
    e708:	2c39      	cmp	r4, #57	; 0x39
    e70a:	d100      	bne.n	e70e <_dtoa_r+0x9b6>
    e70c:	e0a3      	b.n	e856 <_dtoa_r+0xafe>
    e70e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e710:	2b00      	cmp	r3, #0
    e712:	dd01      	ble.n	e718 <_dtoa_r+0x9c0>
    e714:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    e716:	3431      	adds	r4, #49	; 0x31
    e718:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e71a:	1c5d      	adds	r5, r3, #1
    e71c:	701c      	strb	r4, [r3, #0]
    e71e:	e027      	b.n	e770 <_dtoa_r+0xa18>
    e720:	2b04      	cmp	r3, #4
    e722:	d100      	bne.n	e726 <_dtoa_r+0x9ce>
    e724:	e769      	b.n	e5fa <_dtoa_r+0x8a2>
    e726:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e728:	331c      	adds	r3, #28
    e72a:	18d2      	adds	r2, r2, r3
    e72c:	920b      	str	r2, [sp, #44]	; 0x2c
    e72e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e730:	18e4      	adds	r4, r4, r3
    e732:	18d3      	adds	r3, r2, r3
    e734:	e760      	b.n	e5f8 <_dtoa_r+0x8a0>
    e736:	0003      	movs	r3, r0
    e738:	e7f5      	b.n	e726 <_dtoa_r+0x9ce>
    e73a:	2f00      	cmp	r7, #0
    e73c:	dc3c      	bgt.n	e7b8 <_dtoa_r+0xa60>
    e73e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e740:	2b02      	cmp	r3, #2
    e742:	dd39      	ble.n	e7b8 <_dtoa_r+0xa60>
    e744:	970d      	str	r7, [sp, #52]	; 0x34
    e746:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e748:	2b00      	cmp	r3, #0
    e74a:	d10c      	bne.n	e766 <_dtoa_r+0xa0e>
    e74c:	9908      	ldr	r1, [sp, #32]
    e74e:	2205      	movs	r2, #5
    e750:	9804      	ldr	r0, [sp, #16]
    e752:	f000 fb93 	bl	ee7c <__multadd>
    e756:	9008      	str	r0, [sp, #32]
    e758:	0001      	movs	r1, r0
    e75a:	9805      	ldr	r0, [sp, #20]
    e75c:	f000 fd4f 	bl	f1fe <__mcmp>
    e760:	2800      	cmp	r0, #0
    e762:	dd00      	ble.n	e766 <_dtoa_r+0xa0e>
    e764:	e55a      	b.n	e21c <_dtoa_r+0x4c4>
    e766:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e768:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    e76a:	43db      	mvns	r3, r3
    e76c:	9303      	str	r3, [sp, #12]
    e76e:	2700      	movs	r7, #0
    e770:	9908      	ldr	r1, [sp, #32]
    e772:	9804      	ldr	r0, [sp, #16]
    e774:	f000 fb69 	bl	ee4a <_Bfree>
    e778:	2e00      	cmp	r6, #0
    e77a:	d100      	bne.n	e77e <_dtoa_r+0xa26>
    e77c:	e63f      	b.n	e3fe <_dtoa_r+0x6a6>
    e77e:	2f00      	cmp	r7, #0
    e780:	d005      	beq.n	e78e <_dtoa_r+0xa36>
    e782:	42b7      	cmp	r7, r6
    e784:	d003      	beq.n	e78e <_dtoa_r+0xa36>
    e786:	0039      	movs	r1, r7
    e788:	9804      	ldr	r0, [sp, #16]
    e78a:	f000 fb5e 	bl	ee4a <_Bfree>
    e78e:	0031      	movs	r1, r6
    e790:	9804      	ldr	r0, [sp, #16]
    e792:	f000 fb5a 	bl	ee4a <_Bfree>
    e796:	e632      	b.n	e3fe <_dtoa_r+0x6a6>
    e798:	9508      	str	r5, [sp, #32]
    e79a:	002e      	movs	r6, r5
    e79c:	e7e3      	b.n	e766 <_dtoa_r+0xa0e>
    e79e:	2300      	movs	r3, #0
    e7a0:	9308      	str	r3, [sp, #32]
    e7a2:	001e      	movs	r6, r3
    e7a4:	e7df      	b.n	e766 <_dtoa_r+0xa0e>
    e7a6:	46c0      	nop			; (mov r8, r8)
    e7a8:	40240000 	.word	0x40240000
    e7ac:	00000433 	.word	0x00000433
    e7b0:	9603      	str	r6, [sp, #12]
    e7b2:	9508      	str	r5, [sp, #32]
    e7b4:	002e      	movs	r6, r5
    e7b6:	e531      	b.n	e21c <_dtoa_r+0x4c4>
    e7b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e7ba:	970d      	str	r7, [sp, #52]	; 0x34
    e7bc:	2b00      	cmp	r3, #0
    e7be:	d000      	beq.n	e7c2 <_dtoa_r+0xa6a>
    e7c0:	e753      	b.n	e66a <_dtoa_r+0x912>
    e7c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    e7c4:	9908      	ldr	r1, [sp, #32]
    e7c6:	9805      	ldr	r0, [sp, #20]
    e7c8:	f7ff fa41 	bl	dc4e <quorem>
    e7cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e7ce:	3030      	adds	r0, #48	; 0x30
    e7d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e7d2:	7028      	strb	r0, [r5, #0]
    e7d4:	3501      	adds	r5, #1
    e7d6:	0004      	movs	r4, r0
    e7d8:	1aeb      	subs	r3, r5, r3
    e7da:	429a      	cmp	r2, r3
    e7dc:	dc78      	bgt.n	e8d0 <_dtoa_r+0xb78>
    e7de:	1e15      	subs	r5, r2, #0
    e7e0:	dc00      	bgt.n	e7e4 <_dtoa_r+0xa8c>
    e7e2:	2501      	movs	r5, #1
    e7e4:	2700      	movs	r7, #0
    e7e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e7e8:	195d      	adds	r5, r3, r5
    e7ea:	9905      	ldr	r1, [sp, #20]
    e7ec:	2201      	movs	r2, #1
    e7ee:	9804      	ldr	r0, [sp, #16]
    e7f0:	f000 fcb4 	bl	f15c <__lshift>
    e7f4:	9908      	ldr	r1, [sp, #32]
    e7f6:	9005      	str	r0, [sp, #20]
    e7f8:	f000 fd01 	bl	f1fe <__mcmp>
    e7fc:	2800      	cmp	r0, #0
    e7fe:	dc2f      	bgt.n	e860 <_dtoa_r+0xb08>
    e800:	d101      	bne.n	e806 <_dtoa_r+0xaae>
    e802:	07e3      	lsls	r3, r4, #31
    e804:	d42c      	bmi.n	e860 <_dtoa_r+0xb08>
    e806:	1e6b      	subs	r3, r5, #1
    e808:	781a      	ldrb	r2, [r3, #0]
    e80a:	2a30      	cmp	r2, #48	; 0x30
    e80c:	d1b0      	bne.n	e770 <_dtoa_r+0xa18>
    e80e:	001d      	movs	r5, r3
    e810:	e7f9      	b.n	e806 <_dtoa_r+0xaae>
    e812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e814:	2b00      	cmp	r3, #0
    e816:	db07      	blt.n	e828 <_dtoa_r+0xad0>
    e818:	001d      	movs	r5, r3
    e81a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e81c:	431d      	orrs	r5, r3
    e81e:	d126      	bne.n	e86e <_dtoa_r+0xb16>
    e820:	2301      	movs	r3, #1
    e822:	9a06      	ldr	r2, [sp, #24]
    e824:	4213      	tst	r3, r2
    e826:	d122      	bne.n	e86e <_dtoa_r+0xb16>
    e828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e82a:	2b00      	cmp	r3, #0
    e82c:	dc00      	bgt.n	e830 <_dtoa_r+0xad8>
    e82e:	e773      	b.n	e718 <_dtoa_r+0x9c0>
    e830:	9905      	ldr	r1, [sp, #20]
    e832:	2201      	movs	r2, #1
    e834:	9804      	ldr	r0, [sp, #16]
    e836:	f000 fc91 	bl	f15c <__lshift>
    e83a:	9908      	ldr	r1, [sp, #32]
    e83c:	9005      	str	r0, [sp, #20]
    e83e:	f000 fcde 	bl	f1fe <__mcmp>
    e842:	2800      	cmp	r0, #0
    e844:	dc04      	bgt.n	e850 <_dtoa_r+0xaf8>
    e846:	d000      	beq.n	e84a <_dtoa_r+0xaf2>
    e848:	e766      	b.n	e718 <_dtoa_r+0x9c0>
    e84a:	07e3      	lsls	r3, r4, #31
    e84c:	d400      	bmi.n	e850 <_dtoa_r+0xaf8>
    e84e:	e763      	b.n	e718 <_dtoa_r+0x9c0>
    e850:	2c39      	cmp	r4, #57	; 0x39
    e852:	d000      	beq.n	e856 <_dtoa_r+0xafe>
    e854:	e75e      	b.n	e714 <_dtoa_r+0x9bc>
    e856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e85a:	1c5d      	adds	r5, r3, #1
    e85c:	2339      	movs	r3, #57	; 0x39
    e85e:	7013      	strb	r3, [r2, #0]
    e860:	1e6b      	subs	r3, r5, #1
    e862:	781a      	ldrb	r2, [r3, #0]
    e864:	2a39      	cmp	r2, #57	; 0x39
    e866:	d03b      	beq.n	e8e0 <_dtoa_r+0xb88>
    e868:	3201      	adds	r2, #1
    e86a:	701a      	strb	r2, [r3, #0]
    e86c:	e780      	b.n	e770 <_dtoa_r+0xa18>
    e86e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e870:	3301      	adds	r3, #1
    e872:	930d      	str	r3, [sp, #52]	; 0x34
    e874:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e876:	2b00      	cmp	r3, #0
    e878:	dd05      	ble.n	e886 <_dtoa_r+0xb2e>
    e87a:	2c39      	cmp	r4, #57	; 0x39
    e87c:	d0eb      	beq.n	e856 <_dtoa_r+0xafe>
    e87e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    e880:	3401      	adds	r4, #1
    e882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e884:	e74a      	b.n	e71c <_dtoa_r+0x9c4>
    e886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e888:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    e88a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    e88c:	701c      	strb	r4, [r3, #0]
    e88e:	4293      	cmp	r3, r2
    e890:	d0ab      	beq.n	e7ea <_dtoa_r+0xa92>
    e892:	2300      	movs	r3, #0
    e894:	220a      	movs	r2, #10
    e896:	9905      	ldr	r1, [sp, #20]
    e898:	9804      	ldr	r0, [sp, #16]
    e89a:	f000 faef 	bl	ee7c <__multadd>
    e89e:	2300      	movs	r3, #0
    e8a0:	9005      	str	r0, [sp, #20]
    e8a2:	220a      	movs	r2, #10
    e8a4:	0039      	movs	r1, r7
    e8a6:	9804      	ldr	r0, [sp, #16]
    e8a8:	42b7      	cmp	r7, r6
    e8aa:	d106      	bne.n	e8ba <_dtoa_r+0xb62>
    e8ac:	f000 fae6 	bl	ee7c <__multadd>
    e8b0:	0007      	movs	r7, r0
    e8b2:	0006      	movs	r6, r0
    e8b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e8b6:	930b      	str	r3, [sp, #44]	; 0x2c
    e8b8:	e6fc      	b.n	e6b4 <_dtoa_r+0x95c>
    e8ba:	f000 fadf 	bl	ee7c <__multadd>
    e8be:	0031      	movs	r1, r6
    e8c0:	0007      	movs	r7, r0
    e8c2:	2300      	movs	r3, #0
    e8c4:	220a      	movs	r2, #10
    e8c6:	9804      	ldr	r0, [sp, #16]
    e8c8:	f000 fad8 	bl	ee7c <__multadd>
    e8cc:	0006      	movs	r6, r0
    e8ce:	e7f1      	b.n	e8b4 <_dtoa_r+0xb5c>
    e8d0:	2300      	movs	r3, #0
    e8d2:	220a      	movs	r2, #10
    e8d4:	9905      	ldr	r1, [sp, #20]
    e8d6:	9804      	ldr	r0, [sp, #16]
    e8d8:	f000 fad0 	bl	ee7c <__multadd>
    e8dc:	9005      	str	r0, [sp, #20]
    e8de:	e771      	b.n	e7c4 <_dtoa_r+0xa6c>
    e8e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e8e2:	429a      	cmp	r2, r3
    e8e4:	d105      	bne.n	e8f2 <_dtoa_r+0xb9a>
    e8e6:	9b03      	ldr	r3, [sp, #12]
    e8e8:	3301      	adds	r3, #1
    e8ea:	9303      	str	r3, [sp, #12]
    e8ec:	2331      	movs	r3, #49	; 0x31
    e8ee:	7013      	strb	r3, [r2, #0]
    e8f0:	e73e      	b.n	e770 <_dtoa_r+0xa18>
    e8f2:	001d      	movs	r5, r3
    e8f4:	e7b4      	b.n	e860 <_dtoa_r+0xb08>
    e8f6:	4b0a      	ldr	r3, [pc, #40]	; (e920 <_dtoa_r+0xbc8>)
    e8f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e8fa:	930a      	str	r3, [sp, #40]	; 0x28
    e8fc:	4b09      	ldr	r3, [pc, #36]	; (e924 <_dtoa_r+0xbcc>)
    e8fe:	2a00      	cmp	r2, #0
    e900:	d001      	beq.n	e906 <_dtoa_r+0xbae>
    e902:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e904:	6013      	str	r3, [r2, #0]
    e906:	980a      	ldr	r0, [sp, #40]	; 0x28
    e908:	b01d      	add	sp, #116	; 0x74
    e90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e90c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e90e:	2b00      	cmp	r3, #0
    e910:	dd00      	ble.n	e914 <_dtoa_r+0xbbc>
    e912:	e756      	b.n	e7c2 <_dtoa_r+0xa6a>
    e914:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e916:	2b02      	cmp	r3, #2
    e918:	dc00      	bgt.n	e91c <_dtoa_r+0xbc4>
    e91a:	e752      	b.n	e7c2 <_dtoa_r+0xa6a>
    e91c:	e713      	b.n	e746 <_dtoa_r+0x9ee>
    e91e:	46c0      	nop			; (mov r8, r8)
    e920:	00012230 	.word	0x00012230
    e924:	00012238 	.word	0x00012238

0000e928 <__sflush_r>:
    e928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e92a:	898a      	ldrh	r2, [r1, #12]
    e92c:	0005      	movs	r5, r0
    e92e:	000c      	movs	r4, r1
    e930:	0713      	lsls	r3, r2, #28
    e932:	d460      	bmi.n	e9f6 <__sflush_r+0xce>
    e934:	684b      	ldr	r3, [r1, #4]
    e936:	2b00      	cmp	r3, #0
    e938:	dc04      	bgt.n	e944 <__sflush_r+0x1c>
    e93a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    e93c:	2b00      	cmp	r3, #0
    e93e:	dc01      	bgt.n	e944 <__sflush_r+0x1c>
    e940:	2000      	movs	r0, #0
    e942:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e944:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    e946:	2f00      	cmp	r7, #0
    e948:	d0fa      	beq.n	e940 <__sflush_r+0x18>
    e94a:	2300      	movs	r3, #0
    e94c:	682e      	ldr	r6, [r5, #0]
    e94e:	602b      	str	r3, [r5, #0]
    e950:	2380      	movs	r3, #128	; 0x80
    e952:	015b      	lsls	r3, r3, #5
    e954:	401a      	ands	r2, r3
    e956:	d034      	beq.n	e9c2 <__sflush_r+0x9a>
    e958:	6d60      	ldr	r0, [r4, #84]	; 0x54
    e95a:	89a3      	ldrh	r3, [r4, #12]
    e95c:	075b      	lsls	r3, r3, #29
    e95e:	d506      	bpl.n	e96e <__sflush_r+0x46>
    e960:	6863      	ldr	r3, [r4, #4]
    e962:	1ac0      	subs	r0, r0, r3
    e964:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e966:	2b00      	cmp	r3, #0
    e968:	d001      	beq.n	e96e <__sflush_r+0x46>
    e96a:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e96c:	1ac0      	subs	r0, r0, r3
    e96e:	0002      	movs	r2, r0
    e970:	6a21      	ldr	r1, [r4, #32]
    e972:	2300      	movs	r3, #0
    e974:	0028      	movs	r0, r5
    e976:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    e978:	47b8      	blx	r7
    e97a:	89a1      	ldrh	r1, [r4, #12]
    e97c:	1c43      	adds	r3, r0, #1
    e97e:	d106      	bne.n	e98e <__sflush_r+0x66>
    e980:	682b      	ldr	r3, [r5, #0]
    e982:	2b1d      	cmp	r3, #29
    e984:	d831      	bhi.n	e9ea <__sflush_r+0xc2>
    e986:	4a2c      	ldr	r2, [pc, #176]	; (ea38 <__sflush_r+0x110>)
    e988:	40da      	lsrs	r2, r3
    e98a:	07d3      	lsls	r3, r2, #31
    e98c:	d52d      	bpl.n	e9ea <__sflush_r+0xc2>
    e98e:	2300      	movs	r3, #0
    e990:	6063      	str	r3, [r4, #4]
    e992:	6923      	ldr	r3, [r4, #16]
    e994:	6023      	str	r3, [r4, #0]
    e996:	04cb      	lsls	r3, r1, #19
    e998:	d505      	bpl.n	e9a6 <__sflush_r+0x7e>
    e99a:	1c43      	adds	r3, r0, #1
    e99c:	d102      	bne.n	e9a4 <__sflush_r+0x7c>
    e99e:	682b      	ldr	r3, [r5, #0]
    e9a0:	2b00      	cmp	r3, #0
    e9a2:	d100      	bne.n	e9a6 <__sflush_r+0x7e>
    e9a4:	6560      	str	r0, [r4, #84]	; 0x54
    e9a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e9a8:	602e      	str	r6, [r5, #0]
    e9aa:	2900      	cmp	r1, #0
    e9ac:	d0c8      	beq.n	e940 <__sflush_r+0x18>
    e9ae:	0023      	movs	r3, r4
    e9b0:	3344      	adds	r3, #68	; 0x44
    e9b2:	4299      	cmp	r1, r3
    e9b4:	d002      	beq.n	e9bc <__sflush_r+0x94>
    e9b6:	0028      	movs	r0, r5
    e9b8:	f7fd fe4a 	bl	c650 <_free_r>
    e9bc:	2000      	movs	r0, #0
    e9be:	6360      	str	r0, [r4, #52]	; 0x34
    e9c0:	e7bf      	b.n	e942 <__sflush_r+0x1a>
    e9c2:	2301      	movs	r3, #1
    e9c4:	6a21      	ldr	r1, [r4, #32]
    e9c6:	0028      	movs	r0, r5
    e9c8:	47b8      	blx	r7
    e9ca:	1c43      	adds	r3, r0, #1
    e9cc:	d1c5      	bne.n	e95a <__sflush_r+0x32>
    e9ce:	682b      	ldr	r3, [r5, #0]
    e9d0:	2b00      	cmp	r3, #0
    e9d2:	d0c2      	beq.n	e95a <__sflush_r+0x32>
    e9d4:	2b1d      	cmp	r3, #29
    e9d6:	d001      	beq.n	e9dc <__sflush_r+0xb4>
    e9d8:	2b16      	cmp	r3, #22
    e9da:	d101      	bne.n	e9e0 <__sflush_r+0xb8>
    e9dc:	602e      	str	r6, [r5, #0]
    e9de:	e7af      	b.n	e940 <__sflush_r+0x18>
    e9e0:	2340      	movs	r3, #64	; 0x40
    e9e2:	89a2      	ldrh	r2, [r4, #12]
    e9e4:	4313      	orrs	r3, r2
    e9e6:	81a3      	strh	r3, [r4, #12]
    e9e8:	e7ab      	b.n	e942 <__sflush_r+0x1a>
    e9ea:	2340      	movs	r3, #64	; 0x40
    e9ec:	430b      	orrs	r3, r1
    e9ee:	2001      	movs	r0, #1
    e9f0:	81a3      	strh	r3, [r4, #12]
    e9f2:	4240      	negs	r0, r0
    e9f4:	e7a5      	b.n	e942 <__sflush_r+0x1a>
    e9f6:	690f      	ldr	r7, [r1, #16]
    e9f8:	2f00      	cmp	r7, #0
    e9fa:	d0a1      	beq.n	e940 <__sflush_r+0x18>
    e9fc:	680b      	ldr	r3, [r1, #0]
    e9fe:	600f      	str	r7, [r1, #0]
    ea00:	1bdb      	subs	r3, r3, r7
    ea02:	9301      	str	r3, [sp, #4]
    ea04:	2300      	movs	r3, #0
    ea06:	0792      	lsls	r2, r2, #30
    ea08:	d100      	bne.n	ea0c <__sflush_r+0xe4>
    ea0a:	694b      	ldr	r3, [r1, #20]
    ea0c:	60a3      	str	r3, [r4, #8]
    ea0e:	9b01      	ldr	r3, [sp, #4]
    ea10:	2b00      	cmp	r3, #0
    ea12:	dc00      	bgt.n	ea16 <__sflush_r+0xee>
    ea14:	e794      	b.n	e940 <__sflush_r+0x18>
    ea16:	9b01      	ldr	r3, [sp, #4]
    ea18:	003a      	movs	r2, r7
    ea1a:	6a21      	ldr	r1, [r4, #32]
    ea1c:	0028      	movs	r0, r5
    ea1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    ea20:	47b0      	blx	r6
    ea22:	2800      	cmp	r0, #0
    ea24:	dc03      	bgt.n	ea2e <__sflush_r+0x106>
    ea26:	2340      	movs	r3, #64	; 0x40
    ea28:	89a2      	ldrh	r2, [r4, #12]
    ea2a:	4313      	orrs	r3, r2
    ea2c:	e7df      	b.n	e9ee <__sflush_r+0xc6>
    ea2e:	9b01      	ldr	r3, [sp, #4]
    ea30:	183f      	adds	r7, r7, r0
    ea32:	1a1b      	subs	r3, r3, r0
    ea34:	9301      	str	r3, [sp, #4]
    ea36:	e7ea      	b.n	ea0e <__sflush_r+0xe6>
    ea38:	20400001 	.word	0x20400001

0000ea3c <_fflush_r>:
    ea3c:	690b      	ldr	r3, [r1, #16]
    ea3e:	b570      	push	{r4, r5, r6, lr}
    ea40:	0005      	movs	r5, r0
    ea42:	000c      	movs	r4, r1
    ea44:	2b00      	cmp	r3, #0
    ea46:	d101      	bne.n	ea4c <_fflush_r+0x10>
    ea48:	2000      	movs	r0, #0
    ea4a:	bd70      	pop	{r4, r5, r6, pc}
    ea4c:	2800      	cmp	r0, #0
    ea4e:	d004      	beq.n	ea5a <_fflush_r+0x1e>
    ea50:	6983      	ldr	r3, [r0, #24]
    ea52:	2b00      	cmp	r3, #0
    ea54:	d101      	bne.n	ea5a <_fflush_r+0x1e>
    ea56:	f000 f85f 	bl	eb18 <__sinit>
    ea5a:	4b0b      	ldr	r3, [pc, #44]	; (ea88 <_fflush_r+0x4c>)
    ea5c:	429c      	cmp	r4, r3
    ea5e:	d109      	bne.n	ea74 <_fflush_r+0x38>
    ea60:	686c      	ldr	r4, [r5, #4]
    ea62:	220c      	movs	r2, #12
    ea64:	5ea3      	ldrsh	r3, [r4, r2]
    ea66:	2b00      	cmp	r3, #0
    ea68:	d0ee      	beq.n	ea48 <_fflush_r+0xc>
    ea6a:	0021      	movs	r1, r4
    ea6c:	0028      	movs	r0, r5
    ea6e:	f7ff ff5b 	bl	e928 <__sflush_r>
    ea72:	e7ea      	b.n	ea4a <_fflush_r+0xe>
    ea74:	4b05      	ldr	r3, [pc, #20]	; (ea8c <_fflush_r+0x50>)
    ea76:	429c      	cmp	r4, r3
    ea78:	d101      	bne.n	ea7e <_fflush_r+0x42>
    ea7a:	68ac      	ldr	r4, [r5, #8]
    ea7c:	e7f1      	b.n	ea62 <_fflush_r+0x26>
    ea7e:	4b04      	ldr	r3, [pc, #16]	; (ea90 <_fflush_r+0x54>)
    ea80:	429c      	cmp	r4, r3
    ea82:	d1ee      	bne.n	ea62 <_fflush_r+0x26>
    ea84:	68ec      	ldr	r4, [r5, #12]
    ea86:	e7ec      	b.n	ea62 <_fflush_r+0x26>
    ea88:	00012260 	.word	0x00012260
    ea8c:	00012280 	.word	0x00012280
    ea90:	00012240 	.word	0x00012240

0000ea94 <_cleanup_r>:
    ea94:	b510      	push	{r4, lr}
    ea96:	4902      	ldr	r1, [pc, #8]	; (eaa0 <_cleanup_r+0xc>)
    ea98:	f000 f8b2 	bl	ec00 <_fwalk_reent>
    ea9c:	bd10      	pop	{r4, pc}
    ea9e:	46c0      	nop			; (mov r8, r8)
    eaa0:	0000ea3d 	.word	0x0000ea3d

0000eaa4 <std.isra.0>:
    eaa4:	2300      	movs	r3, #0
    eaa6:	b510      	push	{r4, lr}
    eaa8:	0004      	movs	r4, r0
    eaaa:	6003      	str	r3, [r0, #0]
    eaac:	6043      	str	r3, [r0, #4]
    eaae:	6083      	str	r3, [r0, #8]
    eab0:	8181      	strh	r1, [r0, #12]
    eab2:	6643      	str	r3, [r0, #100]	; 0x64
    eab4:	81c2      	strh	r2, [r0, #14]
    eab6:	6103      	str	r3, [r0, #16]
    eab8:	6143      	str	r3, [r0, #20]
    eaba:	6183      	str	r3, [r0, #24]
    eabc:	0019      	movs	r1, r3
    eabe:	2208      	movs	r2, #8
    eac0:	305c      	adds	r0, #92	; 0x5c
    eac2:	f7fd fb67 	bl	c194 <memset>
    eac6:	4b05      	ldr	r3, [pc, #20]	; (eadc <std.isra.0+0x38>)
    eac8:	6224      	str	r4, [r4, #32]
    eaca:	6263      	str	r3, [r4, #36]	; 0x24
    eacc:	4b04      	ldr	r3, [pc, #16]	; (eae0 <std.isra.0+0x3c>)
    eace:	62a3      	str	r3, [r4, #40]	; 0x28
    ead0:	4b04      	ldr	r3, [pc, #16]	; (eae4 <std.isra.0+0x40>)
    ead2:	62e3      	str	r3, [r4, #44]	; 0x2c
    ead4:	4b04      	ldr	r3, [pc, #16]	; (eae8 <std.isra.0+0x44>)
    ead6:	6323      	str	r3, [r4, #48]	; 0x30
    ead8:	bd10      	pop	{r4, pc}
    eada:	46c0      	nop			; (mov r8, r8)
    eadc:	0000f7b9 	.word	0x0000f7b9
    eae0:	0000f7e5 	.word	0x0000f7e5
    eae4:	0000f81d 	.word	0x0000f81d
    eae8:	0000f849 	.word	0x0000f849

0000eaec <__sfmoreglue>:
    eaec:	b570      	push	{r4, r5, r6, lr}
    eaee:	2568      	movs	r5, #104	; 0x68
    eaf0:	1e4a      	subs	r2, r1, #1
    eaf2:	4355      	muls	r5, r2
    eaf4:	000e      	movs	r6, r1
    eaf6:	0029      	movs	r1, r5
    eaf8:	3174      	adds	r1, #116	; 0x74
    eafa:	f7fd fdf3 	bl	c6e4 <_malloc_r>
    eafe:	1e04      	subs	r4, r0, #0
    eb00:	d008      	beq.n	eb14 <__sfmoreglue+0x28>
    eb02:	2100      	movs	r1, #0
    eb04:	002a      	movs	r2, r5
    eb06:	6001      	str	r1, [r0, #0]
    eb08:	6046      	str	r6, [r0, #4]
    eb0a:	300c      	adds	r0, #12
    eb0c:	60a0      	str	r0, [r4, #8]
    eb0e:	3268      	adds	r2, #104	; 0x68
    eb10:	f7fd fb40 	bl	c194 <memset>
    eb14:	0020      	movs	r0, r4
    eb16:	bd70      	pop	{r4, r5, r6, pc}

0000eb18 <__sinit>:
    eb18:	6983      	ldr	r3, [r0, #24]
    eb1a:	b513      	push	{r0, r1, r4, lr}
    eb1c:	0004      	movs	r4, r0
    eb1e:	2b00      	cmp	r3, #0
    eb20:	d128      	bne.n	eb74 <__sinit+0x5c>
    eb22:	6483      	str	r3, [r0, #72]	; 0x48
    eb24:	64c3      	str	r3, [r0, #76]	; 0x4c
    eb26:	6503      	str	r3, [r0, #80]	; 0x50
    eb28:	4b13      	ldr	r3, [pc, #76]	; (eb78 <__sinit+0x60>)
    eb2a:	4a14      	ldr	r2, [pc, #80]	; (eb7c <__sinit+0x64>)
    eb2c:	681b      	ldr	r3, [r3, #0]
    eb2e:	6282      	str	r2, [r0, #40]	; 0x28
    eb30:	9301      	str	r3, [sp, #4]
    eb32:	4298      	cmp	r0, r3
    eb34:	d101      	bne.n	eb3a <__sinit+0x22>
    eb36:	2301      	movs	r3, #1
    eb38:	6183      	str	r3, [r0, #24]
    eb3a:	0020      	movs	r0, r4
    eb3c:	f000 f820 	bl	eb80 <__sfp>
    eb40:	6060      	str	r0, [r4, #4]
    eb42:	0020      	movs	r0, r4
    eb44:	f000 f81c 	bl	eb80 <__sfp>
    eb48:	60a0      	str	r0, [r4, #8]
    eb4a:	0020      	movs	r0, r4
    eb4c:	f000 f818 	bl	eb80 <__sfp>
    eb50:	2200      	movs	r2, #0
    eb52:	60e0      	str	r0, [r4, #12]
    eb54:	2104      	movs	r1, #4
    eb56:	6860      	ldr	r0, [r4, #4]
    eb58:	f7ff ffa4 	bl	eaa4 <std.isra.0>
    eb5c:	2201      	movs	r2, #1
    eb5e:	2109      	movs	r1, #9
    eb60:	68a0      	ldr	r0, [r4, #8]
    eb62:	f7ff ff9f 	bl	eaa4 <std.isra.0>
    eb66:	2202      	movs	r2, #2
    eb68:	2112      	movs	r1, #18
    eb6a:	68e0      	ldr	r0, [r4, #12]
    eb6c:	f7ff ff9a 	bl	eaa4 <std.isra.0>
    eb70:	2301      	movs	r3, #1
    eb72:	61a3      	str	r3, [r4, #24]
    eb74:	bd13      	pop	{r0, r1, r4, pc}
    eb76:	46c0      	nop			; (mov r8, r8)
    eb78:	00012044 	.word	0x00012044
    eb7c:	0000ea95 	.word	0x0000ea95

0000eb80 <__sfp>:
    eb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb82:	4b1e      	ldr	r3, [pc, #120]	; (ebfc <__sfp+0x7c>)
    eb84:	0007      	movs	r7, r0
    eb86:	681e      	ldr	r6, [r3, #0]
    eb88:	69b3      	ldr	r3, [r6, #24]
    eb8a:	2b00      	cmp	r3, #0
    eb8c:	d102      	bne.n	eb94 <__sfp+0x14>
    eb8e:	0030      	movs	r0, r6
    eb90:	f7ff ffc2 	bl	eb18 <__sinit>
    eb94:	3648      	adds	r6, #72	; 0x48
    eb96:	68b4      	ldr	r4, [r6, #8]
    eb98:	6873      	ldr	r3, [r6, #4]
    eb9a:	3b01      	subs	r3, #1
    eb9c:	d504      	bpl.n	eba8 <__sfp+0x28>
    eb9e:	6833      	ldr	r3, [r6, #0]
    eba0:	2b00      	cmp	r3, #0
    eba2:	d007      	beq.n	ebb4 <__sfp+0x34>
    eba4:	6836      	ldr	r6, [r6, #0]
    eba6:	e7f6      	b.n	eb96 <__sfp+0x16>
    eba8:	220c      	movs	r2, #12
    ebaa:	5ea5      	ldrsh	r5, [r4, r2]
    ebac:	2d00      	cmp	r5, #0
    ebae:	d00d      	beq.n	ebcc <__sfp+0x4c>
    ebb0:	3468      	adds	r4, #104	; 0x68
    ebb2:	e7f2      	b.n	eb9a <__sfp+0x1a>
    ebb4:	2104      	movs	r1, #4
    ebb6:	0038      	movs	r0, r7
    ebb8:	f7ff ff98 	bl	eaec <__sfmoreglue>
    ebbc:	6030      	str	r0, [r6, #0]
    ebbe:	2800      	cmp	r0, #0
    ebc0:	d1f0      	bne.n	eba4 <__sfp+0x24>
    ebc2:	230c      	movs	r3, #12
    ebc4:	0004      	movs	r4, r0
    ebc6:	603b      	str	r3, [r7, #0]
    ebc8:	0020      	movs	r0, r4
    ebca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ebcc:	2301      	movs	r3, #1
    ebce:	0020      	movs	r0, r4
    ebd0:	425b      	negs	r3, r3
    ebd2:	81e3      	strh	r3, [r4, #14]
    ebd4:	3302      	adds	r3, #2
    ebd6:	81a3      	strh	r3, [r4, #12]
    ebd8:	6665      	str	r5, [r4, #100]	; 0x64
    ebda:	6025      	str	r5, [r4, #0]
    ebdc:	60a5      	str	r5, [r4, #8]
    ebde:	6065      	str	r5, [r4, #4]
    ebe0:	6125      	str	r5, [r4, #16]
    ebe2:	6165      	str	r5, [r4, #20]
    ebe4:	61a5      	str	r5, [r4, #24]
    ebe6:	2208      	movs	r2, #8
    ebe8:	0029      	movs	r1, r5
    ebea:	305c      	adds	r0, #92	; 0x5c
    ebec:	f7fd fad2 	bl	c194 <memset>
    ebf0:	6365      	str	r5, [r4, #52]	; 0x34
    ebf2:	63a5      	str	r5, [r4, #56]	; 0x38
    ebf4:	64a5      	str	r5, [r4, #72]	; 0x48
    ebf6:	64e5      	str	r5, [r4, #76]	; 0x4c
    ebf8:	e7e6      	b.n	ebc8 <__sfp+0x48>
    ebfa:	46c0      	nop			; (mov r8, r8)
    ebfc:	00012044 	.word	0x00012044

0000ec00 <_fwalk_reent>:
    ec00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ec02:	0004      	movs	r4, r0
    ec04:	0007      	movs	r7, r0
    ec06:	2600      	movs	r6, #0
    ec08:	9101      	str	r1, [sp, #4]
    ec0a:	3448      	adds	r4, #72	; 0x48
    ec0c:	2c00      	cmp	r4, #0
    ec0e:	d101      	bne.n	ec14 <_fwalk_reent+0x14>
    ec10:	0030      	movs	r0, r6
    ec12:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ec14:	6863      	ldr	r3, [r4, #4]
    ec16:	68a5      	ldr	r5, [r4, #8]
    ec18:	9300      	str	r3, [sp, #0]
    ec1a:	9b00      	ldr	r3, [sp, #0]
    ec1c:	3b01      	subs	r3, #1
    ec1e:	9300      	str	r3, [sp, #0]
    ec20:	d501      	bpl.n	ec26 <_fwalk_reent+0x26>
    ec22:	6824      	ldr	r4, [r4, #0]
    ec24:	e7f2      	b.n	ec0c <_fwalk_reent+0xc>
    ec26:	89ab      	ldrh	r3, [r5, #12]
    ec28:	2b01      	cmp	r3, #1
    ec2a:	d908      	bls.n	ec3e <_fwalk_reent+0x3e>
    ec2c:	220e      	movs	r2, #14
    ec2e:	5eab      	ldrsh	r3, [r5, r2]
    ec30:	3301      	adds	r3, #1
    ec32:	d004      	beq.n	ec3e <_fwalk_reent+0x3e>
    ec34:	0029      	movs	r1, r5
    ec36:	0038      	movs	r0, r7
    ec38:	9b01      	ldr	r3, [sp, #4]
    ec3a:	4798      	blx	r3
    ec3c:	4306      	orrs	r6, r0
    ec3e:	3568      	adds	r5, #104	; 0x68
    ec40:	e7eb      	b.n	ec1a <_fwalk_reent+0x1a>
	...

0000ec44 <_findenv_r>:
    ec44:	b5f0      	push	{r4, r5, r6, r7, lr}
    ec46:	000e      	movs	r6, r1
    ec48:	b085      	sub	sp, #20
    ec4a:	0007      	movs	r7, r0
    ec4c:	9203      	str	r2, [sp, #12]
    ec4e:	f000 fed3 	bl	f9f8 <__env_lock>
    ec52:	4c19      	ldr	r4, [pc, #100]	; (ecb8 <_findenv_r+0x74>)
    ec54:	0033      	movs	r3, r6
    ec56:	6825      	ldr	r5, [r4, #0]
    ec58:	2d00      	cmp	r5, #0
    ec5a:	d106      	bne.n	ec6a <_findenv_r+0x26>
    ec5c:	0038      	movs	r0, r7
    ec5e:	f000 fecc 	bl	f9fa <__env_unlock>
    ec62:	2000      	movs	r0, #0
    ec64:	b005      	add	sp, #20
    ec66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ec68:	3301      	adds	r3, #1
    ec6a:	781a      	ldrb	r2, [r3, #0]
    ec6c:	2a00      	cmp	r2, #0
    ec6e:	d01f      	beq.n	ecb0 <_findenv_r+0x6c>
    ec70:	2a3d      	cmp	r2, #61	; 0x3d
    ec72:	d1f9      	bne.n	ec68 <_findenv_r+0x24>
    ec74:	e7f2      	b.n	ec5c <_findenv_r+0x18>
    ec76:	3504      	adds	r5, #4
    ec78:	6828      	ldr	r0, [r5, #0]
    ec7a:	2800      	cmp	r0, #0
    ec7c:	d0ee      	beq.n	ec5c <_findenv_r+0x18>
    ec7e:	9a01      	ldr	r2, [sp, #4]
    ec80:	0031      	movs	r1, r6
    ec82:	f7fe fbba 	bl	d3fa <strncmp>
    ec86:	2800      	cmp	r0, #0
    ec88:	d1f5      	bne.n	ec76 <_findenv_r+0x32>
    ec8a:	9a01      	ldr	r2, [sp, #4]
    ec8c:	682b      	ldr	r3, [r5, #0]
    ec8e:	4694      	mov	ip, r2
    ec90:	4463      	add	r3, ip
    ec92:	9302      	str	r3, [sp, #8]
    ec94:	781b      	ldrb	r3, [r3, #0]
    ec96:	2b3d      	cmp	r3, #61	; 0x3d
    ec98:	d1ed      	bne.n	ec76 <_findenv_r+0x32>
    ec9a:	6823      	ldr	r3, [r4, #0]
    ec9c:	0038      	movs	r0, r7
    ec9e:	1aed      	subs	r5, r5, r3
    eca0:	9b03      	ldr	r3, [sp, #12]
    eca2:	10ad      	asrs	r5, r5, #2
    eca4:	601d      	str	r5, [r3, #0]
    eca6:	f000 fea8 	bl	f9fa <__env_unlock>
    ecaa:	9802      	ldr	r0, [sp, #8]
    ecac:	3001      	adds	r0, #1
    ecae:	e7d9      	b.n	ec64 <_findenv_r+0x20>
    ecb0:	1b9b      	subs	r3, r3, r6
    ecb2:	9301      	str	r3, [sp, #4]
    ecb4:	e7e0      	b.n	ec78 <_findenv_r+0x34>
    ecb6:	46c0      	nop			; (mov r8, r8)
    ecb8:	200002c4 	.word	0x200002c4

0000ecbc <_getenv_r>:
    ecbc:	b507      	push	{r0, r1, r2, lr}
    ecbe:	aa01      	add	r2, sp, #4
    ecc0:	f7ff ffc0 	bl	ec44 <_findenv_r>
    ecc4:	bd0e      	pop	{r1, r2, r3, pc}
	...

0000ecc8 <__gettzinfo>:
    ecc8:	4800      	ldr	r0, [pc, #0]	; (eccc <__gettzinfo+0x4>)
    ecca:	4770      	bx	lr
    eccc:	20000284 	.word	0x20000284

0000ecd0 <_localeconv_r>:
    ecd0:	4b03      	ldr	r3, [pc, #12]	; (ece0 <_localeconv_r+0x10>)
    ecd2:	681b      	ldr	r3, [r3, #0]
    ecd4:	6a18      	ldr	r0, [r3, #32]
    ecd6:	2800      	cmp	r0, #0
    ecd8:	d100      	bne.n	ecdc <_localeconv_r+0xc>
    ecda:	4802      	ldr	r0, [pc, #8]	; (ece4 <_localeconv_r+0x14>)
    ecdc:	30f0      	adds	r0, #240	; 0xf0
    ecde:	4770      	bx	lr
    ece0:	200000ac 	.word	0x200000ac
    ece4:	20000110 	.word	0x20000110

0000ece8 <__swhatbuf_r>:
    ece8:	b570      	push	{r4, r5, r6, lr}
    ecea:	000e      	movs	r6, r1
    ecec:	001d      	movs	r5, r3
    ecee:	230e      	movs	r3, #14
    ecf0:	5ec9      	ldrsh	r1, [r1, r3]
    ecf2:	b090      	sub	sp, #64	; 0x40
    ecf4:	0014      	movs	r4, r2
    ecf6:	2900      	cmp	r1, #0
    ecf8:	da07      	bge.n	ed0a <__swhatbuf_r+0x22>
    ecfa:	2300      	movs	r3, #0
    ecfc:	602b      	str	r3, [r5, #0]
    ecfe:	89b3      	ldrh	r3, [r6, #12]
    ed00:	061b      	lsls	r3, r3, #24
    ed02:	d411      	bmi.n	ed28 <__swhatbuf_r+0x40>
    ed04:	2380      	movs	r3, #128	; 0x80
    ed06:	00db      	lsls	r3, r3, #3
    ed08:	e00f      	b.n	ed2a <__swhatbuf_r+0x42>
    ed0a:	aa01      	add	r2, sp, #4
    ed0c:	f000 fe76 	bl	f9fc <_fstat_r>
    ed10:	2800      	cmp	r0, #0
    ed12:	dbf2      	blt.n	ecfa <__swhatbuf_r+0x12>
    ed14:	22f0      	movs	r2, #240	; 0xf0
    ed16:	9b02      	ldr	r3, [sp, #8]
    ed18:	0212      	lsls	r2, r2, #8
    ed1a:	4013      	ands	r3, r2
    ed1c:	4a05      	ldr	r2, [pc, #20]	; (ed34 <__swhatbuf_r+0x4c>)
    ed1e:	189b      	adds	r3, r3, r2
    ed20:	425a      	negs	r2, r3
    ed22:	4153      	adcs	r3, r2
    ed24:	602b      	str	r3, [r5, #0]
    ed26:	e7ed      	b.n	ed04 <__swhatbuf_r+0x1c>
    ed28:	2340      	movs	r3, #64	; 0x40
    ed2a:	2000      	movs	r0, #0
    ed2c:	6023      	str	r3, [r4, #0]
    ed2e:	b010      	add	sp, #64	; 0x40
    ed30:	bd70      	pop	{r4, r5, r6, pc}
    ed32:	46c0      	nop			; (mov r8, r8)
    ed34:	ffffe000 	.word	0xffffe000

0000ed38 <__smakebuf_r>:
    ed38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ed3a:	2602      	movs	r6, #2
    ed3c:	898b      	ldrh	r3, [r1, #12]
    ed3e:	0005      	movs	r5, r0
    ed40:	000c      	movs	r4, r1
    ed42:	4233      	tst	r3, r6
    ed44:	d006      	beq.n	ed54 <__smakebuf_r+0x1c>
    ed46:	0023      	movs	r3, r4
    ed48:	3347      	adds	r3, #71	; 0x47
    ed4a:	6023      	str	r3, [r4, #0]
    ed4c:	6123      	str	r3, [r4, #16]
    ed4e:	2301      	movs	r3, #1
    ed50:	6163      	str	r3, [r4, #20]
    ed52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    ed54:	ab01      	add	r3, sp, #4
    ed56:	466a      	mov	r2, sp
    ed58:	f7ff ffc6 	bl	ece8 <__swhatbuf_r>
    ed5c:	9900      	ldr	r1, [sp, #0]
    ed5e:	0007      	movs	r7, r0
    ed60:	0028      	movs	r0, r5
    ed62:	f7fd fcbf 	bl	c6e4 <_malloc_r>
    ed66:	2800      	cmp	r0, #0
    ed68:	d108      	bne.n	ed7c <__smakebuf_r+0x44>
    ed6a:	220c      	movs	r2, #12
    ed6c:	5ea3      	ldrsh	r3, [r4, r2]
    ed6e:	059a      	lsls	r2, r3, #22
    ed70:	d4ef      	bmi.n	ed52 <__smakebuf_r+0x1a>
    ed72:	2203      	movs	r2, #3
    ed74:	4393      	bics	r3, r2
    ed76:	431e      	orrs	r6, r3
    ed78:	81a6      	strh	r6, [r4, #12]
    ed7a:	e7e4      	b.n	ed46 <__smakebuf_r+0xe>
    ed7c:	4b0f      	ldr	r3, [pc, #60]	; (edbc <__smakebuf_r+0x84>)
    ed7e:	62ab      	str	r3, [r5, #40]	; 0x28
    ed80:	2380      	movs	r3, #128	; 0x80
    ed82:	89a2      	ldrh	r2, [r4, #12]
    ed84:	6020      	str	r0, [r4, #0]
    ed86:	4313      	orrs	r3, r2
    ed88:	81a3      	strh	r3, [r4, #12]
    ed8a:	9b00      	ldr	r3, [sp, #0]
    ed8c:	6120      	str	r0, [r4, #16]
    ed8e:	6163      	str	r3, [r4, #20]
    ed90:	9b01      	ldr	r3, [sp, #4]
    ed92:	2b00      	cmp	r3, #0
    ed94:	d00d      	beq.n	edb2 <__smakebuf_r+0x7a>
    ed96:	230e      	movs	r3, #14
    ed98:	5ee1      	ldrsh	r1, [r4, r3]
    ed9a:	0028      	movs	r0, r5
    ed9c:	f000 fe40 	bl	fa20 <_isatty_r>
    eda0:	2800      	cmp	r0, #0
    eda2:	d006      	beq.n	edb2 <__smakebuf_r+0x7a>
    eda4:	2203      	movs	r2, #3
    eda6:	89a3      	ldrh	r3, [r4, #12]
    eda8:	4393      	bics	r3, r2
    edaa:	001a      	movs	r2, r3
    edac:	2301      	movs	r3, #1
    edae:	4313      	orrs	r3, r2
    edb0:	81a3      	strh	r3, [r4, #12]
    edb2:	89a0      	ldrh	r0, [r4, #12]
    edb4:	4338      	orrs	r0, r7
    edb6:	81a0      	strh	r0, [r4, #12]
    edb8:	e7cb      	b.n	ed52 <__smakebuf_r+0x1a>
    edba:	46c0      	nop			; (mov r8, r8)
    edbc:	0000ea95 	.word	0x0000ea95

0000edc0 <memchr>:
    edc0:	b2c9      	uxtb	r1, r1
    edc2:	1882      	adds	r2, r0, r2
    edc4:	4290      	cmp	r0, r2
    edc6:	d101      	bne.n	edcc <memchr+0xc>
    edc8:	2000      	movs	r0, #0
    edca:	4770      	bx	lr
    edcc:	7803      	ldrb	r3, [r0, #0]
    edce:	428b      	cmp	r3, r1
    edd0:	d0fb      	beq.n	edca <memchr+0xa>
    edd2:	3001      	adds	r0, #1
    edd4:	e7f6      	b.n	edc4 <memchr+0x4>

0000edd6 <__malloc_lock>:
    edd6:	4770      	bx	lr

0000edd8 <__malloc_unlock>:
    edd8:	4770      	bx	lr

0000edda <_Balloc>:
    edda:	b570      	push	{r4, r5, r6, lr}
    eddc:	6a46      	ldr	r6, [r0, #36]	; 0x24
    edde:	0004      	movs	r4, r0
    ede0:	000d      	movs	r5, r1
    ede2:	2e00      	cmp	r6, #0
    ede4:	d107      	bne.n	edf6 <_Balloc+0x1c>
    ede6:	2010      	movs	r0, #16
    ede8:	f7fd f984 	bl	c0f4 <malloc>
    edec:	6260      	str	r0, [r4, #36]	; 0x24
    edee:	6046      	str	r6, [r0, #4]
    edf0:	6086      	str	r6, [r0, #8]
    edf2:	6006      	str	r6, [r0, #0]
    edf4:	60c6      	str	r6, [r0, #12]
    edf6:	6a66      	ldr	r6, [r4, #36]	; 0x24
    edf8:	68f3      	ldr	r3, [r6, #12]
    edfa:	2b00      	cmp	r3, #0
    edfc:	d013      	beq.n	ee26 <_Balloc+0x4c>
    edfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ee00:	00aa      	lsls	r2, r5, #2
    ee02:	68db      	ldr	r3, [r3, #12]
    ee04:	189b      	adds	r3, r3, r2
    ee06:	6818      	ldr	r0, [r3, #0]
    ee08:	2800      	cmp	r0, #0
    ee0a:	d118      	bne.n	ee3e <_Balloc+0x64>
    ee0c:	2101      	movs	r1, #1
    ee0e:	000e      	movs	r6, r1
    ee10:	40ae      	lsls	r6, r5
    ee12:	1d72      	adds	r2, r6, #5
    ee14:	0092      	lsls	r2, r2, #2
    ee16:	0020      	movs	r0, r4
    ee18:	f000 fac2 	bl	f3a0 <_calloc_r>
    ee1c:	2800      	cmp	r0, #0
    ee1e:	d00c      	beq.n	ee3a <_Balloc+0x60>
    ee20:	6045      	str	r5, [r0, #4]
    ee22:	6086      	str	r6, [r0, #8]
    ee24:	e00d      	b.n	ee42 <_Balloc+0x68>
    ee26:	2221      	movs	r2, #33	; 0x21
    ee28:	2104      	movs	r1, #4
    ee2a:	0020      	movs	r0, r4
    ee2c:	f000 fab8 	bl	f3a0 <_calloc_r>
    ee30:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ee32:	60f0      	str	r0, [r6, #12]
    ee34:	68db      	ldr	r3, [r3, #12]
    ee36:	2b00      	cmp	r3, #0
    ee38:	d1e1      	bne.n	edfe <_Balloc+0x24>
    ee3a:	2000      	movs	r0, #0
    ee3c:	bd70      	pop	{r4, r5, r6, pc}
    ee3e:	6802      	ldr	r2, [r0, #0]
    ee40:	601a      	str	r2, [r3, #0]
    ee42:	2300      	movs	r3, #0
    ee44:	6103      	str	r3, [r0, #16]
    ee46:	60c3      	str	r3, [r0, #12]
    ee48:	e7f8      	b.n	ee3c <_Balloc+0x62>

0000ee4a <_Bfree>:
    ee4a:	b570      	push	{r4, r5, r6, lr}
    ee4c:	6a44      	ldr	r4, [r0, #36]	; 0x24
    ee4e:	0006      	movs	r6, r0
    ee50:	000d      	movs	r5, r1
    ee52:	2c00      	cmp	r4, #0
    ee54:	d107      	bne.n	ee66 <_Bfree+0x1c>
    ee56:	2010      	movs	r0, #16
    ee58:	f7fd f94c 	bl	c0f4 <malloc>
    ee5c:	6270      	str	r0, [r6, #36]	; 0x24
    ee5e:	6044      	str	r4, [r0, #4]
    ee60:	6084      	str	r4, [r0, #8]
    ee62:	6004      	str	r4, [r0, #0]
    ee64:	60c4      	str	r4, [r0, #12]
    ee66:	2d00      	cmp	r5, #0
    ee68:	d007      	beq.n	ee7a <_Bfree+0x30>
    ee6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
    ee6c:	686a      	ldr	r2, [r5, #4]
    ee6e:	68db      	ldr	r3, [r3, #12]
    ee70:	0092      	lsls	r2, r2, #2
    ee72:	189b      	adds	r3, r3, r2
    ee74:	681a      	ldr	r2, [r3, #0]
    ee76:	602a      	str	r2, [r5, #0]
    ee78:	601d      	str	r5, [r3, #0]
    ee7a:	bd70      	pop	{r4, r5, r6, pc}

0000ee7c <__multadd>:
    ee7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ee7e:	001e      	movs	r6, r3
    ee80:	2314      	movs	r3, #20
    ee82:	469c      	mov	ip, r3
    ee84:	0007      	movs	r7, r0
    ee86:	000c      	movs	r4, r1
    ee88:	2000      	movs	r0, #0
    ee8a:	690d      	ldr	r5, [r1, #16]
    ee8c:	448c      	add	ip, r1
    ee8e:	4663      	mov	r3, ip
    ee90:	8819      	ldrh	r1, [r3, #0]
    ee92:	681b      	ldr	r3, [r3, #0]
    ee94:	4351      	muls	r1, r2
    ee96:	0c1b      	lsrs	r3, r3, #16
    ee98:	4353      	muls	r3, r2
    ee9a:	1989      	adds	r1, r1, r6
    ee9c:	0c0e      	lsrs	r6, r1, #16
    ee9e:	199b      	adds	r3, r3, r6
    eea0:	b289      	uxth	r1, r1
    eea2:	0c1e      	lsrs	r6, r3, #16
    eea4:	041b      	lsls	r3, r3, #16
    eea6:	185b      	adds	r3, r3, r1
    eea8:	4661      	mov	r1, ip
    eeaa:	3001      	adds	r0, #1
    eeac:	c108      	stmia	r1!, {r3}
    eeae:	468c      	mov	ip, r1
    eeb0:	4285      	cmp	r5, r0
    eeb2:	dcec      	bgt.n	ee8e <__multadd+0x12>
    eeb4:	2e00      	cmp	r6, #0
    eeb6:	d01b      	beq.n	eef0 <__multadd+0x74>
    eeb8:	68a3      	ldr	r3, [r4, #8]
    eeba:	429d      	cmp	r5, r3
    eebc:	db12      	blt.n	eee4 <__multadd+0x68>
    eebe:	6863      	ldr	r3, [r4, #4]
    eec0:	0038      	movs	r0, r7
    eec2:	1c59      	adds	r1, r3, #1
    eec4:	f7ff ff89 	bl	edda <_Balloc>
    eec8:	0021      	movs	r1, r4
    eeca:	6923      	ldr	r3, [r4, #16]
    eecc:	9001      	str	r0, [sp, #4]
    eece:	1c9a      	adds	r2, r3, #2
    eed0:	0092      	lsls	r2, r2, #2
    eed2:	310c      	adds	r1, #12
    eed4:	300c      	adds	r0, #12
    eed6:	f7fd f942 	bl	c15e <memcpy>
    eeda:	0021      	movs	r1, r4
    eedc:	0038      	movs	r0, r7
    eede:	f7ff ffb4 	bl	ee4a <_Bfree>
    eee2:	9c01      	ldr	r4, [sp, #4]
    eee4:	1d2b      	adds	r3, r5, #4
    eee6:	009b      	lsls	r3, r3, #2
    eee8:	18e3      	adds	r3, r4, r3
    eeea:	3501      	adds	r5, #1
    eeec:	605e      	str	r6, [r3, #4]
    eeee:	6125      	str	r5, [r4, #16]
    eef0:	0020      	movs	r0, r4
    eef2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000eef4 <__hi0bits>:
    eef4:	0003      	movs	r3, r0
    eef6:	0c02      	lsrs	r2, r0, #16
    eef8:	2000      	movs	r0, #0
    eefa:	4282      	cmp	r2, r0
    eefc:	d101      	bne.n	ef02 <__hi0bits+0xe>
    eefe:	041b      	lsls	r3, r3, #16
    ef00:	3010      	adds	r0, #16
    ef02:	0e1a      	lsrs	r2, r3, #24
    ef04:	d101      	bne.n	ef0a <__hi0bits+0x16>
    ef06:	3008      	adds	r0, #8
    ef08:	021b      	lsls	r3, r3, #8
    ef0a:	0f1a      	lsrs	r2, r3, #28
    ef0c:	d101      	bne.n	ef12 <__hi0bits+0x1e>
    ef0e:	3004      	adds	r0, #4
    ef10:	011b      	lsls	r3, r3, #4
    ef12:	0f9a      	lsrs	r2, r3, #30
    ef14:	d101      	bne.n	ef1a <__hi0bits+0x26>
    ef16:	3002      	adds	r0, #2
    ef18:	009b      	lsls	r3, r3, #2
    ef1a:	2b00      	cmp	r3, #0
    ef1c:	db03      	blt.n	ef26 <__hi0bits+0x32>
    ef1e:	3001      	adds	r0, #1
    ef20:	005b      	lsls	r3, r3, #1
    ef22:	d400      	bmi.n	ef26 <__hi0bits+0x32>
    ef24:	2020      	movs	r0, #32
    ef26:	4770      	bx	lr

0000ef28 <__lo0bits>:
    ef28:	2207      	movs	r2, #7
    ef2a:	6803      	ldr	r3, [r0, #0]
    ef2c:	b510      	push	{r4, lr}
    ef2e:	0001      	movs	r1, r0
    ef30:	401a      	ands	r2, r3
    ef32:	d00d      	beq.n	ef50 <__lo0bits+0x28>
    ef34:	2401      	movs	r4, #1
    ef36:	2000      	movs	r0, #0
    ef38:	4223      	tst	r3, r4
    ef3a:	d105      	bne.n	ef48 <__lo0bits+0x20>
    ef3c:	3002      	adds	r0, #2
    ef3e:	4203      	tst	r3, r0
    ef40:	d003      	beq.n	ef4a <__lo0bits+0x22>
    ef42:	40e3      	lsrs	r3, r4
    ef44:	0020      	movs	r0, r4
    ef46:	600b      	str	r3, [r1, #0]
    ef48:	bd10      	pop	{r4, pc}
    ef4a:	089b      	lsrs	r3, r3, #2
    ef4c:	600b      	str	r3, [r1, #0]
    ef4e:	e7fb      	b.n	ef48 <__lo0bits+0x20>
    ef50:	b29c      	uxth	r4, r3
    ef52:	0010      	movs	r0, r2
    ef54:	2c00      	cmp	r4, #0
    ef56:	d101      	bne.n	ef5c <__lo0bits+0x34>
    ef58:	2010      	movs	r0, #16
    ef5a:	0c1b      	lsrs	r3, r3, #16
    ef5c:	b2da      	uxtb	r2, r3
    ef5e:	2a00      	cmp	r2, #0
    ef60:	d101      	bne.n	ef66 <__lo0bits+0x3e>
    ef62:	3008      	adds	r0, #8
    ef64:	0a1b      	lsrs	r3, r3, #8
    ef66:	071a      	lsls	r2, r3, #28
    ef68:	d101      	bne.n	ef6e <__lo0bits+0x46>
    ef6a:	3004      	adds	r0, #4
    ef6c:	091b      	lsrs	r3, r3, #4
    ef6e:	079a      	lsls	r2, r3, #30
    ef70:	d101      	bne.n	ef76 <__lo0bits+0x4e>
    ef72:	3002      	adds	r0, #2
    ef74:	089b      	lsrs	r3, r3, #2
    ef76:	07da      	lsls	r2, r3, #31
    ef78:	d4e8      	bmi.n	ef4c <__lo0bits+0x24>
    ef7a:	085b      	lsrs	r3, r3, #1
    ef7c:	d001      	beq.n	ef82 <__lo0bits+0x5a>
    ef7e:	3001      	adds	r0, #1
    ef80:	e7e4      	b.n	ef4c <__lo0bits+0x24>
    ef82:	2020      	movs	r0, #32
    ef84:	e7e0      	b.n	ef48 <__lo0bits+0x20>

0000ef86 <__i2b>:
    ef86:	b510      	push	{r4, lr}
    ef88:	000c      	movs	r4, r1
    ef8a:	2101      	movs	r1, #1
    ef8c:	f7ff ff25 	bl	edda <_Balloc>
    ef90:	2301      	movs	r3, #1
    ef92:	6144      	str	r4, [r0, #20]
    ef94:	6103      	str	r3, [r0, #16]
    ef96:	bd10      	pop	{r4, pc}

0000ef98 <__multiply>:
    ef98:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef9a:	690b      	ldr	r3, [r1, #16]
    ef9c:	0015      	movs	r5, r2
    ef9e:	6912      	ldr	r2, [r2, #16]
    efa0:	b089      	sub	sp, #36	; 0x24
    efa2:	000c      	movs	r4, r1
    efa4:	4293      	cmp	r3, r2
    efa6:	da01      	bge.n	efac <__multiply+0x14>
    efa8:	002c      	movs	r4, r5
    efaa:	000d      	movs	r5, r1
    efac:	6927      	ldr	r7, [r4, #16]
    efae:	692e      	ldr	r6, [r5, #16]
    efb0:	68a2      	ldr	r2, [r4, #8]
    efb2:	19bb      	adds	r3, r7, r6
    efb4:	6861      	ldr	r1, [r4, #4]
    efb6:	9301      	str	r3, [sp, #4]
    efb8:	4293      	cmp	r3, r2
    efba:	dd00      	ble.n	efbe <__multiply+0x26>
    efbc:	3101      	adds	r1, #1
    efbe:	f7ff ff0c 	bl	edda <_Balloc>
    efc2:	0003      	movs	r3, r0
    efc4:	3314      	adds	r3, #20
    efc6:	9300      	str	r3, [sp, #0]
    efc8:	9a00      	ldr	r2, [sp, #0]
    efca:	19bb      	adds	r3, r7, r6
    efcc:	4694      	mov	ip, r2
    efce:	009b      	lsls	r3, r3, #2
    efd0:	449c      	add	ip, r3
    efd2:	0013      	movs	r3, r2
    efd4:	2200      	movs	r2, #0
    efd6:	9004      	str	r0, [sp, #16]
    efd8:	4563      	cmp	r3, ip
    efda:	d31c      	bcc.n	f016 <__multiply+0x7e>
    efdc:	002a      	movs	r2, r5
    efde:	3414      	adds	r4, #20
    efe0:	00bf      	lsls	r7, r7, #2
    efe2:	19e3      	adds	r3, r4, r7
    efe4:	3214      	adds	r2, #20
    efe6:	00b6      	lsls	r6, r6, #2
    efe8:	9305      	str	r3, [sp, #20]
    efea:	1993      	adds	r3, r2, r6
    efec:	9402      	str	r4, [sp, #8]
    efee:	9306      	str	r3, [sp, #24]
    eff0:	9b06      	ldr	r3, [sp, #24]
    eff2:	429a      	cmp	r2, r3
    eff4:	d311      	bcc.n	f01a <__multiply+0x82>
    eff6:	9b01      	ldr	r3, [sp, #4]
    eff8:	2b00      	cmp	r3, #0
    effa:	dd06      	ble.n	f00a <__multiply+0x72>
    effc:	2304      	movs	r3, #4
    effe:	425b      	negs	r3, r3
    f000:	449c      	add	ip, r3
    f002:	4663      	mov	r3, ip
    f004:	681b      	ldr	r3, [r3, #0]
    f006:	2b00      	cmp	r3, #0
    f008:	d051      	beq.n	f0ae <__multiply+0x116>
    f00a:	9b04      	ldr	r3, [sp, #16]
    f00c:	9a01      	ldr	r2, [sp, #4]
    f00e:	0018      	movs	r0, r3
    f010:	611a      	str	r2, [r3, #16]
    f012:	b009      	add	sp, #36	; 0x24
    f014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f016:	c304      	stmia	r3!, {r2}
    f018:	e7de      	b.n	efd8 <__multiply+0x40>
    f01a:	8814      	ldrh	r4, [r2, #0]
    f01c:	2c00      	cmp	r4, #0
    f01e:	d01e      	beq.n	f05e <__multiply+0xc6>
    f020:	2600      	movs	r6, #0
    f022:	9d00      	ldr	r5, [sp, #0]
    f024:	9f02      	ldr	r7, [sp, #8]
    f026:	cf01      	ldmia	r7!, {r0}
    f028:	9507      	str	r5, [sp, #28]
    f02a:	cd08      	ldmia	r5!, {r3}
    f02c:	9303      	str	r3, [sp, #12]
    f02e:	b283      	uxth	r3, r0
    f030:	4363      	muls	r3, r4
    f032:	0019      	movs	r1, r3
    f034:	466b      	mov	r3, sp
    f036:	0c00      	lsrs	r0, r0, #16
    f038:	899b      	ldrh	r3, [r3, #12]
    f03a:	4360      	muls	r0, r4
    f03c:	18cb      	adds	r3, r1, r3
    f03e:	9903      	ldr	r1, [sp, #12]
    f040:	199b      	adds	r3, r3, r6
    f042:	0c09      	lsrs	r1, r1, #16
    f044:	1841      	adds	r1, r0, r1
    f046:	0c18      	lsrs	r0, r3, #16
    f048:	1809      	adds	r1, r1, r0
    f04a:	0c0e      	lsrs	r6, r1, #16
    f04c:	b29b      	uxth	r3, r3
    f04e:	0409      	lsls	r1, r1, #16
    f050:	430b      	orrs	r3, r1
    f052:	9907      	ldr	r1, [sp, #28]
    f054:	600b      	str	r3, [r1, #0]
    f056:	9b05      	ldr	r3, [sp, #20]
    f058:	42bb      	cmp	r3, r7
    f05a:	d8e4      	bhi.n	f026 <__multiply+0x8e>
    f05c:	602e      	str	r6, [r5, #0]
    f05e:	6813      	ldr	r3, [r2, #0]
    f060:	0c1b      	lsrs	r3, r3, #16
    f062:	9303      	str	r3, [sp, #12]
    f064:	d01e      	beq.n	f0a4 <__multiply+0x10c>
    f066:	2600      	movs	r6, #0
    f068:	9b00      	ldr	r3, [sp, #0]
    f06a:	9c02      	ldr	r4, [sp, #8]
    f06c:	681b      	ldr	r3, [r3, #0]
    f06e:	9800      	ldr	r0, [sp, #0]
    f070:	0007      	movs	r7, r0
    f072:	8821      	ldrh	r1, [r4, #0]
    f074:	9d03      	ldr	r5, [sp, #12]
    f076:	b29b      	uxth	r3, r3
    f078:	4369      	muls	r1, r5
    f07a:	c820      	ldmia	r0!, {r5}
    f07c:	0c2d      	lsrs	r5, r5, #16
    f07e:	1949      	adds	r1, r1, r5
    f080:	198e      	adds	r6, r1, r6
    f082:	0431      	lsls	r1, r6, #16
    f084:	430b      	orrs	r3, r1
    f086:	603b      	str	r3, [r7, #0]
    f088:	cc08      	ldmia	r4!, {r3}
    f08a:	9903      	ldr	r1, [sp, #12]
    f08c:	0c1b      	lsrs	r3, r3, #16
    f08e:	434b      	muls	r3, r1
    f090:	6879      	ldr	r1, [r7, #4]
    f092:	0c36      	lsrs	r6, r6, #16
    f094:	b289      	uxth	r1, r1
    f096:	185b      	adds	r3, r3, r1
    f098:	9905      	ldr	r1, [sp, #20]
    f09a:	199b      	adds	r3, r3, r6
    f09c:	0c1e      	lsrs	r6, r3, #16
    f09e:	42a1      	cmp	r1, r4
    f0a0:	d8e6      	bhi.n	f070 <__multiply+0xd8>
    f0a2:	6003      	str	r3, [r0, #0]
    f0a4:	9b00      	ldr	r3, [sp, #0]
    f0a6:	3204      	adds	r2, #4
    f0a8:	3304      	adds	r3, #4
    f0aa:	9300      	str	r3, [sp, #0]
    f0ac:	e7a0      	b.n	eff0 <__multiply+0x58>
    f0ae:	9b01      	ldr	r3, [sp, #4]
    f0b0:	3b01      	subs	r3, #1
    f0b2:	9301      	str	r3, [sp, #4]
    f0b4:	e79f      	b.n	eff6 <__multiply+0x5e>
	...

0000f0b8 <__pow5mult>:
    f0b8:	2303      	movs	r3, #3
    f0ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f0bc:	4013      	ands	r3, r2
    f0be:	0005      	movs	r5, r0
    f0c0:	000e      	movs	r6, r1
    f0c2:	0014      	movs	r4, r2
    f0c4:	2b00      	cmp	r3, #0
    f0c6:	d008      	beq.n	f0da <__pow5mult+0x22>
    f0c8:	4922      	ldr	r1, [pc, #136]	; (f154 <__pow5mult+0x9c>)
    f0ca:	3b01      	subs	r3, #1
    f0cc:	009a      	lsls	r2, r3, #2
    f0ce:	5852      	ldr	r2, [r2, r1]
    f0d0:	2300      	movs	r3, #0
    f0d2:	0031      	movs	r1, r6
    f0d4:	f7ff fed2 	bl	ee7c <__multadd>
    f0d8:	0006      	movs	r6, r0
    f0da:	10a3      	asrs	r3, r4, #2
    f0dc:	9301      	str	r3, [sp, #4]
    f0de:	d036      	beq.n	f14e <__pow5mult+0x96>
    f0e0:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    f0e2:	2c00      	cmp	r4, #0
    f0e4:	d107      	bne.n	f0f6 <__pow5mult+0x3e>
    f0e6:	2010      	movs	r0, #16
    f0e8:	f7fd f804 	bl	c0f4 <malloc>
    f0ec:	6268      	str	r0, [r5, #36]	; 0x24
    f0ee:	6044      	str	r4, [r0, #4]
    f0f0:	6084      	str	r4, [r0, #8]
    f0f2:	6004      	str	r4, [r0, #0]
    f0f4:	60c4      	str	r4, [r0, #12]
    f0f6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    f0f8:	68bc      	ldr	r4, [r7, #8]
    f0fa:	2c00      	cmp	r4, #0
    f0fc:	d107      	bne.n	f10e <__pow5mult+0x56>
    f0fe:	4916      	ldr	r1, [pc, #88]	; (f158 <__pow5mult+0xa0>)
    f100:	0028      	movs	r0, r5
    f102:	f7ff ff40 	bl	ef86 <__i2b>
    f106:	2300      	movs	r3, #0
    f108:	0004      	movs	r4, r0
    f10a:	60b8      	str	r0, [r7, #8]
    f10c:	6003      	str	r3, [r0, #0]
    f10e:	2201      	movs	r2, #1
    f110:	9b01      	ldr	r3, [sp, #4]
    f112:	4213      	tst	r3, r2
    f114:	d00a      	beq.n	f12c <__pow5mult+0x74>
    f116:	0031      	movs	r1, r6
    f118:	0022      	movs	r2, r4
    f11a:	0028      	movs	r0, r5
    f11c:	f7ff ff3c 	bl	ef98 <__multiply>
    f120:	0007      	movs	r7, r0
    f122:	0031      	movs	r1, r6
    f124:	0028      	movs	r0, r5
    f126:	f7ff fe90 	bl	ee4a <_Bfree>
    f12a:	003e      	movs	r6, r7
    f12c:	9b01      	ldr	r3, [sp, #4]
    f12e:	105b      	asrs	r3, r3, #1
    f130:	9301      	str	r3, [sp, #4]
    f132:	d00c      	beq.n	f14e <__pow5mult+0x96>
    f134:	6820      	ldr	r0, [r4, #0]
    f136:	2800      	cmp	r0, #0
    f138:	d107      	bne.n	f14a <__pow5mult+0x92>
    f13a:	0022      	movs	r2, r4
    f13c:	0021      	movs	r1, r4
    f13e:	0028      	movs	r0, r5
    f140:	f7ff ff2a 	bl	ef98 <__multiply>
    f144:	2300      	movs	r3, #0
    f146:	6020      	str	r0, [r4, #0]
    f148:	6003      	str	r3, [r0, #0]
    f14a:	0004      	movs	r4, r0
    f14c:	e7df      	b.n	f10e <__pow5mult+0x56>
    f14e:	0030      	movs	r0, r6
    f150:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f152:	46c0      	nop			; (mov r8, r8)
    f154:	000123f0 	.word	0x000123f0
    f158:	00000271 	.word	0x00000271

0000f15c <__lshift>:
    f15c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f15e:	000d      	movs	r5, r1
    f160:	0017      	movs	r7, r2
    f162:	692b      	ldr	r3, [r5, #16]
    f164:	1154      	asrs	r4, r2, #5
    f166:	b085      	sub	sp, #20
    f168:	18e3      	adds	r3, r4, r3
    f16a:	9302      	str	r3, [sp, #8]
    f16c:	3301      	adds	r3, #1
    f16e:	9301      	str	r3, [sp, #4]
    f170:	6849      	ldr	r1, [r1, #4]
    f172:	68ab      	ldr	r3, [r5, #8]
    f174:	9003      	str	r0, [sp, #12]
    f176:	9a01      	ldr	r2, [sp, #4]
    f178:	4293      	cmp	r3, r2
    f17a:	db34      	blt.n	f1e6 <__lshift+0x8a>
    f17c:	9803      	ldr	r0, [sp, #12]
    f17e:	f7ff fe2c 	bl	edda <_Balloc>
    f182:	2300      	movs	r3, #0
    f184:	0002      	movs	r2, r0
    f186:	0006      	movs	r6, r0
    f188:	0019      	movs	r1, r3
    f18a:	3214      	adds	r2, #20
    f18c:	42a3      	cmp	r3, r4
    f18e:	db2d      	blt.n	f1ec <__lshift+0x90>
    f190:	43e3      	mvns	r3, r4
    f192:	17db      	asrs	r3, r3, #31
    f194:	401c      	ands	r4, r3
    f196:	002b      	movs	r3, r5
    f198:	211f      	movs	r1, #31
    f19a:	00a4      	lsls	r4, r4, #2
    f19c:	1914      	adds	r4, r2, r4
    f19e:	692a      	ldr	r2, [r5, #16]
    f1a0:	3314      	adds	r3, #20
    f1a2:	0092      	lsls	r2, r2, #2
    f1a4:	189a      	adds	r2, r3, r2
    f1a6:	400f      	ands	r7, r1
    f1a8:	d024      	beq.n	f1f4 <__lshift+0x98>
    f1aa:	3101      	adds	r1, #1
    f1ac:	1bc9      	subs	r1, r1, r7
    f1ae:	468c      	mov	ip, r1
    f1b0:	2100      	movs	r1, #0
    f1b2:	6818      	ldr	r0, [r3, #0]
    f1b4:	40b8      	lsls	r0, r7
    f1b6:	4301      	orrs	r1, r0
    f1b8:	4660      	mov	r0, ip
    f1ba:	6021      	str	r1, [r4, #0]
    f1bc:	cb02      	ldmia	r3!, {r1}
    f1be:	3404      	adds	r4, #4
    f1c0:	40c1      	lsrs	r1, r0
    f1c2:	429a      	cmp	r2, r3
    f1c4:	d8f5      	bhi.n	f1b2 <__lshift+0x56>
    f1c6:	6021      	str	r1, [r4, #0]
    f1c8:	2900      	cmp	r1, #0
    f1ca:	d002      	beq.n	f1d2 <__lshift+0x76>
    f1cc:	9b02      	ldr	r3, [sp, #8]
    f1ce:	3302      	adds	r3, #2
    f1d0:	9301      	str	r3, [sp, #4]
    f1d2:	9b01      	ldr	r3, [sp, #4]
    f1d4:	9803      	ldr	r0, [sp, #12]
    f1d6:	3b01      	subs	r3, #1
    f1d8:	6133      	str	r3, [r6, #16]
    f1da:	0029      	movs	r1, r5
    f1dc:	f7ff fe35 	bl	ee4a <_Bfree>
    f1e0:	0030      	movs	r0, r6
    f1e2:	b005      	add	sp, #20
    f1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1e6:	3101      	adds	r1, #1
    f1e8:	005b      	lsls	r3, r3, #1
    f1ea:	e7c4      	b.n	f176 <__lshift+0x1a>
    f1ec:	0098      	lsls	r0, r3, #2
    f1ee:	5011      	str	r1, [r2, r0]
    f1f0:	3301      	adds	r3, #1
    f1f2:	e7cb      	b.n	f18c <__lshift+0x30>
    f1f4:	cb02      	ldmia	r3!, {r1}
    f1f6:	c402      	stmia	r4!, {r1}
    f1f8:	429a      	cmp	r2, r3
    f1fa:	d8fb      	bhi.n	f1f4 <__lshift+0x98>
    f1fc:	e7e9      	b.n	f1d2 <__lshift+0x76>

0000f1fe <__mcmp>:
    f1fe:	690a      	ldr	r2, [r1, #16]
    f200:	6903      	ldr	r3, [r0, #16]
    f202:	b530      	push	{r4, r5, lr}
    f204:	1a9b      	subs	r3, r3, r2
    f206:	d10e      	bne.n	f226 <__mcmp+0x28>
    f208:	0092      	lsls	r2, r2, #2
    f20a:	3014      	adds	r0, #20
    f20c:	3114      	adds	r1, #20
    f20e:	1884      	adds	r4, r0, r2
    f210:	1889      	adds	r1, r1, r2
    f212:	3c04      	subs	r4, #4
    f214:	3904      	subs	r1, #4
    f216:	6822      	ldr	r2, [r4, #0]
    f218:	680d      	ldr	r5, [r1, #0]
    f21a:	42aa      	cmp	r2, r5
    f21c:	d005      	beq.n	f22a <__mcmp+0x2c>
    f21e:	42aa      	cmp	r2, r5
    f220:	4192      	sbcs	r2, r2
    f222:	2301      	movs	r3, #1
    f224:	4313      	orrs	r3, r2
    f226:	0018      	movs	r0, r3
    f228:	bd30      	pop	{r4, r5, pc}
    f22a:	42a0      	cmp	r0, r4
    f22c:	d3f1      	bcc.n	f212 <__mcmp+0x14>
    f22e:	e7fa      	b.n	f226 <__mcmp+0x28>

0000f230 <__mdiff>:
    f230:	b5f0      	push	{r4, r5, r6, r7, lr}
    f232:	000d      	movs	r5, r1
    f234:	b085      	sub	sp, #20
    f236:	0007      	movs	r7, r0
    f238:	0011      	movs	r1, r2
    f23a:	0028      	movs	r0, r5
    f23c:	0014      	movs	r4, r2
    f23e:	f7ff ffde 	bl	f1fe <__mcmp>
    f242:	1e06      	subs	r6, r0, #0
    f244:	d108      	bne.n	f258 <__mdiff+0x28>
    f246:	0001      	movs	r1, r0
    f248:	0038      	movs	r0, r7
    f24a:	f7ff fdc6 	bl	edda <_Balloc>
    f24e:	2301      	movs	r3, #1
    f250:	6146      	str	r6, [r0, #20]
    f252:	6103      	str	r3, [r0, #16]
    f254:	b005      	add	sp, #20
    f256:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f258:	2301      	movs	r3, #1
    f25a:	9301      	str	r3, [sp, #4]
    f25c:	2800      	cmp	r0, #0
    f25e:	db04      	blt.n	f26a <__mdiff+0x3a>
    f260:	0023      	movs	r3, r4
    f262:	002c      	movs	r4, r5
    f264:	001d      	movs	r5, r3
    f266:	2300      	movs	r3, #0
    f268:	9301      	str	r3, [sp, #4]
    f26a:	6861      	ldr	r1, [r4, #4]
    f26c:	0038      	movs	r0, r7
    f26e:	f7ff fdb4 	bl	edda <_Balloc>
    f272:	002f      	movs	r7, r5
    f274:	2200      	movs	r2, #0
    f276:	9b01      	ldr	r3, [sp, #4]
    f278:	6926      	ldr	r6, [r4, #16]
    f27a:	60c3      	str	r3, [r0, #12]
    f27c:	3414      	adds	r4, #20
    f27e:	00b3      	lsls	r3, r6, #2
    f280:	18e3      	adds	r3, r4, r3
    f282:	9302      	str	r3, [sp, #8]
    f284:	692b      	ldr	r3, [r5, #16]
    f286:	3714      	adds	r7, #20
    f288:	009b      	lsls	r3, r3, #2
    f28a:	18fb      	adds	r3, r7, r3
    f28c:	9303      	str	r3, [sp, #12]
    f28e:	0003      	movs	r3, r0
    f290:	4694      	mov	ip, r2
    f292:	3314      	adds	r3, #20
    f294:	cc20      	ldmia	r4!, {r5}
    f296:	cf04      	ldmia	r7!, {r2}
    f298:	9201      	str	r2, [sp, #4]
    f29a:	b2aa      	uxth	r2, r5
    f29c:	4494      	add	ip, r2
    f29e:	466a      	mov	r2, sp
    f2a0:	4661      	mov	r1, ip
    f2a2:	8892      	ldrh	r2, [r2, #4]
    f2a4:	0c2d      	lsrs	r5, r5, #16
    f2a6:	1a8a      	subs	r2, r1, r2
    f2a8:	9901      	ldr	r1, [sp, #4]
    f2aa:	0c09      	lsrs	r1, r1, #16
    f2ac:	1a69      	subs	r1, r5, r1
    f2ae:	1415      	asrs	r5, r2, #16
    f2b0:	1949      	adds	r1, r1, r5
    f2b2:	140d      	asrs	r5, r1, #16
    f2b4:	b292      	uxth	r2, r2
    f2b6:	0409      	lsls	r1, r1, #16
    f2b8:	430a      	orrs	r2, r1
    f2ba:	601a      	str	r2, [r3, #0]
    f2bc:	9a03      	ldr	r2, [sp, #12]
    f2be:	46ac      	mov	ip, r5
    f2c0:	3304      	adds	r3, #4
    f2c2:	42ba      	cmp	r2, r7
    f2c4:	d8e6      	bhi.n	f294 <__mdiff+0x64>
    f2c6:	9902      	ldr	r1, [sp, #8]
    f2c8:	001a      	movs	r2, r3
    f2ca:	428c      	cmp	r4, r1
    f2cc:	d305      	bcc.n	f2da <__mdiff+0xaa>
    f2ce:	3a04      	subs	r2, #4
    f2d0:	6813      	ldr	r3, [r2, #0]
    f2d2:	2b00      	cmp	r3, #0
    f2d4:	d00e      	beq.n	f2f4 <__mdiff+0xc4>
    f2d6:	6106      	str	r6, [r0, #16]
    f2d8:	e7bc      	b.n	f254 <__mdiff+0x24>
    f2da:	cc04      	ldmia	r4!, {r2}
    f2dc:	b291      	uxth	r1, r2
    f2de:	4461      	add	r1, ip
    f2e0:	140d      	asrs	r5, r1, #16
    f2e2:	0c12      	lsrs	r2, r2, #16
    f2e4:	1952      	adds	r2, r2, r5
    f2e6:	1415      	asrs	r5, r2, #16
    f2e8:	b289      	uxth	r1, r1
    f2ea:	0412      	lsls	r2, r2, #16
    f2ec:	430a      	orrs	r2, r1
    f2ee:	46ac      	mov	ip, r5
    f2f0:	c304      	stmia	r3!, {r2}
    f2f2:	e7e8      	b.n	f2c6 <__mdiff+0x96>
    f2f4:	3e01      	subs	r6, #1
    f2f6:	e7ea      	b.n	f2ce <__mdiff+0x9e>

0000f2f8 <__d2b>:
    f2f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    f2fa:	001d      	movs	r5, r3
    f2fc:	2101      	movs	r1, #1
    f2fe:	9f08      	ldr	r7, [sp, #32]
    f300:	0014      	movs	r4, r2
    f302:	f7ff fd6a 	bl	edda <_Balloc>
    f306:	032b      	lsls	r3, r5, #12
    f308:	006d      	lsls	r5, r5, #1
    f30a:	0006      	movs	r6, r0
    f30c:	0b1b      	lsrs	r3, r3, #12
    f30e:	0d6d      	lsrs	r5, r5, #21
    f310:	d124      	bne.n	f35c <__d2b+0x64>
    f312:	9301      	str	r3, [sp, #4]
    f314:	2c00      	cmp	r4, #0
    f316:	d027      	beq.n	f368 <__d2b+0x70>
    f318:	4668      	mov	r0, sp
    f31a:	9400      	str	r4, [sp, #0]
    f31c:	f7ff fe04 	bl	ef28 <__lo0bits>
    f320:	9c00      	ldr	r4, [sp, #0]
    f322:	2800      	cmp	r0, #0
    f324:	d01e      	beq.n	f364 <__d2b+0x6c>
    f326:	9b01      	ldr	r3, [sp, #4]
    f328:	2120      	movs	r1, #32
    f32a:	001a      	movs	r2, r3
    f32c:	1a09      	subs	r1, r1, r0
    f32e:	408a      	lsls	r2, r1
    f330:	40c3      	lsrs	r3, r0
    f332:	4322      	orrs	r2, r4
    f334:	6172      	str	r2, [r6, #20]
    f336:	9301      	str	r3, [sp, #4]
    f338:	9c01      	ldr	r4, [sp, #4]
    f33a:	61b4      	str	r4, [r6, #24]
    f33c:	1e63      	subs	r3, r4, #1
    f33e:	419c      	sbcs	r4, r3
    f340:	3401      	adds	r4, #1
    f342:	6134      	str	r4, [r6, #16]
    f344:	2d00      	cmp	r5, #0
    f346:	d018      	beq.n	f37a <__d2b+0x82>
    f348:	4b12      	ldr	r3, [pc, #72]	; (f394 <__d2b+0x9c>)
    f34a:	18ed      	adds	r5, r5, r3
    f34c:	2335      	movs	r3, #53	; 0x35
    f34e:	182d      	adds	r5, r5, r0
    f350:	603d      	str	r5, [r7, #0]
    f352:	1a18      	subs	r0, r3, r0
    f354:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f356:	6018      	str	r0, [r3, #0]
    f358:	0030      	movs	r0, r6
    f35a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f35c:	2280      	movs	r2, #128	; 0x80
    f35e:	0352      	lsls	r2, r2, #13
    f360:	4313      	orrs	r3, r2
    f362:	e7d6      	b.n	f312 <__d2b+0x1a>
    f364:	6174      	str	r4, [r6, #20]
    f366:	e7e7      	b.n	f338 <__d2b+0x40>
    f368:	a801      	add	r0, sp, #4
    f36a:	f7ff fddd 	bl	ef28 <__lo0bits>
    f36e:	2401      	movs	r4, #1
    f370:	9b01      	ldr	r3, [sp, #4]
    f372:	6134      	str	r4, [r6, #16]
    f374:	6173      	str	r3, [r6, #20]
    f376:	3020      	adds	r0, #32
    f378:	e7e4      	b.n	f344 <__d2b+0x4c>
    f37a:	4b07      	ldr	r3, [pc, #28]	; (f398 <__d2b+0xa0>)
    f37c:	18c0      	adds	r0, r0, r3
    f37e:	4b07      	ldr	r3, [pc, #28]	; (f39c <__d2b+0xa4>)
    f380:	6038      	str	r0, [r7, #0]
    f382:	18e3      	adds	r3, r4, r3
    f384:	009b      	lsls	r3, r3, #2
    f386:	18f3      	adds	r3, r6, r3
    f388:	6958      	ldr	r0, [r3, #20]
    f38a:	f7ff fdb3 	bl	eef4 <__hi0bits>
    f38e:	0164      	lsls	r4, r4, #5
    f390:	1a20      	subs	r0, r4, r0
    f392:	e7df      	b.n	f354 <__d2b+0x5c>
    f394:	fffffbcd 	.word	0xfffffbcd
    f398:	fffffbce 	.word	0xfffffbce
    f39c:	3fffffff 	.word	0x3fffffff

0000f3a0 <_calloc_r>:
    f3a0:	434a      	muls	r2, r1
    f3a2:	b570      	push	{r4, r5, r6, lr}
    f3a4:	0011      	movs	r1, r2
    f3a6:	0014      	movs	r4, r2
    f3a8:	f7fd f99c 	bl	c6e4 <_malloc_r>
    f3ac:	1e05      	subs	r5, r0, #0
    f3ae:	d003      	beq.n	f3b8 <_calloc_r+0x18>
    f3b0:	0022      	movs	r2, r4
    f3b2:	2100      	movs	r1, #0
    f3b4:	f7fc feee 	bl	c194 <memset>
    f3b8:	0028      	movs	r0, r5
    f3ba:	bd70      	pop	{r4, r5, r6, pc}

0000f3bc <_realloc_r>:
    f3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f3be:	0007      	movs	r7, r0
    f3c0:	000d      	movs	r5, r1
    f3c2:	0016      	movs	r6, r2
    f3c4:	2900      	cmp	r1, #0
    f3c6:	d105      	bne.n	f3d4 <_realloc_r+0x18>
    f3c8:	0011      	movs	r1, r2
    f3ca:	f7fd f98b 	bl	c6e4 <_malloc_r>
    f3ce:	0004      	movs	r4, r0
    f3d0:	0020      	movs	r0, r4
    f3d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3d4:	2a00      	cmp	r2, #0
    f3d6:	d103      	bne.n	f3e0 <_realloc_r+0x24>
    f3d8:	f7fd f93a 	bl	c650 <_free_r>
    f3dc:	0034      	movs	r4, r6
    f3de:	e7f7      	b.n	f3d0 <_realloc_r+0x14>
    f3e0:	f000 fb44 	bl	fa6c <_malloc_usable_size_r>
    f3e4:	002c      	movs	r4, r5
    f3e6:	4286      	cmp	r6, r0
    f3e8:	d9f2      	bls.n	f3d0 <_realloc_r+0x14>
    f3ea:	0031      	movs	r1, r6
    f3ec:	0038      	movs	r0, r7
    f3ee:	f7fd f979 	bl	c6e4 <_malloc_r>
    f3f2:	1e04      	subs	r4, r0, #0
    f3f4:	d0ec      	beq.n	f3d0 <_realloc_r+0x14>
    f3f6:	0029      	movs	r1, r5
    f3f8:	0032      	movs	r2, r6
    f3fa:	f7fc feb0 	bl	c15e <memcpy>
    f3fe:	0029      	movs	r1, r5
    f400:	0038      	movs	r0, r7
    f402:	f7fd f925 	bl	c650 <_free_r>
    f406:	e7e3      	b.n	f3d0 <_realloc_r+0x14>

0000f408 <__ssputs_r>:
    f408:	b5f0      	push	{r4, r5, r6, r7, lr}
    f40a:	688e      	ldr	r6, [r1, #8]
    f40c:	b085      	sub	sp, #20
    f40e:	0007      	movs	r7, r0
    f410:	000c      	movs	r4, r1
    f412:	9203      	str	r2, [sp, #12]
    f414:	9301      	str	r3, [sp, #4]
    f416:	429e      	cmp	r6, r3
    f418:	d839      	bhi.n	f48e <__ssputs_r+0x86>
    f41a:	2390      	movs	r3, #144	; 0x90
    f41c:	898a      	ldrh	r2, [r1, #12]
    f41e:	00db      	lsls	r3, r3, #3
    f420:	421a      	tst	r2, r3
    f422:	d034      	beq.n	f48e <__ssputs_r+0x86>
    f424:	2503      	movs	r5, #3
    f426:	6909      	ldr	r1, [r1, #16]
    f428:	6823      	ldr	r3, [r4, #0]
    f42a:	1a5b      	subs	r3, r3, r1
    f42c:	9302      	str	r3, [sp, #8]
    f42e:	6963      	ldr	r3, [r4, #20]
    f430:	9802      	ldr	r0, [sp, #8]
    f432:	435d      	muls	r5, r3
    f434:	0feb      	lsrs	r3, r5, #31
    f436:	195d      	adds	r5, r3, r5
    f438:	9b01      	ldr	r3, [sp, #4]
    f43a:	106d      	asrs	r5, r5, #1
    f43c:	3301      	adds	r3, #1
    f43e:	181b      	adds	r3, r3, r0
    f440:	42ab      	cmp	r3, r5
    f442:	d900      	bls.n	f446 <__ssputs_r+0x3e>
    f444:	001d      	movs	r5, r3
    f446:	0553      	lsls	r3, r2, #21
    f448:	d532      	bpl.n	f4b0 <__ssputs_r+0xa8>
    f44a:	0029      	movs	r1, r5
    f44c:	0038      	movs	r0, r7
    f44e:	f7fd f949 	bl	c6e4 <_malloc_r>
    f452:	1e06      	subs	r6, r0, #0
    f454:	d109      	bne.n	f46a <__ssputs_r+0x62>
    f456:	230c      	movs	r3, #12
    f458:	603b      	str	r3, [r7, #0]
    f45a:	2340      	movs	r3, #64	; 0x40
    f45c:	2001      	movs	r0, #1
    f45e:	89a2      	ldrh	r2, [r4, #12]
    f460:	4240      	negs	r0, r0
    f462:	4313      	orrs	r3, r2
    f464:	81a3      	strh	r3, [r4, #12]
    f466:	b005      	add	sp, #20
    f468:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f46a:	9a02      	ldr	r2, [sp, #8]
    f46c:	6921      	ldr	r1, [r4, #16]
    f46e:	f7fc fe76 	bl	c15e <memcpy>
    f472:	89a3      	ldrh	r3, [r4, #12]
    f474:	4a14      	ldr	r2, [pc, #80]	; (f4c8 <__ssputs_r+0xc0>)
    f476:	401a      	ands	r2, r3
    f478:	2380      	movs	r3, #128	; 0x80
    f47a:	4313      	orrs	r3, r2
    f47c:	81a3      	strh	r3, [r4, #12]
    f47e:	9b02      	ldr	r3, [sp, #8]
    f480:	6126      	str	r6, [r4, #16]
    f482:	18f6      	adds	r6, r6, r3
    f484:	6026      	str	r6, [r4, #0]
    f486:	6165      	str	r5, [r4, #20]
    f488:	9e01      	ldr	r6, [sp, #4]
    f48a:	1aed      	subs	r5, r5, r3
    f48c:	60a5      	str	r5, [r4, #8]
    f48e:	9b01      	ldr	r3, [sp, #4]
    f490:	42b3      	cmp	r3, r6
    f492:	d200      	bcs.n	f496 <__ssputs_r+0x8e>
    f494:	001e      	movs	r6, r3
    f496:	0032      	movs	r2, r6
    f498:	9903      	ldr	r1, [sp, #12]
    f49a:	6820      	ldr	r0, [r4, #0]
    f49c:	f7fc fe68 	bl	c170 <memmove>
    f4a0:	68a3      	ldr	r3, [r4, #8]
    f4a2:	2000      	movs	r0, #0
    f4a4:	1b9b      	subs	r3, r3, r6
    f4a6:	60a3      	str	r3, [r4, #8]
    f4a8:	6823      	ldr	r3, [r4, #0]
    f4aa:	199e      	adds	r6, r3, r6
    f4ac:	6026      	str	r6, [r4, #0]
    f4ae:	e7da      	b.n	f466 <__ssputs_r+0x5e>
    f4b0:	002a      	movs	r2, r5
    f4b2:	0038      	movs	r0, r7
    f4b4:	f7ff ff82 	bl	f3bc <_realloc_r>
    f4b8:	1e06      	subs	r6, r0, #0
    f4ba:	d1e0      	bne.n	f47e <__ssputs_r+0x76>
    f4bc:	6921      	ldr	r1, [r4, #16]
    f4be:	0038      	movs	r0, r7
    f4c0:	f7fd f8c6 	bl	c650 <_free_r>
    f4c4:	e7c7      	b.n	f456 <__ssputs_r+0x4e>
    f4c6:	46c0      	nop			; (mov r8, r8)
    f4c8:	fffffb7f 	.word	0xfffffb7f

0000f4cc <_svfiprintf_r>:
    f4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4ce:	b09f      	sub	sp, #124	; 0x7c
    f4d0:	9002      	str	r0, [sp, #8]
    f4d2:	9305      	str	r3, [sp, #20]
    f4d4:	898b      	ldrh	r3, [r1, #12]
    f4d6:	000f      	movs	r7, r1
    f4d8:	0016      	movs	r6, r2
    f4da:	061b      	lsls	r3, r3, #24
    f4dc:	d511      	bpl.n	f502 <_svfiprintf_r+0x36>
    f4de:	690b      	ldr	r3, [r1, #16]
    f4e0:	2b00      	cmp	r3, #0
    f4e2:	d10e      	bne.n	f502 <_svfiprintf_r+0x36>
    f4e4:	2140      	movs	r1, #64	; 0x40
    f4e6:	f7fd f8fd 	bl	c6e4 <_malloc_r>
    f4ea:	6038      	str	r0, [r7, #0]
    f4ec:	6138      	str	r0, [r7, #16]
    f4ee:	2800      	cmp	r0, #0
    f4f0:	d105      	bne.n	f4fe <_svfiprintf_r+0x32>
    f4f2:	230c      	movs	r3, #12
    f4f4:	9a02      	ldr	r2, [sp, #8]
    f4f6:	3801      	subs	r0, #1
    f4f8:	6013      	str	r3, [r2, #0]
    f4fa:	b01f      	add	sp, #124	; 0x7c
    f4fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4fe:	2340      	movs	r3, #64	; 0x40
    f500:	617b      	str	r3, [r7, #20]
    f502:	2300      	movs	r3, #0
    f504:	ad06      	add	r5, sp, #24
    f506:	616b      	str	r3, [r5, #20]
    f508:	3320      	adds	r3, #32
    f50a:	766b      	strb	r3, [r5, #25]
    f50c:	3310      	adds	r3, #16
    f50e:	76ab      	strb	r3, [r5, #26]
    f510:	0034      	movs	r4, r6
    f512:	7823      	ldrb	r3, [r4, #0]
    f514:	2b00      	cmp	r3, #0
    f516:	d147      	bne.n	f5a8 <_svfiprintf_r+0xdc>
    f518:	1ba3      	subs	r3, r4, r6
    f51a:	9304      	str	r3, [sp, #16]
    f51c:	d00d      	beq.n	f53a <_svfiprintf_r+0x6e>
    f51e:	1ba3      	subs	r3, r4, r6
    f520:	0032      	movs	r2, r6
    f522:	0039      	movs	r1, r7
    f524:	9802      	ldr	r0, [sp, #8]
    f526:	f7ff ff6f 	bl	f408 <__ssputs_r>
    f52a:	1c43      	adds	r3, r0, #1
    f52c:	d100      	bne.n	f530 <_svfiprintf_r+0x64>
    f52e:	e0b5      	b.n	f69c <_svfiprintf_r+0x1d0>
    f530:	696a      	ldr	r2, [r5, #20]
    f532:	9b04      	ldr	r3, [sp, #16]
    f534:	4694      	mov	ip, r2
    f536:	4463      	add	r3, ip
    f538:	616b      	str	r3, [r5, #20]
    f53a:	7823      	ldrb	r3, [r4, #0]
    f53c:	2b00      	cmp	r3, #0
    f53e:	d100      	bne.n	f542 <_svfiprintf_r+0x76>
    f540:	e0ac      	b.n	f69c <_svfiprintf_r+0x1d0>
    f542:	2201      	movs	r2, #1
    f544:	2300      	movs	r3, #0
    f546:	4252      	negs	r2, r2
    f548:	606a      	str	r2, [r5, #4]
    f54a:	a902      	add	r1, sp, #8
    f54c:	3254      	adds	r2, #84	; 0x54
    f54e:	1852      	adds	r2, r2, r1
    f550:	3401      	adds	r4, #1
    f552:	602b      	str	r3, [r5, #0]
    f554:	60eb      	str	r3, [r5, #12]
    f556:	60ab      	str	r3, [r5, #8]
    f558:	7013      	strb	r3, [r2, #0]
    f55a:	65ab      	str	r3, [r5, #88]	; 0x58
    f55c:	4e58      	ldr	r6, [pc, #352]	; (f6c0 <_svfiprintf_r+0x1f4>)
    f55e:	2205      	movs	r2, #5
    f560:	7821      	ldrb	r1, [r4, #0]
    f562:	0030      	movs	r0, r6
    f564:	f7ff fc2c 	bl	edc0 <memchr>
    f568:	1c62      	adds	r2, r4, #1
    f56a:	2800      	cmp	r0, #0
    f56c:	d120      	bne.n	f5b0 <_svfiprintf_r+0xe4>
    f56e:	6829      	ldr	r1, [r5, #0]
    f570:	06cb      	lsls	r3, r1, #27
    f572:	d504      	bpl.n	f57e <_svfiprintf_r+0xb2>
    f574:	2353      	movs	r3, #83	; 0x53
    f576:	ae02      	add	r6, sp, #8
    f578:	3020      	adds	r0, #32
    f57a:	199b      	adds	r3, r3, r6
    f57c:	7018      	strb	r0, [r3, #0]
    f57e:	070b      	lsls	r3, r1, #28
    f580:	d504      	bpl.n	f58c <_svfiprintf_r+0xc0>
    f582:	2353      	movs	r3, #83	; 0x53
    f584:	202b      	movs	r0, #43	; 0x2b
    f586:	ae02      	add	r6, sp, #8
    f588:	199b      	adds	r3, r3, r6
    f58a:	7018      	strb	r0, [r3, #0]
    f58c:	7823      	ldrb	r3, [r4, #0]
    f58e:	2b2a      	cmp	r3, #42	; 0x2a
    f590:	d016      	beq.n	f5c0 <_svfiprintf_r+0xf4>
    f592:	2000      	movs	r0, #0
    f594:	210a      	movs	r1, #10
    f596:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f598:	7822      	ldrb	r2, [r4, #0]
    f59a:	3a30      	subs	r2, #48	; 0x30
    f59c:	2a09      	cmp	r2, #9
    f59e:	d955      	bls.n	f64c <_svfiprintf_r+0x180>
    f5a0:	2800      	cmp	r0, #0
    f5a2:	d015      	beq.n	f5d0 <_svfiprintf_r+0x104>
    f5a4:	9309      	str	r3, [sp, #36]	; 0x24
    f5a6:	e013      	b.n	f5d0 <_svfiprintf_r+0x104>
    f5a8:	2b25      	cmp	r3, #37	; 0x25
    f5aa:	d0b5      	beq.n	f518 <_svfiprintf_r+0x4c>
    f5ac:	3401      	adds	r4, #1
    f5ae:	e7b0      	b.n	f512 <_svfiprintf_r+0x46>
    f5b0:	2301      	movs	r3, #1
    f5b2:	1b80      	subs	r0, r0, r6
    f5b4:	4083      	lsls	r3, r0
    f5b6:	6829      	ldr	r1, [r5, #0]
    f5b8:	0014      	movs	r4, r2
    f5ba:	430b      	orrs	r3, r1
    f5bc:	602b      	str	r3, [r5, #0]
    f5be:	e7cd      	b.n	f55c <_svfiprintf_r+0x90>
    f5c0:	9b05      	ldr	r3, [sp, #20]
    f5c2:	1d18      	adds	r0, r3, #4
    f5c4:	681b      	ldr	r3, [r3, #0]
    f5c6:	9005      	str	r0, [sp, #20]
    f5c8:	2b00      	cmp	r3, #0
    f5ca:	db39      	blt.n	f640 <_svfiprintf_r+0x174>
    f5cc:	9309      	str	r3, [sp, #36]	; 0x24
    f5ce:	0014      	movs	r4, r2
    f5d0:	7823      	ldrb	r3, [r4, #0]
    f5d2:	2b2e      	cmp	r3, #46	; 0x2e
    f5d4:	d10b      	bne.n	f5ee <_svfiprintf_r+0x122>
    f5d6:	7863      	ldrb	r3, [r4, #1]
    f5d8:	1c62      	adds	r2, r4, #1
    f5da:	2b2a      	cmp	r3, #42	; 0x2a
    f5dc:	d13e      	bne.n	f65c <_svfiprintf_r+0x190>
    f5de:	9b05      	ldr	r3, [sp, #20]
    f5e0:	3402      	adds	r4, #2
    f5e2:	1d1a      	adds	r2, r3, #4
    f5e4:	681b      	ldr	r3, [r3, #0]
    f5e6:	9205      	str	r2, [sp, #20]
    f5e8:	2b00      	cmp	r3, #0
    f5ea:	db34      	blt.n	f656 <_svfiprintf_r+0x18a>
    f5ec:	9307      	str	r3, [sp, #28]
    f5ee:	4e35      	ldr	r6, [pc, #212]	; (f6c4 <_svfiprintf_r+0x1f8>)
    f5f0:	7821      	ldrb	r1, [r4, #0]
    f5f2:	2203      	movs	r2, #3
    f5f4:	0030      	movs	r0, r6
    f5f6:	f7ff fbe3 	bl	edc0 <memchr>
    f5fa:	2800      	cmp	r0, #0
    f5fc:	d006      	beq.n	f60c <_svfiprintf_r+0x140>
    f5fe:	2340      	movs	r3, #64	; 0x40
    f600:	1b80      	subs	r0, r0, r6
    f602:	4083      	lsls	r3, r0
    f604:	682a      	ldr	r2, [r5, #0]
    f606:	3401      	adds	r4, #1
    f608:	4313      	orrs	r3, r2
    f60a:	602b      	str	r3, [r5, #0]
    f60c:	7821      	ldrb	r1, [r4, #0]
    f60e:	2206      	movs	r2, #6
    f610:	482d      	ldr	r0, [pc, #180]	; (f6c8 <_svfiprintf_r+0x1fc>)
    f612:	1c66      	adds	r6, r4, #1
    f614:	7629      	strb	r1, [r5, #24]
    f616:	f7ff fbd3 	bl	edc0 <memchr>
    f61a:	2800      	cmp	r0, #0
    f61c:	d046      	beq.n	f6ac <_svfiprintf_r+0x1e0>
    f61e:	4b2b      	ldr	r3, [pc, #172]	; (f6cc <_svfiprintf_r+0x200>)
    f620:	2b00      	cmp	r3, #0
    f622:	d12f      	bne.n	f684 <_svfiprintf_r+0x1b8>
    f624:	6829      	ldr	r1, [r5, #0]
    f626:	9b05      	ldr	r3, [sp, #20]
    f628:	2207      	movs	r2, #7
    f62a:	05c9      	lsls	r1, r1, #23
    f62c:	d528      	bpl.n	f680 <_svfiprintf_r+0x1b4>
    f62e:	189b      	adds	r3, r3, r2
    f630:	4393      	bics	r3, r2
    f632:	3308      	adds	r3, #8
    f634:	9305      	str	r3, [sp, #20]
    f636:	696b      	ldr	r3, [r5, #20]
    f638:	9a03      	ldr	r2, [sp, #12]
    f63a:	189b      	adds	r3, r3, r2
    f63c:	616b      	str	r3, [r5, #20]
    f63e:	e767      	b.n	f510 <_svfiprintf_r+0x44>
    f640:	425b      	negs	r3, r3
    f642:	60eb      	str	r3, [r5, #12]
    f644:	2302      	movs	r3, #2
    f646:	430b      	orrs	r3, r1
    f648:	602b      	str	r3, [r5, #0]
    f64a:	e7c0      	b.n	f5ce <_svfiprintf_r+0x102>
    f64c:	434b      	muls	r3, r1
    f64e:	3401      	adds	r4, #1
    f650:	189b      	adds	r3, r3, r2
    f652:	2001      	movs	r0, #1
    f654:	e7a0      	b.n	f598 <_svfiprintf_r+0xcc>
    f656:	2301      	movs	r3, #1
    f658:	425b      	negs	r3, r3
    f65a:	e7c7      	b.n	f5ec <_svfiprintf_r+0x120>
    f65c:	2300      	movs	r3, #0
    f65e:	0014      	movs	r4, r2
    f660:	200a      	movs	r0, #10
    f662:	001a      	movs	r2, r3
    f664:	606b      	str	r3, [r5, #4]
    f666:	7821      	ldrb	r1, [r4, #0]
    f668:	3930      	subs	r1, #48	; 0x30
    f66a:	2909      	cmp	r1, #9
    f66c:	d903      	bls.n	f676 <_svfiprintf_r+0x1aa>
    f66e:	2b00      	cmp	r3, #0
    f670:	d0bd      	beq.n	f5ee <_svfiprintf_r+0x122>
    f672:	9207      	str	r2, [sp, #28]
    f674:	e7bb      	b.n	f5ee <_svfiprintf_r+0x122>
    f676:	4342      	muls	r2, r0
    f678:	3401      	adds	r4, #1
    f67a:	1852      	adds	r2, r2, r1
    f67c:	2301      	movs	r3, #1
    f67e:	e7f2      	b.n	f666 <_svfiprintf_r+0x19a>
    f680:	3307      	adds	r3, #7
    f682:	e7d5      	b.n	f630 <_svfiprintf_r+0x164>
    f684:	ab05      	add	r3, sp, #20
    f686:	9300      	str	r3, [sp, #0]
    f688:	003a      	movs	r2, r7
    f68a:	4b11      	ldr	r3, [pc, #68]	; (f6d0 <_svfiprintf_r+0x204>)
    f68c:	0029      	movs	r1, r5
    f68e:	9802      	ldr	r0, [sp, #8]
    f690:	f7fd fa66 	bl	cb60 <_printf_float>
    f694:	9003      	str	r0, [sp, #12]
    f696:	9b03      	ldr	r3, [sp, #12]
    f698:	3301      	adds	r3, #1
    f69a:	d1cc      	bne.n	f636 <_svfiprintf_r+0x16a>
    f69c:	89bb      	ldrh	r3, [r7, #12]
    f69e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f6a0:	065b      	lsls	r3, r3, #25
    f6a2:	d400      	bmi.n	f6a6 <_svfiprintf_r+0x1da>
    f6a4:	e729      	b.n	f4fa <_svfiprintf_r+0x2e>
    f6a6:	2001      	movs	r0, #1
    f6a8:	4240      	negs	r0, r0
    f6aa:	e726      	b.n	f4fa <_svfiprintf_r+0x2e>
    f6ac:	ab05      	add	r3, sp, #20
    f6ae:	9300      	str	r3, [sp, #0]
    f6b0:	003a      	movs	r2, r7
    f6b2:	4b07      	ldr	r3, [pc, #28]	; (f6d0 <_svfiprintf_r+0x204>)
    f6b4:	0029      	movs	r1, r5
    f6b6:	9802      	ldr	r0, [sp, #8]
    f6b8:	f7fd fd0c 	bl	d0d4 <_printf_i>
    f6bc:	e7ea      	b.n	f694 <_svfiprintf_r+0x1c8>
    f6be:	46c0      	nop			; (mov r8, r8)
    f6c0:	000120b0 	.word	0x000120b0
    f6c4:	000120b6 	.word	0x000120b6
    f6c8:	000120ba 	.word	0x000120ba
    f6cc:	0000cb61 	.word	0x0000cb61
    f6d0:	0000f409 	.word	0x0000f409

0000f6d4 <_raise_r>:
    f6d4:	b570      	push	{r4, r5, r6, lr}
    f6d6:	0004      	movs	r4, r0
    f6d8:	000d      	movs	r5, r1
    f6da:	291f      	cmp	r1, #31
    f6dc:	d904      	bls.n	f6e8 <_raise_r+0x14>
    f6de:	2316      	movs	r3, #22
    f6e0:	6003      	str	r3, [r0, #0]
    f6e2:	2001      	movs	r0, #1
    f6e4:	4240      	negs	r0, r0
    f6e6:	bd70      	pop	{r4, r5, r6, pc}
    f6e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    f6ea:	2b00      	cmp	r3, #0
    f6ec:	d004      	beq.n	f6f8 <_raise_r+0x24>
    f6ee:	008a      	lsls	r2, r1, #2
    f6f0:	189b      	adds	r3, r3, r2
    f6f2:	681a      	ldr	r2, [r3, #0]
    f6f4:	2a00      	cmp	r2, #0
    f6f6:	d108      	bne.n	f70a <_raise_r+0x36>
    f6f8:	0020      	movs	r0, r4
    f6fa:	f000 f831 	bl	f760 <_getpid_r>
    f6fe:	002a      	movs	r2, r5
    f700:	0001      	movs	r1, r0
    f702:	0020      	movs	r0, r4
    f704:	f000 f81a 	bl	f73c <_kill_r>
    f708:	e7ed      	b.n	f6e6 <_raise_r+0x12>
    f70a:	2000      	movs	r0, #0
    f70c:	2a01      	cmp	r2, #1
    f70e:	d0ea      	beq.n	f6e6 <_raise_r+0x12>
    f710:	1c51      	adds	r1, r2, #1
    f712:	d103      	bne.n	f71c <_raise_r+0x48>
    f714:	2316      	movs	r3, #22
    f716:	3001      	adds	r0, #1
    f718:	6023      	str	r3, [r4, #0]
    f71a:	e7e4      	b.n	f6e6 <_raise_r+0x12>
    f71c:	2400      	movs	r4, #0
    f71e:	0028      	movs	r0, r5
    f720:	601c      	str	r4, [r3, #0]
    f722:	4790      	blx	r2
    f724:	0020      	movs	r0, r4
    f726:	e7de      	b.n	f6e6 <_raise_r+0x12>

0000f728 <raise>:
    f728:	b510      	push	{r4, lr}
    f72a:	4b03      	ldr	r3, [pc, #12]	; (f738 <raise+0x10>)
    f72c:	0001      	movs	r1, r0
    f72e:	6818      	ldr	r0, [r3, #0]
    f730:	f7ff ffd0 	bl	f6d4 <_raise_r>
    f734:	bd10      	pop	{r4, pc}
    f736:	46c0      	nop			; (mov r8, r8)
    f738:	200000ac 	.word	0x200000ac

0000f73c <_kill_r>:
    f73c:	2300      	movs	r3, #0
    f73e:	b570      	push	{r4, r5, r6, lr}
    f740:	4c06      	ldr	r4, [pc, #24]	; (f75c <_kill_r+0x20>)
    f742:	0005      	movs	r5, r0
    f744:	0008      	movs	r0, r1
    f746:	0011      	movs	r1, r2
    f748:	6023      	str	r3, [r4, #0]
    f74a:	f000 fd81 	bl	10250 <_kill>
    f74e:	1c43      	adds	r3, r0, #1
    f750:	d103      	bne.n	f75a <_kill_r+0x1e>
    f752:	6823      	ldr	r3, [r4, #0]
    f754:	2b00      	cmp	r3, #0
    f756:	d000      	beq.n	f75a <_kill_r+0x1e>
    f758:	602b      	str	r3, [r5, #0]
    f75a:	bd70      	pop	{r4, r5, r6, pc}
    f75c:	200022dc 	.word	0x200022dc

0000f760 <_getpid_r>:
    f760:	b510      	push	{r4, lr}
    f762:	f000 fd65 	bl	10230 <_getpid>
    f766:	bd10      	pop	{r4, pc}

0000f768 <siscanf>:
    f768:	b40e      	push	{r1, r2, r3}
    f76a:	2381      	movs	r3, #129	; 0x81
    f76c:	b570      	push	{r4, r5, r6, lr}
    f76e:	b09d      	sub	sp, #116	; 0x74
    f770:	ac02      	add	r4, sp, #8
    f772:	ad21      	add	r5, sp, #132	; 0x84
    f774:	009b      	lsls	r3, r3, #2
    f776:	cd40      	ldmia	r5!, {r6}
    f778:	81a3      	strh	r3, [r4, #12]
    f77a:	9002      	str	r0, [sp, #8]
    f77c:	9006      	str	r0, [sp, #24]
    f77e:	f7fd fe20 	bl	d3c2 <strlen>
    f782:	4b0b      	ldr	r3, [pc, #44]	; (f7b0 <siscanf+0x48>)
    f784:	6060      	str	r0, [r4, #4]
    f786:	6263      	str	r3, [r4, #36]	; 0x24
    f788:	2300      	movs	r3, #0
    f78a:	6160      	str	r0, [r4, #20]
    f78c:	4809      	ldr	r0, [pc, #36]	; (f7b4 <siscanf+0x4c>)
    f78e:	6363      	str	r3, [r4, #52]	; 0x34
    f790:	64a3      	str	r3, [r4, #72]	; 0x48
    f792:	3b01      	subs	r3, #1
    f794:	81e3      	strh	r3, [r4, #14]
    f796:	0032      	movs	r2, r6
    f798:	002b      	movs	r3, r5
    f79a:	0021      	movs	r1, r4
    f79c:	6800      	ldr	r0, [r0, #0]
    f79e:	9501      	str	r5, [sp, #4]
    f7a0:	f000 f9c8 	bl	fb34 <__ssvfiscanf_r>
    f7a4:	b01d      	add	sp, #116	; 0x74
    f7a6:	bc70      	pop	{r4, r5, r6}
    f7a8:	bc08      	pop	{r3}
    f7aa:	b003      	add	sp, #12
    f7ac:	4718      	bx	r3
    f7ae:	46c0      	nop			; (mov r8, r8)
    f7b0:	0000f7e1 	.word	0x0000f7e1
    f7b4:	200000ac 	.word	0x200000ac

0000f7b8 <__sread>:
    f7b8:	b570      	push	{r4, r5, r6, lr}
    f7ba:	000c      	movs	r4, r1
    f7bc:	250e      	movs	r5, #14
    f7be:	5f49      	ldrsh	r1, [r1, r5]
    f7c0:	f000 fca2 	bl	10108 <_read_r>
    f7c4:	2800      	cmp	r0, #0
    f7c6:	db03      	blt.n	f7d0 <__sread+0x18>
    f7c8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    f7ca:	181b      	adds	r3, r3, r0
    f7cc:	6563      	str	r3, [r4, #84]	; 0x54
    f7ce:	bd70      	pop	{r4, r5, r6, pc}
    f7d0:	89a3      	ldrh	r3, [r4, #12]
    f7d2:	4a02      	ldr	r2, [pc, #8]	; (f7dc <__sread+0x24>)
    f7d4:	4013      	ands	r3, r2
    f7d6:	81a3      	strh	r3, [r4, #12]
    f7d8:	e7f9      	b.n	f7ce <__sread+0x16>
    f7da:	46c0      	nop			; (mov r8, r8)
    f7dc:	ffffefff 	.word	0xffffefff

0000f7e0 <__seofread>:
    f7e0:	2000      	movs	r0, #0
    f7e2:	4770      	bx	lr

0000f7e4 <__swrite>:
    f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f7e6:	001f      	movs	r7, r3
    f7e8:	898b      	ldrh	r3, [r1, #12]
    f7ea:	0005      	movs	r5, r0
    f7ec:	000c      	movs	r4, r1
    f7ee:	0016      	movs	r6, r2
    f7f0:	05db      	lsls	r3, r3, #23
    f7f2:	d505      	bpl.n	f800 <__swrite+0x1c>
    f7f4:	230e      	movs	r3, #14
    f7f6:	5ec9      	ldrsh	r1, [r1, r3]
    f7f8:	2200      	movs	r2, #0
    f7fa:	2302      	movs	r3, #2
    f7fc:	f000 f922 	bl	fa44 <_lseek_r>
    f800:	89a3      	ldrh	r3, [r4, #12]
    f802:	4a05      	ldr	r2, [pc, #20]	; (f818 <__swrite+0x34>)
    f804:	0028      	movs	r0, r5
    f806:	4013      	ands	r3, r2
    f808:	81a3      	strh	r3, [r4, #12]
    f80a:	0032      	movs	r2, r6
    f80c:	230e      	movs	r3, #14
    f80e:	5ee1      	ldrsh	r1, [r4, r3]
    f810:	003b      	movs	r3, r7
    f812:	f000 f8cb 	bl	f9ac <_write_r>
    f816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f818:	ffffefff 	.word	0xffffefff

0000f81c <__sseek>:
    f81c:	b570      	push	{r4, r5, r6, lr}
    f81e:	000c      	movs	r4, r1
    f820:	250e      	movs	r5, #14
    f822:	5f49      	ldrsh	r1, [r1, r5]
    f824:	f000 f90e 	bl	fa44 <_lseek_r>
    f828:	89a3      	ldrh	r3, [r4, #12]
    f82a:	1c42      	adds	r2, r0, #1
    f82c:	d103      	bne.n	f836 <__sseek+0x1a>
    f82e:	4a05      	ldr	r2, [pc, #20]	; (f844 <__sseek+0x28>)
    f830:	4013      	ands	r3, r2
    f832:	81a3      	strh	r3, [r4, #12]
    f834:	bd70      	pop	{r4, r5, r6, pc}
    f836:	2280      	movs	r2, #128	; 0x80
    f838:	0152      	lsls	r2, r2, #5
    f83a:	4313      	orrs	r3, r2
    f83c:	81a3      	strh	r3, [r4, #12]
    f83e:	6560      	str	r0, [r4, #84]	; 0x54
    f840:	e7f8      	b.n	f834 <__sseek+0x18>
    f842:	46c0      	nop			; (mov r8, r8)
    f844:	ffffefff 	.word	0xffffefff

0000f848 <__sclose>:
    f848:	b510      	push	{r4, lr}
    f84a:	230e      	movs	r3, #14
    f84c:	5ec9      	ldrsh	r1, [r1, r3]
    f84e:	f000 f8c1 	bl	f9d4 <_close_r>
    f852:	bd10      	pop	{r4, pc}

0000f854 <_strtoul_l.isra.0>:
    f854:	b5f0      	push	{r4, r5, r6, r7, lr}
    f856:	001f      	movs	r7, r3
    f858:	000e      	movs	r6, r1
    f85a:	b087      	sub	sp, #28
    f85c:	9005      	str	r0, [sp, #20]
    f85e:	9103      	str	r1, [sp, #12]
    f860:	9201      	str	r2, [sp, #4]
    f862:	980c      	ldr	r0, [sp, #48]	; 0x30
    f864:	7834      	ldrb	r4, [r6, #0]
    f866:	f7fc fc33 	bl	c0d0 <__locale_ctype_ptr_l>
    f86a:	2208      	movs	r2, #8
    f86c:	1900      	adds	r0, r0, r4
    f86e:	7843      	ldrb	r3, [r0, #1]
    f870:	1c75      	adds	r5, r6, #1
    f872:	4013      	ands	r3, r2
    f874:	d10c      	bne.n	f890 <_strtoul_l.isra.0+0x3c>
    f876:	2c2d      	cmp	r4, #45	; 0x2d
    f878:	d10c      	bne.n	f894 <_strtoul_l.isra.0+0x40>
    f87a:	3301      	adds	r3, #1
    f87c:	782c      	ldrb	r4, [r5, #0]
    f87e:	9302      	str	r3, [sp, #8]
    f880:	1cb5      	adds	r5, r6, #2
    f882:	2f00      	cmp	r7, #0
    f884:	d00c      	beq.n	f8a0 <_strtoul_l.isra.0+0x4c>
    f886:	2f10      	cmp	r7, #16
    f888:	d114      	bne.n	f8b4 <_strtoul_l.isra.0+0x60>
    f88a:	2c30      	cmp	r4, #48	; 0x30
    f88c:	d00a      	beq.n	f8a4 <_strtoul_l.isra.0+0x50>
    f88e:	e011      	b.n	f8b4 <_strtoul_l.isra.0+0x60>
    f890:	002e      	movs	r6, r5
    f892:	e7e6      	b.n	f862 <_strtoul_l.isra.0+0xe>
    f894:	9302      	str	r3, [sp, #8]
    f896:	2c2b      	cmp	r4, #43	; 0x2b
    f898:	d1f3      	bne.n	f882 <_strtoul_l.isra.0+0x2e>
    f89a:	782c      	ldrb	r4, [r5, #0]
    f89c:	1cb5      	adds	r5, r6, #2
    f89e:	e7f0      	b.n	f882 <_strtoul_l.isra.0+0x2e>
    f8a0:	2c30      	cmp	r4, #48	; 0x30
    f8a2:	d12f      	bne.n	f904 <_strtoul_l.isra.0+0xb0>
    f8a4:	2220      	movs	r2, #32
    f8a6:	782b      	ldrb	r3, [r5, #0]
    f8a8:	4393      	bics	r3, r2
    f8aa:	2b58      	cmp	r3, #88	; 0x58
    f8ac:	d154      	bne.n	f958 <_strtoul_l.isra.0+0x104>
    f8ae:	2710      	movs	r7, #16
    f8b0:	786c      	ldrb	r4, [r5, #1]
    f8b2:	3502      	adds	r5, #2
    f8b4:	2001      	movs	r0, #1
    f8b6:	0039      	movs	r1, r7
    f8b8:	4240      	negs	r0, r0
    f8ba:	f7f9 fe21 	bl	9500 <__udivsi3>
    f8be:	0006      	movs	r6, r0
    f8c0:	2001      	movs	r0, #1
    f8c2:	0039      	movs	r1, r7
    f8c4:	4240      	negs	r0, r0
    f8c6:	f7f9 fea1 	bl	960c <__aeabi_uidivmod>
    f8ca:	2300      	movs	r3, #0
    f8cc:	9104      	str	r1, [sp, #16]
    f8ce:	2101      	movs	r1, #1
    f8d0:	2201      	movs	r2, #1
    f8d2:	0018      	movs	r0, r3
    f8d4:	468c      	mov	ip, r1
    f8d6:	4252      	negs	r2, r2
    f8d8:	0021      	movs	r1, r4
    f8da:	3930      	subs	r1, #48	; 0x30
    f8dc:	2909      	cmp	r1, #9
    f8de:	d813      	bhi.n	f908 <_strtoul_l.isra.0+0xb4>
    f8e0:	000c      	movs	r4, r1
    f8e2:	42a7      	cmp	r7, r4
    f8e4:	dd1e      	ble.n	f924 <_strtoul_l.isra.0+0xd0>
    f8e6:	2b00      	cmp	r3, #0
    f8e8:	db1a      	blt.n	f920 <_strtoul_l.isra.0+0xcc>
    f8ea:	0013      	movs	r3, r2
    f8ec:	4286      	cmp	r6, r0
    f8ee:	d306      	bcc.n	f8fe <_strtoul_l.isra.0+0xaa>
    f8f0:	d102      	bne.n	f8f8 <_strtoul_l.isra.0+0xa4>
    f8f2:	9904      	ldr	r1, [sp, #16]
    f8f4:	42a1      	cmp	r1, r4
    f8f6:	db02      	blt.n	f8fe <_strtoul_l.isra.0+0xaa>
    f8f8:	4663      	mov	r3, ip
    f8fa:	4378      	muls	r0, r7
    f8fc:	1820      	adds	r0, r4, r0
    f8fe:	782c      	ldrb	r4, [r5, #0]
    f900:	3501      	adds	r5, #1
    f902:	e7e9      	b.n	f8d8 <_strtoul_l.isra.0+0x84>
    f904:	270a      	movs	r7, #10
    f906:	e7d5      	b.n	f8b4 <_strtoul_l.isra.0+0x60>
    f908:	0021      	movs	r1, r4
    f90a:	3941      	subs	r1, #65	; 0x41
    f90c:	2919      	cmp	r1, #25
    f90e:	d801      	bhi.n	f914 <_strtoul_l.isra.0+0xc0>
    f910:	3c37      	subs	r4, #55	; 0x37
    f912:	e7e6      	b.n	f8e2 <_strtoul_l.isra.0+0x8e>
    f914:	0021      	movs	r1, r4
    f916:	3961      	subs	r1, #97	; 0x61
    f918:	2919      	cmp	r1, #25
    f91a:	d803      	bhi.n	f924 <_strtoul_l.isra.0+0xd0>
    f91c:	3c57      	subs	r4, #87	; 0x57
    f91e:	e7e0      	b.n	f8e2 <_strtoul_l.isra.0+0x8e>
    f920:	0013      	movs	r3, r2
    f922:	e7ec      	b.n	f8fe <_strtoul_l.isra.0+0xaa>
    f924:	2b00      	cmp	r3, #0
    f926:	da09      	bge.n	f93c <_strtoul_l.isra.0+0xe8>
    f928:	2322      	movs	r3, #34	; 0x22
    f92a:	2001      	movs	r0, #1
    f92c:	9a05      	ldr	r2, [sp, #20]
    f92e:	4240      	negs	r0, r0
    f930:	6013      	str	r3, [r2, #0]
    f932:	9b01      	ldr	r3, [sp, #4]
    f934:	2b00      	cmp	r3, #0
    f936:	d10b      	bne.n	f950 <_strtoul_l.isra.0+0xfc>
    f938:	b007      	add	sp, #28
    f93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f93c:	9a02      	ldr	r2, [sp, #8]
    f93e:	2a00      	cmp	r2, #0
    f940:	d000      	beq.n	f944 <_strtoul_l.isra.0+0xf0>
    f942:	4240      	negs	r0, r0
    f944:	9a01      	ldr	r2, [sp, #4]
    f946:	2a00      	cmp	r2, #0
    f948:	d0f6      	beq.n	f938 <_strtoul_l.isra.0+0xe4>
    f94a:	9a03      	ldr	r2, [sp, #12]
    f94c:	2b00      	cmp	r3, #0
    f94e:	d000      	beq.n	f952 <_strtoul_l.isra.0+0xfe>
    f950:	1e6a      	subs	r2, r5, #1
    f952:	9b01      	ldr	r3, [sp, #4]
    f954:	601a      	str	r2, [r3, #0]
    f956:	e7ef      	b.n	f938 <_strtoul_l.isra.0+0xe4>
    f958:	2430      	movs	r4, #48	; 0x30
    f95a:	2f00      	cmp	r7, #0
    f95c:	d1aa      	bne.n	f8b4 <_strtoul_l.isra.0+0x60>
    f95e:	3708      	adds	r7, #8
    f960:	e7a8      	b.n	f8b4 <_strtoul_l.isra.0+0x60>
	...

0000f964 <_strtoul_r>:
    f964:	b513      	push	{r0, r1, r4, lr}
    f966:	4c05      	ldr	r4, [pc, #20]	; (f97c <_strtoul_r+0x18>)
    f968:	6824      	ldr	r4, [r4, #0]
    f96a:	6a24      	ldr	r4, [r4, #32]
    f96c:	2c00      	cmp	r4, #0
    f96e:	d100      	bne.n	f972 <_strtoul_r+0xe>
    f970:	4c03      	ldr	r4, [pc, #12]	; (f980 <_strtoul_r+0x1c>)
    f972:	9400      	str	r4, [sp, #0]
    f974:	f7ff ff6e 	bl	f854 <_strtoul_l.isra.0>
    f978:	bd16      	pop	{r1, r2, r4, pc}
    f97a:	46c0      	nop			; (mov r8, r8)
    f97c:	200000ac 	.word	0x200000ac
    f980:	20000110 	.word	0x20000110

0000f984 <strtoul>:
    f984:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f986:	0013      	movs	r3, r2
    f988:	4a06      	ldr	r2, [pc, #24]	; (f9a4 <strtoul+0x20>)
    f98a:	0005      	movs	r5, r0
    f98c:	6810      	ldr	r0, [r2, #0]
    f98e:	6a04      	ldr	r4, [r0, #32]
    f990:	2c00      	cmp	r4, #0
    f992:	d100      	bne.n	f996 <strtoul+0x12>
    f994:	4c04      	ldr	r4, [pc, #16]	; (f9a8 <strtoul+0x24>)
    f996:	000a      	movs	r2, r1
    f998:	9400      	str	r4, [sp, #0]
    f99a:	0029      	movs	r1, r5
    f99c:	f7ff ff5a 	bl	f854 <_strtoul_l.isra.0>
    f9a0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f9a2:	46c0      	nop			; (mov r8, r8)
    f9a4:	200000ac 	.word	0x200000ac
    f9a8:	20000110 	.word	0x20000110

0000f9ac <_write_r>:
    f9ac:	b570      	push	{r4, r5, r6, lr}
    f9ae:	0005      	movs	r5, r0
    f9b0:	0008      	movs	r0, r1
    f9b2:	0011      	movs	r1, r2
    f9b4:	2200      	movs	r2, #0
    f9b6:	4c06      	ldr	r4, [pc, #24]	; (f9d0 <_write_r+0x24>)
    f9b8:	6022      	str	r2, [r4, #0]
    f9ba:	001a      	movs	r2, r3
    f9bc:	f000 fc6e 	bl	1029c <_write>
    f9c0:	1c43      	adds	r3, r0, #1
    f9c2:	d103      	bne.n	f9cc <_write_r+0x20>
    f9c4:	6823      	ldr	r3, [r4, #0]
    f9c6:	2b00      	cmp	r3, #0
    f9c8:	d000      	beq.n	f9cc <_write_r+0x20>
    f9ca:	602b      	str	r3, [r5, #0]
    f9cc:	bd70      	pop	{r4, r5, r6, pc}
    f9ce:	46c0      	nop			; (mov r8, r8)
    f9d0:	200022dc 	.word	0x200022dc

0000f9d4 <_close_r>:
    f9d4:	2300      	movs	r3, #0
    f9d6:	b570      	push	{r4, r5, r6, lr}
    f9d8:	4c06      	ldr	r4, [pc, #24]	; (f9f4 <_close_r+0x20>)
    f9da:	0005      	movs	r5, r0
    f9dc:	0008      	movs	r0, r1
    f9de:	6023      	str	r3, [r4, #0]
    f9e0:	f000 fc16 	bl	10210 <_close>
    f9e4:	1c43      	adds	r3, r0, #1
    f9e6:	d103      	bne.n	f9f0 <_close_r+0x1c>
    f9e8:	6823      	ldr	r3, [r4, #0]
    f9ea:	2b00      	cmp	r3, #0
    f9ec:	d000      	beq.n	f9f0 <_close_r+0x1c>
    f9ee:	602b      	str	r3, [r5, #0]
    f9f0:	bd70      	pop	{r4, r5, r6, pc}
    f9f2:	46c0      	nop			; (mov r8, r8)
    f9f4:	200022dc 	.word	0x200022dc

0000f9f8 <__env_lock>:
    f9f8:	4770      	bx	lr

0000f9fa <__env_unlock>:
    f9fa:	4770      	bx	lr

0000f9fc <_fstat_r>:
    f9fc:	2300      	movs	r3, #0
    f9fe:	b570      	push	{r4, r5, r6, lr}
    fa00:	4c06      	ldr	r4, [pc, #24]	; (fa1c <_fstat_r+0x20>)
    fa02:	0005      	movs	r5, r0
    fa04:	0008      	movs	r0, r1
    fa06:	0011      	movs	r1, r2
    fa08:	6023      	str	r3, [r4, #0]
    fa0a:	f000 fc09 	bl	10220 <_fstat>
    fa0e:	1c43      	adds	r3, r0, #1
    fa10:	d103      	bne.n	fa1a <_fstat_r+0x1e>
    fa12:	6823      	ldr	r3, [r4, #0]
    fa14:	2b00      	cmp	r3, #0
    fa16:	d000      	beq.n	fa1a <_fstat_r+0x1e>
    fa18:	602b      	str	r3, [r5, #0]
    fa1a:	bd70      	pop	{r4, r5, r6, pc}
    fa1c:	200022dc 	.word	0x200022dc

0000fa20 <_isatty_r>:
    fa20:	2300      	movs	r3, #0
    fa22:	b570      	push	{r4, r5, r6, lr}
    fa24:	4c06      	ldr	r4, [pc, #24]	; (fa40 <_isatty_r+0x20>)
    fa26:	0005      	movs	r5, r0
    fa28:	0008      	movs	r0, r1
    fa2a:	6023      	str	r3, [r4, #0]
    fa2c:	f000 fc08 	bl	10240 <_isatty>
    fa30:	1c43      	adds	r3, r0, #1
    fa32:	d103      	bne.n	fa3c <_isatty_r+0x1c>
    fa34:	6823      	ldr	r3, [r4, #0]
    fa36:	2b00      	cmp	r3, #0
    fa38:	d000      	beq.n	fa3c <_isatty_r+0x1c>
    fa3a:	602b      	str	r3, [r5, #0]
    fa3c:	bd70      	pop	{r4, r5, r6, pc}
    fa3e:	46c0      	nop			; (mov r8, r8)
    fa40:	200022dc 	.word	0x200022dc

0000fa44 <_lseek_r>:
    fa44:	b570      	push	{r4, r5, r6, lr}
    fa46:	0005      	movs	r5, r0
    fa48:	0008      	movs	r0, r1
    fa4a:	0011      	movs	r1, r2
    fa4c:	2200      	movs	r2, #0
    fa4e:	4c06      	ldr	r4, [pc, #24]	; (fa68 <_lseek_r+0x24>)
    fa50:	6022      	str	r2, [r4, #0]
    fa52:	001a      	movs	r2, r3
    fa54:	f000 fc04 	bl	10260 <_lseek>
    fa58:	1c43      	adds	r3, r0, #1
    fa5a:	d103      	bne.n	fa64 <_lseek_r+0x20>
    fa5c:	6823      	ldr	r3, [r4, #0]
    fa5e:	2b00      	cmp	r3, #0
    fa60:	d000      	beq.n	fa64 <_lseek_r+0x20>
    fa62:	602b      	str	r3, [r5, #0]
    fa64:	bd70      	pop	{r4, r5, r6, pc}
    fa66:	46c0      	nop			; (mov r8, r8)
    fa68:	200022dc 	.word	0x200022dc

0000fa6c <_malloc_usable_size_r>:
    fa6c:	1f0b      	subs	r3, r1, #4
    fa6e:	681b      	ldr	r3, [r3, #0]
    fa70:	1f18      	subs	r0, r3, #4
    fa72:	2b00      	cmp	r3, #0
    fa74:	da01      	bge.n	fa7a <_malloc_usable_size_r+0xe>
    fa76:	580b      	ldr	r3, [r1, r0]
    fa78:	18c0      	adds	r0, r0, r3
    fa7a:	4770      	bx	lr

0000fa7c <_sungetc_r>:
    fa7c:	b570      	push	{r4, r5, r6, lr}
    fa7e:	0014      	movs	r4, r2
    fa80:	1c4b      	adds	r3, r1, #1
    fa82:	d103      	bne.n	fa8c <_sungetc_r+0x10>
    fa84:	2501      	movs	r5, #1
    fa86:	426d      	negs	r5, r5
    fa88:	0028      	movs	r0, r5
    fa8a:	bd70      	pop	{r4, r5, r6, pc}
    fa8c:	8993      	ldrh	r3, [r2, #12]
    fa8e:	2220      	movs	r2, #32
    fa90:	4393      	bics	r3, r2
    fa92:	6b62      	ldr	r2, [r4, #52]	; 0x34
    fa94:	81a3      	strh	r3, [r4, #12]
    fa96:	b2ce      	uxtb	r6, r1
    fa98:	b2cd      	uxtb	r5, r1
    fa9a:	6863      	ldr	r3, [r4, #4]
    fa9c:	2a00      	cmp	r2, #0
    fa9e:	d010      	beq.n	fac2 <_sungetc_r+0x46>
    faa0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    faa2:	4293      	cmp	r3, r2
    faa4:	da07      	bge.n	fab6 <_sungetc_r+0x3a>
    faa6:	6823      	ldr	r3, [r4, #0]
    faa8:	3b01      	subs	r3, #1
    faaa:	6023      	str	r3, [r4, #0]
    faac:	701e      	strb	r6, [r3, #0]
    faae:	6863      	ldr	r3, [r4, #4]
    fab0:	3301      	adds	r3, #1
    fab2:	6063      	str	r3, [r4, #4]
    fab4:	e7e8      	b.n	fa88 <_sungetc_r+0xc>
    fab6:	0021      	movs	r1, r4
    fab8:	f000 fb6c 	bl	10194 <__submore>
    fabc:	2800      	cmp	r0, #0
    fabe:	d0f2      	beq.n	faa6 <_sungetc_r+0x2a>
    fac0:	e7e0      	b.n	fa84 <_sungetc_r+0x8>
    fac2:	6921      	ldr	r1, [r4, #16]
    fac4:	6822      	ldr	r2, [r4, #0]
    fac6:	2900      	cmp	r1, #0
    fac8:	d007      	beq.n	fada <_sungetc_r+0x5e>
    faca:	4291      	cmp	r1, r2
    facc:	d205      	bcs.n	fada <_sungetc_r+0x5e>
    face:	1e51      	subs	r1, r2, #1
    fad0:	7808      	ldrb	r0, [r1, #0]
    fad2:	4285      	cmp	r5, r0
    fad4:	d101      	bne.n	fada <_sungetc_r+0x5e>
    fad6:	6021      	str	r1, [r4, #0]
    fad8:	e7ea      	b.n	fab0 <_sungetc_r+0x34>
    fada:	6423      	str	r3, [r4, #64]	; 0x40
    fadc:	0023      	movs	r3, r4
    fade:	3344      	adds	r3, #68	; 0x44
    fae0:	6363      	str	r3, [r4, #52]	; 0x34
    fae2:	2303      	movs	r3, #3
    fae4:	63a3      	str	r3, [r4, #56]	; 0x38
    fae6:	0023      	movs	r3, r4
    fae8:	3346      	adds	r3, #70	; 0x46
    faea:	63e2      	str	r2, [r4, #60]	; 0x3c
    faec:	701e      	strb	r6, [r3, #0]
    faee:	6023      	str	r3, [r4, #0]
    faf0:	2301      	movs	r3, #1
    faf2:	e7de      	b.n	fab2 <_sungetc_r+0x36>

0000faf4 <__ssrefill_r>:
    faf4:	b510      	push	{r4, lr}
    faf6:	000c      	movs	r4, r1
    faf8:	6b49      	ldr	r1, [r1, #52]	; 0x34
    fafa:	2900      	cmp	r1, #0
    fafc:	d00e      	beq.n	fb1c <__ssrefill_r+0x28>
    fafe:	0023      	movs	r3, r4
    fb00:	3344      	adds	r3, #68	; 0x44
    fb02:	4299      	cmp	r1, r3
    fb04:	d001      	beq.n	fb0a <__ssrefill_r+0x16>
    fb06:	f7fc fda3 	bl	c650 <_free_r>
    fb0a:	2000      	movs	r0, #0
    fb0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    fb0e:	6360      	str	r0, [r4, #52]	; 0x34
    fb10:	6063      	str	r3, [r4, #4]
    fb12:	4283      	cmp	r3, r0
    fb14:	d002      	beq.n	fb1c <__ssrefill_r+0x28>
    fb16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    fb18:	6023      	str	r3, [r4, #0]
    fb1a:	bd10      	pop	{r4, pc}
    fb1c:	6923      	ldr	r3, [r4, #16]
    fb1e:	2001      	movs	r0, #1
    fb20:	6023      	str	r3, [r4, #0]
    fb22:	2300      	movs	r3, #0
    fb24:	89a2      	ldrh	r2, [r4, #12]
    fb26:	6063      	str	r3, [r4, #4]
    fb28:	3320      	adds	r3, #32
    fb2a:	4313      	orrs	r3, r2
    fb2c:	81a3      	strh	r3, [r4, #12]
    fb2e:	4240      	negs	r0, r0
    fb30:	e7f3      	b.n	fb1a <__ssrefill_r+0x26>
	...

0000fb34 <__ssvfiscanf_r>:
    fb34:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb36:	4cbd      	ldr	r4, [pc, #756]	; (fe2c <__ssvfiscanf_r+0x2f8>)
    fb38:	2586      	movs	r5, #134	; 0x86
    fb3a:	44a5      	add	sp, r4
    fb3c:	9303      	str	r3, [sp, #12]
    fb3e:	2300      	movs	r3, #0
    fb40:	9348      	str	r3, [sp, #288]	; 0x120
    fb42:	9349      	str	r3, [sp, #292]	; 0x124
    fb44:	ab05      	add	r3, sp, #20
    fb46:	934a      	str	r3, [sp, #296]	; 0x128
    fb48:	23be      	movs	r3, #190	; 0xbe
    fb4a:	006d      	lsls	r5, r5, #1
    fb4c:	9000      	str	r0, [sp, #0]
    fb4e:	000c      	movs	r4, r1
    fb50:	a802      	add	r0, sp, #8
    fb52:	49b7      	ldr	r1, [pc, #732]	; (fe30 <__ssvfiscanf_r+0x2fc>)
    fb54:	005b      	lsls	r3, r3, #1
    fb56:	1940      	adds	r0, r0, r5
    fb58:	27c0      	movs	r7, #192	; 0xc0
    fb5a:	50c1      	str	r1, [r0, r3]
    fb5c:	ab02      	add	r3, sp, #8
    fb5e:	195b      	adds	r3, r3, r5
    fb60:	0015      	movs	r5, r2
    fb62:	49b4      	ldr	r1, [pc, #720]	; (fe34 <__ssvfiscanf_r+0x300>)
    fb64:	007f      	lsls	r7, r7, #1
    fb66:	51d9      	str	r1, [r3, r7]
    fb68:	782b      	ldrb	r3, [r5, #0]
    fb6a:	2b00      	cmp	r3, #0
    fb6c:	d100      	bne.n	fb70 <__ssvfiscanf_r+0x3c>
    fb6e:	e15b      	b.n	fe28 <__ssvfiscanf_r+0x2f4>
    fb70:	f7fc fab2 	bl	c0d8 <__locale_ctype_ptr>
    fb74:	2208      	movs	r2, #8
    fb76:	782b      	ldrb	r3, [r5, #0]
    fb78:	18c0      	adds	r0, r0, r3
    fb7a:	9301      	str	r3, [sp, #4]
    fb7c:	7843      	ldrb	r3, [r0, #1]
    fb7e:	4013      	ands	r3, r2
    fb80:	d141      	bne.n	fc06 <__ssvfiscanf_r+0xd2>
    fb82:	9a01      	ldr	r2, [sp, #4]
    fb84:	1c6e      	adds	r6, r5, #1
    fb86:	2a25      	cmp	r2, #37	; 0x25
    fb88:	d000      	beq.n	fb8c <__ssvfiscanf_r+0x58>
    fb8a:	e0a8      	b.n	fcde <__ssvfiscanf_r+0x1aa>
    fb8c:	9347      	str	r3, [sp, #284]	; 0x11c
    fb8e:	9345      	str	r3, [sp, #276]	; 0x114
    fb90:	786b      	ldrb	r3, [r5, #1]
    fb92:	2b2a      	cmp	r3, #42	; 0x2a
    fb94:	d102      	bne.n	fb9c <__ssvfiscanf_r+0x68>
    fb96:	3b1a      	subs	r3, #26
    fb98:	9345      	str	r3, [sp, #276]	; 0x114
    fb9a:	1cae      	adds	r6, r5, #2
    fb9c:	0035      	movs	r5, r6
    fb9e:	220a      	movs	r2, #10
    fba0:	7829      	ldrb	r1, [r5, #0]
    fba2:	000b      	movs	r3, r1
    fba4:	3b30      	subs	r3, #48	; 0x30
    fba6:	2b09      	cmp	r3, #9
    fba8:	d948      	bls.n	fc3c <__ssvfiscanf_r+0x108>
    fbaa:	4ea3      	ldr	r6, [pc, #652]	; (fe38 <__ssvfiscanf_r+0x304>)
    fbac:	2203      	movs	r2, #3
    fbae:	0030      	movs	r0, r6
    fbb0:	f7ff f906 	bl	edc0 <memchr>
    fbb4:	2800      	cmp	r0, #0
    fbb6:	d007      	beq.n	fbc8 <__ssvfiscanf_r+0x94>
    fbb8:	2301      	movs	r3, #1
    fbba:	1b80      	subs	r0, r0, r6
    fbbc:	4083      	lsls	r3, r0
    fbbe:	9a45      	ldr	r2, [sp, #276]	; 0x114
    fbc0:	3501      	adds	r5, #1
    fbc2:	4313      	orrs	r3, r2
    fbc4:	9202      	str	r2, [sp, #8]
    fbc6:	9345      	str	r3, [sp, #276]	; 0x114
    fbc8:	782b      	ldrb	r3, [r5, #0]
    fbca:	1c6e      	adds	r6, r5, #1
    fbcc:	2b67      	cmp	r3, #103	; 0x67
    fbce:	d858      	bhi.n	fc82 <__ssvfiscanf_r+0x14e>
    fbd0:	2b65      	cmp	r3, #101	; 0x65
    fbd2:	d300      	bcc.n	fbd6 <__ssvfiscanf_r+0xa2>
    fbd4:	e0dd      	b.n	fd92 <__ssvfiscanf_r+0x25e>
    fbd6:	2b47      	cmp	r3, #71	; 0x47
    fbd8:	d838      	bhi.n	fc4c <__ssvfiscanf_r+0x118>
    fbda:	2b45      	cmp	r3, #69	; 0x45
    fbdc:	d300      	bcc.n	fbe0 <__ssvfiscanf_r+0xac>
    fbde:	e0d8      	b.n	fd92 <__ssvfiscanf_r+0x25e>
    fbe0:	2b00      	cmp	r3, #0
    fbe2:	d100      	bne.n	fbe6 <__ssvfiscanf_r+0xb2>
    fbe4:	e11d      	b.n	fe22 <__ssvfiscanf_r+0x2ee>
    fbe6:	2b25      	cmp	r3, #37	; 0x25
    fbe8:	d079      	beq.n	fcde <__ssvfiscanf_r+0x1aa>
    fbea:	2303      	movs	r3, #3
    fbec:	934b      	str	r3, [sp, #300]	; 0x12c
    fbee:	3307      	adds	r3, #7
    fbf0:	9346      	str	r3, [sp, #280]	; 0x118
    fbf2:	e053      	b.n	fc9c <__ssvfiscanf_r+0x168>
    fbf4:	9a49      	ldr	r2, [sp, #292]	; 0x124
    fbf6:	3301      	adds	r3, #1
    fbf8:	9201      	str	r2, [sp, #4]
    fbfa:	3201      	adds	r2, #1
    fbfc:	9249      	str	r2, [sp, #292]	; 0x124
    fbfe:	6862      	ldr	r2, [r4, #4]
    fc00:	6023      	str	r3, [r4, #0]
    fc02:	3a01      	subs	r2, #1
    fc04:	6062      	str	r2, [r4, #4]
    fc06:	6863      	ldr	r3, [r4, #4]
    fc08:	2b00      	cmp	r3, #0
    fc0a:	dd0b      	ble.n	fc24 <__ssvfiscanf_r+0xf0>
    fc0c:	f7fc fa64 	bl	c0d8 <__locale_ctype_ptr>
    fc10:	2108      	movs	r1, #8
    fc12:	6823      	ldr	r3, [r4, #0]
    fc14:	781a      	ldrb	r2, [r3, #0]
    fc16:	1880      	adds	r0, r0, r2
    fc18:	7842      	ldrb	r2, [r0, #1]
    fc1a:	420a      	tst	r2, r1
    fc1c:	d1ea      	bne.n	fbf4 <__ssvfiscanf_r+0xc0>
    fc1e:	1c6e      	adds	r6, r5, #1
    fc20:	0035      	movs	r5, r6
    fc22:	e7a1      	b.n	fb68 <__ssvfiscanf_r+0x34>
    fc24:	2286      	movs	r2, #134	; 0x86
    fc26:	ab02      	add	r3, sp, #8
    fc28:	0052      	lsls	r2, r2, #1
    fc2a:	189b      	adds	r3, r3, r2
    fc2c:	59db      	ldr	r3, [r3, r7]
    fc2e:	0021      	movs	r1, r4
    fc30:	9800      	ldr	r0, [sp, #0]
    fc32:	9301      	str	r3, [sp, #4]
    fc34:	4798      	blx	r3
    fc36:	2800      	cmp	r0, #0
    fc38:	d0e8      	beq.n	fc0c <__ssvfiscanf_r+0xd8>
    fc3a:	e7f0      	b.n	fc1e <__ssvfiscanf_r+0xea>
    fc3c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    fc3e:	3501      	adds	r5, #1
    fc40:	9302      	str	r3, [sp, #8]
    fc42:	4353      	muls	r3, r2
    fc44:	3b30      	subs	r3, #48	; 0x30
    fc46:	1859      	adds	r1, r3, r1
    fc48:	9147      	str	r1, [sp, #284]	; 0x11c
    fc4a:	e7a9      	b.n	fba0 <__ssvfiscanf_r+0x6c>
    fc4c:	2b5b      	cmp	r3, #91	; 0x5b
    fc4e:	d100      	bne.n	fc52 <__ssvfiscanf_r+0x11e>
    fc50:	e077      	b.n	fd42 <__ssvfiscanf_r+0x20e>
    fc52:	d80f      	bhi.n	fc74 <__ssvfiscanf_r+0x140>
    fc54:	2b58      	cmp	r3, #88	; 0x58
    fc56:	d1c8      	bne.n	fbea <__ssvfiscanf_r+0xb6>
    fc58:	9a45      	ldr	r2, [sp, #276]	; 0x114
    fc5a:	9201      	str	r2, [sp, #4]
    fc5c:	2280      	movs	r2, #128	; 0x80
    fc5e:	9901      	ldr	r1, [sp, #4]
    fc60:	0092      	lsls	r2, r2, #2
    fc62:	430a      	orrs	r2, r1
    fc64:	9245      	str	r2, [sp, #276]	; 0x114
    fc66:	2210      	movs	r2, #16
    fc68:	9246      	str	r2, [sp, #280]	; 0x118
    fc6a:	2203      	movs	r2, #3
    fc6c:	2b6e      	cmp	r3, #110	; 0x6e
    fc6e:	dd14      	ble.n	fc9a <__ssvfiscanf_r+0x166>
    fc70:	3201      	adds	r2, #1
    fc72:	e012      	b.n	fc9a <__ssvfiscanf_r+0x166>
    fc74:	2b63      	cmp	r3, #99	; 0x63
    fc76:	d100      	bne.n	fc7a <__ssvfiscanf_r+0x146>
    fc78:	e071      	b.n	fd5e <__ssvfiscanf_r+0x22a>
    fc7a:	2b64      	cmp	r3, #100	; 0x64
    fc7c:	d1b5      	bne.n	fbea <__ssvfiscanf_r+0xb6>
    fc7e:	220a      	movs	r2, #10
    fc80:	e7f2      	b.n	fc68 <__ssvfiscanf_r+0x134>
    fc82:	2b70      	cmp	r3, #112	; 0x70
    fc84:	d052      	beq.n	fd2c <__ssvfiscanf_r+0x1f8>
    fc86:	d822      	bhi.n	fcce <__ssvfiscanf_r+0x19a>
    fc88:	2b6e      	cmp	r3, #110	; 0x6e
    fc8a:	d100      	bne.n	fc8e <__ssvfiscanf_r+0x15a>
    fc8c:	e06f      	b.n	fd6e <__ssvfiscanf_r+0x23a>
    fc8e:	d854      	bhi.n	fd3a <__ssvfiscanf_r+0x206>
    fc90:	2b69      	cmp	r3, #105	; 0x69
    fc92:	d1aa      	bne.n	fbea <__ssvfiscanf_r+0xb6>
    fc94:	2300      	movs	r3, #0
    fc96:	2203      	movs	r2, #3
    fc98:	9346      	str	r3, [sp, #280]	; 0x118
    fc9a:	924b      	str	r2, [sp, #300]	; 0x12c
    fc9c:	6863      	ldr	r3, [r4, #4]
    fc9e:	2b00      	cmp	r3, #0
    fca0:	dc00      	bgt.n	fca4 <__ssvfiscanf_r+0x170>
    fca2:	e078      	b.n	fd96 <__ssvfiscanf_r+0x262>
    fca4:	9b45      	ldr	r3, [sp, #276]	; 0x114
    fca6:	9301      	str	r3, [sp, #4]
    fca8:	065b      	lsls	r3, r3, #25
    fcaa:	d400      	bmi.n	fcae <__ssvfiscanf_r+0x17a>
    fcac:	e08b      	b.n	fdc6 <__ssvfiscanf_r+0x292>
    fcae:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
    fcb0:	2b02      	cmp	r3, #2
    fcb2:	dd00      	ble.n	fcb6 <__ssvfiscanf_r+0x182>
    fcb4:	e09d      	b.n	fdf2 <__ssvfiscanf_r+0x2be>
    fcb6:	ab03      	add	r3, sp, #12
    fcb8:	0022      	movs	r2, r4
    fcba:	a945      	add	r1, sp, #276	; 0x114
    fcbc:	9800      	ldr	r0, [sp, #0]
    fcbe:	f000 f8bf 	bl	fe40 <_scanf_chars>
    fcc2:	2801      	cmp	r0, #1
    fcc4:	d100      	bne.n	fcc8 <__ssvfiscanf_r+0x194>
    fcc6:	e0af      	b.n	fe28 <__ssvfiscanf_r+0x2f4>
    fcc8:	2802      	cmp	r0, #2
    fcca:	d1a9      	bne.n	fc20 <__ssvfiscanf_r+0xec>
    fccc:	e025      	b.n	fd1a <__ssvfiscanf_r+0x1e6>
    fcce:	2b75      	cmp	r3, #117	; 0x75
    fcd0:	d0d5      	beq.n	fc7e <__ssvfiscanf_r+0x14a>
    fcd2:	2b78      	cmp	r3, #120	; 0x78
    fcd4:	d0c0      	beq.n	fc58 <__ssvfiscanf_r+0x124>
    fcd6:	2b73      	cmp	r3, #115	; 0x73
    fcd8:	d187      	bne.n	fbea <__ssvfiscanf_r+0xb6>
    fcda:	2302      	movs	r3, #2
    fcdc:	e03d      	b.n	fd5a <__ssvfiscanf_r+0x226>
    fcde:	6863      	ldr	r3, [r4, #4]
    fce0:	2b00      	cmp	r3, #0
    fce2:	dd0f      	ble.n	fd04 <__ssvfiscanf_r+0x1d0>
    fce4:	6823      	ldr	r3, [r4, #0]
    fce6:	9901      	ldr	r1, [sp, #4]
    fce8:	781a      	ldrb	r2, [r3, #0]
    fcea:	4291      	cmp	r1, r2
    fcec:	d000      	beq.n	fcf0 <__ssvfiscanf_r+0x1bc>
    fcee:	e09b      	b.n	fe28 <__ssvfiscanf_r+0x2f4>
    fcf0:	3301      	adds	r3, #1
    fcf2:	6862      	ldr	r2, [r4, #4]
    fcf4:	6023      	str	r3, [r4, #0]
    fcf6:	9b49      	ldr	r3, [sp, #292]	; 0x124
    fcf8:	3a01      	subs	r2, #1
    fcfa:	9301      	str	r3, [sp, #4]
    fcfc:	3301      	adds	r3, #1
    fcfe:	6062      	str	r2, [r4, #4]
    fd00:	9349      	str	r3, [sp, #292]	; 0x124
    fd02:	e78d      	b.n	fc20 <__ssvfiscanf_r+0xec>
    fd04:	2286      	movs	r2, #134	; 0x86
    fd06:	ab02      	add	r3, sp, #8
    fd08:	0052      	lsls	r2, r2, #1
    fd0a:	189b      	adds	r3, r3, r2
    fd0c:	59db      	ldr	r3, [r3, r7]
    fd0e:	0021      	movs	r1, r4
    fd10:	9800      	ldr	r0, [sp, #0]
    fd12:	9302      	str	r3, [sp, #8]
    fd14:	4798      	blx	r3
    fd16:	2800      	cmp	r0, #0
    fd18:	d0e4      	beq.n	fce4 <__ssvfiscanf_r+0x1b0>
    fd1a:	9848      	ldr	r0, [sp, #288]	; 0x120
    fd1c:	2800      	cmp	r0, #0
    fd1e:	d000      	beq.n	fd22 <__ssvfiscanf_r+0x1ee>
    fd20:	e07b      	b.n	fe1a <__ssvfiscanf_r+0x2e6>
    fd22:	3801      	subs	r0, #1
    fd24:	23a7      	movs	r3, #167	; 0xa7
    fd26:	009b      	lsls	r3, r3, #2
    fd28:	449d      	add	sp, r3
    fd2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fd2c:	9a45      	ldr	r2, [sp, #276]	; 0x114
    fd2e:	9201      	str	r2, [sp, #4]
    fd30:	2220      	movs	r2, #32
    fd32:	9901      	ldr	r1, [sp, #4]
    fd34:	430a      	orrs	r2, r1
    fd36:	9245      	str	r2, [sp, #276]	; 0x114
    fd38:	e78e      	b.n	fc58 <__ssvfiscanf_r+0x124>
    fd3a:	2308      	movs	r3, #8
    fd3c:	2204      	movs	r2, #4
    fd3e:	9346      	str	r3, [sp, #280]	; 0x118
    fd40:	e7ab      	b.n	fc9a <__ssvfiscanf_r+0x166>
    fd42:	0031      	movs	r1, r6
    fd44:	a805      	add	r0, sp, #20
    fd46:	f000 f9f3 	bl	10130 <__sccl>
    fd4a:	9b45      	ldr	r3, [sp, #276]	; 0x114
    fd4c:	0006      	movs	r6, r0
    fd4e:	9301      	str	r3, [sp, #4]
    fd50:	2340      	movs	r3, #64	; 0x40
    fd52:	9a01      	ldr	r2, [sp, #4]
    fd54:	4313      	orrs	r3, r2
    fd56:	9345      	str	r3, [sp, #276]	; 0x114
    fd58:	2301      	movs	r3, #1
    fd5a:	934b      	str	r3, [sp, #300]	; 0x12c
    fd5c:	e79e      	b.n	fc9c <__ssvfiscanf_r+0x168>
    fd5e:	9b45      	ldr	r3, [sp, #276]	; 0x114
    fd60:	9301      	str	r3, [sp, #4]
    fd62:	2340      	movs	r3, #64	; 0x40
    fd64:	9a01      	ldr	r2, [sp, #4]
    fd66:	4313      	orrs	r3, r2
    fd68:	9345      	str	r3, [sp, #276]	; 0x114
    fd6a:	2300      	movs	r3, #0
    fd6c:	e7f5      	b.n	fd5a <__ssvfiscanf_r+0x226>
    fd6e:	9945      	ldr	r1, [sp, #276]	; 0x114
    fd70:	06cb      	lsls	r3, r1, #27
    fd72:	d500      	bpl.n	fd76 <__ssvfiscanf_r+0x242>
    fd74:	e754      	b.n	fc20 <__ssvfiscanf_r+0xec>
    fd76:	9b03      	ldr	r3, [sp, #12]
    fd78:	9a49      	ldr	r2, [sp, #292]	; 0x124
    fd7a:	07c8      	lsls	r0, r1, #31
    fd7c:	d504      	bpl.n	fd88 <__ssvfiscanf_r+0x254>
    fd7e:	1d19      	adds	r1, r3, #4
    fd80:	9103      	str	r1, [sp, #12]
    fd82:	681b      	ldr	r3, [r3, #0]
    fd84:	801a      	strh	r2, [r3, #0]
    fd86:	e74b      	b.n	fc20 <__ssvfiscanf_r+0xec>
    fd88:	1d19      	adds	r1, r3, #4
    fd8a:	9103      	str	r1, [sp, #12]
    fd8c:	681b      	ldr	r3, [r3, #0]
    fd8e:	601a      	str	r2, [r3, #0]
    fd90:	e746      	b.n	fc20 <__ssvfiscanf_r+0xec>
    fd92:	2305      	movs	r3, #5
    fd94:	e7e1      	b.n	fd5a <__ssvfiscanf_r+0x226>
    fd96:	2286      	movs	r2, #134	; 0x86
    fd98:	ab02      	add	r3, sp, #8
    fd9a:	0052      	lsls	r2, r2, #1
    fd9c:	189b      	adds	r3, r3, r2
    fd9e:	59db      	ldr	r3, [r3, r7]
    fda0:	0021      	movs	r1, r4
    fda2:	9800      	ldr	r0, [sp, #0]
    fda4:	9301      	str	r3, [sp, #4]
    fda6:	4798      	blx	r3
    fda8:	2800      	cmp	r0, #0
    fdaa:	d100      	bne.n	fdae <__ssvfiscanf_r+0x27a>
    fdac:	e77a      	b.n	fca4 <__ssvfiscanf_r+0x170>
    fdae:	e7b4      	b.n	fd1a <__ssvfiscanf_r+0x1e6>
    fdb0:	9a49      	ldr	r2, [sp, #292]	; 0x124
    fdb2:	9201      	str	r2, [sp, #4]
    fdb4:	3201      	adds	r2, #1
    fdb6:	9249      	str	r2, [sp, #292]	; 0x124
    fdb8:	6862      	ldr	r2, [r4, #4]
    fdba:	3a01      	subs	r2, #1
    fdbc:	6062      	str	r2, [r4, #4]
    fdbe:	2a00      	cmp	r2, #0
    fdc0:	dd0b      	ble.n	fdda <__ssvfiscanf_r+0x2a6>
    fdc2:	3301      	adds	r3, #1
    fdc4:	6023      	str	r3, [r4, #0]
    fdc6:	f7fc f987 	bl	c0d8 <__locale_ctype_ptr>
    fdca:	2108      	movs	r1, #8
    fdcc:	6823      	ldr	r3, [r4, #0]
    fdce:	781a      	ldrb	r2, [r3, #0]
    fdd0:	1880      	adds	r0, r0, r2
    fdd2:	7842      	ldrb	r2, [r0, #1]
    fdd4:	420a      	tst	r2, r1
    fdd6:	d1eb      	bne.n	fdb0 <__ssvfiscanf_r+0x27c>
    fdd8:	e769      	b.n	fcae <__ssvfiscanf_r+0x17a>
    fdda:	2286      	movs	r2, #134	; 0x86
    fddc:	ab02      	add	r3, sp, #8
    fdde:	0052      	lsls	r2, r2, #1
    fde0:	189b      	adds	r3, r3, r2
    fde2:	59db      	ldr	r3, [r3, r7]
    fde4:	0021      	movs	r1, r4
    fde6:	9800      	ldr	r0, [sp, #0]
    fde8:	9301      	str	r3, [sp, #4]
    fdea:	4798      	blx	r3
    fdec:	2800      	cmp	r0, #0
    fdee:	d0ea      	beq.n	fdc6 <__ssvfiscanf_r+0x292>
    fdf0:	e793      	b.n	fd1a <__ssvfiscanf_r+0x1e6>
    fdf2:	2b04      	cmp	r3, #4
    fdf4:	dc06      	bgt.n	fe04 <__ssvfiscanf_r+0x2d0>
    fdf6:	ab03      	add	r3, sp, #12
    fdf8:	0022      	movs	r2, r4
    fdfa:	a945      	add	r1, sp, #276	; 0x114
    fdfc:	9800      	ldr	r0, [sp, #0]
    fdfe:	f000 f883 	bl	ff08 <_scanf_i>
    fe02:	e75e      	b.n	fcc2 <__ssvfiscanf_r+0x18e>
    fe04:	4b0d      	ldr	r3, [pc, #52]	; (fe3c <__ssvfiscanf_r+0x308>)
    fe06:	2b00      	cmp	r3, #0
    fe08:	d100      	bne.n	fe0c <__ssvfiscanf_r+0x2d8>
    fe0a:	e709      	b.n	fc20 <__ssvfiscanf_r+0xec>
    fe0c:	ab03      	add	r3, sp, #12
    fe0e:	0022      	movs	r2, r4
    fe10:	a945      	add	r1, sp, #276	; 0x114
    fe12:	9800      	ldr	r0, [sp, #0]
    fe14:	e000      	b.n	fe18 <__ssvfiscanf_r+0x2e4>
    fe16:	bf00      	nop
    fe18:	e753      	b.n	fcc2 <__ssvfiscanf_r+0x18e>
    fe1a:	89a3      	ldrh	r3, [r4, #12]
    fe1c:	065b      	lsls	r3, r3, #25
    fe1e:	d400      	bmi.n	fe22 <__ssvfiscanf_r+0x2ee>
    fe20:	e780      	b.n	fd24 <__ssvfiscanf_r+0x1f0>
    fe22:	2001      	movs	r0, #1
    fe24:	4240      	negs	r0, r0
    fe26:	e77d      	b.n	fd24 <__ssvfiscanf_r+0x1f0>
    fe28:	9848      	ldr	r0, [sp, #288]	; 0x120
    fe2a:	e77b      	b.n	fd24 <__ssvfiscanf_r+0x1f0>
    fe2c:	fffffd64 	.word	0xfffffd64
    fe30:	0000fa7d 	.word	0x0000fa7d
    fe34:	0000faf5 	.word	0x0000faf5
    fe38:	000120b6 	.word	0x000120b6
    fe3c:	00000000 	.word	0x00000000

0000fe40 <_scanf_chars>:
    fe40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    fe42:	0015      	movs	r5, r2
    fe44:	688a      	ldr	r2, [r1, #8]
    fe46:	9001      	str	r0, [sp, #4]
    fe48:	000c      	movs	r4, r1
    fe4a:	2a00      	cmp	r2, #0
    fe4c:	d106      	bne.n	fe5c <_scanf_chars+0x1c>
    fe4e:	698a      	ldr	r2, [r1, #24]
    fe50:	1e51      	subs	r1, r2, #1
    fe52:	418a      	sbcs	r2, r1
    fe54:	2101      	movs	r1, #1
    fe56:	4252      	negs	r2, r2
    fe58:	430a      	orrs	r2, r1
    fe5a:	60a2      	str	r2, [r4, #8]
    fe5c:	6822      	ldr	r2, [r4, #0]
    fe5e:	06d2      	lsls	r2, r2, #27
    fe60:	d403      	bmi.n	fe6a <_scanf_chars+0x2a>
    fe62:	681a      	ldr	r2, [r3, #0]
    fe64:	1d11      	adds	r1, r2, #4
    fe66:	6019      	str	r1, [r3, #0]
    fe68:	6817      	ldr	r7, [r2, #0]
    fe6a:	2600      	movs	r6, #0
    fe6c:	69a3      	ldr	r3, [r4, #24]
    fe6e:	2b00      	cmp	r3, #0
    fe70:	d01c      	beq.n	feac <_scanf_chars+0x6c>
    fe72:	2b01      	cmp	r3, #1
    fe74:	d108      	bne.n	fe88 <_scanf_chars+0x48>
    fe76:	682b      	ldr	r3, [r5, #0]
    fe78:	6962      	ldr	r2, [r4, #20]
    fe7a:	781b      	ldrb	r3, [r3, #0]
    fe7c:	5cd3      	ldrb	r3, [r2, r3]
    fe7e:	2b00      	cmp	r3, #0
    fe80:	d114      	bne.n	feac <_scanf_chars+0x6c>
    fe82:	2e00      	cmp	r6, #0
    fe84:	d130      	bne.n	fee8 <_scanf_chars+0xa8>
    fe86:	e006      	b.n	fe96 <_scanf_chars+0x56>
    fe88:	2b02      	cmp	r3, #2
    fe8a:	d006      	beq.n	fe9a <_scanf_chars+0x5a>
    fe8c:	2e00      	cmp	r6, #0
    fe8e:	d12b      	bne.n	fee8 <_scanf_chars+0xa8>
    fe90:	69a3      	ldr	r3, [r4, #24]
    fe92:	2b01      	cmp	r3, #1
    fe94:	d128      	bne.n	fee8 <_scanf_chars+0xa8>
    fe96:	2001      	movs	r0, #1
    fe98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fe9a:	f7fc f91d 	bl	c0d8 <__locale_ctype_ptr>
    fe9e:	2208      	movs	r2, #8
    fea0:	682b      	ldr	r3, [r5, #0]
    fea2:	781b      	ldrb	r3, [r3, #0]
    fea4:	18c0      	adds	r0, r0, r3
    fea6:	7843      	ldrb	r3, [r0, #1]
    fea8:	4213      	tst	r3, r2
    feaa:	d1ef      	bne.n	fe8c <_scanf_chars+0x4c>
    feac:	2210      	movs	r2, #16
    feae:	6823      	ldr	r3, [r4, #0]
    feb0:	3601      	adds	r6, #1
    feb2:	4213      	tst	r3, r2
    feb4:	d103      	bne.n	febe <_scanf_chars+0x7e>
    feb6:	682b      	ldr	r3, [r5, #0]
    feb8:	781b      	ldrb	r3, [r3, #0]
    feba:	703b      	strb	r3, [r7, #0]
    febc:	3701      	adds	r7, #1
    febe:	682a      	ldr	r2, [r5, #0]
    fec0:	686b      	ldr	r3, [r5, #4]
    fec2:	3201      	adds	r2, #1
    fec4:	602a      	str	r2, [r5, #0]
    fec6:	68a2      	ldr	r2, [r4, #8]
    fec8:	3b01      	subs	r3, #1
    feca:	3a01      	subs	r2, #1
    fecc:	606b      	str	r3, [r5, #4]
    fece:	60a2      	str	r2, [r4, #8]
    fed0:	2a00      	cmp	r2, #0
    fed2:	d009      	beq.n	fee8 <_scanf_chars+0xa8>
    fed4:	2b00      	cmp	r3, #0
    fed6:	dcc9      	bgt.n	fe6c <_scanf_chars+0x2c>
    fed8:	23c0      	movs	r3, #192	; 0xc0
    feda:	005b      	lsls	r3, r3, #1
    fedc:	58e3      	ldr	r3, [r4, r3]
    fede:	0029      	movs	r1, r5
    fee0:	9801      	ldr	r0, [sp, #4]
    fee2:	4798      	blx	r3
    fee4:	2800      	cmp	r0, #0
    fee6:	d0c1      	beq.n	fe6c <_scanf_chars+0x2c>
    fee8:	2310      	movs	r3, #16
    feea:	6822      	ldr	r2, [r4, #0]
    feec:	4013      	ands	r3, r2
    feee:	d106      	bne.n	fefe <_scanf_chars+0xbe>
    fef0:	68e2      	ldr	r2, [r4, #12]
    fef2:	3201      	adds	r2, #1
    fef4:	60e2      	str	r2, [r4, #12]
    fef6:	69a2      	ldr	r2, [r4, #24]
    fef8:	2a00      	cmp	r2, #0
    fefa:	d000      	beq.n	fefe <_scanf_chars+0xbe>
    fefc:	703b      	strb	r3, [r7, #0]
    fefe:	6923      	ldr	r3, [r4, #16]
    ff00:	2000      	movs	r0, #0
    ff02:	199e      	adds	r6, r3, r6
    ff04:	6126      	str	r6, [r4, #16]
    ff06:	e7c7      	b.n	fe98 <_scanf_chars+0x58>

0000ff08 <_scanf_i>:
    ff08:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff0a:	000c      	movs	r4, r1
    ff0c:	b08d      	sub	sp, #52	; 0x34
    ff0e:	9302      	str	r3, [sp, #8]
    ff10:	4b77      	ldr	r3, [pc, #476]	; (100f0 <_scanf_i+0x1e8>)
    ff12:	9005      	str	r0, [sp, #20]
    ff14:	0016      	movs	r6, r2
    ff16:	aa09      	add	r2, sp, #36	; 0x24
    ff18:	cb23      	ldmia	r3!, {r0, r1, r5}
    ff1a:	c223      	stmia	r2!, {r0, r1, r5}
    ff1c:	4b75      	ldr	r3, [pc, #468]	; (100f4 <_scanf_i+0x1ec>)
    ff1e:	9306      	str	r3, [sp, #24]
    ff20:	69a3      	ldr	r3, [r4, #24]
    ff22:	2b03      	cmp	r3, #3
    ff24:	d001      	beq.n	ff2a <_scanf_i+0x22>
    ff26:	4b74      	ldr	r3, [pc, #464]	; (100f8 <_scanf_i+0x1f0>)
    ff28:	9306      	str	r3, [sp, #24]
    ff2a:	22ae      	movs	r2, #174	; 0xae
    ff2c:	2000      	movs	r0, #0
    ff2e:	68a3      	ldr	r3, [r4, #8]
    ff30:	0052      	lsls	r2, r2, #1
    ff32:	1e59      	subs	r1, r3, #1
    ff34:	9004      	str	r0, [sp, #16]
    ff36:	4291      	cmp	r1, r2
    ff38:	d905      	bls.n	ff46 <_scanf_i+0x3e>
    ff3a:	3b5e      	subs	r3, #94	; 0x5e
    ff3c:	3bff      	subs	r3, #255	; 0xff
    ff3e:	9304      	str	r3, [sp, #16]
    ff40:	235e      	movs	r3, #94	; 0x5e
    ff42:	33ff      	adds	r3, #255	; 0xff
    ff44:	60a3      	str	r3, [r4, #8]
    ff46:	0023      	movs	r3, r4
    ff48:	331c      	adds	r3, #28
    ff4a:	9301      	str	r3, [sp, #4]
    ff4c:	23d0      	movs	r3, #208	; 0xd0
    ff4e:	2700      	movs	r7, #0
    ff50:	6822      	ldr	r2, [r4, #0]
    ff52:	011b      	lsls	r3, r3, #4
    ff54:	4313      	orrs	r3, r2
    ff56:	6023      	str	r3, [r4, #0]
    ff58:	9b01      	ldr	r3, [sp, #4]
    ff5a:	9303      	str	r3, [sp, #12]
    ff5c:	6833      	ldr	r3, [r6, #0]
    ff5e:	a809      	add	r0, sp, #36	; 0x24
    ff60:	7819      	ldrb	r1, [r3, #0]
    ff62:	00bb      	lsls	r3, r7, #2
    ff64:	2202      	movs	r2, #2
    ff66:	5818      	ldr	r0, [r3, r0]
    ff68:	f7fe ff2a 	bl	edc0 <memchr>
    ff6c:	2800      	cmp	r0, #0
    ff6e:	d02b      	beq.n	ffc8 <_scanf_i+0xc0>
    ff70:	2f01      	cmp	r7, #1
    ff72:	d15f      	bne.n	10034 <_scanf_i+0x12c>
    ff74:	6863      	ldr	r3, [r4, #4]
    ff76:	2b00      	cmp	r3, #0
    ff78:	d106      	bne.n	ff88 <_scanf_i+0x80>
    ff7a:	3308      	adds	r3, #8
    ff7c:	6822      	ldr	r2, [r4, #0]
    ff7e:	6063      	str	r3, [r4, #4]
    ff80:	33f9      	adds	r3, #249	; 0xf9
    ff82:	33ff      	adds	r3, #255	; 0xff
    ff84:	4313      	orrs	r3, r2
    ff86:	6023      	str	r3, [r4, #0]
    ff88:	4b5c      	ldr	r3, [pc, #368]	; (100fc <_scanf_i+0x1f4>)
    ff8a:	6822      	ldr	r2, [r4, #0]
    ff8c:	4013      	ands	r3, r2
    ff8e:	6023      	str	r3, [r4, #0]
    ff90:	68a3      	ldr	r3, [r4, #8]
    ff92:	1e5a      	subs	r2, r3, #1
    ff94:	60a2      	str	r2, [r4, #8]
    ff96:	2b00      	cmp	r3, #0
    ff98:	d016      	beq.n	ffc8 <_scanf_i+0xc0>
    ff9a:	9b03      	ldr	r3, [sp, #12]
    ff9c:	1c5d      	adds	r5, r3, #1
    ff9e:	6833      	ldr	r3, [r6, #0]
    ffa0:	1c5a      	adds	r2, r3, #1
    ffa2:	6032      	str	r2, [r6, #0]
    ffa4:	781b      	ldrb	r3, [r3, #0]
    ffa6:	9a03      	ldr	r2, [sp, #12]
    ffa8:	9503      	str	r5, [sp, #12]
    ffaa:	7013      	strb	r3, [r2, #0]
    ffac:	6873      	ldr	r3, [r6, #4]
    ffae:	3b01      	subs	r3, #1
    ffb0:	6073      	str	r3, [r6, #4]
    ffb2:	2b00      	cmp	r3, #0
    ffb4:	dc08      	bgt.n	ffc8 <_scanf_i+0xc0>
    ffb6:	23c0      	movs	r3, #192	; 0xc0
    ffb8:	005b      	lsls	r3, r3, #1
    ffba:	58e3      	ldr	r3, [r4, r3]
    ffbc:	0031      	movs	r1, r6
    ffbe:	9805      	ldr	r0, [sp, #20]
    ffc0:	9307      	str	r3, [sp, #28]
    ffc2:	4798      	blx	r3
    ffc4:	2800      	cmp	r0, #0
    ffc6:	d17d      	bne.n	100c4 <_scanf_i+0x1bc>
    ffc8:	3701      	adds	r7, #1
    ffca:	2f03      	cmp	r7, #3
    ffcc:	d1c6      	bne.n	ff5c <_scanf_i+0x54>
    ffce:	6863      	ldr	r3, [r4, #4]
    ffd0:	2b00      	cmp	r3, #0
    ffd2:	d101      	bne.n	ffd8 <_scanf_i+0xd0>
    ffd4:	330a      	adds	r3, #10
    ffd6:	6063      	str	r3, [r4, #4]
    ffd8:	2110      	movs	r1, #16
    ffda:	2700      	movs	r7, #0
    ffdc:	6863      	ldr	r3, [r4, #4]
    ffde:	6960      	ldr	r0, [r4, #20]
    ffe0:	1ac9      	subs	r1, r1, r3
    ffe2:	4b47      	ldr	r3, [pc, #284]	; (10100 <_scanf_i+0x1f8>)
    ffe4:	18c9      	adds	r1, r1, r3
    ffe6:	f000 f8a3 	bl	10130 <__sccl>
    ffea:	9d03      	ldr	r5, [sp, #12]
    ffec:	68a3      	ldr	r3, [r4, #8]
    ffee:	2b00      	cmp	r3, #0
    fff0:	d041      	beq.n	10076 <_scanf_i+0x16e>
    fff2:	6832      	ldr	r2, [r6, #0]
    fff4:	6960      	ldr	r0, [r4, #20]
    fff6:	7811      	ldrb	r1, [r2, #0]
    fff8:	5c40      	ldrb	r0, [r0, r1]
    fffa:	2800      	cmp	r0, #0
    fffc:	d03b      	beq.n	10076 <_scanf_i+0x16e>
    fffe:	2930      	cmp	r1, #48	; 0x30
   10000:	d128      	bne.n	10054 <_scanf_i+0x14c>
   10002:	2080      	movs	r0, #128	; 0x80
   10004:	6821      	ldr	r1, [r4, #0]
   10006:	0100      	lsls	r0, r0, #4
   10008:	4201      	tst	r1, r0
   1000a:	d023      	beq.n	10054 <_scanf_i+0x14c>
   1000c:	9a04      	ldr	r2, [sp, #16]
   1000e:	3701      	adds	r7, #1
   10010:	2a00      	cmp	r2, #0
   10012:	d003      	beq.n	1001c <_scanf_i+0x114>
   10014:	3a01      	subs	r2, #1
   10016:	3301      	adds	r3, #1
   10018:	9204      	str	r2, [sp, #16]
   1001a:	60a3      	str	r3, [r4, #8]
   1001c:	6873      	ldr	r3, [r6, #4]
   1001e:	3b01      	subs	r3, #1
   10020:	6073      	str	r3, [r6, #4]
   10022:	2b00      	cmp	r3, #0
   10024:	dd1e      	ble.n	10064 <_scanf_i+0x15c>
   10026:	6833      	ldr	r3, [r6, #0]
   10028:	3301      	adds	r3, #1
   1002a:	6033      	str	r3, [r6, #0]
   1002c:	68a3      	ldr	r3, [r4, #8]
   1002e:	3b01      	subs	r3, #1
   10030:	60a3      	str	r3, [r4, #8]
   10032:	e7db      	b.n	ffec <_scanf_i+0xe4>
   10034:	2f02      	cmp	r7, #2
   10036:	d1ab      	bne.n	ff90 <_scanf_i+0x88>
   10038:	21c0      	movs	r1, #192	; 0xc0
   1003a:	2380      	movs	r3, #128	; 0x80
   1003c:	6822      	ldr	r2, [r4, #0]
   1003e:	00c9      	lsls	r1, r1, #3
   10040:	4011      	ands	r1, r2
   10042:	009b      	lsls	r3, r3, #2
   10044:	4299      	cmp	r1, r3
   10046:	d1c2      	bne.n	ffce <_scanf_i+0xc6>
   10048:	3bf1      	subs	r3, #241	; 0xf1
   1004a:	3bff      	subs	r3, #255	; 0xff
   1004c:	6063      	str	r3, [r4, #4]
   1004e:	33f0      	adds	r3, #240	; 0xf0
   10050:	4313      	orrs	r3, r2
   10052:	e79c      	b.n	ff8e <_scanf_i+0x86>
   10054:	6821      	ldr	r1, [r4, #0]
   10056:	4b2b      	ldr	r3, [pc, #172]	; (10104 <_scanf_i+0x1fc>)
   10058:	400b      	ands	r3, r1
   1005a:	6023      	str	r3, [r4, #0]
   1005c:	7813      	ldrb	r3, [r2, #0]
   1005e:	702b      	strb	r3, [r5, #0]
   10060:	3501      	adds	r5, #1
   10062:	e7db      	b.n	1001c <_scanf_i+0x114>
   10064:	23c0      	movs	r3, #192	; 0xc0
   10066:	005b      	lsls	r3, r3, #1
   10068:	58e3      	ldr	r3, [r4, r3]
   1006a:	0031      	movs	r1, r6
   1006c:	9805      	ldr	r0, [sp, #20]
   1006e:	9303      	str	r3, [sp, #12]
   10070:	4798      	blx	r3
   10072:	2800      	cmp	r0, #0
   10074:	d0da      	beq.n	1002c <_scanf_i+0x124>
   10076:	6823      	ldr	r3, [r4, #0]
   10078:	05db      	lsls	r3, r3, #23
   1007a:	d50e      	bpl.n	1009a <_scanf_i+0x192>
   1007c:	9b01      	ldr	r3, [sp, #4]
   1007e:	429d      	cmp	r5, r3
   10080:	d907      	bls.n	10092 <_scanf_i+0x18a>
   10082:	23be      	movs	r3, #190	; 0xbe
   10084:	3d01      	subs	r5, #1
   10086:	005b      	lsls	r3, r3, #1
   10088:	7829      	ldrb	r1, [r5, #0]
   1008a:	58e3      	ldr	r3, [r4, r3]
   1008c:	0032      	movs	r2, r6
   1008e:	9805      	ldr	r0, [sp, #20]
   10090:	4798      	blx	r3
   10092:	9b01      	ldr	r3, [sp, #4]
   10094:	2001      	movs	r0, #1
   10096:	429d      	cmp	r5, r3
   10098:	d027      	beq.n	100ea <_scanf_i+0x1e2>
   1009a:	2210      	movs	r2, #16
   1009c:	6823      	ldr	r3, [r4, #0]
   1009e:	401a      	ands	r2, r3
   100a0:	d11c      	bne.n	100dc <_scanf_i+0x1d4>
   100a2:	702a      	strb	r2, [r5, #0]
   100a4:	6863      	ldr	r3, [r4, #4]
   100a6:	9901      	ldr	r1, [sp, #4]
   100a8:	9805      	ldr	r0, [sp, #20]
   100aa:	9e06      	ldr	r6, [sp, #24]
   100ac:	47b0      	blx	r6
   100ae:	9b02      	ldr	r3, [sp, #8]
   100b0:	6822      	ldr	r2, [r4, #0]
   100b2:	681b      	ldr	r3, [r3, #0]
   100b4:	0691      	lsls	r1, r2, #26
   100b6:	d507      	bpl.n	100c8 <_scanf_i+0x1c0>
   100b8:	9902      	ldr	r1, [sp, #8]
   100ba:	1d1a      	adds	r2, r3, #4
   100bc:	600a      	str	r2, [r1, #0]
   100be:	681b      	ldr	r3, [r3, #0]
   100c0:	6018      	str	r0, [r3, #0]
   100c2:	e008      	b.n	100d6 <_scanf_i+0x1ce>
   100c4:	2700      	movs	r7, #0
   100c6:	e7d6      	b.n	10076 <_scanf_i+0x16e>
   100c8:	07d1      	lsls	r1, r2, #31
   100ca:	d5f5      	bpl.n	100b8 <_scanf_i+0x1b0>
   100cc:	9902      	ldr	r1, [sp, #8]
   100ce:	1d1a      	adds	r2, r3, #4
   100d0:	600a      	str	r2, [r1, #0]
   100d2:	681b      	ldr	r3, [r3, #0]
   100d4:	8018      	strh	r0, [r3, #0]
   100d6:	68e3      	ldr	r3, [r4, #12]
   100d8:	3301      	adds	r3, #1
   100da:	60e3      	str	r3, [r4, #12]
   100dc:	2000      	movs	r0, #0
   100de:	9b01      	ldr	r3, [sp, #4]
   100e0:	1aed      	subs	r5, r5, r3
   100e2:	6923      	ldr	r3, [r4, #16]
   100e4:	19ef      	adds	r7, r5, r7
   100e6:	19df      	adds	r7, r3, r7
   100e8:	6127      	str	r7, [r4, #16]
   100ea:	b00d      	add	sp, #52	; 0x34
   100ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   100ee:	46c0      	nop			; (mov r8, r8)
   100f0:	000123fc 	.word	0x000123fc
   100f4:	0000d555 	.word	0x0000d555
   100f8:	0000f965 	.word	0x0000f965
   100fc:	fffffaff 	.word	0xfffffaff
   10100:	00012408 	.word	0x00012408
   10104:	fffff6ff 	.word	0xfffff6ff

00010108 <_read_r>:
   10108:	b570      	push	{r4, r5, r6, lr}
   1010a:	0005      	movs	r5, r0
   1010c:	0008      	movs	r0, r1
   1010e:	0011      	movs	r1, r2
   10110:	2200      	movs	r2, #0
   10112:	4c06      	ldr	r4, [pc, #24]	; (1012c <_read_r+0x24>)
   10114:	6022      	str	r2, [r4, #0]
   10116:	001a      	movs	r2, r3
   10118:	f000 f8aa 	bl	10270 <_read>
   1011c:	1c43      	adds	r3, r0, #1
   1011e:	d103      	bne.n	10128 <_read_r+0x20>
   10120:	6823      	ldr	r3, [r4, #0]
   10122:	2b00      	cmp	r3, #0
   10124:	d000      	beq.n	10128 <_read_r+0x20>
   10126:	602b      	str	r3, [r5, #0]
   10128:	bd70      	pop	{r4, r5, r6, pc}
   1012a:	46c0      	nop			; (mov r8, r8)
   1012c:	200022dc 	.word	0x200022dc

00010130 <__sccl>:
   10130:	b570      	push	{r4, r5, r6, lr}
   10132:	780b      	ldrb	r3, [r1, #0]
   10134:	2b5e      	cmp	r3, #94	; 0x5e
   10136:	d00d      	beq.n	10154 <__sccl+0x24>
   10138:	1c4a      	adds	r2, r1, #1
   1013a:	2100      	movs	r1, #0
   1013c:	0004      	movs	r4, r0
   1013e:	1c45      	adds	r5, r0, #1
   10140:	35ff      	adds	r5, #255	; 0xff
   10142:	7021      	strb	r1, [r4, #0]
   10144:	3401      	adds	r4, #1
   10146:	42a5      	cmp	r5, r4
   10148:	d1fb      	bne.n	10142 <__sccl+0x12>
   1014a:	2b00      	cmp	r3, #0
   1014c:	d106      	bne.n	1015c <__sccl+0x2c>
   1014e:	3a01      	subs	r2, #1
   10150:	0010      	movs	r0, r2
   10152:	bd70      	pop	{r4, r5, r6, pc}
   10154:	1c8a      	adds	r2, r1, #2
   10156:	784b      	ldrb	r3, [r1, #1]
   10158:	2101      	movs	r1, #1
   1015a:	e7ef      	b.n	1013c <__sccl+0xc>
   1015c:	2401      	movs	r4, #1
   1015e:	404c      	eors	r4, r1
   10160:	0011      	movs	r1, r2
   10162:	54c4      	strb	r4, [r0, r3]
   10164:	780d      	ldrb	r5, [r1, #0]
   10166:	1c4a      	adds	r2, r1, #1
   10168:	2d2d      	cmp	r5, #45	; 0x2d
   1016a:	d007      	beq.n	1017c <__sccl+0x4c>
   1016c:	2d5d      	cmp	r5, #93	; 0x5d
   1016e:	d0ef      	beq.n	10150 <__sccl+0x20>
   10170:	2d00      	cmp	r5, #0
   10172:	d101      	bne.n	10178 <__sccl+0x48>
   10174:	000a      	movs	r2, r1
   10176:	e7eb      	b.n	10150 <__sccl+0x20>
   10178:	002b      	movs	r3, r5
   1017a:	e7f1      	b.n	10160 <__sccl+0x30>
   1017c:	784e      	ldrb	r6, [r1, #1]
   1017e:	2e5d      	cmp	r6, #93	; 0x5d
   10180:	d0fa      	beq.n	10178 <__sccl+0x48>
   10182:	42b3      	cmp	r3, r6
   10184:	dcf8      	bgt.n	10178 <__sccl+0x48>
   10186:	3102      	adds	r1, #2
   10188:	3301      	adds	r3, #1
   1018a:	54c4      	strb	r4, [r0, r3]
   1018c:	429e      	cmp	r6, r3
   1018e:	dcfb      	bgt.n	10188 <__sccl+0x58>
   10190:	e7e8      	b.n	10164 <__sccl+0x34>
	...

00010194 <__submore>:
   10194:	000b      	movs	r3, r1
   10196:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10198:	6b4d      	ldr	r5, [r1, #52]	; 0x34
   1019a:	3344      	adds	r3, #68	; 0x44
   1019c:	000c      	movs	r4, r1
   1019e:	429d      	cmp	r5, r3
   101a0:	d11c      	bne.n	101dc <__submore+0x48>
   101a2:	2680      	movs	r6, #128	; 0x80
   101a4:	00f6      	lsls	r6, r6, #3
   101a6:	0031      	movs	r1, r6
   101a8:	f7fc fa9c 	bl	c6e4 <_malloc_r>
   101ac:	2800      	cmp	r0, #0
   101ae:	d102      	bne.n	101b6 <__submore+0x22>
   101b0:	2001      	movs	r0, #1
   101b2:	4240      	negs	r0, r0
   101b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   101b6:	0023      	movs	r3, r4
   101b8:	6360      	str	r0, [r4, #52]	; 0x34
   101ba:	63a6      	str	r6, [r4, #56]	; 0x38
   101bc:	3346      	adds	r3, #70	; 0x46
   101be:	781a      	ldrb	r2, [r3, #0]
   101c0:	4b10      	ldr	r3, [pc, #64]	; (10204 <__submore+0x70>)
   101c2:	54c2      	strb	r2, [r0, r3]
   101c4:	0023      	movs	r3, r4
   101c6:	3345      	adds	r3, #69	; 0x45
   101c8:	781a      	ldrb	r2, [r3, #0]
   101ca:	4b0f      	ldr	r3, [pc, #60]	; (10208 <__submore+0x74>)
   101cc:	54c2      	strb	r2, [r0, r3]
   101ce:	782a      	ldrb	r2, [r5, #0]
   101d0:	4b0e      	ldr	r3, [pc, #56]	; (1020c <__submore+0x78>)
   101d2:	54c2      	strb	r2, [r0, r3]
   101d4:	18c0      	adds	r0, r0, r3
   101d6:	6020      	str	r0, [r4, #0]
   101d8:	2000      	movs	r0, #0
   101da:	e7eb      	b.n	101b4 <__submore+0x20>
   101dc:	6b8e      	ldr	r6, [r1, #56]	; 0x38
   101de:	0029      	movs	r1, r5
   101e0:	0073      	lsls	r3, r6, #1
   101e2:	001a      	movs	r2, r3
   101e4:	9301      	str	r3, [sp, #4]
   101e6:	f7ff f8e9 	bl	f3bc <_realloc_r>
   101ea:	1e05      	subs	r5, r0, #0
   101ec:	d0e0      	beq.n	101b0 <__submore+0x1c>
   101ee:	1987      	adds	r7, r0, r6
   101f0:	0001      	movs	r1, r0
   101f2:	0032      	movs	r2, r6
   101f4:	0038      	movs	r0, r7
   101f6:	f7fb ffb2 	bl	c15e <memcpy>
   101fa:	9b01      	ldr	r3, [sp, #4]
   101fc:	6027      	str	r7, [r4, #0]
   101fe:	6365      	str	r5, [r4, #52]	; 0x34
   10200:	63a3      	str	r3, [r4, #56]	; 0x38
   10202:	e7e9      	b.n	101d8 <__submore+0x44>
   10204:	000003ff 	.word	0x000003ff
   10208:	000003fe 	.word	0x000003fe
   1020c:	000003fd 	.word	0x000003fd

00010210 <_close>:
   10210:	2258      	movs	r2, #88	; 0x58
   10212:	2001      	movs	r0, #1
   10214:	4b01      	ldr	r3, [pc, #4]	; (1021c <_close+0xc>)
   10216:	4240      	negs	r0, r0
   10218:	601a      	str	r2, [r3, #0]
   1021a:	4770      	bx	lr
   1021c:	200022dc 	.word	0x200022dc

00010220 <_fstat>:
   10220:	2258      	movs	r2, #88	; 0x58
   10222:	2001      	movs	r0, #1
   10224:	4b01      	ldr	r3, [pc, #4]	; (1022c <_fstat+0xc>)
   10226:	4240      	negs	r0, r0
   10228:	601a      	str	r2, [r3, #0]
   1022a:	4770      	bx	lr
   1022c:	200022dc 	.word	0x200022dc

00010230 <_getpid>:
   10230:	2258      	movs	r2, #88	; 0x58
   10232:	2001      	movs	r0, #1
   10234:	4b01      	ldr	r3, [pc, #4]	; (1023c <_getpid+0xc>)
   10236:	4240      	negs	r0, r0
   10238:	601a      	str	r2, [r3, #0]
   1023a:	4770      	bx	lr
   1023c:	200022dc 	.word	0x200022dc

00010240 <_isatty>:
   10240:	2258      	movs	r2, #88	; 0x58
   10242:	4b02      	ldr	r3, [pc, #8]	; (1024c <_isatty+0xc>)
   10244:	2000      	movs	r0, #0
   10246:	601a      	str	r2, [r3, #0]
   10248:	4770      	bx	lr
   1024a:	46c0      	nop			; (mov r8, r8)
   1024c:	200022dc 	.word	0x200022dc

00010250 <_kill>:
   10250:	2258      	movs	r2, #88	; 0x58
   10252:	2001      	movs	r0, #1
   10254:	4b01      	ldr	r3, [pc, #4]	; (1025c <_kill+0xc>)
   10256:	4240      	negs	r0, r0
   10258:	601a      	str	r2, [r3, #0]
   1025a:	4770      	bx	lr
   1025c:	200022dc 	.word	0x200022dc

00010260 <_lseek>:
   10260:	2258      	movs	r2, #88	; 0x58
   10262:	2001      	movs	r0, #1
   10264:	4b01      	ldr	r3, [pc, #4]	; (1026c <_lseek+0xc>)
   10266:	4240      	negs	r0, r0
   10268:	601a      	str	r2, [r3, #0]
   1026a:	4770      	bx	lr
   1026c:	200022dc 	.word	0x200022dc

00010270 <_read>:
   10270:	2258      	movs	r2, #88	; 0x58
   10272:	2001      	movs	r0, #1
   10274:	4b01      	ldr	r3, [pc, #4]	; (1027c <_read+0xc>)
   10276:	4240      	negs	r0, r0
   10278:	601a      	str	r2, [r3, #0]
   1027a:	4770      	bx	lr
   1027c:	200022dc 	.word	0x200022dc

00010280 <_sbrk>:
   10280:	4a04      	ldr	r2, [pc, #16]	; (10294 <_sbrk+0x14>)
   10282:	6813      	ldr	r3, [r2, #0]
   10284:	2b00      	cmp	r3, #0
   10286:	d003      	beq.n	10290 <_sbrk+0x10>
   10288:	1818      	adds	r0, r3, r0
   1028a:	6010      	str	r0, [r2, #0]
   1028c:	0018      	movs	r0, r3
   1028e:	4770      	bx	lr
   10290:	4b01      	ldr	r3, [pc, #4]	; (10298 <_sbrk+0x18>)
   10292:	e7f9      	b.n	10288 <_sbrk+0x8>
   10294:	200022d8 	.word	0x200022d8
   10298:	200022e0 	.word	0x200022e0

0001029c <_write>:
   1029c:	2258      	movs	r2, #88	; 0x58
   1029e:	2001      	movs	r0, #1
   102a0:	4b01      	ldr	r3, [pc, #4]	; (102a8 <_write+0xc>)
   102a2:	4240      	negs	r0, r0
   102a4:	601a      	str	r2, [r3, #0]
   102a6:	4770      	bx	lr
   102a8:	200022dc 	.word	0x200022dc

000102ac <_exit>:
   102ac:	e7fe      	b.n	102ac <_exit>
   102ae:	46c0      	nop			; (mov r8, r8)

000102b0 <_init>:
   102b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   102b2:	46c0      	nop			; (mov r8, r8)
   102b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   102b6:	bc08      	pop	{r3}
   102b8:	469e      	mov	lr, r3
   102ba:	4770      	bx	lr

000102bc <_fini>:
   102bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   102be:	46c0      	nop			; (mov r8, r8)
   102c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   102c2:	bc08      	pop	{r3}
   102c4:	469e      	mov	lr, r3
   102c6:	4770      	bx	lr
   102c8:	65746e49 	.word	0x65746e49
   102cc:	70757272 	.word	0x70757272
   102d0:	6c462074 	.word	0x6c462074
   102d4:	0074616f 	.word	0x0074616f
   102d8:	68737550 	.word	0x68737550
   102dc:	746f4e20 	.word	0x746f4e20
   102e0:	63696669 	.word	0x63696669
   102e4:	6f697461 	.word	0x6f697461
   102e8:	006e      	.short	0x006e
   102ea:	6574      	.short	0x6574
   102ec:	3100706d 	.word	0x3100706d
   102f0:	30302e32 	.word	0x30302e32
   102f4:	002c      	.short	0x002c
	...
   1036e:	00          	.byte	0x00
   1036f:	63          	.byte	0x63
   10370:	433d6766 	.word	0x433d6766
   10374:	67666300 	.word	0x67666300
   10378:	463d      	.short	0x463d
   1037a:	00          	.byte	0x00
   1037b:	44          	.byte	0x44
   1037c:	31315448 	.word	0x31315448
   10380:	6e655320 	.word	0x6e655320
   10384:	20726f73 	.word	0x20726f73
   10388:	74696e49 	.word	0x74696e49
   1038c:	696c6169 	.word	0x696c6169
   10390:	2164657a 	.word	0x2164657a
   10394:	2d2d2d00 	.word	0x2d2d2d00
   10398:	2d2d2d2d 	.word	0x2d2d2d2d
   1039c:	2d2d2d2d 	.word	0x2d2d2d2d
   103a0:	2d2d2d2d 	.word	0x2d2d2d2d
   103a4:	2d2d2d2d 	.word	0x2d2d2d2d
   103a8:	2d2d2d2d 	.word	0x2d2d2d2d
   103ac:	2d2d2d2d 	.word	0x2d2d2d2d
   103b0:	2d2d2d2d 	.word	0x2d2d2d2d
   103b4:	2d2d2d2d 	.word	0x2d2d2d2d
   103b8:	6553002d 	.word	0x6553002d
   103bc:	726f736e 	.word	0x726f736e
   103c0:	2020203a 	.word	0x2020203a
   103c4:	20202020 	.word	0x20202020
   103c8:	69724400 	.word	0x69724400
   103cc:	20726576 	.word	0x20726576
   103d0:	3a726556 	.word	0x3a726556
   103d4:	00202020 	.word	0x00202020
   103d8:	71696e55 	.word	0x71696e55
   103dc:	49206575 	.word	0x49206575
   103e0:	20203a44 	.word	0x20203a44
   103e4:	4d002020 	.word	0x4d002020
   103e8:	56207861 	.word	0x56207861
   103ec:	65756c61 	.word	0x65756c61
   103f0:	2020203a 	.word	0x2020203a
   103f4:	43200020 	.word	0x43200020
   103f8:	6e694d00 	.word	0x6e694d00
   103fc:	6c615620 	.word	0x6c615620
   10400:	203a6575 	.word	0x203a6575
   10404:	00202020 	.word	0x00202020
   10408:	6f736552 	.word	0x6f736552
   1040c:	6974756c 	.word	0x6974756c
   10410:	203a6e6f 	.word	0x203a6e6f
   10414:	2020      	.short	0x2020
   10416:	00          	.byte	0x00
   10417:	25          	.byte	0x25
   10418:	54002c64 	.word	0x54002c64
   1041c:	20706d65 	.word	0x20706d65
   10420:	6c796150 	.word	0x6c796150
   10424:	2064616f 	.word	0x2064616f
   10428:	616e6946 	.word	0x616e6946
   1042c:	25203a6c 	.word	0x25203a6c
   10430:	0073      	.short	0x0073
   10432:	6144      	.short	0x6144
   10434:	42206174 	.word	0x42206174
   10438:	6e696765 	.word	0x6e696765
   1043c:	2c582500 	.word	0x2c582500
   10440:	3b582500 	.word	0x3b582500
   10444:	74614400 	.word	0x74614400
   10448:	6e452061 	.word	0x6e452061
   1044c:	65520064 	.word	0x65520064
   10450:	76696563 	.word	0x76696563
   10454:	64206465 	.word	0x64206465
   10458:	20617461 	.word	0x20617461
   1045c:	656e6f44 	.word	0x656e6f44
   10460:	72724500 	.word	0x72724500
   10464:	7220726f 	.word	0x7220726f
   10468:	69646165 	.word	0x69646165
   1046c:	5220676e 	.word	0x5220676e
   10470:	35383453 	.word	0x35383453
   10474:	00          	.byte	0x00
   10475:	0d          	.byte	0x0d
   10476:	000a      	.short	0x000a

00010478 <_ZTV4Uart>:
	...
   10480:	2d45 0000 2911 0000 2c17 0000 2bff 0000     E-...)...,...+..
   10490:	2bf5 0000 2c21 0000 2c55 0000 2bc9 0000     .+..!,..U,...+..
   104a0:	2e25 0000 2bd9 0000 2bc5 0000               %....+...+..

000104ac <_ZTV7Serial_>:
	...
   104b4:	2f05 0000 2f31 0000 2f01 0000 2f25 0000     ./..1/.../..%/..
   104c4:	2f19 0000 2f69 0000 2f4d 0000               ./..i/..M/..

000104d0 <_ZTV26DoubleBufferedEPOutHandler>:
	...
   104d8:	33cf 0000 32b1 0000 320d 0000               .3...2...2..

000104e4 <_ZL14STRING_PRODUCT>:
   104e4:	5355 2042 4f49 4220 616f 6472 0000          USB IO Board..

000104f2 <_ZL15STRING_LANGUAGE>:
   104f2:	0304 0409                                   ....

000104f6 <_ZL19STRING_MANUFACTURER>:
   104f6:	614d 7474 6961 5472 6365 2068 4c4c 0043     MattairTech LLC.

00010506 <_ZL21USB_DeviceDescriptorC>:
   10506:	0112 0110 0002 4000 16d0 0557 0100 0201     .......@..W.....
   10516:	0103 4844 3154 0031 4844 3254 0031 4844     ..DHT11.DHT21.DH
   10526:	3254 0032 4844 3f54 0000                    T22.DHT?..

00010530 <_ZTVN11DHT_Unified11TemperatureE>:
	...
   10538:	4645 0000 46b5 0000 4641 0000 4647 0000     EF...F..AF..GF..
   10548:	4759 0000                                   YG..

0001054c <_ZTVN11DHT_Unified8HumidityE>:
	...
   10554:	4643 0000 46a9 0000 4641 0000 4679 0000     CF...F..AF..yF..
   10564:	47d1 0000 6954 656d 203a 3025 6432 253a     .G..Time: %02d:%
   10574:	3230 3a64 3025 6432 203a 4400 7461 3a65     02d:%02d: .Date:
   10584:	2520 3230 3a64 3025 6432 253a 3230 2064      %02d:%02d:%02d 
   10594:	6d5b 6e6f 643a 7961 793a 6165 5d72 5400     [mon:day:year].T
   105a4:	6d69 3a65 2520 3230 3a64 3025 6432 253a     ime: %02d:%02d:%
   105b4:	3230 2064 685b 3a72 696d 3a6e 6573 5d63     02d [hr:min:sec]
   105c4:	3d00 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     .===============
   105d4:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   105e4:	3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d 3d3d     ================
   105f4:	3d3d 3d3d 3d3d 003d 3025 7832 002c 7325     =======.%02x,.%s
   10604:	003a 2520 3230 0078 7245 7361 2065 6146     :. %02x.Erase Fa
   10614:	6c69 6465 4500 6172 6573 5320 6375 6563     iled.Erase Succe
   10624:	6465 4300 4f42 2052 6150 6c79 616f 2064     ed.CBOR Payload 
   10634:	7544 706d 003a 0024 0023 7261 7564 6e69     Dump:.$.#.arduin
   10644:	006f 7449 6f72 206e 6552 6566 6572 636e     o.Itron Referenc
   10654:	2065 6f43 5041 5320 7265 6576 3a72 0020     e CoAP Server: .
   10664:	2e31 2e34 0036 7449 6f72 206e 4153 4950     1.4.6.Itron SAPI
   10674:	203a 3100 302e 302e 4f00 7463 3220 2031     : .1.0.0.Oct 21 
   10684:	3032 3032 3100 3a35 3434 313a 0030 7542     2020.15:44:10.Bu
   10694:	6c69 2064 6954 656d 203a 7325 2020 6144     ild Time: %s  Da
   106a4:	6574 203a 7325 6300 6766 7300 6e65 0073     te: %s.cfg.sens.
   106b4:	7263 6572 6f73 7275 6563 6168 646e 656c     crresourcehandle
   106c4:	3a72 4720 5445 7320 6174 7574 3a73 2520     r: GET status: %
   106d4:	2064 656c 3a6e 2520 2064 7962 6574 0073     d len: %d bytes.
   106e4:	6553 2074 624f 6573 7672 7265 4920 3a64     Set Observer Id:
   106f4:	2520 0064 6552 6967 7473 7265 6465 7320      %d.Registered s
   10704:	6e65 6f73 3a72 2520 0073 4153 4950 6f20     ensor: %s.SAPI o
   10714:	7362 7265 6576 6620 726f 7320 6e65 6f73     bserve for senso
   10724:	3a72 2520 0073 6f63 706d 656c 6574 6600     r: %s.complete.f
   10734:	6961 656c 0064 6e45 6574 2072 6e61 2079     ailed.Enter any 
   10744:	656b 2079 6f74 6720 206f 6f74 4220 6f6f     key to go to Boo
   10754:	5074 6f72 7267 6d61 6220 6665 726f 2065     tProgram before 
   10764:	7469 6320 756f 746e 2073 6f74 3120 0030     it counts to 10.
   10774:	6f4e 4420 7461 0061                         No Data.

0001077c <_ZTV7TwoWire>:
	...
   10784:	557b 0000 5541 0000 2289 0000 5565 0000     {U..AU..."..eU..
   10794:	5567 0000 5571 0000 55a1 0000               gU..qU...U..

000107a0 <g_APinDescription>:
   107a0:	0801 0919 703f 0000 0208 8008 0901 0919     ....?p..........
   107b0:	703f 0000 0309 8009 0200 0819 006f 0000     ?p..........o...
   107c0:	0080 8012 0300 0819 00af 0000 0180 8012     ................
   107d0:	0400 0819 00af 0000 0480 8012 0500 0819     ................
   107e0:	006f 0000 0580 8012 0600 0919 001f 0000     o...............
   107f0:	0680 8006 0700 0119 002f 0000 0780 8012     ......../.......
   10800:	0800 0819 402f 0000 1080 8012 0900 0819     ..../@..........
   10810:	402f 0000 1180 8012 0a00 0919 402f 0000     /@........../@..
   10820:	1280 8012 0b00 0919 403f 0000 1380 800b     ........?@......
   10830:	0c00 0819 701f 0000 1620 800c 0d00 0819     .....p.. .......
   10840:	701f 0000 1621 800d 0a01 0819 301f 0000     .p..!........0..
   10850:	1618 800a 0b01 0819 300f 0000 1619 8012     .........0......
   10860:	1000 0819 401f 0000 1680 8000 1100 0819     .....@..........
   10870:	401f 0000 1680 8001 1200 0b19 401f 0000     .@...........@..
   10880:	1602 8002 1300 0919 401f 0000 1680 8003     .........@......
   10890:	1400 0a19 701f 0000 1602 8004 1500 0b19     .....p..........
   108a0:	701f 0000 1603 8005 1600 0b19 700f 0000     .p...........p..
   108b0:	1600 8012 1700 0b19 700f 0000 1601 8012     .........p......
   108c0:	1800 0819 800f 0000 1680 8012 1900 0819     ................
   108d0:	800f 0000 1680 8012 0004 001b 0000 0000     ................
   108e0:	1680 8012 1b00 0819 000f 0000 1680 8012     ................
   108f0:	0004 001b 0000 0000 1680 8012 0004 001b     ................
   10900:	0000 0000 1680 8012 1e00 0819 300f 0000     .............0..
   10910:	1610 8012 1f00 0819 300f 0000 1611 8012     .........0......
   10920:	1601 0919 701f 0000 1638 8006 1701 0919     .....p..8.......
   10930:	701f 0000 1639 8007 0201 0819 002f 0000     .p..9......./...
   10940:	0a80 8012 0301 0919 703f 0000 0b29 8003     ........?p..)...
   10950:	0f00 0819 402f 0000 0f80 0080 1110 1312     ..../@..........
   10960:	1514 1716 1918 4241 4b43 0100 3713 0000     ......ABCK...7..
   10970:	0000 0001 0000 0002 0000 0004 0000 0008     ................
   10980:	0000 0010 0000 0020 0000 0040 0000 0080     ...... ...@.....
   10990:	0000 0100 0000 0200 0000 0020 0000 0040     .......... ...@.
   109a0:	0000 0080 0000 0080 0000 0004 0000 0008     ................
   109b0:	0000 0040 0000 0008 bfef 1f01 6220 37c8     ..@......... b.7
   109c0:	30c2 2620 6f4c 6b6f 6e69 2067 7075 6320     .0 &Looking up c
   109d0:	6c61 626c 6361 206b 6f66 2072 494d 3a44     allback for MID:
   109e0:	3020 2578 0a78 4100 6464 6e69 2067 6163      0x%x..Adding ca
   109f0:	6c6c 6162 6b63 6620 726f 4d20 4449 203a     llback for MID: 
   10a00:	7830 7825 000a 6e49 7573 6666 6369 6569     0x%x..Insufficie
   10a10:	746e 6220 6675 6566 2072 7073 6361 2065     nt buffer space 
   10a20:	6f74 6120 6464 6f20 7470 6f69 0a6e 6f00     to add option..o
   10a30:	3e2d 6c6f 3c20 203d 6973 657a 666f 7528     ->ol <= sizeof(u
   10a40:	6e69 3374 5f32 2974 2e00 2f2e 7273 2f63     int32_t).../src/
   10a50:	696c 7262 7261 6569 2f73 7373 696e 635f     libraries/ssni_c
   10a60:	616f 5f70 6573 7672 7265 632f 616f 6d70     oap_server/coapm
   10a70:	6773 632e 7070 4300 756f 646c 276e 2074     sg.cpp.Couldn't 
   10a80:	6461 2064 626f 6573 7672 2065 706f 6974     add observe opti
   10a90:	6e6f 4300 416f 2050 4552 2051 6564 6f63     on.CoAP REQ deco
   10aa0:	6564 6f00 7470 6f69 206e 7974 6570 203a     de.option type: 
   10ab0:	7525 6c20 6e65 203a 7525 4300 756f 646c     %u len: %u.Could
   10ac0:	276e 2074 6173 6576 6f20 7470 6f69 206e     n't save option 
   10ad0:	6164 6174 7500 686e 6e61 6c64 6465 6320     data.unhandled c
   10ae0:	6972 6974 6163 206c 706f 6974 6e6f 2520     ritical option %
   10af0:	0a64 6d00 7369 6973 676e 6f20 7470 6f69     d..missing optio
   10b00:	206e 6573 6170 6172 6f74 2072 4646 4300     n separator FF.C
   10b10:	756f 646c 276e 2074 6461 2064 624f 6573     ouldn't add Obse
   10b20:	7672 2065 706f 6974 6e6f 7420 206f 736d     rve option to ms
   10b30:	0067 6f43 6c75 6e64 7427 6120 6464 6320     g.Couldn't add c
   10b40:	6e6f 6574 746e 6620 726f 616d 2074 706f     ontent format op
   10b50:	6974 6e6f 7420 206f 736d 0067 6f43 6c75     tion to msg.Coul
   10b60:	6e64 7427 6120 6464 4d20 7861 412d 6567     dn't add Max-Age
   10b70:	6f20 7470 6f69 206e 6f74 6d20 6773 6900      option to msg.i
   10b80:	7864 3c20 203d 4f43 5041 4f5f 5342 485f     dx <= COAP_OBS_H
   10b90:	5244 535f 005a 6552 7073 6e6f 6573 4e00     DR_SZ.Response.N
   10ba0:	4e4f 4300 4e4f 5200 5453 4100 4b43 5000     ON.CON.RST.ACK.P
   10bb0:	534f 0054 4547 0054 5550 0054 4d45 5450     OST.GET.PUT.EMPT
   10bc0:	0059 4544 454c 4554 5300 7265 6576 2072     Y.DELETE.Server 
   10bd0:	7245 6f72 0072 7553 6363 7365 0073 6c43     Error.Success.Cl
   10be0:	6569 746e 4520 7272 726f 5200 5145 522f     ient Error.REQ/R
   10bf0:	5053 5420 7079 3a65 2520 0073 4552 2f51     SP Type: %s.REQ/
   10c00:	4341 204b 6f43 6564 203a 7325 5200 5053     ACK Code: %s.RSP
   10c10:	4320 646f 3a65 2520 0073 7255 2d69 6150      Code: %s.Uri-Pa
   10c20:	6874 512d 6575 7972 203a 7325 7500               th-Query: %s.

00010c2d <_ZZ13co_uint32_h2nPK5optlvE19__PRETTY_FUNCTION__>:
   10c2d:	6975 746e 3233 745f 6320 5f6f 6975 746e     uint32_t co_uint
   10c3d:	3233 685f 6e32 6328 6e6f 7473 6f20 7470     32_h2n(const opt
   10c4d:	766c 292a 7500                                   lv*).

00010c52 <_ZZ13co_uint32_n2hPK5optlvE19__PRETTY_FUNCTION__>:
   10c52:	6975 746e 3233 745f 6320 5f6f 6975 746e     uint32_t co_uint
   10c62:	3233 6e5f 6832 6328 6e6f 7473 6f20 7470     32_n2h(const opt
   10c72:	766c 292a 6500                                   lv*).

00010c77 <_ZZ17coap_msg_responseP12coap_msg_ctxE19__PRETTY_FUNCTION__>:
   10c77:	7265 6f72 5f72 2074 6f63 7061 6d5f 6773     error_t coap_msg
   10c87:	725f 7365 6f70 736e 2865 6f63 7061 6d5f     _response(coap_m
   10c97:	6773 635f 7874 292a 4e00 746f 6120 6464     sg_ctx*).Not add
   10ca7:	6e69 2067 626f 2073 6e65 7274 2079 6f66     ing obs entry fo
   10cb7:	2072 7325 202c 6973 3a64 6f74 656b 206e     r %s, sid:token 
   10cc7:	6f6e 2074 6e75 7169 6575 4e00 746f 6120     not unique.Not a
   10cd7:	6464 6e69 2067 626f 2073 6e65 7274 2079     dding obs entry 
   10ce7:	6f66 2072 7325 202c 7564 6c70 6369 7461     for %s, duplicat
   10cf7:	2e65 6400 7369 6261 656c 6f5f 7362 203a     e..disable_obs: 
   10d07:	6544 722d 6765 7369 6574 6572 2064 5255     De-registered UR
   10d17:	3a49 2520 0073 706f 0074 706f 2d74 6f3e     I: %s.opt.opt->o
   10d27:	0076 6944 6e64 7427 6620 6e69 2064 706f     v.Didn't find op
   10d37:	6974 6e6f 2520 2064 6f74 6420 6c65 7465     tion %d to delet
   10d47:	2e65 6800 0064 2e2e 732f 6372 6c2f 6269     e..hd.../src/lib
   10d57:	6172 6972 7365 732f 6e73 5f69 6f63 7061     raries/ssni_coap
   10d67:	735f 7265 6576 2f72 6f63 7061 706f 2e74     _server/coapopt.
   10d77:	7063 0070                                   cpp.

00010d7b <_ZZ12copt_add_optP5sl_coP5optlvE19__PRETTY_FUNCTION__>:
   10d7b:	7265 6f72 5f72 2074 6f63 7470 615f 6464     error_t copt_add
   10d8b:	6f5f 7470 7328 5f6c 6f63 2c2a 6f20 7470     _opt(sl_co*, opt
   10d9b:	766c 292a 7600                                   lv*).

00010da0 <_ZZ12copt_del_allP5sl_coE19__PRETTY_FUNCTION__>:
   10da0:	6f76 6469 6320 706f 5f74 6564 5f6c 6c61     void copt_del_al
   10db0:	286c 6c73 635f 2a6f 0029                    l(sl_co*).

00010dba <_ZZ17copt_del_opt_typeP5sl_cotE19__PRETTY_FUNCTION__>:
   10dba:	7265 6f72 5f72 2074 6f63 7470 645f 6c65     error_t copt_del
   10dca:	6f5f 7470 745f 7079 2865 6c73 635f 2a6f     _opt_type(sl_co*
   10dda:	202c 6975 746e 3631 745f 0029               , uint16_t).

00010de6 <_ZZ22copt_get_next_opt_typePK5sl_cotPPvE19__PRETTY_FUNCTION__>:
   10de6:	706f 6c74 2a76 6320 706f 5f74 6567 5f74     optlv* copt_get_
   10df6:	656e 7478 6f5f 7470 745f 7079 2865 6f63     next_opt_type(co
   10e06:	736e 2074 6c73 635f 2a6f 202c 6975 746e     nst sl_co*, uint
   10e16:	3631 745f 202c 6f76 6469 2a2a 0029          16_t, void**).

00010e24 <_ZZ9copt_initP5sl_coE19__PRETTY_FUNCTION__>:
   10e24:	6f76 6469 6320 706f 5f74 6e69 7469 7328     void copt_init(s
   10e34:	5f6c 6f63 292a 6400 5f6f 626f 6573 7672     l_co*).do_observ
   10e44:	3a65 6520 6f70 6863 2520 2078 7275 2069     e: epoch %x uri 
   10e54:	7325 6400 5f6f 626f 6573 7672 3a65 4620     %s.do_observe: F
   10e64:	6572 2065 6152 3a6d 2520 0064 6f63 7061     ree Ram: %d.coap
   10e74:	6f5f 7362 7265 6576 725f 7073 203a 6550     _observe_rsp: Pe
   10e84:	646e 6e69 2067 6572 7073 6e6f 6573 6920     nding response i
   10e94:	206e 7270 676f 6572 7373 2d20 7320 696b     n progress - ski
   10ea4:	7070 6e69 2067 656e 2077 6f6e 6974 6966     pping new notifi
   10eb4:	6163 6974 6e6f 6700 7465 6f5f 7362 625f     cation.get_obs_b
   10ec4:	5f79 7275 2069 6166 6c69 6465 203a 7325     y_uri failed: %s
   10ed4:	4300 756f 646c 276e 2074 6461 2064 624f     .Couldn't add Ob
   10ee4:	6573 7672 2065 706f 6974 6e6f 4300 756f     serve option.Cou
   10ef4:	646c 276e 2074 6461 2064 614d 2d78 6741     ldn't add Max-Ag
   10f04:	2065 706f 6974 6e6f 6300 616f 5f70 626f     e option.coap_ob
   10f14:	6573 7672 5f65 7372 3a70 4520 7272 726f     serve_rsp: Error
   10f24:	6320 6572 7461 6e69 2067 6572 7073 6e6f      creating respon
   10f34:	6573 2500 3a73 6425 4320 656c 7261 6465     se.%s:%d Cleared
   10f44:	7020 6e65 6964 676e 725f 7073 6300 616f      pending_rsp.coa
   10f54:	5f70 626f 6573 7672 5f65 7372 3a70 6620     p_observe_rsp: f
   10f64:	6572 2065 6572 7073 6e6f 6573 6d20 7562     ree response mbu
   10f74:	2066 6e6f 6520 7272 726f 2f00 7261 7564     f on error./ardu
   10f84:	6e69 2f6f 7325 4400 2d65 6572 6967 7473     ino/%s.De-regist
   10f94:	7265 4f20 7362 7265 6576 203a 6425 6300          er Observe: %d.

00010fa3 <_ZZ16coap_observe_rsphE12__FUNCTION__>:
   10fa3:	6f63 7061 6f5f 7362 7265 6576 725f 7073     coap_observe_rsp
   10fb3:	7400 7469 656c 223d 6e49 6f66 3b22 7463     .title="Info";ct
   10fc3:	303d 2e00 6577 6c6c 6b2d 6f6e 6e77 6900     =0..well-known.i
   10fd3:	3d66 7322 7379 3b22 6974 6c74 3d65 5322     f="sys";title="S
   10fe3:	7379 6574 226d 633b 3d74 3234 723b 7665     ystem";ct=42;rev
   10ff3:	313d 003b 7973 0073 6669 223d 7261 7564     =1;.sys.if="ardu
   11003:	6e69 226f 743b 7469 656c 223d 7241 7564     ino";title="Ardu
   11013:	6e69 206f 6553 736e 726f 2273 633b 3d74     ino Sensors";ct=
   11023:	3234 003b 6f63 6572 3c00 002f 6974 656d     42;.core.</.time
   11033:	4500 6f70 6863 6620 726f 4720 5445 6f20     .Epoch for GET o
   11043:	2066 7973 2073 6974 656d 203a 3025 7838     f sys time: %08x
   11053:	5000 5455 2f20 7973 2f73 6974 656d 5020     .PUT /sys/time P
   11063:	7961 6f6c 6461 5300 7465 6974 676e 5220     ayload.Setting R
   11073:	4354 7420 206f 7065 636f 3a68 2520 3830     TC to epoch: %08
   11083:	0078 7473 7461 0073 6f6d 3d64 6f63 7061     x.stats.mod=coap
   11093:	6d00 646f 703d 7277 4700 5445 2820 7473     .mod=pwr.GET (st
   110a3:	7461 7375 2520 2964 7220 6165 2064 6425     atus %d) read %d
   110b3:	6220 7479 7365 002e 4553 2054 7328 6174      bytes..SET (sta
   110c3:	7574 2073 6425 2e29 5300 6e65 6964 676e     tus %d)..Sending
   110d3:	7220 7365 7465 6520 6576 746e 7420 206f      reset event to 
   110e3:	6e6d 6369 5000                                   mnic.

000110e8 <_ZL6rbtput>:
   110e8:	0350 ffff 73b3 7379 7304 736e 4672 7665     P....sys.snsrFev
   110f8:	723d 7462 6f63 7061 735f 725f 6e75 203a     =rbtcoap_s_run: 
   11108:	7266 6565 6e69 2067 7261 7073 6d20 7562     freeing arsp mbu
   11118:	0066 6f63 7061 735f 725f 6e75 203a 7266     f.coap_s_run: fr
   11128:	6565 6e69 2067 7061 6470 6d20 7562 0066     eeing appd mbuf.
   11138:	6f63 7061 735f 725f 6e75 203a 7266 6565     coap_s_run: free
   11148:	5220 6d61 203a 6425 4800 4c44 2043 6e69      Ram: %d.HDLC in
   11158:	7469 6169 696c 617a 6974 6e6f 6620 6961     itialization fai
   11168:	656c 2164 4100 4b43 6620 726f 6d20 6469     led!.ACK for mid
   11178:	203a 7830 7825 7220 6365 6965 6576 2c64     : 0x%x received,
   11188:	6c20 6f6f 756b 2070 6572 7574 6e72 6465      lookup returned
   11198:	2520 0064 6146 6c69 6465 7420 206f 6e65      %d.Failed to en
   111a8:	6261 656c 2064 626f 6573 7672 2065 6f66     abled observe fo
   111b8:	2072 5255 3a49 2520 0073 6e45 6261 656c     r URI: %s.Enable
   111c8:	2064 626f 6573 7672 2065 6f66 2072 5255     d observe for UR
   111d8:	3a49 2520 0073 6944 6173 6c62 6465 6f20     I: %s.Disabled o
   111e8:	7362 7265 6576 6620 726f 5520 4952 2520     bserve for URI %
   111f8:	0073 7245 6f72 2072 736d 2067 7372 3a70     s.Error msg rsp:
   11208:	6620 6572 6965 676e 6d20 7562 0066 6f4e      freeing mbuf.No
   11218:	7220 7073 203a 7266 6565 6e69 2067 626d      rsp: freeing mb
   11228:	6675 5000 7261 6573 6520 7272 726f 203a     uf.Parse error: 
   11238:	7266 6565 6e69 2067 626d 6675 4500 7272     freeing mbuf.Err
   11248:	726f 203a 6372 682f 3e2d 656c 3a6e 2520     or: rc/h->len: %
   11258:	2f64 6425 202c 6363 632e 646f 3a65 2520     d/%d, cc.code: %
   11268:	0064 6f63 7061 735f 705f 6f72 3a63 4620     d.coap_s_proc: F
   11278:	6572 2065 6363 6d20 7562 0066 6c41 6f6c     ree cc mbuf.Allo
   11288:	6163 6574 6d20 7562 2066 6977 6874 7320     cate mbuf with s
   11298:	7a69 3a65 2520 0064 006d 2e2e 732f 6372     ize: %d.m.../src
   112a8:	6c2f 6269 6172 6972 7365 732f 6e73 5f69     /libraries/ssni_
   112b8:	6f63 7061 735f 7265 6576 2f72 6268 6675     coap_server/hbuf
   112c8:	632e 7070 6d00                                   .cpp.

000112cd <_ZZ5m_getvE19__PRETTY_FUNCTION__>:
   112cd:	626d 6675 202a 5f6d 6567 2874 0029 6854     mbuf* m_get().Th
   112dd:	2065 616d 2078 6170 6c79 616f 2064 6973     e max payload si
   112ed:	657a 7320 6570 6963 6966 6465 6920 2073     ze specified is 
   112fd:	6f74 206f 616c 6772 3a65 2520 2064 7962     too large: %d by
   1130d:	6574 2e73 5420 6568 6d20 7861 6d69 6d75     tes. The maximum
   1131d:	6120 6c6c 776f 6465 6920 2073 6425 6220      allowed is %d b
   1132d:	7479 7365 0020 7368 2e73 6572 7663 2e00     ytes .hss.recv..
   1133d:	2f2e 7273 2f63 696c 7262 7261 6569 2f73     ./src/libraries/
   1134d:	7373 696e 635f 616f 5f70 6573 7672 7265     ssni_coap_server
   1135d:	682f 6c64 7363 632e 7070 6800 6c64 7363     /hdlcs.cpp.hdlcs
   1136d:	725f 6165 2864 2029 202d 7825 7200 7365     _read() - %x.res
   1137d:	6f70 646e 7420 206f 5252 7720 7469 2068     pond to RR with 
   1138d:	5252 5200 7365 6e65 6964 676e 6620 6172     RR.Resending fra
   1139d:	656d 5000 6f72 6563 7373 6920 636e 6d6f     me.Process incom
   113ad:	6e69 2067 7463 6c72 2520 3230 2078 6e69     ing ctrl %02x in
   113bd:	7320 6174 6574 2520 0064 6572 7073 6e6f      state %d.respon
   113cd:	6573 7220 6578 2064 7461 7020 6972 616d     se rxed at prima
   113dd:	7972 7200 7165 6575 7473 7220 6365 2776     ry.request recv'
   113ed:	2064 6e69 6420 7369 6f63 6e6e 6365 6574     d in disconnecte
   113fd:	2064 6f6d 6564 4800 4c44 5f43 4e53 4d52     d mode.HDLC_SNRM
   1140d:	4800 4c44 5f43 0049 6e55 7865 6570 7463     .HDLC_I.Unexpect
   1141d:	6465 7320 7165 756e 206d 284e 2953 3d20     ed seqnum N(S) =
   1142d:	2520 2064 5620 5228 2029 203d 6425 5200      %d  V(R) = %d.R
   1143d:	6365 2076 2049 7266 6d61 0065 6164 6174     ecv I frame.data
   1144d:	4320 2042 6f6e 2074 7573 7070 726f 6574      CB not supporte
   1145d:	0064 4448 434c 525f 0052 6368 6e2e 3a72     d.HDLC_RR.hc.nr:
   1146d:	2520 2c64 6820 7373 762e 3a73 2520 0064      %d, hss.vs: %d.
   1147d:	4448 434c 445f 5349 0043 6964 6373 6e6f     HDLC_DISC.discon
   1148d:	656e 7463 6e69 0067 7265 6f72 2072 202d     necting.error - 
   1149d:	7266 6d61 2065 6572 656a 7463 6465 4500     frame rejected.E
   114ad:	7272 726f 2d20 7520 6b6e 6f6e 6e77 7320     rror - unknown s
   114bd:	6174 6574 203a 6425 6800 6c64 7363 725f     tate: %d.hdlcs_r
   114cd:	6e75 2928 2d20 2520 0064 6e65 6574 2072     un() - %d.enter 
   114dd:	6f6e 6d72 6c61 6d20 646f 0065 4e53 4d52     normal mode.SNRM
   114ed:	552d 2041 6572 7073 6e6f 6573 7220 2063     -UA response rc 
   114fd:	6425 6d00                                        %d.

00011500 <_ZZ10hdlcs_readvE19__PRETTY_FUNCTION__>:
   11500:	626d 6675 202a 6468 636c 5f73 6572 6461     mbuf* hdlcs_read
   11510:	2928 6800                                        ().

00011513 <_ZZ9hdlcs_runvE12__FUNCTION__>:
   11513:	6468 636c 5f73 7572 006e                    hdlcs_run.

0001151d <_ZZL13hdlcs_get_bufiE19__PRETTY_FUNCTION__>:
   1151d:	6f76 6469 6820 6c64 7363 675f 7465 625f     void hdlcs_get_b
   1152d:	6675 6928 746e 0029 7546 636e 6974 6e6f     uf(int).Function
   1153d:	6520 6578 7563 6574 2064 7573 6363 7365      executed succes
   1154d:	6673 6c75 796c 4300 6568 6b63 7920 756f     sfully.Check you
   1155d:	2072 6977 6972 676e 202e 6c46 7361 2068     r wiring. Flash 
   1156d:	6863 7069 6920 2073 6f6e 2d6e 6572 7073     chip is non-resp
   1157d:	6e6f 6973 6576 002e 632a 6e6f 7473 7572     onsive..*constru
   1158d:	7463 726f 6f5f 5f66 6863 696f 6563 2e2a     ctor_of_choice*.
   1159d:	6562 6967 286e 2029 6177 2073 6f6e 2074     begin() was not 
   115ad:	6163 6c6c 6465 6920 206e 6f76 6469 7320     called in void s
   115bd:	7465 7075 2928 5500 616e 6c62 2065 6f74     etup().Unable to
   115cd:	6920 6564 746e 6669 2079 6863 7069 202e      identify chip. 
   115dd:	7241 2065 6f79 2075 7573 6572 7420 6968     Are you sure thi
   115ed:	2073 6863 7069 6920 2073 7573 7070 726f     s chip is suppor
   115fd:	6574 3f64 5500 616e 6c62 2065 6f74 6920     ted?.Unable to i
   1160d:	6564 746e 6669 2079 6163 6170 6963 7974     dentify capacity
   1161d:	202e 7349 7420 6968 2073 6863 7069 6f20     . Is this chip o
   1162d:	6666 6369 6169 6c6c 2079 7573 7070 726f     fficially suppor
   1163d:	6574 3f64 4920 2066 6f6e 2c74 7020 656c     ted? If not, ple
   1164d:	7361 2065 6564 6966 656e 6120 6020 4143     ase define a `CA
   1165d:	4150 4943 5954 2060 6f63 736e 6174 746e     PACITY` constant
   1166d:	6120 646e 6920 636e 756c 6564 6920 2074      and include it 
   1167d:	6e69 6620 616c 6873 622e 6765 6e69 4328     in flash.begin(C
   1168d:	5041 4341 5449 2959 002e 6843 7069 6920     APACITY)..Chip i
   1169d:	2073 7562 7973 002e 614d 656b 7320 7275     s busy..Make sur
   116ad:	2065 6c61 206c 6970 736e 6820 7661 2065     e all pins have 
   116bd:	6562 6e65 6320 6e6f 656e 7463 6465 7020     been connected p
   116cd:	6f72 6570 6c72 0079 6150 6567 6f20 6576     roperly.Page ove
   116dd:	6672 6f6c 2077 6168 2073 6562 6e65 6420     rflow has been d
   116ed:	7369 6261 656c 2064 6e61 2064 6874 2065     isabled and the 
   116fd:	6461 7264 7365 2073 6163 6c6c 6465 6520     address called e
   1170d:	6378 6565 7364 7420 6568 6d20 6d65 726f     xceeds the memor
   1171d:	0079 6e55 6261 656c 7420 206f 6e45 6261     y.Unable to Enab
   1172d:	656c 5720 6972 6974 676e 7420 206f 6863     le Writing to ch
   1173d:	7069 002e 6c50 6165 6573 6d20 6b61 2065     ip..Please make 
   1174d:	7573 6572 7420 6568 4820 4c4f 2044 2026     sure the HOLD & 
   1175d:	5257 5449 5045 4f52 4554 5443 7020 6e69     WRITEPROTECT pin
   1176d:	2073 7261 2065 7570 6c6c 6465 7520 2070     s are pulled up 
   1177d:	6f74 5620 4343 5400 6968 2073 6573 7463     to VCC.This sect
   1178d:	726f 6120 726c 6165 7964 6320 6e6f 6174     or already conta
   1179d:	6e69 2073 6164 6174 002e 6c50 6165 6573     ins data..Please
   117ad:	6d20 6b61 2065 7573 6572 7420 6568 7320      make sure the s
   117bd:	6365 6f74 7372 6220 6965 676e 7720 6972     ectors being wri
   117cd:	7474 6e65 7420 206f 7261 2065 7265 7361     tten to are eras
   117dd:	6465 002e 6f59 2075 7261 2065 7572 6e6e     ed..You are runn
   117ed:	6e69 2067 6f6c 2077 6e6f 5320 4152 2e4d     ing low on SRAM.
   117fd:	5020 656c 7361 2065 706f 6974 696d 6573      Please optimise
   1180d:	7920 756f 2072 7270 676f 6172 206d 6f66      your program fo
   1181d:	2072 6562 7474 7265 5220 4d41 7520 6173     r better RAM usa
   1182d:	6567 5400 6968 2073 7566 636e 6974 6e6f     ge.This function
   1183d:	6920 2073 6f6e 2074 7573 7070 726f 6574      is not supporte
   1184d:	2064 7962 7420 6568 6620 616c 6873 6d20     d by the flash m
   1185d:	6d65 726f 2079 6168 6472 6177 6572 002e     emory hardware..
   1186d:	6e55 6261 656c 7420 206f 7573 7073 6e65     Unable to suspen
   1187d:	2f64 6572 7573 656d 6f20 6570 6172 6974     d/resume operati
   1188d:	6e6f 002e 7257 7469 2065 7546 636e 6974     on..Write Functi
   1189d:	6e6f 6820 7361 6620 6961 656c 2064 7265     on has failed er
   118ad:	6f72 6372 6568 6b63 002e 6e55 6261 656c     rorcheck..Unable
   118bd:	7420 206f 6e65 6261 656c 3420 622d 7479      to enable 4-byt
   118cd:	2065 6461 7264 7365 6973 676e 002e 6e55     e addressing..Un
   118dd:	6261 656c 7420 206f 6964 6173 6c62 2065     able to disable 
   118ed:	2d34 7962 6574 6120 6464 6572 7373 6e69     4-byte addressin
   118fd:	2e67 5400 6568 6320 6968 2070 7369 6320     g..The chip is c
   1190d:	7275 6572 746e 796c 7020 776f 7265 6465     urrently powered
   1191d:	6420 776f 2e6e 5400 6568 4620 616c 6873      down..The Flash
   1192d:	6320 6968 2070 6f64 7365 6e20 746f 7320      chip does not s
   1193d:	7075 6f70 7472 5320 4446 2e50 5500 616e     upport SFDP..Una
   1194d:	6c62 2065 6f74 7220 6165 2064 7245 7361     ble to read Eras
   1195d:	2065 6150 6172 656d 6574 7372 6620 6f72     e Parameters fro
   1196d:	206d 6863 7069 202e 6552 6576 7472 6e69     m chip. Revertin
   1197d:	2067 6f74 6c20 6269 6172 7972 6420 6665     g to library def
   1198d:	7561 746c 2e73 5500 616e 6c62 2065 6f74     aults..Unable to
   1199d:	7220 6165 2064 7265 7361 2065 6974 656d      read erase time
   119ad:	2073 7266 6d6f 6620 616c 6873 6d20 6d65     s from flash mem
   119bd:	726f 2e79 5220 7665 7265 6974 676e 7420     ory. Reverting t
   119cd:	206f 696c 7262 7261 2079 6564 6166 6c75     o library defaul
   119dd:	7374 002e 6e55 6261 656c 7420 206f 6572     ts..Unable to re
   119ed:	6461 7020 6f72 7267 6d61 7420 6d69 7365     ad program times
   119fd:	6620 6f72 206d 6c66 7361 2068 656d 6f6d      from flash memo
   11a0d:	7972 202e 6552 6576 7472 6e69 2067 6f74     ry. Reverting to
   11a1d:	6c20 6269 6172 7972 6420 6665 7561 746c      library default
   11a2d:	2e73 4e00 206f 6843 7069 5320 6c65 6365     s..No Chip Selec
   11a3d:	2074 6970 206e 6564 6966 656e 2064 6e69     t pin defined in
   11a4d:	7420 6568 6320 7375 6f74 206d 5053 2049      the custom SPI 
   11a5d:	7241 6172 2e79 5500 6b6e 6f6e 6e77 6520     Array..Unknown e
   11a6d:	7272 726f 4900 2066 6874 7369 6420 656f     rror.If this doe
   11a7d:	2073 6f6e 2074 6568 706c 7220 7365 6c6f     s not help resol
   11a8d:	6576 632f 616c 6972 7966 7420 6968 2073     ve/clarify this 
   11a9d:	7369 7573 2c65 0020 6c70 6165 6573 7220     issue, .please r
   11aad:	6961 6573 6120 206e 7369 7573 2065 7461     aise an issue at
   11abd:	6820 7474 3a70 2f2f 7777 2e77 6967 6874      http://www.gith
   11acd:	6275 632e 6d6f 4d2f 7261 6f7a 6867 532f     ub.com/Marzogh/S
   11add:	4950 654d 6f6d 7972 692f 7373 6575 2073     PIMemory/issues 
   11aed:	6977 6874 7420 6568 6420 7465 6961 736c     with the details
   11afd:	6f20 2066 6877 7461 7920 756f 2072 6577      of what your we
   11b0d:	6572 6420 696f 676e 7720 6568 206e 6874     re doing when th
   11b1d:	7369 6520 7272 726f 6f20 6363 7275 6572     is error occurre
   11b2d:	0064 8081 0514 0102 0600 0102 0700 0004     d...............
   11b3d:	0000 0801 0004 0000 4801 4c44 2043 6573     .........HDLC se
   11b4d:	646e 6620 6172 656d 4500 7272 726f 203a     nd frame.Error: 
   11b5d:	6468 636c 735f 6e65 5f64 7266 6d61 2865     hdlc_send_frame(
   11b6d:	2029 6964 2064 6f6e 2074 6573 646e 2520     ) did not send %
   11b7d:	2064 7962 6574 2073 7361 7220 7165 6975     d bytes as requi
   11b8d:	6572 0a64 6600 6172 656d 7420 7079 3a65     red..frame type:
   11b9d:	3020 2578 0078 6572 6461 7942 6574 2873      0x%x.readBytes(
   11bad:	2029 6f63 6e75 3a74 2520 0064 6854 2065     ) count: %d.The 
   11bbd:	4155 5452 7220 6365 6965 6576 6220 6675     UART receive buf
   11bcd:	6566 2072 6168 2073 766f 7265 6c66 776f     fer has overflow
   11bdd:	216e 5700 2065 6572 6461 2520 2064 7962     n!.We read %d by
   11bed:	6574 2073 6e61 2064 6874 2065 616d 2078     tes and the max 
   11bfd:	7369 2520 2064 7962 6574 2e73 4d00 7369     is %d bytes..Mis
   11c0d:	6973 676e 4820 4c44 2043 6c66 6761 7328     sing HDLC flag(s
   11c1d:	0029 6368 7874 682e 5f75 6570 646e 3d20     ).hctx.hu_pend =
   11c2d:	203d 0032 6854 2065 7266 6d61 2065 656c     = 2.The frame le
   11c3d:	676e 6874 6420 656f 6e73 7427 6d20 7461     ngth doesn't mat
   11c4d:	6863 7420 6568 6e20 6d75 6562 2072 666f     ch the number of
   11c5d:	7220 6365 6965 6576 2064 7962 6574 0073      received bytes.
   11c6d:	7266 6d61 5f65 656c 3a6e 0020 7872 6c5f     frame_len: .rx_l
   11c7d:	6e65 203a 2020 0020 6944 6373 7261 2064     en:    .Discard 
   11c8d:	7266 6d61 2065 202d 5243 2043 7265 6f72     frame - CRC erro
   11c9d:	0072 6944 6373 7261 2064 7266 6d61 2065     r.Discard frame 
   11cad:	202d 6162 2064 6e69 6f66 6c20 6e65 5400     - bad info len.T
   11cbd:	6568 4820 4c44 2043 6170 6c79 616f 2064     he HDLC payload 
   11ccd:	7369 7420 6f6f 6c20 7261 6567 0021 6557     is too large!.We
   11cdd:	6720 746f 2520 2064 7962 6574 2073 6e61      got %d bytes an
   11ced:	2064 6874 2065 616d 2078 7369 2520 2064     d the max is %d 
   11cfd:	7962 6574 2e73 5a00 7265 206f 6e69 6f66     bytes..Zero info
   11d0d:	656c 006e 4448 434c 7220 6365 2076 7266     len.HDLC recv fr
   11d1d:	6d61 0065 6142 2064 6468 2072 202d 6c66     ame.Bad hdr - fl
   11d2d:	7375 0068 6162 2064 6e69 6f66 656c 206e     ush.bad infolen 
   11d3d:	202d 6c66 7375 0068 0000                         - flush..

00011d46 <_ZL15xmodem_crctable>:
   11d46:	0000 1189 2312 329b 4624 57ad 6536 74bf     .....#.2$F.W6e.t
   11d56:	8c48 9dc1 af5a bed3 ca6c dbe5 e97e f8f7     H...Z...l...~...
   11d66:	1081 0108 3393 221a 56a5 472c 75b7 643e     .....3.".V,G.u>d
   11d76:	9cc9 8d40 bfdb ae52 daed cb64 f9ff e876     ..@...R...d...v.
   11d86:	2102 308b 0210 1399 6726 76af 4434 55bd     .!.0....&g.v4D.U
   11d96:	ad4a bcc3 8e58 9fd1 eb6e fae7 c87c d9f5     J...X...n...|...
   11da6:	3183 200a 1291 0318 77a7 662e 54b5 453c     .1. .....w.f.T<E
   11db6:	bdcb ac42 9ed9 8f50 fbef ea66 d8fd c974     ..B...P...f...t.
   11dc6:	4204 538d 6116 709f 0420 15a9 2732 36bb     .B.S.a.p ...2'.6
   11dd6:	ce4c dfc5 ed5e fcd7 8868 99e1 ab7a baf3     L...^...h...z...
   11de6:	5285 430c 7197 601e 14a1 0528 37b3 263a     .R.C.q.`..(..7:&
   11df6:	decd cf44 fddf ec56 98e9 8960 bbfb aa72     ..D...V...`...r.
   11e06:	6306 728f 4014 519d 2522 34ab 0630 17b9     .c.r.@.Q"%.40...
   11e16:	ef4e fec7 cc5c ddd5 a96a b8e3 8a78 9bf1     N...\...j...x...
   11e26:	7387 620e 5095 411c 35a3 242a 16b1 0738     .s.b.P.A.5*$..8.
   11e36:	ffcf ee46 dcdd cd54 b9eb a862 9af9 8b70     ..F...T...b...p.
   11e46:	8408 9581 a71a b693 c22c d3a5 e13e f0b7     ........,...>...
   11e56:	0840 19c9 2b52 3adb 4e64 5fed 6d76 7cff     @...R+.:dN._vm.|
   11e66:	9489 8500 b79b a612 d2ad c324 f1bf e036     ..........$...6.
   11e76:	18c1 0948 3bd3 2a5a 5ee5 4f6c 7df7 6c7e     ..H..;Z*.^lO.}~l
   11e86:	a50a b483 8618 9791 e32e f2a7 c03c d1b5     ............<...
   11e96:	2942 38cb 0a50 1bd9 6f66 7eef 4c74 5dfd     B).8P...fo.~tL.]
   11ea6:	b58b a402 9699 8710 f3af e226 d0bd c134     ..........&...4.
   11eb6:	39c3 284a 1ad1 0b58 7fe7 6e6e 5cf5 4d7c     .9J(..X...nn.\|M
   11ec6:	c60c d785 e51e f497 8028 91a1 a33a b2b3     ........(...:...
   11ed6:	4a44 5bcd 6956 78df 0c60 1de9 2f72 3efb     DJ.[Vi.x`...r/.>
   11ee6:	d68d c704 f59f e416 90a9 8120 b3bb a232     .......... ...2.
   11ef6:	5ac5 4b4c 79d7 685e 1ce1 0d68 3ff3 2e7a     .ZLK.y^h..h..?z.
   11f06:	e70e f687 c41c d595 a12a b0a3 8238 93b1     ........*...8...
   11f16:	6b46 7acf 4854 59dd 2d62 3ceb 0e70 1ff9     Fk.zTH.Yb-.<p...
   11f26:	f78f e606 d49d c514 b1ab a022 92b9 8330     .........."...0.
   11f36:	7bc7 6a4e 58d5 495c 3de3 2c6a 1ef1 0f78     .{Nj.X\I.=j,..x.
   11f46:	0000 9e7c 0000 9dcc 0000 9dcc 0000 9dca     ..|.............
   11f56:	0000 9e6e 0000 9e6e 0000 9e64 0000 9dca     ..n...n...d.....
   11f66:	0000 9e6e 0000 9e64 0000 9e6e 0000 9dca     ..n...d...n.....
   11f76:	0000 9e74 0000 9e74 0000 9e74 0000 9f04     ..t...t...t.....
   11f86:	0000 a944 0000 a926 0000 a8e0 0000 a7fe     ..D...&.........
   11f96:	0000 a8e0 0000 a918 0000 a8e0 0000 a7fe     ................
   11fa6:	0000 a926 0000 a926 0000 a918 0000 a7fe     ..&...&.........
   11fb6:	0000 a7f6 0000 a7f6 0000 a7f6 0000 ab5c     ..............\.
   11fc6:	0000 b1a4 0000 b064 0000 b064 0000 b060     ......d...d...`.
   11fd6:	0000 b17c 0000 b17c 0000 b16e 0000 b060     ..|...|...n...`.
   11fe6:	0000 b17c 0000 b16e 0000 b17c 0000 b060     ..|...n...|...`.
   11ff6:	0000 b184 0000 b184 0000 b184 0000 b388     ................
   12006:	0000 202c 7566 636e 6974 6e6f 203a 6100     .., function: .a
   12016:	7373 7265 6974 6e6f 2220 7325 2022 6166     ssertion "%s" fa
   12026:	6c69 6465 203a 6966 656c 2220 7325 2c22     iled: file "%s",
   12036:	6c20 6e69 2065 6425 7325 7325 000a           line %d%s%s..

00012044 <_global_impure_ptr>:
   12044:	00b0 2000 4f50 4953 0058 0000               ... POSIX...

00012050 <DAYS_IN_MONTH>:
   12050:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   12060:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   12070:	001e 0000 001f 0000 001e 0000 001f 0000     ................

00012080 <_DAYS_BEFORE_MONTH>:
   12080:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   12090:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   120a0:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...
   120b0:	2d23 2b30 0020 6c68 004c 6665 4567 4746     #-0+ .hlL.efgEFG
   120c0:	4900 464e 6900 666e 4e00 4e41 6e00 6e61     .INF.inf.NAN.nan
   120d0:	3000 3231 3433 3635 3837 4139 4342 4544     .0123456789ABCDE
   120e0:	0046 3130 3332 3534 3736 3938 6261 6463     F.0123456789abcd
   120f0:	6665 5400 005a 4d47 0054 3125 5b30 305e     ef.TZ.GMT.%10[^0
   12100:	392d 2b2c 5d2d 6e25 4d00 6825 2575 2e6e     -9,+-]%n.M%hu%n.
   12110:	6825 2575 2e6e 6825 2575 006e 252f 7568     %hu%n.%hu%n./%hu
   12120:	6e25 253a 7568 6e25 253a 7568 6e25 0000          %n:%hu%n:%hu%n.

0001212f <_ctype_>:
   1212f:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   1213f:	2020 2020 2020 2020 2020 2020 2020 2020                     
   1214f:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   1215f:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   1216f:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   1217f:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   1218f:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   1219f:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   121af:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   1222f:	4900 666e 6e69 7469 0079 614e 004e 0000     .Infinity.NaN...
	...

00012240 <__sf_fake_stderr>:
	...

00012260 <__sf_fake_stdin>:
	...

00012280 <__sf_fake_stdout>:
	...

000122a0 <__month_lengths>:
   122a0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   122b0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   122c0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   122d0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   122e0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   122f0:	001e 0000 001f 0000 001e 0000 001f 0000     ................

00012300 <__mprec_bigtens>:
   12300:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   12310:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   12320:	bf3c 7f73 4fdd 7515                         <.s..O.u

00012328 <__mprec_tens>:
   12328:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   12338:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   12348:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   12358:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   12368:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   12378:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   12388:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   12398:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   123a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   123b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   123c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   123d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   123e8:	9db4 79d9 7843 44ea                         ...yCx.D

000123f0 <p05.6047>:
   123f0:	0005 0000 0019 0000 007d 0000 241a 0001     ........}....$..
   12400:	241d 0001 2420 0001 2d41 6146 662d 3938     .$.. $..A-Fa-f89
   12410:	3130 3332 3534 3736 005d 2d2b 3000 0030     01234567].+-.00.
   12420:	5878 0000                                   xX..

00012424 <__EH_FRAME_BEGIN__>:
   12424:	0000 0000                                   ....

Disassembly of section .ramfunc:

00012428 <banzai>:
void banzai() {
   12428:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   1242a:	b672      	cpsid	i
	if (APP_START < (0x200 + 4)) {
   1242c:	4b11      	ldr	r3, [pc, #68]	; (12474 <banzai+0x4c>)
   1242e:	4a12      	ldr	r2, [pc, #72]	; (12478 <banzai+0x50>)
   12430:	3304      	adds	r3, #4
   12432:	4293      	cmp	r3, r2
   12434:	d808      	bhi.n	12448 <banzai+0x20>
  __ASM volatile ("dsb 0xF":::"memory");
   12436:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
   1243a:	4a10      	ldr	r2, [pc, #64]	; (1247c <banzai+0x54>)
   1243c:	4b10      	ldr	r3, [pc, #64]	; (12480 <banzai+0x58>)
   1243e:	60da      	str	r2, [r3, #12]
   12440:	f3bf 8f4f 	dsb	sy
    __NOP();
   12444:	46c0      	nop			; (mov r8, r8)
   12446:	e7fd      	b.n	12444 <banzai+0x1c>
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   12448:	4a0e      	ldr	r2, [pc, #56]	; (12484 <banzai+0x5c>)
	while (!nvmReady())
   1244a:	2101      	movs	r1, #1
   1244c:	0010      	movs	r0, r2
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   1244e:	7d14      	ldrb	r4, [r2, #20]
	while (!nvmReady())
   12450:	420c      	tst	r4, r1
   12452:	d0fc      	beq.n	1244e <banzai+0x26>
          NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   12454:	2120      	movs	r1, #32
   12456:	8b14      	ldrh	r4, [r2, #24]
   12458:	31ff      	adds	r1, #255	; 0xff
          NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];   // 16-bit hardware address
   1245a:	089b      	lsrs	r3, r3, #2
   1245c:	005b      	lsls	r3, r3, #1
          NVMCTRL->STATUS.reg |= NVMCTRL_STATUS_MASK;
   1245e:	4321      	orrs	r1, r4
   12460:	8311      	strh	r1, [r2, #24]
          NVMCTRL->ADDR.reg  = (uintptr_t)&NVM_MEMORY[APP_START / 4];   // 16-bit hardware address
   12462:	61d3      	str	r3, [r2, #28]
          NVMCTRL->CTRLA.reg = NVMCTRL_CTRLA_CMD_ER | NVMCTRL_CTRLA_CMDEX_KEY;
   12464:	4b08      	ldr	r3, [pc, #32]	; (12488 <banzai+0x60>)
   12466:	8013      	strh	r3, [r2, #0]
	while (!nvmReady())
   12468:	2301      	movs	r3, #1
  return NVMCTRL->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
   1246a:	7d02      	ldrb	r2, [r0, #20]
	while (!nvmReady())
   1246c:	421a      	tst	r2, r3
   1246e:	d0fc      	beq.n	1246a <banzai+0x42>
   12470:	e7e1      	b.n	12436 <banzai+0xe>
   12472:	46c0      	nop			; (mov r8, r8)
   12474:	00002000 	.word	0x00002000
   12478:	00000203 	.word	0x00000203
   1247c:	05fa0004 	.word	0x05fa0004
   12480:	e000ed00 	.word	0xe000ed00
   12484:	41004000 	.word	0x41004000
   12488:	ffffa502 	.word	0xffffa502
